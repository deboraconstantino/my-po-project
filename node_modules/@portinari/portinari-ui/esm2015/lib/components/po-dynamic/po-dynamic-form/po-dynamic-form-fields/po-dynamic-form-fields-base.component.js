import * as tslib_1 from "tslib";
import { Input, EventEmitter, Output } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../../po-dynamic.util';
import { PoDynamicFieldType } from '../../po-dynamic-field-type.enum';
export class PoDynamicFormFieldsBaseComponent {
    constructor(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this._value = {};
        this.visibleFields = [];
        this.fieldsChange = new EventEmitter();
        this.formValidate = new EventEmitter();
    }
    // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
    }
    get fields() {
        return this._fields;
    }
    // valor que será utilizado para iniciar valor no componente.
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    get value() {
        return this._value;
    }
    compareTo(value, compareTo) {
        return value === compareTo;
    }
    // retorna um array com os objetos configurados e visiveis.
    getVisibleFields() {
        const visibleFields = [];
        this.fields.forEach(field => {
            if (this.existsProperty(visibleFields, field.property)) {
                this.printError(`"po-dynamic-form" property "${field.property}" está duplicado. Interface: PoDynamicFormField.`);
                return;
            }
            if (!field['property']) {
                this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(this.createField(field));
            }
        });
        return visibleFields;
    }
    // converte um array em string para um array de objetos que contem label e value.
    convertOptions(options) {
        const everyOptionString = options.every(option => typeof option === 'string');
        if (everyOptionString) {
            return options.map(value => ({ label: value, value }));
        }
        return options;
    }
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    createField(field) {
        const control = this.getComponentControl(field);
        const options = !!field.options ? this.convertOptions(field.options) : undefined;
        const focus = this.hasFocus(field);
        const componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return Object.assign({ label: this.titleCasePipe.transform(field.property) }, field, { componentClass,
            control,
            focus,
            options });
    }
    existsProperty(fields, property) {
        return fields.some(field => {
            return field.property === property;
        });
    }
    // recupera o componente de acordo com algumas regras do field.
    getComponentControl(field = {}) {
        const type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        return 'input';
    }
    hasFocus(field) {
        return !!this.autoFocus && this.autoFocus === field.property;
    }
    isCheckboxGroup(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    }
    isCombo(field) {
        const { optionsService } = field;
        return !!optionsService && isTypeof(optionsService, 'string');
    }
    isCurrencyType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Currency) && (!mask && !pattern);
    }
    isLookup(field) {
        const { searchService } = field;
        return !!searchService && isTypeof(searchService, 'string');
    }
    isMultiselect(field) {
        const { optionsService, optionsMulti, options } = field;
        return !optionsService && optionsMulti && !!options && options.length > 3;
    }
    isNumberType(field, type) {
        const { mask, pattern } = field;
        return this.compareTo(type, PoDynamicFieldType.Number) && (!mask && !pattern);
    }
    isPassword(field) {
        const { secret } = field;
        return secret;
    }
    isRadioGroup(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length <= 3;
    }
    isSelect(field) {
        const { optionsMulti, options } = field;
        return !optionsMulti && !!options && options.length > 3;
    }
    isTextarea(field) {
        const { rows } = field;
        return rows && rows >= 3;
    }
    printError(error) {
        console.error(error);
    }
}
tslib_1.__decorate([
    Input('p-auto-focus'),
    tslib_1.__metadata("design:type", String)
], PoDynamicFormFieldsBaseComponent.prototype, "autoFocus", void 0);
tslib_1.__decorate([
    Input('p-fields'),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], PoDynamicFormFieldsBaseComponent.prototype, "fields", null);
tslib_1.__decorate([
    Output('p-fieldsChange'),
    tslib_1.__metadata("design:type", Object)
], PoDynamicFormFieldsBaseComponent.prototype, "fieldsChange", void 0);
tslib_1.__decorate([
    Input('p-value'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoDynamicFormFieldsBaseComponent.prototype, "value", null);
tslib_1.__decorate([
    Input('p-disabled-form'),
    tslib_1.__metadata("design:type", Boolean)
], PoDynamicFormFieldsBaseComponent.prototype, "disabledForm", void 0);
tslib_1.__decorate([
    Input('p-validate'),
    tslib_1.__metadata("design:type", Object)
], PoDynamicFormFieldsBaseComponent.prototype, "validate", void 0);
tslib_1.__decorate([
    Output('p-form-validate'),
    tslib_1.__metadata("design:type", Object)
], PoDynamicFormFieldsBaseComponent.prototype, "formValidate", void 0);
//# sourceMappingURL=data:application/json;base64,