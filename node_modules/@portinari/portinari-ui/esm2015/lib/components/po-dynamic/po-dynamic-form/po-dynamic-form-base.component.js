import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
/**
 *
 * @description
 *
 * Componente para criação de formulários dinâmicos a partir de uma lista de objetos.
 *
 * Também é possível verificar se o formulário está válido e informar valores para a exibição de informações.
 */
export class PoDynamicFormBaseComponent {
    constructor() {
        this._groupForm = false;
        /**
         * @optional
         *
         * @description
         *
         * Na inicialização do componente será repassado o objeto de formulário utilizado no componente,
         * podendo ser utilizado para validações e/ou detecção de mudança dos valores.
         *
         * Portanto existem duas maneiras de recuperar o formulário,
         * através de *template reference* e através do *output*, veja os exemplos abaixo:
         *
         * > *template reference*
         *
         * ```html
         *  <po-dynamic-form #dynamicForm>
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.form.invalid">
         *  </po-button>
         *
         * ```
         *
         * > *Output*
         *
         * ```html
         *  ...
         *  <po-dynamic-form (p-form)="getForm($event)">
         *  </po-dynamic-form>
         *
         *  <po-button p-label="Adicionar" [p-disabled]="dynamicForm?.invalid">
         *  </po-button>
         *  ...
         *
         * ```
         *
         * ```ts
         *  ...
         *
         *  export class AppComponent {
         *
         *    dynamicForm: NgForm;
         *
         *    getForm(form: NgForm) {
         *      this.dynamicForm = form;
         *    }
         *
         *  }
         * ```
         *
         * > Caso a propriedade `p-group-form` for verdadeira não será repassado o formulário, pois o mesmo utilizará
         * o formulário pai.
         */
        this.formOutput = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     * Ao informar esta propriedade, o componente passará a utilizar o formulário pai para criar os `FormControl`
     * e com isso é possível recuperar o valor do formulário e suas validações a partir do formulário pai.
     *
     * ```html
     * <form #parentForm="ngForm">
     *
     *   <po-dynamic-form p-group-form [p-fields]="fields"></po-dynamic-form>
     *
     *  <po-button p-label="Adicionar" [p-disabled]="parentForm.invalid"></po-button>
     * </form>
     * ```
     */
    set groupForm(value) {
        this._groupForm = value === '' ? true : convertToBoolean(value);
    }
    get groupForm() {
        return this._groupForm;
    }
}
tslib_1.__decorate([
    Input('p-auto-focus'),
    tslib_1.__metadata("design:type", String)
], PoDynamicFormBaseComponent.prototype, "autoFocus", void 0);
tslib_1.__decorate([
    Input('p-fields'),
    tslib_1.__metadata("design:type", Array)
], PoDynamicFormBaseComponent.prototype, "fields", void 0);
tslib_1.__decorate([
    Input('p-value'),
    tslib_1.__metadata("design:type", Object)
], PoDynamicFormBaseComponent.prototype, "value", void 0);
tslib_1.__decorate([
    Output('p-form'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoDynamicFormBaseComponent.prototype, "formOutput", void 0);
tslib_1.__decorate([
    Input('p-group-form'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoDynamicFormBaseComponent.prototype, "groupForm", null);
tslib_1.__decorate([
    Input('p-load'),
    tslib_1.__metadata("design:type", Object)
], PoDynamicFormBaseComponent.prototype, "load", void 0);
tslib_1.__decorate([
    Input('p-validate'),
    tslib_1.__metadata("design:type", Object)
], PoDynamicFormBaseComponent.prototype, "validate", void 0);
//# sourceMappingURL=data:application/json;base64,