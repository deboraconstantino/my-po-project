import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
let PoDynamicFormValidationService = class PoDynamicFormValidationService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    sendFieldChange(field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(field.validate, changedValue).pipe(map(validateFields => this.setFieldDefaultIfEmpty(validateFields)));
    }
    sendFormChange(validate, field, value) {
        const changedValue = { property: field.property, value };
        return this.execute(validate, changedValue).pipe(map(validateFields => this.setFormDefaultIfEmpty(validateFields)));
    }
    updateFieldsForm(validatedFields = [], fields = []) {
        return [...validatedFields].reduce((updatedFields, validatedField) => {
            const index = updatedFields.findIndex(field => field.property === validatedField.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = Object.assign({}, fields[index], validatedField);
            }
            return updatedFields;
        }, [...fields]);
    }
    setFieldDefaultIfEmpty(validateFields) {
        return validateFields || {
            field: {}
        };
    }
};
PoDynamicFormValidationService.ctorParameters = () => [
    { type: HttpClient }
];
PoDynamicFormValidationService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], PoDynamicFormValidationService);
export { PoDynamicFormValidationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBSWhHLElBQWEsOEJBQThCLEdBQTNDLE1BQWEsOEJBQStCLFNBQVEsc0JBQXNCO0lBRXhFLFlBQVksSUFBZ0I7UUFDMUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2QsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUF5QixFQUFFLEtBQVU7UUFDbkQsTUFBTSxZQUFZLEdBQThCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFFcEYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUNwRCxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxjQUFjLENBQUMsUUFBMkIsRUFBRSxLQUF5QixFQUFFLEtBQVU7UUFDL0UsTUFBTSxZQUFZLEdBQThCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFFcEYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0SCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsa0JBQTZDLEVBQUUsRUFBRSxTQUFvQyxFQUFFO1FBQ3RHLE9BQU8sQ0FBRSxHQUFHLGVBQWUsQ0FBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsRUFBRTtZQUNyRSxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDM0YsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUUvQixJQUFJLFdBQVcsRUFBRTtnQkFDZixhQUFhLENBQUMsS0FBSyxDQUFDLHFCQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBSyxjQUFjLENBQUUsQ0FBQzthQUNoRTtZQUVELE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUMsRUFBRSxDQUFFLEdBQUcsTUFBTSxDQUFFLENBQUMsQ0FBQztJQUNwQixDQUFDO0lBRU8sc0JBQXNCLENBQUMsY0FBbUI7UUFDaEQsT0FBTyxjQUFjLElBQUk7WUFDdkIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDO0lBQ0osQ0FBQztDQUVGLENBQUE7O1lBcENtQixVQUFVOztBQUZqQiw4QkFBOEI7SUFEMUMsVUFBVSxFQUFFOzZDQUdPLFVBQVU7R0FGakIsOEJBQThCLENBc0MxQztTQXRDWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1maWVsZC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkIH0gZnJvbSAnLi9wby1keW5hbWljLWZvcm0tZmllbGQtY2hhbmdlZC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtT3BlcmF0aW9uIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1mb3JtLW9wZXJhdGlvbi9wby1keW5hbWljLWZvcm0tb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgUG9EeW5hbWljRm9ybVZhbGlkYXRpb24gfSBmcm9tICcuL3BvLWR5bmFtaWMtZm9ybS12YWxpZGF0aW9uLmludGVyZmFjZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQb0R5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UgZXh0ZW5kcyBQb0R5bmFtaWNGb3JtT3BlcmF0aW9uIHtcclxuXHJcbiAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCkge1xyXG4gICAgc3VwZXIoaHR0cCk7XHJcbiAgfVxyXG5cclxuICBzZW5kRmllbGRDaGFuZ2UoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCwgdmFsdWU6IGFueSkge1xyXG4gICAgY29uc3QgY2hhbmdlZFZhbHVlOiBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkID0geyBwcm9wZXJ0eTogZmllbGQucHJvcGVydHksIHZhbHVlIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShmaWVsZC52YWxpZGF0ZSwgY2hhbmdlZFZhbHVlKS5waXBlKFxyXG4gICAgICBtYXAodmFsaWRhdGVGaWVsZHMgPT4gdGhpcy5zZXRGaWVsZERlZmF1bHRJZkVtcHR5KHZhbGlkYXRlRmllbGRzKSkpO1xyXG4gIH1cclxuXHJcbiAgc2VuZEZvcm1DaGFuZ2UodmFsaWRhdGU6IEZ1bmN0aW9uIHwgc3RyaW5nLCBmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkLCB2YWx1ZTogYW55KTogT2JzZXJ2YWJsZTxQb0R5bmFtaWNGb3JtVmFsaWRhdGlvbj4ge1xyXG4gICAgY29uc3QgY2hhbmdlZFZhbHVlOiBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkID0geyBwcm9wZXJ0eTogZmllbGQucHJvcGVydHksIHZhbHVlIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSh2YWxpZGF0ZSwgY2hhbmdlZFZhbHVlKS5waXBlKG1hcCh2YWxpZGF0ZUZpZWxkcyA9PiB0aGlzLnNldEZvcm1EZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkcykpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUZpZWxkc0Zvcm0odmFsaWRhdGVkRmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW10sIGZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiA9IFtdKSB7XHJcbiAgICByZXR1cm4gWyAuLi52YWxpZGF0ZWRGaWVsZHMgXS5yZWR1Y2UoKHVwZGF0ZWRGaWVsZHMsIHZhbGlkYXRlZEZpZWxkKSA9PiB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdXBkYXRlZEZpZWxkcy5maW5kSW5kZXgoZmllbGQgPT4gZmllbGQucHJvcGVydHkgPT09IHZhbGlkYXRlZEZpZWxkLnByb3BlcnR5KTtcclxuICAgICAgY29uc3QgaGFzUHJvcGVydHkgPSBpbmRleCA+PSAwO1xyXG5cclxuICAgICAgaWYgKGhhc1Byb3BlcnR5KSB7XHJcbiAgICAgICAgdXBkYXRlZEZpZWxkc1tpbmRleF0gPSB7IC4uLmZpZWxkc1tpbmRleF0sIC4uLnZhbGlkYXRlZEZpZWxkIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB1cGRhdGVkRmllbGRzO1xyXG4gICAgfSwgWyAuLi5maWVsZHMgXSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldEZpZWxkRGVmYXVsdElmRW1wdHkodmFsaWRhdGVGaWVsZHM6IGFueSk6IGFueSB7XHJcbiAgICByZXR1cm4gdmFsaWRhdGVGaWVsZHMgfHwge1xyXG4gICAgICBmaWVsZDoge31cclxuICAgIH07XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=