import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
let PoDynamicFormLoadService = class PoDynamicFormLoadService extends PoDynamicFormOperation {
    constructor(http) {
        super(http);
    }
    createAndUpdateFieldsForm(loadedFields = [], fields = []) {
        return [...loadedFields].reduce((updatedFields, field) => {
            const index = updatedFields.findIndex(updatedField => updatedField.property === field.property);
            const hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = Object.assign({}, fields[index], field);
            }
            else {
                updatedFields.push(field);
            }
            return updatedFields;
        }, [...fields]);
    }
    executeLoad(load, value) {
        return this.execute(load, value)
            .pipe(map(loadedFormdData => this.setFormDefaultIfEmpty(loadedFormdData)));
    }
};
PoDynamicFormLoadService.ctorParameters = () => [
    { type: HttpClient }
];
PoDynamicFormLoadService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], PoDynamicFormLoadService);
export { PoDynamicFormLoadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLWxvYWQvcG8tZHluYW1pYy1mb3JtLWxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBR2hHLElBQWEsd0JBQXdCLEdBQXJDLE1BQWEsd0JBQXlCLFNBQVEsc0JBQXNCO0lBRWxFLFlBQVksSUFBZ0I7UUFDMUIsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2QsQ0FBQztJQUVELHlCQUF5QixDQUFDLGVBQTBDLEVBQUUsRUFBRSxTQUFvQyxFQUFFO1FBQzVHLE9BQU8sQ0FBRSxHQUFHLFlBQVksQ0FBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN6RCxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsS0FBSyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDaEcsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUUvQixJQUFJLFdBQVcsRUFBRTtnQkFDZixhQUFhLENBQUMsS0FBSyxDQUFDLHFCQUFRLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBSyxLQUFLLENBQUUsQ0FBQzthQUN2RDtpQkFBTTtnQkFDTCxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzNCO1lBRUQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxFQUFFLENBQUUsR0FBRyxNQUFNLENBQUUsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFRCxXQUFXLENBQUMsSUFBdUIsRUFBRSxLQUFVO1FBQzdDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO2FBQzdCLElBQUksQ0FDSCxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsZUFBZSxDQUFDLENBQ25FLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FFRixDQUFBOztZQTFCbUIsVUFBVTs7QUFGakIsd0JBQXdCO0lBRHBDLFVBQVUsRUFBRTs2Q0FHTyxVQUFVO0dBRmpCLHdCQUF3QixDQTRCcEM7U0E1Qlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtRmllbGQgfSBmcm9tICcuLi9wby1keW5hbWljLWZvcm0tZmllbGQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1PcGVyYXRpb24gfSBmcm9tICcuLi9wby1keW5hbWljLWZvcm0tb3BlcmF0aW9uL3BvLWR5bmFtaWMtZm9ybS1vcGVyYXRpb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9EeW5hbWljRm9ybUxvYWRTZXJ2aWNlIGV4dGVuZHMgUG9EeW5hbWljRm9ybU9wZXJhdGlvbiB7XG5cbiAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCkge1xuICAgIHN1cGVyKGh0dHApO1xuICB9XG5cbiAgY3JlYXRlQW5kVXBkYXRlRmllbGRzRm9ybShsb2FkZWRGaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4gPSBbXSwgZmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW10pIHtcbiAgICByZXR1cm4gWyAuLi5sb2FkZWRGaWVsZHMgXS5yZWR1Y2UoKHVwZGF0ZWRGaWVsZHMsIGZpZWxkKSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IHVwZGF0ZWRGaWVsZHMuZmluZEluZGV4KHVwZGF0ZWRGaWVsZCA9PiB1cGRhdGVkRmllbGQucHJvcGVydHkgPT09IGZpZWxkLnByb3BlcnR5KTtcbiAgICAgIGNvbnN0IGhhc1Byb3BlcnR5ID0gaW5kZXggPj0gMDtcblxuICAgICAgaWYgKGhhc1Byb3BlcnR5KSB7XG4gICAgICAgIHVwZGF0ZWRGaWVsZHNbaW5kZXhdID0geyAuLi5maWVsZHNbaW5kZXhdLCAuLi5maWVsZCB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlZEZpZWxkcy5wdXNoKGZpZWxkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVwZGF0ZWRGaWVsZHM7XG4gICAgfSwgWyAuLi5maWVsZHMgXSk7XG4gIH1cblxuICBleGVjdXRlTG9hZChsb2FkOiBGdW5jdGlvbiB8IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUobG9hZCwgdmFsdWUpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKGxvYWRlZEZvcm1kRGF0YSA9PiB0aGlzLnNldEZvcm1EZWZhdWx0SWZFbXB0eShsb2FkZWRGb3JtZERhdGEpXG4gICAgICApKTtcbiAgfVxuXG59XG4iXX0=