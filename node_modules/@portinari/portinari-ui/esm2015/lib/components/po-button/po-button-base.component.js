import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
const PO_BUTTON_TYPES = ['default', 'primary', 'danger', 'link'];
const PO_BUTTON_TYPE_DEFAULT = 'default';
/**
 * @description
 *
 * O `po-button` permite que o usuário execute ações predefinidas pelo desenvolvedor.
 *
 * Através dos tipos, é possível identificar a importância de cada ação, sendo ela primária (`primary`) ou até mesmo uma
 * ação irreversível (`danger`), como a exclusão de um registro.
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-button`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-button` configurado como `primary` por página.
 * - Para ações irreversíveis use sempre o tipo `danger`.
 */
export class PoButtonBaseComponent {
    constructor() {
        this._disabled = false;
        this._loading = false;
        this._small = false;
        this._type = 'default';
        /** Ação que será executada quando o usuário clicar sobre o `po-button`. */
        this.click = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Exibe um ícone de carregamento à esquerda do _label_ do botão.
     *
     * > Quando esta propriedade estiver habilitada, desabilitará o botão.
     *
     * @default `false`
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    get loading() {
        return this._loading;
    }
    /**
     * @optional
     *
     * @description
     *
     * Deixa o botão menor.
     *
     * @default `false`
     */
    set small(value) {
        this._small = value === '' ? true : convertToBoolean(value);
    }
    get small() {
        return this._small;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o estilo do `po-button`.
     *
     * Valore válidos:
     *  - `default`: estilo padrão do `po-button`.
     *  - `primary`: deixa o `po-button` com destaque, deve ser usado para ações primárias.
     *  - `danger`: deve ser usado para ações que o usuário precisa ter cuidado ao executa-lá.
     *  - `link`: o `po-button` recebe o estilo de um link.
     *
     * @default `default`
     */
    set type(value) {
        this._type = PO_BUTTON_TYPES.includes(value) ? value : PO_BUTTON_TYPE_DEFAULT;
    }
    get type() {
        return this._type;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o `po-button` e não permite que o usuário interaja com o mesmo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = value === '' ? true : convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
}
tslib_1.__decorate([
    Input('p-label'),
    tslib_1.__metadata("design:type", String)
], PoButtonBaseComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input('p-loading'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoButtonBaseComponent.prototype, "loading", null);
tslib_1.__decorate([
    Input('p-icon'),
    tslib_1.__metadata("design:type", String)
], PoButtonBaseComponent.prototype, "icon", void 0);
tslib_1.__decorate([
    Input('p-small'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoButtonBaseComponent.prototype, "small", null);
tslib_1.__decorate([
    Input('p-type'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoButtonBaseComponent.prototype, "type", null);
tslib_1.__decorate([
    Input('p-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoButtonBaseComponent.prototype, "disabled", null);
tslib_1.__decorate([
    Output('p-click'),
    tslib_1.__metadata("design:type", Object)
], PoButtonBaseComponent.prototype, "click", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1idXR0b24vcG8tYnV0dG9uLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsTUFBTSxlQUFlLEdBQUcsQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNqRSxNQUFNLHNCQUFzQixHQUFHLFNBQVMsQ0FBQztBQUV6Qzs7Ozs7Ozs7Ozs7OztHQWFHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUFsQztRQUVVLGNBQVMsR0FBYSxLQUFLLENBQUM7UUFDNUIsYUFBUSxHQUFhLEtBQUssQ0FBQztRQUMzQixXQUFNLEdBQWEsS0FBSyxDQUFDO1FBQ3pCLFVBQUssR0FBWSxTQUFTLENBQUM7UUEyRm5DLDJFQUEyRTtRQUN4RCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztJQUV0RCxDQUFDO0lBbkZDOzs7Ozs7Ozs7O09BVUc7SUFDaUIsSUFBSSxPQUFPLENBQUMsS0FBYztRQUM1QyxJQUFJLENBQUMsUUFBUSxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQVNEOzs7Ozs7OztPQVFHO0lBQ2UsSUFBSSxLQUFLLENBQUMsS0FBYztRQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFRLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkUsQ0FBQztJQUNELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7O09BY0c7SUFDYyxJQUFJLElBQUksQ0FBQyxLQUFhO1FBQ3JDLElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztJQUNoRixDQUFDO0lBQ0QsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNrQixJQUFJLFFBQVEsQ0FBQyxLQUFjO1FBQzlDLElBQUksQ0FBQyxTQUFTLEdBQVEsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBQ0QsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7Q0FLRjtBQXJGbUI7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7b0RBQWdCO0FBYWI7SUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7O29EQUVsQjtBQVdnQjtJQUFoQixLQUFLLENBQUMsUUFBUSxDQUFDOzttREFBZTtBQVdiO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OztrREFFaEI7QUFvQmdCO0lBQWhCLEtBQUssQ0FBQyxRQUFRLENBQUM7OztpREFFZjtBQWNvQjtJQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzs7cURBRW5CO0FBTWtCO0lBQWxCLE1BQU0sQ0FBQyxTQUFTLENBQUM7O29EQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmNvbnN0IFBPX0JVVFRPTl9UWVBFUyA9IFsnZGVmYXVsdCcsICdwcmltYXJ5JywgJ2RhbmdlcicsICdsaW5rJ107XG5jb25zdCBQT19CVVRUT05fVFlQRV9ERUZBVUxUID0gJ2RlZmF1bHQnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gYHBvLWJ1dHRvbmAgcGVybWl0ZSBxdWUgbyB1c3XDoXJpbyBleGVjdXRlIGHDp8O1ZXMgcHJlZGVmaW5pZGFzIHBlbG8gZGVzZW52b2x2ZWRvci5cbiAqXG4gKiBBdHJhdsOpcyBkb3MgdGlwb3MsIMOpIHBvc3PDrXZlbCBpZGVudGlmaWNhciBhIGltcG9ydMOibmNpYSBkZSBjYWRhIGHDp8Ojbywgc2VuZG8gZWxhIHByaW3DoXJpYSAoYHByaW1hcnlgKSBvdSBhdMOpIG1lc21vIHVtYVxuICogYcOnw6NvIGlycmV2ZXJzw612ZWwgKGBkYW5nZXJgKSwgY29tbyBhIGV4Y2x1c8OjbyBkZSB1bSByZWdpc3Ryby5cbiAqXG4gKiAjIyMjIEJvYXMgcHLDoXRpY2FzXG4gKlxuICogLSBFdml0ZSBgbGFiZWxzYCBleHRlbnNvcyBxdWUgcXVlYnJhbSBvIGxheW91dCBkbyBgcG8tYnV0dG9uYCwgdXNlIGBsYWJlbHNgIGRpcmV0b3MsIGN1cnRvcyBlIGludHVpdGl2b3MuXG4gKiAtIFV0aWxpemUgYXBlbmFzIHVtIGBwby1idXR0b25gIGNvbmZpZ3VyYWRvIGNvbW8gYHByaW1hcnlgIHBvciBww6FnaW5hLlxuICogLSBQYXJhIGHDp8O1ZXMgaXJyZXZlcnPDrXZlaXMgdXNlIHNlbXByZSBvIHRpcG8gYGRhbmdlcmAuXG4gKi9cbmV4cG9ydCBjbGFzcyBQb0J1dHRvbkJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2Rpc2FibGVkPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9sb2FkaW5nPzogYm9vbGVhbiA9IGZhbHNlO1xuICBwcml2YXRlIF9zbWFsbD86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdHlwZT86IHN0cmluZyA9ICdkZWZhdWx0JztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBMYWJlbCBkbyBib3TDo28uXG4gICAqL1xuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbD86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBFeGliZSB1bSDDrWNvbmUgZGUgY2FycmVnYW1lbnRvIMOgIGVzcXVlcmRhIGRvIF9sYWJlbF8gZG8gYm90w6NvLlxuICAgKlxuICAgKiA+IFF1YW5kbyBlc3RhIHByb3ByaWVkYWRlIGVzdGl2ZXIgaGFiaWxpdGFkYSwgZGVzYWJpbGl0YXLDoSBvIGJvdMOjby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWxvYWRpbmcnKSBzZXQgbG9hZGluZyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2xvYWRpbmcgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBsb2FkaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9sb2FkaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIMONY29uZSBleGliaWRvIGFvIGxhZG8gZXNxdWVyZG8gZG8gbGFiZWwgZG8gYm90w6NvLlxuICAgKlxuICAgKiDDiSBwb3Nzw612ZWwgdXNhciBxdWFscXVlciB1bWEgZG9zIMOtY29uZXMgZGEgW0JpYmxpb3RlY2EgZGUgw61jb25lc10oL2d1aWRlcy9pY29ucykuXG4gICAqL1xuICBASW5wdXQoJ3AtaWNvbicpIGljb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVpeGEgbyBib3TDo28gbWVub3IuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1zbWFsbCcpIHNldCBzbWFsbCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3NtYWxsID0gPGFueT52YWx1ZSA9PT0gJycgPyB0cnVlIDogY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cbiAgZ2V0IHNtYWxsKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zbWFsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBvIGVzdGlsbyBkbyBgcG8tYnV0dG9uYC5cbiAgICpcbiAgICogVmFsb3JlIHbDoWxpZG9zOlxuICAgKiAgLSBgZGVmYXVsdGA6IGVzdGlsbyBwYWRyw6NvIGRvIGBwby1idXR0b25gLlxuICAgKiAgLSBgcHJpbWFyeWA6IGRlaXhhIG8gYHBvLWJ1dHRvbmAgY29tIGRlc3RhcXVlLCBkZXZlIHNlciB1c2FkbyBwYXJhIGHDp8O1ZXMgcHJpbcOhcmlhcy5cbiAgICogIC0gYGRhbmdlcmA6IGRldmUgc2VyIHVzYWRvIHBhcmEgYcOnw7VlcyBxdWUgbyB1c3XDoXJpbyBwcmVjaXNhIHRlciBjdWlkYWRvIGFvIGV4ZWN1dGEtbMOhLlxuICAgKiAgLSBgbGlua2A6IG8gYHBvLWJ1dHRvbmAgcmVjZWJlIG8gZXN0aWxvIGRlIHVtIGxpbmsuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBkZWZhdWx0YFxuICAgKi9cbiAgQElucHV0KCdwLXR5cGUnKSBzZXQgdHlwZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdHlwZSA9IFBPX0JVVFRPTl9UWVBFUy5pbmNsdWRlcyh2YWx1ZSkgPyB2YWx1ZSA6IFBPX0JVVFRPTl9UWVBFX0RFRkFVTFQ7XG4gIH1cbiAgZ2V0IHR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlc2FiaWxpdGEgbyBgcG8tYnV0dG9uYCBlIG7Do28gcGVybWl0ZSBxdWUgbyB1c3XDoXJpbyBpbnRlcmFqYSBjb20gbyBtZXNtby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWRpc2FibGVkJykgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fZGlzYWJsZWQgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgLyoqIEHDp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHF1YW5kbyBvIHVzdcOhcmlvIGNsaWNhciBzb2JyZSBvIGBwby1idXR0b25gLiAqL1xuICBAT3V0cHV0KCdwLWNsaWNrJykgY2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyPG51bGw+KCk7XG5cbn1cbiJdfQ==