import * as tslib_1 from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { animate, AnimationBuilder, AnimationFactory, AnimationPlayer, keyframes, style } from '@angular/animations';
import { PoNavbarBaseComponent } from './po-navbar-base.component';
import { PoNavbarItemsComponent } from './po-navbar-items/po-navbar-items.component';
const poNavbarNavigationWidth = 88;
const poNavbarMenuMedia = 768;
const poNavbarMatchMedia = `(max-width: ${poNavbarMenuMedia}px)`;
const poNavbarTiming = '250ms ease';
/**
 * @docsExtends PoNavbarBaseComponent
 */
let PoNavbarComponent = class PoNavbarComponent extends PoNavbarBaseComponent {
    constructor(renderer, builder, changeDetector) {
        super();
        this.renderer = renderer;
        this.builder = builder;
        this.changeDetector = changeDetector;
        this.showItemsNavigation = false;
        this.offset = 0;
        this.onMediaQueryChange = changed => {
            this.changeNavbarMenuItems(changed.matches, this.menuItems, this.items, this.literals.navbarLinks);
        };
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.displayItemsNavigation.bind(this));
    }
    get navbarItemNavigationDisableLeft() {
        return this.offset === 0;
    }
    get navbarItemNavigationDisableRight() {
        return this.disableRight && this.offset !== 0;
    }
    ngAfterViewInit() {
        this.displayItemsNavigation();
        if (this.menu) {
            this.initNavbarMenu();
        }
    }
    ngOnDestroy() {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
    }
    navigateItems(orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    }
    allNavbarItemsWidth() {
        return this.navbarItems.allNavbarItems.reduce((previous, current) => previous + current.nativeElement.offsetWidth, 0);
    }
    animate(offset) {
        const animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([
            animate(poNavbarTiming, keyframes([style({ transform: `translateX(${-offset}px)` })]))
        ]);
    }
    changeNavbarMenuItems(isCollapsedMedia, menuItems, navbarItems, label) {
        if (isCollapsedMedia) {
            const subItems = [{ label, subItems: navbarItems }];
            this.menu.menus = [...subItems, ...menuItems];
        }
        else {
            this.menu.menus = menuItems;
        }
    }
    calculateLeftNavigation() {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            const navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= this.offset) {
                calculatedOffset = navbarItemOffset - (this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        });
        return calculatedOffset;
    }
    calculateRightNavigation(itemBreakPoint) {
        let calculatedOffset;
        this.navbarItems.allNavbarItems.some(navbarItem => {
            const offsetLeft = navbarItem.nativeElement.offsetLeft;
            const finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        });
        return calculatedOffset;
    }
    displayItemsNavigation() {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    }
    initNavbarMenu() {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        this.menuItems = this.menu.menus;
        if (window.innerWidth < poNavbarMenuMedia) {
            this.changeNavbarMenuItems(true, this.menuItems, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    }
    navbarItemsWidth() {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    }
    navigateLeft() {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    }
    navigateRight() {
        const maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        const itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    }
    setOffsetToZero() {
        this.offset = 0;
    }
    validateMaxOffset(maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    }
    validateMenuLogo() {
        if (this.menu.logo && this.logo) {
            this.menu.logo = undefined;
            this.menu.changeDetector.detectChanges();
        }
    }
};
PoNavbarComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: AnimationBuilder },
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    ViewChild(PoNavbarItemsComponent, { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoNavbarComponent.prototype, "navbarItemsElement", void 0);
tslib_1.__decorate([
    ViewChild(PoNavbarItemsComponent, { static: true }),
    tslib_1.__metadata("design:type", PoNavbarItemsComponent)
], PoNavbarComponent.prototype, "navbarItems", void 0);
PoNavbarComponent = tslib_1.__decorate([
    Component({
        selector: 'po-navbar',
        template: "<header class=\"po-navbar\"\n  [ngClass]=\"{'po-navbar-shadow' : shadow}\">\n\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{'po-navbar-logo-menu' : !!menu, 'po-navbar-no-logo' : !logo }\"\n    [p-logo]=\"logo\">\n  </po-navbar-logo>\n\n  <po-navbar-items\n    class=\"po-navbar-items\"\n    [p-items]=\"items\">\n  </po-navbar-items>\n\n  <po-navbar-item-navigation *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\">\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions\n    class=\"po-navbar-actions\"\n    [p-icon-actions]=\"iconActions\">\n  </po-navbar-actions>\n\n</header>\n\n<po-menu *ngIf=\"!menu\"\n  [p-menus]=\"items\">\n</po-menu>"
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2, AnimationBuilder, ChangeDetectorRef])
], PoNavbarComponent);
export { PoNavbarComponent };
//# sourceMappingURL=data:application/json;base64,