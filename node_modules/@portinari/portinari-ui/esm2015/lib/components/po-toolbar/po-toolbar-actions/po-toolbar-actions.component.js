import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { isTypeof } from '../../../utils/util';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
const poToolbarActionsIconDefault = 'po-icon-more';
/**
 * @docsPrivate
 *
 * @usedBy PoToolbarComponent
 *
 * @description
 *
 * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
 */
let PoToolbarActionsComponent = class PoToolbarActionsComponent {
    /**
     * @docsPrivate
     *
     * @usedBy PoToolbarComponent
     *
     * @description
     *
     * O componente `po-toolbar-actions` tem como objetivo receber uma lista de ações e um ícone que podem ser personalizados.
     */
    constructor() {
        this._actionsIcon = poToolbarActionsIconDefault;
    }
    /** Define o ícone das ações. */
    set actionsIcon(icon) {
        this._actionsIcon = isTypeof(icon, 'string') ? icon : poToolbarActionsIconDefault;
    }
    get actionsIcon() {
        return this._actionsIcon;
    }
};
tslib_1.__decorate([
    Input('p-actions'),
    tslib_1.__metadata("design:type", Array)
], PoToolbarActionsComponent.prototype, "actions", void 0);
tslib_1.__decorate([
    Input('p-actions-icon'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoToolbarActionsComponent.prototype, "actionsIcon", null);
PoToolbarActionsComponent = tslib_1.__decorate([
    Component({
        selector: 'po-toolbar-actions',
        template: "<div class=\"po-toolbar-actions po-clickable\" (click)=\"popup.toggle()\">\n  <span #toolbarActions class=\"po-icon {{ actionsIcon }} po-toolbar-icon\"></span>\n</div>\n\n<po-popup #popup\n  [p-actions]=\"actions\"\n  [p-target]=\"toolbarActions\">\n</po-popup>\n",
        providers: [PoControlPositionService]
    })
], PoToolbarActionsComponent);
export { PoToolbarActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdG9vbGJhci9wby10b29sYmFyLWFjdGlvbnMvcG8tdG9vbGJhci1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQy9DLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLG1FQUFtRSxDQUFDO0FBSTdHLE1BQU0sMkJBQTJCLEdBQUcsY0FBYyxDQUFDO0FBRW5EOzs7Ozs7OztHQVFHO0FBTUgsSUFBYSx5QkFBeUIsR0FBdEMsTUFBYSx5QkFBeUI7SUFkdEM7Ozs7Ozs7O09BUUc7SUFDSDtRQU9VLGlCQUFZLEdBQVksMkJBQTJCLENBQUM7SUFjOUQsQ0FBQztJQVRDLGdDQUFnQztJQUNQLElBQUksV0FBVyxDQUFDLElBQVk7UUFDbkQsSUFBSSxDQUFDLFlBQVksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLDJCQUEyQixDQUFDO0lBQ3BGLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztDQUVGLENBQUE7QUFYcUI7SUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQztzQ0FBVyxLQUFLOzBEQUFrQjtBQUc1QjtJQUF4QixLQUFLLENBQUMsZ0JBQWdCLENBQUM7Ozs0REFFdkI7QUFWVSx5QkFBeUI7SUFMckMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG9CQUFvQjtRQUM5QixtUkFBa0Q7UUFDbEQsU0FBUyxFQUFFLENBQUUsd0JBQXdCLENBQUU7S0FDeEMsQ0FBQztHQUNXLHlCQUF5QixDQWdCckM7U0FoQlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9Db250cm9sUG9zaXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tY29udHJvbC1wb3NpdGlvbi9wby1jb250cm9sLXBvc2l0aW9uLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBQb1Rvb2xiYXJBY3Rpb24gfSBmcm9tICcuLi9wby10b29sYmFyLWFjdGlvbi5pbnRlcmZhY2UnO1xuXG5jb25zdCBwb1Rvb2xiYXJBY3Rpb25zSWNvbkRlZmF1bHQgPSAncG8taWNvbi1tb3JlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAdXNlZEJ5IFBvVG9vbGJhckNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tdG9vbGJhci1hY3Rpb25zYCB0ZW0gY29tbyBvYmpldGl2byByZWNlYmVyIHVtYSBsaXN0YSBkZSBhw6fDtWVzIGUgdW0gw61jb25lIHF1ZSBwb2RlbSBzZXIgcGVyc29uYWxpemFkb3MuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRvb2xiYXItYWN0aW9ucycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby10b29sYmFyLWFjdGlvbnMuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFsgUG9Db250cm9sUG9zaXRpb25TZXJ2aWNlIF1cbn0pXG5leHBvcnQgY2xhc3MgUG9Ub29sYmFyQWN0aW9uc0NvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfYWN0aW9uc0ljb24/OiBzdHJpbmcgPSBwb1Rvb2xiYXJBY3Rpb25zSWNvbkRlZmF1bHQ7XG5cbiAgLyoqIERlZmluZSB1bWEgbGlzdGEgZGUgYcOnw7Vlcy4gKi9cbiAgQElucHV0KCdwLWFjdGlvbnMnKSBhY3Rpb25zPzogQXJyYXk8UG9Ub29sYmFyQWN0aW9uPjtcblxuICAvKiogRGVmaW5lIG8gw61jb25lIGRhcyBhw6fDtWVzLiAqL1xuICBASW5wdXQoJ3AtYWN0aW9ucy1pY29uJykgc2V0IGFjdGlvbnNJY29uKGljb246IHN0cmluZykge1xuICAgIHRoaXMuX2FjdGlvbnNJY29uID0gaXNUeXBlb2YoaWNvbiwgJ3N0cmluZycpID8gaWNvbiA6IHBvVG9vbGJhckFjdGlvbnNJY29uRGVmYXVsdDtcbiAgfVxuXG4gIGdldCBhY3Rpb25zSWNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aW9uc0ljb247XG4gIH1cblxufVxuIl19