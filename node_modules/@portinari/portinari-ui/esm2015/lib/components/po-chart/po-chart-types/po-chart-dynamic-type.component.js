import * as tslib_1 from "tslib";
import { ElementRef, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartType } from '../enums/po-chart-type.enum';
const Padding = 24;
export class PoChartDynamicTypeComponent {
    constructor() {
        this.innerRadius = 0;
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        this.series = [];
    }
    get isChartGaugeType() {
        return this.type === PoChartType.Gauge;
    }
    calculateSVGContainerDimensions(chartWrapperElement, chartHeaderElement, chartLegendElement) {
        const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - (Padding * 2);
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    }
    calculateTotalValue() {
        this.totalValue = this.type === PoChartType.Gauge ? 100 : this.series.reduce((previousValue, serie) => previousValue + serie.value, 0);
    }
}
tslib_1.__decorate([
    ViewChild('chartBody', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoChartDynamicTypeComponent.prototype, "chartBody", void 0);
tslib_1.__decorate([
    ViewChild('svgContainer', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoChartDynamicTypeComponent.prototype, "svgContainer", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUcvQixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFJMUQsTUFBTSxPQUFPLEdBQVcsRUFBRSxDQUFDO0FBRTNCLE1BQU0sT0FBZ0IsMkJBQTJCO0lBQWpEO1FBY0UsZ0JBQVcsR0FBVyxDQUFDLENBQUM7UUFDeEIsaUJBQVksR0FBdUUsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNqRyxpQkFBWSxHQUF1RSxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ2pHLFdBQU0sR0FBZSxFQUFFLENBQUM7SUE0QjFCLENBQUM7SUFmQyxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLEtBQUssQ0FBQztJQUN6QyxDQUFDO0lBRUQsK0JBQStCLENBQUMsbUJBQTJCLEVBQUUsa0JBQTBCLEVBQUUsa0JBQTBCO1FBQ2pILE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsR0FBRyxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVyRyxJQUFJLENBQUMsU0FBUyxHQUFHLHNCQUFzQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQztRQUMxRSxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixHQUFHLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekksQ0FBQztDQUVGO0FBbkIyQztJQUF6QyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO3NDQUFZLFVBQVU7OERBQUM7QUFFbkI7SUFBNUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztzQ0FBZSxVQUFVO2lFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUG9DaGFydEdhdWdlU2VyaWUgfSBmcm9tICcuL3BvLWNoYXJ0LWdhdWdlL3BvLWNoYXJ0LWdhdWdlLXNlcmllcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9DaGFydFR5cGUgfSBmcm9tICcuLi9lbnVtcy9wby1jaGFydC10eXBlLmVudW0nO1xuaW1wb3J0IHsgUG9Eb251dENoYXJ0U2VyaWVzIH0gZnJvbSAnLi9wby1jaGFydC1kb251dC9wby1jaGFydC1kb251dC1zZXJpZXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGllQ2hhcnRTZXJpZXMgfSBmcm9tICcuL3BvLWNoYXJ0LXBpZS9wby1jaGFydC1waWUtc2VyaWVzLmludGVyZmFjZSc7XG5cbmNvbnN0IFBhZGRpbmc6IG51bWJlciA9IDI0O1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9DaGFydER5bmFtaWNUeXBlQ29tcG9uZW50IHtcblxuICBwcm90ZWN0ZWQgd2luZG93UmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG4gIHByb3RlY3RlZCB3aW5kb3dTY3JvbGxMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICBjZW50ZXJYOiBudW1iZXI7XG4gIGNoYXJ0RWxlbWVudENhdGVnb3J5OiBhbnk7XG4gIGNoYXJ0RWxlbWVudERlc2NyaXB0aW9uOiBhbnk7XG4gIGNoYXJ0RWxlbWVudFZhbHVlOiBhbnk7XG4gIGNoYXJ0SGVhZGVyOiBudW1iZXI7XG4gIGNoYXJ0TGVnZW5kOiBudW1iZXI7XG4gIGNoYXJ0V3JhcHBlcjogbnVtYmVyO1xuICBjb2xvcnM6IEFycmF5PHN0cmluZz47XG4gIGhlaWdodDogbnVtYmVyO1xuICBpbm5lclJhZGl1czogbnVtYmVyID0gMDtcbiAgb25TZXJpZUNsaWNrOiBTdWJqZWN0PFBvRG9udXRDaGFydFNlcmllcyB8IFBvUGllQ2hhcnRTZXJpZXMgfCBQb0NoYXJ0R2F1Z2VTZXJpZT4gPSBuZXcgU3ViamVjdCgpO1xuICBvblNlcmllSG92ZXI6IFN1YmplY3Q8UG9Eb251dENoYXJ0U2VyaWVzIHwgUG9QaWVDaGFydFNlcmllcyB8IFBvQ2hhcnRHYXVnZVNlcmllPiA9IG5ldyBTdWJqZWN0KCk7XG4gIHNlcmllczogQXJyYXk8YW55PiA9IFtdO1xuICBzdmdFbGVtZW50OiBIVE1MT2JqZWN0RWxlbWVudDtcbiAgc3ZnSGVpZ2h0OiBudW1iZXI7XG4gIHRhcmdldDogSFRNTElucHV0RWxlbWVudCAmIEV2ZW50VGFyZ2V0O1xuICB0b29sdGlwRWxlbWVudDogSFRNTE9iamVjdEVsZW1lbnQ7XG4gIHRvb2x0aXBUZXh0OiBzdHJpbmc7XG4gIHRvdGFsVmFsdWU6IG51bWJlcjtcbiAgdHlwZTogUG9DaGFydFR5cGU7XG5cbiAgQFZpZXdDaGlsZCgnY2hhcnRCb2R5JywgeyBzdGF0aWM6IHRydWUgfSkgY2hhcnRCb2R5OiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGQoJ3N2Z0NvbnRhaW5lcicsIHsgc3RhdGljOiB0cnVlIH0pIHN2Z0NvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICBnZXQgaXNDaGFydEdhdWdlVHlwZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50eXBlID09PSBQb0NoYXJ0VHlwZS5HYXVnZTtcbiAgfVxuXG4gIGNhbGN1bGF0ZVNWR0NvbnRhaW5lckRpbWVuc2lvbnMoY2hhcnRXcmFwcGVyRWxlbWVudDogbnVtYmVyLCBjaGFydEhlYWRlckVsZW1lbnQ6IG51bWJlciwgY2hhcnRMZWdlbmRFbGVtZW50OiBudW1iZXIpIHtcbiAgICBjb25zdCBzdmdDb250YWluZXJIZWlnaHRDYWxjID0gdGhpcy5oZWlnaHQgLSBjaGFydEhlYWRlckVsZW1lbnQgLSBjaGFydExlZ2VuZEVsZW1lbnQgLSAoUGFkZGluZyAqIDIpO1xuXG4gICAgdGhpcy5zdmdIZWlnaHQgPSBzdmdDb250YWluZXJIZWlnaHRDYWxjIDw9IDAgPyAwIDogc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYztcbiAgICB0aGlzLmNlbnRlclggPSBjaGFydFdyYXBwZXJFbGVtZW50IC8gMjtcbiAgfVxuXG4gIGNhbGN1bGF0ZVRvdGFsVmFsdWUoKSB7XG4gICAgdGhpcy50b3RhbFZhbHVlID0gdGhpcy50eXBlID09PSBQb0NoYXJ0VHlwZS5HYXVnZSA/IDEwMCA6IHRoaXMuc2VyaWVzLnJlZHVjZSgocHJldmlvdXNWYWx1ZSwgc2VyaWUpID0+IHByZXZpb3VzVmFsdWUgKyBzZXJpZS52YWx1ZSwgMCk7XG4gIH1cblxufVxuIl19