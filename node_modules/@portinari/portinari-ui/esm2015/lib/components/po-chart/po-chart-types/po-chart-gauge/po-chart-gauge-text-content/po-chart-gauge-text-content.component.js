import * as tslib_1 from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { convertNumberToDecimal } from '../../../../../utils/util';
import { poChartGaugeSerieWidth } from '../../po-chart-circular/po-chart-circular.constant';
let PoChartGaugeTextContentComponent = class PoChartGaugeTextContentComponent {
    constructor(changeDetection) {
        this.changeDetection = changeDetection;
    }
    set gaugeWidth(value) {
        this._gaugeWidth = value;
        this.checkTextDescriptionSize();
    }
    get gaugeWidth() {
        return this._gaugeWidth;
    }
    set serie(serie) {
        if (serie) {
            this.serieValueConverted = this.convertValueInPercentFormat(serie.value);
            this._serie = Object.assign({}, serie);
        }
        else {
            this._serie = undefined;
        }
    }
    get serie() {
        return this._serie;
    }
    get hasSerieDescription() {
        return this.serie && this.serie.description;
    }
    get hasSerieValue() {
        return this.serie && this.serie.value >= 0;
    }
    get maxDescriptionWidth() {
        // Diferença contemplando a largura do path base e padding interno.
        const subtractionArea = (this.gaugeWidth * poChartGaugeSerieWidth * 2) * 2;
        const descriptionWidth = this.gaugeWidth - subtractionArea;
        return { 'max-width': `${descriptionWidth}px` };
    }
    ngAfterViewInit() {
        this.checkTextDescriptionSize();
    }
    checkTextDescriptionSize() {
        if (this.descriptionElement) {
            // tooltip necessário para contornar comportamento inesperado do tooltip.
            setTimeout(() => {
                this.tooltip = this.isEllipsisActive();
            });
            this.changeDetection.detectChanges();
        }
    }
    convertValueInPercentFormat(value) {
        const decimalValue = String(convertNumberToDecimal(value, 1)).replace('.', ',');
        return `${decimalValue}%`;
    }
    isEllipsisActive() {
        const isExceededWidth = this.descriptionElement.nativeElement.offsetWidth < this.descriptionElement.nativeElement.scrollWidth;
        return isExceededWidth ? this.serie.description : undefined;
    }
};
PoChartGaugeTextContentComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input('p-gauge-width'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], PoChartGaugeTextContentComponent.prototype, "gaugeWidth", null);
tslib_1.__decorate([
    Input('p-serie'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoChartGaugeTextContentComponent.prototype, "serie", null);
tslib_1.__decorate([
    ViewChild('description', { static: false, read: ElementRef }),
    tslib_1.__metadata("design:type", ElementRef)
], PoChartGaugeTextContentComponent.prototype, "descriptionElement", void 0);
PoChartGaugeTextContentComponent = tslib_1.__decorate([
    Component({
        selector: 'po-chart-gauge-text-content',
        template: "<div *ngIf=\"hasSerieValue\" class=\"po-chart-gauge-text-content\" tabindex=\"0\" [ngStyle]=\"maxDescriptionWidth\">\n  <p class=\"po-chart-gauge-text-value\">{{ serieValueConverted }}</p>\n  <p *ngIf=\"hasSerieDescription\"\n    #description\n    class=\"po-chart-gauge-text-description\"\n    [p-tooltip]=\"tooltip\">{{ serie?.description }}</p>\n</div>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
], PoChartGaugeTextContentComponent);
export { PoChartGaugeTextContentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZ2F1Z2UvcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50L3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5JLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR25FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBTzVGLElBQWEsZ0NBQWdDLEdBQTdDLE1BQWEsZ0NBQWdDO0lBaUMzQyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7SUFBRyxDQUFDO0lBekJsQyxJQUFJLFVBQVUsQ0FBQyxLQUFhO1FBQ2xELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBRXpCLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQztJQUVpQixJQUFJLEtBQUssQ0FBQyxLQUF3QjtRQUNsRCxJQUFJLEtBQUssRUFBRTtZQUNULElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pFLElBQUksQ0FBQyxNQUFNLHFCQUFRLEtBQUssQ0FBRSxDQUFDO1NBQzVCO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztTQUN6QjtJQUNILENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQU1ELElBQUksbUJBQW1CO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxtQkFBbUI7UUFDckIsbUVBQW1FO1FBQ25FLE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsR0FBRyxzQkFBc0IsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0UsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLGVBQWUsQ0FBQztRQUUzRCxPQUFPLEVBQUUsV0FBVyxFQUFFLEdBQUcsZ0JBQWdCLElBQUksRUFBRSxDQUFDO0lBQ2xELENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVPLHdCQUF3QjtRQUM5QixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtZQUMzQix5RUFBeUU7WUFDekUsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QztJQUNILENBQUM7SUFFTywyQkFBMkIsQ0FBQyxLQUFhO1FBQy9DLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hGLE9BQU8sR0FBRyxZQUFZLEdBQUcsQ0FBQztJQUM1QixDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1FBRTlILE9BQU8sZUFBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQzlELENBQUM7Q0FFRixDQUFBOztZQTNDc0MsaUJBQWlCOztBQXpCOUI7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7O2tFQUl0QjtBQU1pQjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzs7NkRBT2hCO0FBTThEO0lBQTlELFNBQVMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQztzQ0FBcUIsVUFBVTs0RUFBQztBQS9CbkYsZ0NBQWdDO0lBTDVDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw2QkFBNkI7UUFDdkMsaVhBQTJEO1FBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7NkNBa0NxQyxpQkFBaUI7R0FqQzNDLGdDQUFnQyxDQTRFNUM7U0E1RVksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydE51bWJlclRvRGVjaW1hbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb0NoYXJ0R2F1Z2VTZXJpZSB9IGZyb20gJy4uL3BvLWNoYXJ0LWdhdWdlLXNlcmllcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcG9DaGFydEdhdWdlU2VyaWVXaWR0aCB9IGZyb20gJy4uLy4uL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbnN0YW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBvQ2hhcnRHYXVnZVRleHRDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgc2VyaWVWYWx1ZUNvbnZlcnRlZDogc3RyaW5nO1xuICB0b29sdGlwOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfZ2F1Z2VXaWR0aDogbnVtYmVyO1xuICBwcml2YXRlIF9zZXJpZTogUG9DaGFydEdhdWdlU2VyaWU7XG5cbiAgQElucHV0KCdwLWdhdWdlLXdpZHRoJykgc2V0IGdhdWdlV2lkdGgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2dhdWdlV2lkdGggPSB2YWx1ZTtcblxuICAgIHRoaXMuY2hlY2tUZXh0RGVzY3JpcHRpb25TaXplKCk7XG4gIH1cblxuICBnZXQgZ2F1Z2VXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2F1Z2VXaWR0aDtcbiAgfVxuXG4gIEBJbnB1dCgncC1zZXJpZScpIHNldCBzZXJpZShzZXJpZTogUG9DaGFydEdhdWdlU2VyaWUpIHtcbiAgICBpZiAoc2VyaWUpIHtcbiAgICAgIHRoaXMuc2VyaWVWYWx1ZUNvbnZlcnRlZCA9IHRoaXMuY29udmVydFZhbHVlSW5QZXJjZW50Rm9ybWF0KHNlcmllLnZhbHVlKTtcbiAgICAgIHRoaXMuX3NlcmllID0geyAuLi5zZXJpZSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXJpZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBnZXQgc2VyaWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcmllO1xuICB9XG5cbiAgQFZpZXdDaGlsZCgnZGVzY3JpcHRpb24nLCB7IHN0YXRpYzogZmFsc2UsIHJlYWQ6IEVsZW1lbnRSZWYgfSkgZGVzY3JpcHRpb25FbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBnZXQgaGFzU2VyaWVEZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJpZSAmJiB0aGlzLnNlcmllLmRlc2NyaXB0aW9uO1xuICB9XG5cbiAgZ2V0IGhhc1NlcmllVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VyaWUgJiYgdGhpcy5zZXJpZS52YWx1ZSA+PSAwO1xuICB9XG5cbiAgZ2V0IG1heERlc2NyaXB0aW9uV2lkdGgoKSB7XG4gICAgLy8gRGlmZXJlbsOnYSBjb250ZW1wbGFuZG8gYSBsYXJndXJhIGRvIHBhdGggYmFzZSBlIHBhZGRpbmcgaW50ZXJuby5cbiAgICBjb25zdCBzdWJ0cmFjdGlvbkFyZWEgPSAodGhpcy5nYXVnZVdpZHRoICogcG9DaGFydEdhdWdlU2VyaWVXaWR0aCAqIDIpICogMjtcbiAgICBjb25zdCBkZXNjcmlwdGlvbldpZHRoID0gdGhpcy5nYXVnZVdpZHRoIC0gc3VidHJhY3Rpb25BcmVhO1xuXG4gICAgcmV0dXJuIHsgJ21heC13aWR0aCc6IGAke2Rlc2NyaXB0aW9uV2lkdGh9cHhgIH07XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5jaGVja1RleHREZXNjcmlwdGlvblNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tUZXh0RGVzY3JpcHRpb25TaXplKCkge1xuICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uRWxlbWVudCkge1xuICAgICAgLy8gdG9vbHRpcCBuZWNlc3PDoXJpbyBwYXJhIGNvbnRvcm5hciBjb21wb3J0YW1lbnRvIGluZXNwZXJhZG8gZG8gdG9vbHRpcC5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLmlzRWxsaXBzaXNBY3RpdmUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rpb24uZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFZhbHVlSW5QZXJjZW50Rm9ybWF0KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRlY2ltYWxWYWx1ZSA9IFN0cmluZyhjb252ZXJ0TnVtYmVyVG9EZWNpbWFsKHZhbHVlLCAxKSkucmVwbGFjZSgnLicsICcsJyk7XG4gICAgcmV0dXJuIGAke2RlY2ltYWxWYWx1ZX0lYDtcbiAgfVxuXG4gIHByaXZhdGUgaXNFbGxpcHNpc0FjdGl2ZSgpIHtcbiAgICBjb25zdCBpc0V4Y2VlZGVkV2lkdGggPSB0aGlzLmRlc2NyaXB0aW9uRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIDwgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aDtcblxuICAgIHJldHVybiBpc0V4Y2VlZGVkV2lkdGggPyB0aGlzLnNlcmllLmRlc2NyaXB0aW9uIDogdW5kZWZpbmVkO1xuICB9XG5cbn1cbiJdfQ==