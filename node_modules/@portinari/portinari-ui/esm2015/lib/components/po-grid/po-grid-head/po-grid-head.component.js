import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';
let PoGridHeadComponent = class PoGridHeadComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.align = 'left';
        this.boolean = false;
        this.position = '';
        this.tabIndex = -1;
    }
    set width(value) {
        this._width = value;
    }
    get width() {
        return this._width ? `${this._width}px` : '100%';
    }
};
PoGridHeadComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input('p-align'),
    tslib_1.__metadata("design:type", String)
], PoGridHeadComponent.prototype, "align", void 0);
tslib_1.__decorate([
    Input('p-freeze'),
    tslib_1.__metadata("design:type", Boolean)
], PoGridHeadComponent.prototype, "boolean", void 0);
tslib_1.__decorate([
    Input('p-position'),
    tslib_1.__metadata("design:type", String)
], PoGridHeadComponent.prototype, "position", void 0);
tslib_1.__decorate([
    Input('p-tab-index'),
    tslib_1.__metadata("design:type", Number)
], PoGridHeadComponent.prototype, "tabIndex", void 0);
tslib_1.__decorate([
    Input('p-width'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoGridHeadComponent.prototype, "width", null);
tslib_1.__decorate([
    Input('p-title'),
    tslib_1.__metadata("design:type", String)
], PoGridHeadComponent.prototype, "title", void 0);
PoGridHeadComponent = tslib_1.__decorate([
    Component({
        selector: 'po-grid-head',
        template: "<div>\n  <div [id]=\"position\"\n    class=\"po-grid-head-content po-grid-head-{{ align }}\"\n    tabindex=\"{{ title ? 0 : -1 }}\">\n    <span>{{ title || '&nbsp;' }}</span>\n  </div>\n</div>\n\n"
    }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
], PoGridHeadComponent);
export { PoGridHeadComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZ3JpZC1oZWFkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZ3JpZC9wby1ncmlkLWhlYWQvcG8tZ3JpZC1oZWFkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU0zRixJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQXFCOUIsWUFBb0IsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFqQnRDLFVBQUssR0FBWSxNQUFNLENBQUM7UUFFdkIsWUFBTyxHQUFhLEtBQUssQ0FBQztRQUV4QixhQUFRLEdBQVksRUFBRSxDQUFDO1FBRXRCLGFBQVEsR0FBWSxDQUFDLENBQUMsQ0FBQztJQVdlLENBQUM7SUFUM0MsSUFBSSxLQUFLLENBQUMsS0FBd0I7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUNELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNuRCxDQUFDO0NBTUYsQ0FBQTs7WUFGd0MsaUJBQWlCOztBQWpCdEM7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7a0RBQXlCO0FBRXZCO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7O29EQUEyQjtBQUV4QjtJQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOztxREFBd0I7QUFFdEI7SUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7cURBQXdCO0FBRTNCO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OztnREFFaEI7QUFLaUI7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7a0RBQWdCO0FBbkJ0QixtQkFBbUI7SUFKL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGNBQWM7UUFDeEIsZ05BQTRDO0tBQzdDLENBQUM7NkNBc0J1QyxpQkFBaUI7R0FyQjdDLG1CQUFtQixDQXVCL0I7U0F2QlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1ncmlkLWhlYWQnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tZ3JpZC1oZWFkLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0dyaWRIZWFkQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF93aWR0aDogKHN0cmluZyB8IG51bWJlcik7XG5cbiAgQElucHV0KCdwLWFsaWduJykgYWxpZ24/OiBzdHJpbmcgPSAnbGVmdCc7XG5cbiAgQElucHV0KCdwLWZyZWV6ZScpIGJvb2xlYW4/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgQElucHV0KCdwLXBvc2l0aW9uJykgcG9zaXRpb24/OiBzdHJpbmcgPSAnJztcblxuICBASW5wdXQoJ3AtdGFiLWluZGV4JykgdGFiSW5kZXg/OiBudW1iZXIgPSAtMTtcblxuICBASW5wdXQoJ3Atd2lkdGgnKSBzZXQgd2lkdGgodmFsdWU6IChzdHJpbmcgfCBudW1iZXIpKSB7XG4gICAgdGhpcy5fd2lkdGggPSB2YWx1ZTtcbiAgfVxuICBnZXQgd2lkdGgoKTogKHN0cmluZyB8IG51bWJlcikge1xuICAgIHJldHVybiB0aGlzLl93aWR0aCA/IGAke3RoaXMuX3dpZHRofXB4YCA6ICcxMDAlJztcbiAgfVxuXG4gIEBJbnB1dCgncC10aXRsZScpIHRpdGxlPzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxufVxuIl19