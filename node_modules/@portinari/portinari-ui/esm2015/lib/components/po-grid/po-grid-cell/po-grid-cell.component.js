import * as tslib_1 from "tslib";
import { Component, Input, ViewChild, ElementRef, ChangeDetectorRef, Output, EventEmitter } from '@angular/core';
let PoGridCellComponent = class PoGridCellComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this._value = '';
        this.edit = false;
        this.editValue = '';
        this.align = 'left';
        this.freeze = false;
        this.tabIndex = -1;
        this.position = '';
        this.readonly = false;
        this.required = false;
        this.valueChange = new EventEmitter();
    }
    set width(value) {
        this._width = value;
        if (this.freeze && !this._width) {
            this._width = 100;
        }
    }
    get width() {
        return this._width ? `${this._width}px` : '100%';
    }
    // @Input('p-value') value?: string;
    set value(value) {
        this._value = value;
        this.valueChange.emit(this._value);
    }
    get value() {
        return this._value;
    }
    onKeyDownContent(event) {
        // console.log('onKeyDownContent: ', event);
        // BACKSPACE / DELETE
        if ((!event.ctrlKey) && ((event.keyCode === 8) || (event.keyCode === 46))) {
            if (this.readonly) {
                return;
            }
            event.preventDefault();
            this.value = '';
            return;
        }
        // ENTER
        if (event.keyCode === 13) {
            event.preventDefault();
            this.onEditCell(this.value);
            return;
        }
        // A..Z - 0..9
        if ((event.keyCode >= 65) && (event.keyCode <= 90) || (event.keyCode >= 48) && (event.keyCode <= 57)) {
            event.preventDefault();
            this.onEditCell(event.key);
            return;
        }
    }
    dblclick(event) {
        // console.log('dblclick: ', event);
        event.preventDefault();
        this.onEditCell(this.value);
    }
    onBlurInput(event) {
        // console.log('onBlurInput: ', event);
        this.value = this.editValue;
        this.editValue = undefined;
        this.edit = false;
    }
    onKeyDownInput(event) {
        // console.log('onKeyDownInput: ', event);
        // ENTER
        if (event.keyCode === 13) {
            this.value = this.editValue;
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
        }
        // ESCAPE
        if (event.keyCode === 27) {
            this.editValue = undefined;
            this.edit = false;
            this.changeDetectorRef.detectChanges();
            this.contentElement.nativeElement.focus();
            event.stopPropagation();
        }
    }
    onEditCell(value) {
        if (this.readonly) {
            return;
        }
        this.editValue = value;
        this.edit = true;
        this.changeDetectorRef.detectChanges();
        this.inputElement.nativeElement.focus();
    }
};
PoGridCellComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input('p-align'),
    tslib_1.__metadata("design:type", String)
], PoGridCellComponent.prototype, "align", void 0);
tslib_1.__decorate([
    Input('p-freeze'),
    tslib_1.__metadata("design:type", Boolean)
], PoGridCellComponent.prototype, "freeze", void 0);
tslib_1.__decorate([
    Input('p-tab-index'),
    tslib_1.__metadata("design:type", Number)
], PoGridCellComponent.prototype, "tabIndex", void 0);
tslib_1.__decorate([
    Input('p-position'),
    tslib_1.__metadata("design:type", String)
], PoGridCellComponent.prototype, "position", void 0);
tslib_1.__decorate([
    Input('p-width'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoGridCellComponent.prototype, "width", null);
tslib_1.__decorate([
    Input('p-readonly'),
    tslib_1.__metadata("design:type", Boolean)
], PoGridCellComponent.prototype, "readonly", void 0);
tslib_1.__decorate([
    Input('p-required'),
    tslib_1.__metadata("design:type", Boolean)
], PoGridCellComponent.prototype, "required", void 0);
tslib_1.__decorate([
    Output('p-valueChange'),
    tslib_1.__metadata("design:type", Object)
], PoGridCellComponent.prototype, "valueChange", void 0);
tslib_1.__decorate([
    Input('p-value'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoGridCellComponent.prototype, "value", null);
tslib_1.__decorate([
    ViewChild('inputElement', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoGridCellComponent.prototype, "inputElement", void 0);
tslib_1.__decorate([
    ViewChild('contentElement', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoGridCellComponent.prototype, "contentElement", void 0);
PoGridCellComponent = tslib_1.__decorate([
    Component({
        selector: 'po-grid-cell',
        template: "<div>\n  <ng-container *ngIf=\"edit; then input; else content\"></ng-container>\n\n  <ng-template #content>\n    <div #contentElement\n      [id]=\"position\"\n      class=\"po-grid-cell-content po-grid-cell-{{ align }} {{ !value && required ? 'po-grid-cell-required' : '' }}\"\n      (keydown)=\"onKeyDownContent($event)\"\n      tabindex=\"{{ readonly ? -1 : 0 }}\"\n      (dblclick)=dblclick($event)>\n      <span>{{ value || '&nbsp;' }}</span>\n    </div>\n  </ng-template>\n\n  <ng-template #input>\n    <input\n      [id]=\"position\"\n      #inputElement class=\"po-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown.arrowup)=\"$event.stopPropagation()\"\n      (keydown.arrowdown)=\"$event.stopPropagation()\"\n      (keydown.arrowleft)=\"$event.stopPropagation()\"\n      (keydown.arrowright)=\"$event.stopPropagation()\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (blur)=\"onBlurInput($event)\">\n\n    <!-- <po-input\n      #inputElement class=\"po-grid-cell-input\"\n      [(ngModel)]=\"editValue\"\n      (keydown)=\"onKeyDownInput($event)\"\n      (p-blur)=\"onBlurInput($event)\">\n    </po-input> -->\n  </ng-template>\n</div>\n\n"
    }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
], PoGridCellComponent);
export { PoGridCellComponent };
//# sourceMappingURL=data:application/json;base64,