import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço utilizado para favoritar/desfavoritar uma url no componente po-breadcrumb.
 * A API deve retornar um objeto no formato { isFavorite: booleano, url: string }. Em ambos os métodos, GET e POST este
 * objeto deve ser retornado.
 * Ao alterar o status de favorito, a API deve retornar o objeto acima, com o novo status atualizado.
 * No método POST, existe a possibilidade de ser enviado parâmetros junto com a requisição. Neste caso, o objeto enviado
 * para a API terá o formato: { isFavorite: booleano, url: string, params: {} }, onde params é o objeto que pode ser enviado
 * junto com a requisição.
 *
 */
let PoBreadcrumbFavoriteService = class PoBreadcrumbFavoriteService {
    constructor(http) {
        this.http = http;
    }
    get url() { return this._url; }
    get bodyParams() { return this._bodyParams; }
    configService(url, params, item) {
        this._url = url;
        this._bodyParams = {
            isFavorite: false,
            url: item.link,
            params: params
        };
    }
    sendStatusFavorite(status) {
        this.bodyParams['isFavorite'] = status;
        return this.http.post(this.url, this.bodyParams);
    }
    getFavorite() {
        return this.http.get(this.url, { responseType: 'json', params: { url: this.bodyParams['url'] } });
    }
};
PoBreadcrumbFavoriteService.ctorParameters = () => [
    { type: HttpClient }
];
PoBreadcrumbFavoriteService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], PoBreadcrumbFavoriteService);
export { PoBreadcrumbFavoriteService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWItZmF2b3JpdGUvcG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQzs7Ozs7Ozs7Ozs7OztHQWFHO0FBRUgsSUFBYSwyQkFBMkIsR0FBeEMsTUFBYSwyQkFBMkI7SUFTdEMsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7SUFKekMsSUFBSSxHQUFHLEtBQWEsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUV2QyxJQUFJLFVBQVUsS0FBYSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBSXJELGFBQWEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUk7UUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7UUFDaEIsSUFBSSxDQUFDLFdBQVcsR0FBRztZQUNqQixVQUFVLEVBQUUsS0FBSztZQUNqQixHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZCxNQUFNLEVBQUUsTUFBTTtTQUNmLENBQUM7SUFDSixDQUFDO0lBRUQsa0JBQWtCLENBQUMsTUFBTTtRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQztJQUNuRyxDQUFDO0NBQ0YsQ0FBQTs7WUFuQjJCLFVBQVU7O0FBVHpCLDJCQUEyQjtJQUR2QyxVQUFVLEVBQUU7NkNBVWUsVUFBVTtHQVR6QiwyQkFBMkIsQ0E0QnZDO1NBNUJZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyB1dGlsaXphZG8gcGFyYSBmYXZvcml0YXIvZGVzZmF2b3JpdGFyIHVtYSB1cmwgbm8gY29tcG9uZW50ZSBwby1icmVhZGNydW1iLlxuICogQSBBUEkgZGV2ZSByZXRvcm5hciB1bSBvYmpldG8gbm8gZm9ybWF0byB7IGlzRmF2b3JpdGU6IGJvb2xlYW5vLCB1cmw6IHN0cmluZyB9LiBFbSBhbWJvcyBvcyBtw6l0b2RvcywgR0VUIGUgUE9TVCBlc3RlXG4gKiBvYmpldG8gZGV2ZSBzZXIgcmV0b3JuYWRvLlxuICogQW8gYWx0ZXJhciBvIHN0YXR1cyBkZSBmYXZvcml0bywgYSBBUEkgZGV2ZSByZXRvcm5hciBvIG9iamV0byBhY2ltYSwgY29tIG8gbm92byBzdGF0dXMgYXR1YWxpemFkby5cbiAqIE5vIG3DqXRvZG8gUE9TVCwgZXhpc3RlIGEgcG9zc2liaWxpZGFkZSBkZSBzZXIgZW52aWFkbyBwYXLDom1ldHJvcyBqdW50byBjb20gYSByZXF1aXNpw6fDo28uIE5lc3RlIGNhc28sIG8gb2JqZXRvIGVudmlhZG9cbiAqIHBhcmEgYSBBUEkgdGVyw6EgbyBmb3JtYXRvOiB7IGlzRmF2b3JpdGU6IGJvb2xlYW5vLCB1cmw6IHN0cmluZywgcGFyYW1zOiB7fSB9LCBvbmRlIHBhcmFtcyDDqSBvIG9iamV0byBxdWUgcG9kZSBzZXIgZW52aWFkb1xuICoganVudG8gY29tIGEgcmVxdWlzacOnw6NvLlxuICpcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQnJlYWRjcnVtYkZhdm9yaXRlU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBfdXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgX2JvZHlQYXJhbXM6IG9iamVjdDtcblxuICBnZXQgdXJsKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLl91cmw7IH1cblxuICBnZXQgYm9keVBhcmFtcygpOiBvYmplY3QgeyByZXR1cm4gdGhpcy5fYm9keVBhcmFtczsgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgY29uZmlnU2VydmljZSh1cmwsIHBhcmFtcywgaXRlbSkge1xuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLl9ib2R5UGFyYW1zID0ge1xuICAgICAgaXNGYXZvcml0ZTogZmFsc2UsXG4gICAgICB1cmw6IGl0ZW0ubGluayxcbiAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgfTtcbiAgfVxuXG4gIHNlbmRTdGF0dXNGYXZvcml0ZShzdGF0dXMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHRoaXMuYm9keVBhcmFtc1snaXNGYXZvcml0ZSddID0gc3RhdHVzO1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLnVybCwgdGhpcy5ib2R5UGFyYW1zKTtcbiAgfVxuXG4gIGdldEZhdm9yaXRlKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy51cmwsIHsgcmVzcG9uc2VUeXBlOiAnanNvbicsIHBhcmFtczogeyB1cmw6IHRoaXMuYm9keVBhcmFtc1sndXJsJ10gfX0pO1xuICB9XG59XG4iXX0=