import * as tslib_1 from "tslib";
import { AfterViewInit, Component, DoCheck, ElementRef, IterableDiffers, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { PoBreadcrumbBaseComponent } from './po-breadcrumb-base.component';
/**
 * @docsExtends PoBreadcrumbBaseComponent
 *
 * @example
 *
 * <example name="po-breadcrumb-basic" title="Portinari Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="Portinari Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
let PoBreadcrumbComponent = class PoBreadcrumbComponent extends PoBreadcrumbBaseComponent {
    constructor(differs, element, renderer) {
        super();
        this.element = element;
        this.renderer = renderer;
        this.showDropdown = false;
        this.showDropdownToggle = false;
        this._breadcrumbItemsLenght = 0;
        this.calculatedElement = false;
        this.hiddenWithoutResize = false;
        this.initialized = false;
        this.wasClickedonDropdown = (event) => {
            const clickedOutIconDropdown = this.checkClickOutElement(event, this.dropdownIcon);
            if (clickedOutIconDropdown) {
                this.showDropdown = false;
                this.removeClickoutListener();
            }
        };
        this.differ = differs.find([]).create(null);
    }
    ngAfterViewInit() {
        this.initialized = true;
        this.initializeResizeListener();
    }
    ngDoCheck() {
        const breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se vis√≠vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    }
    ngOnDestroy() {
        this.removeClickoutListener();
        this.removeResizeListener();
    }
    toggleDropdown() {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    }
    checkClickOutElement(event, element) {
        return element && !element.nativeElement.contains(event.target);
    }
    checkChangeOnItems() {
        if (this.differ) {
            const changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    }
    calcBreadcrumb() {
        const breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        const breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    }
    getBreadcrumbFavoriteWidth() {
        return this.favoriteService ? this.element.nativeElement
            .querySelector('.po-breadcrumb-favorite').offsetWidth + 20 : 0;
    }
    getBreadcrumbWidth(breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
    }
    calcBreadcrumbItemsWidth() {
        const breadcrumbItem = this.element.nativeElement
            .querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map(breadcrumb => breadcrumb['offsetWidth'])
            .reduce((a, b) => a + b, 16);
    }
    enableBreadcrumbResponsive() {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    }
    disableBreadcrumbResponsive() {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            if (this.calculatedElement && !this.hiddenWithoutResize && this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                this.hiddenWithoutResize = true;
            }
            else {
                this.calcBreadcrumb();
            }
        }, 50);
    }
    initBreadcrumbSize() {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    }
    initializeClickoutListener() {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    }
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    removeClickoutListener() {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    }
    removeResizeListener() {
        this.resizeListener();
    }
};
PoBreadcrumbComponent.ctorParameters = () => [
    { type: IterableDiffers },
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    ViewChild('breadcrumb', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoBreadcrumbComponent.prototype, "breadcrumbElement", void 0);
tslib_1.__decorate([
    ViewChild('dropdownIcon', { read: ElementRef, static: false }),
    tslib_1.__metadata("design:type", ElementRef)
], PoBreadcrumbComponent.prototype, "dropdownIcon", void 0);
PoBreadcrumbComponent = tslib_1.__decorate([
    Component({
        selector: 'po-breadcrumb',
        template: "<div class=\"po-breadcrumb\" #breadcrumb>\n\n  <ul class=\"po-breadcrumb-items\">\n\n    <li #dropdownIcon\n      *ngIf=\"showDropdownToggle\"\n      class=\"po-breadcrumb-item po-clickable\"\n      (click)=\"toggleDropdown()\">\n\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\n      <div class=\"po-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView, let itemIndex = index;\">\n      <po-breadcrumb-item\n        [p-action]=\"item.action\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        [p-item-active]=\"itemIndex === (itemsView.length - 1)\">\n      </po-breadcrumb-item>\n    </div>\n\n  </ul>\n\n  <po-breadcrumb-favorite *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\">\n  </po-breadcrumb-favorite>\n\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\"\n    [p-items]=\"dropdownItems\">\n  </po-breadcrumb-dropdown>\n\n</div>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [IterableDiffers, ElementRef, Renderer2])
], PoBreadcrumbComponent);
export { PoBreadcrumbComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWJyZWFkY3J1bWIvcG8tYnJlYWRjcnVtYi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhJLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRzNFOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBS0gsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBc0IsU0FBUSx5QkFBeUI7SUFnQmxFLFlBQVksT0FBd0IsRUFBVSxPQUFtQixFQUFTLFFBQW1CO1FBQzNGLEtBQUssRUFBRSxDQUFDO1FBRG9DLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBZDdGLGlCQUFZLEdBQVksS0FBSyxDQUFDO1FBQzlCLHVCQUFrQixHQUFZLEtBQUssQ0FBQztRQUc1QiwyQkFBc0IsR0FBVyxDQUFDLENBQUM7UUFDbkMsc0JBQWlCLEdBQUcsS0FBSyxDQUFDO1FBRTFCLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQUM1QixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQTRDcEIseUJBQW9CLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUU7WUFDbkQsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUVuRixJQUFJLHNCQUFzQixFQUFFO2dCQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztnQkFDMUIsSUFBSSxDQUFDLHNCQUFzQixFQUFF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Q0FpQnFCLGVBQWUsRUFBbUIsVUFBVSxFQUFtQixTQUFTO0dBaEJsRixxQkFBcUIsQ0E2SmpDO1NBN0pZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRG9DaGVjaywgRWxlbWVudFJlZiwgSXRlcmFibGVEaWZmZXJzLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQnJlYWRjcnVtYkJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9CcmVhZGNydW1iSXRlbSB9IGZyb20gJy4vcG8tYnJlYWRjcnVtYi1pdGVtLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvQnJlYWRjcnVtYkJhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1icmVhZGNydW1iLWJhc2ljXCIgdGl0bGU9XCJQb3J0aW5hcmkgQnJlYWRjcnVtYiBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnJlYWRjcnVtYi1iYXNpYy9zYW1wbGUtcG8tYnJlYWRjcnVtYi1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1icmVhZGNydW1iLWJhc2ljL3NhbXBsZS1wby1icmVhZGNydW1iLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWJyZWFkY3J1bWItbGFic1wiIHRpdGxlPVwiUG9ydGluYXJpIEJyZWFkY3J1bWIgTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnJlYWRjcnVtYi1sYWJzL3NhbXBsZS1wby1icmVhZGNydW1iLWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tYnJlYWRjcnVtYi1sYWJzL3NhbXBsZS1wby1icmVhZGNydW1iLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tYnJlYWRjcnVtYicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1icmVhZGNydW1iLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJDb21wb25lbnQgZXh0ZW5kcyBQb0JyZWFkY3J1bWJCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgT25EZXN0cm95IHtcblxuICBzaG93RHJvcGRvd246IGJvb2xlYW4gPSBmYWxzZTtcbiAgc2hvd0Ryb3Bkb3duVG9nZ2xlOiBib29sZWFuID0gZmFsc2U7XG4gIGRyb3Bkb3duSXRlbXM6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+O1xuXG4gIHByaXZhdGUgX2JyZWFkY3J1bWJJdGVtc0xlbmdodDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBjYWxjdWxhdGVkRWxlbWVudCA9IGZhbHNlO1xuICBwcml2YXRlIGRpZmZlcjtcbiAgcHJpdmF0ZSBoaWRkZW5XaXRob3V0UmVzaXplID0gZmFsc2U7XG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSB0aW1lb3V0UmVzaXplO1xuXG4gIEBWaWV3Q2hpbGQoJ2JyZWFkY3J1bWInLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSBicmVhZGNydW1iRWxlbWVudDogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnZHJvcGRvd25JY29uJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IGZhbHNlIH0pIGRyb3Bkb3duSWNvbjogRWxlbWVudFJlZjtcblxuICBjb25zdHJ1Y3RvcihkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHVibGljIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGlmZmVyID0gZGlmZmVycy5maW5kKFtdKS5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICB0aGlzLmluaXRpYWxpemVSZXNpemVMaXN0ZW5lcigpO1xuICB9XG5cbiAgbmdEb0NoZWNrKCkge1xuICAgIGNvbnN0IGJyZWFkY3J1bWJXaWR0aCA9IHRoaXMuYnJlYWRjcnVtYkVsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aDtcblxuICAgIC8vIFBlcm1pdGUgcXVlIG9zIGRpc2NsYWltZXJzIHNlamFtIGNhbGN1bGFkb3MgbmEgcHJpbWVpcmEgdmV6IHF1ZSBvIGNvbXBvbmVudGUgdG9ybmEtc2Ugdmlzw612ZWwsXG4gICAgLy8gZXZpdGFuZG8gY29tIGlzc28sIHByb2JsZW1hcyBjb20gVGFicyBvdSBEaXZzIHF1ZSBpbmljaWVtIGVzY29uZGlkYXMuXG4gICAgaWYgKGJyZWFkY3J1bWJXaWR0aCAmJiAhdGhpcy5jYWxjdWxhdGVkRWxlbWVudCAmJiB0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmluaXRCcmVhZGNydW1iU2l6ZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmhpZGRlbldpdGhvdXRSZXNpemUpIHtcbiAgICAgIHRoaXMuZGVib3VuY2VSZXNpemUoKTtcbiAgICAgIHRoaXMuaGlkZGVuV2l0aG91dFJlc2l6ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tDaGFuZ2VPbkl0ZW1zKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbW92ZUNsaWNrb3V0TGlzdGVuZXIoKTtcbiAgICB0aGlzLnJlbW92ZVJlc2l6ZUxpc3RlbmVyKCk7XG4gIH1cblxuICB0b2dnbGVEcm9wZG93bigpIHtcbiAgICB0aGlzLnNob3dEcm9wZG93biA9ICF0aGlzLnNob3dEcm9wZG93bjtcbiAgICB0aGlzLmluaXRpYWxpemVDbGlja291dExpc3RlbmVyKCk7XG4gIH1cblxuICBwcml2YXRlIHdhc0NsaWNrZWRvbkRyb3Bkb3duID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgY2xpY2tlZE91dEljb25Ecm9wZG93biA9IHRoaXMuY2hlY2tDbGlja091dEVsZW1lbnQoZXZlbnQsIHRoaXMuZHJvcGRvd25JY29uKTtcblxuICAgIGlmIChjbGlja2VkT3V0SWNvbkRyb3Bkb3duKSB7XG4gICAgICB0aGlzLnNob3dEcm9wZG93biA9IGZhbHNlO1xuICAgICAgdGhpcy5yZW1vdmVDbGlja291dExpc3RlbmVyKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0NsaWNrT3V0RWxlbWVudChldmVudCwgZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50ICYmICFlbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tDaGFuZ2VPbkl0ZW1zKCkge1xuICAgIGlmICh0aGlzLmRpZmZlcikge1xuICAgICAgY29uc3QgY2hhbmdlcyA9IHRoaXMuZGlmZmVyLmRpZmYodGhpcy5pdGVtcyk7XG4gICAgICBpZiAoY2hhbmdlcykge1xuICAgICAgICB0aGlzLmNhbGNCcmVhZGNydW1iSXRlbXNXaWR0aCgpO1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZWRFbGVtZW50ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjYWxjQnJlYWRjcnVtYigpIHtcbiAgICBjb25zdCBicmVhZGNydW1iRmF2b3JpdGUgPSB0aGlzLmdldEJyZWFkY3J1bWJGYXZvcml0ZVdpZHRoKCk7XG4gICAgY29uc3QgYnJlYWRjcnVtYiA9IHRoaXMuZ2V0QnJlYWRjcnVtYldpZHRoKGJyZWFkY3J1bWJGYXZvcml0ZSk7XG5cbiAgICBpZiAoYnJlYWRjcnVtYiA8PSB0aGlzLl9icmVhZGNydW1iSXRlbXNMZW5naHQpIHtcbiAgICAgIHRoaXMuZW5hYmxlQnJlYWRjcnVtYlJlc3BvbnNpdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlQnJlYWRjcnVtYlJlc3BvbnNpdmUoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEJyZWFkY3J1bWJGYXZvcml0ZVdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLmZhdm9yaXRlU2VydmljZSA/IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50XG4gICAgICAucXVlcnlTZWxlY3RvcignLnBvLWJyZWFkY3J1bWItZmF2b3JpdGUnKS5vZmZzZXRXaWR0aCArIDIwIDogMDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0QnJlYWRjcnVtYldpZHRoKGJyZWFkY3J1bWJGYXZvcml0ZSkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucG8tYnJlYWRjcnVtYicpLm9mZnNldFdpZHRoIC0gYnJlYWRjcnVtYkZhdm9yaXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBjYWxjQnJlYWRjcnVtYkl0ZW1zV2lkdGgoKSB7XG4gICAgY29uc3QgYnJlYWRjcnVtYkl0ZW0gPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wby1icmVhZGNydW1iLWl0ZW0sIC5wby1icmVhZGNydW1iLWl0ZW0tdW5jbGlja2FibGUnKTtcblxuICAgIHRoaXMuX2JyZWFkY3J1bWJJdGVtc0xlbmdodCA9IEFycmF5LmZyb20oYnJlYWRjcnVtYkl0ZW0pXG4gICAgICAubWFwKGJyZWFkY3J1bWIgPT4gYnJlYWRjcnVtYlsnb2Zmc2V0V2lkdGgnXSlcbiAgICAgIC5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAxNik7XG4gIH1cblxuICBwcml2YXRlIGVuYWJsZUJyZWFkY3J1bWJSZXNwb25zaXZlKCkge1xuICAgIHRoaXMuc2hvd0Ryb3Bkb3duVG9nZ2xlID0gdHJ1ZTtcbiAgICB0aGlzLml0ZW1zVmlldyA9IHRoaXMuaXRlbXMuc2xpY2UoLTIpO1xuICAgIHRoaXMuZHJvcGRvd25JdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UoMCwgLTIpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzYWJsZUJyZWFkY3J1bWJSZXNwb25zaXZlKCkge1xuICAgIHRoaXMuc2hvd0Ryb3Bkb3duVG9nZ2xlID0gZmFsc2U7XG4gICAgdGhpcy5pdGVtc1ZpZXcgPSBbXS5jb25jYXQodGhpcy5pdGVtcyk7XG4gICAgdGhpcy5zaG93RHJvcGRvd24gPSBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgZGVib3VuY2VSZXNpemUoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFJlc2l6ZSk7XG4gICAgdGhpcy50aW1lb3V0UmVzaXplID0gc2V0VGltZW91dCgoKSA9PiB7XG5cbiAgICAgIGlmICh0aGlzLmNhbGN1bGF0ZWRFbGVtZW50ICYmICF0aGlzLmhpZGRlbldpdGhvdXRSZXNpemUgJiYgdGhpcy5icmVhZGNydW1iRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoID09PSAwKSB7XG4gICAgICAgIHRoaXMuaGlkZGVuV2l0aG91dFJlc2l6ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhbGNCcmVhZGNydW1iKCk7XG4gICAgICB9XG5cbiAgICB9LCA1MCk7XG4gIH1cblxuICBwcml2YXRlIGluaXRCcmVhZGNydW1iU2l6ZSgpIHtcbiAgICB0aGlzLmNhbGNCcmVhZGNydW1iSXRlbXNXaWR0aCgpO1xuICAgIHRoaXMuY2FsY0JyZWFkY3J1bWIoKTtcbiAgICB0aGlzLmNhbGN1bGF0ZWRFbGVtZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUNsaWNrb3V0TGlzdGVuZXIoKSB7XG4gICAgdGhpcy5jbGlja291dExpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ2RvY3VtZW50JywgJ2NsaWNrJywgdGhpcy53YXNDbGlja2Vkb25Ecm9wZG93bik7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVSZXNpemVMaXN0ZW5lcigpIHtcbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ3dpbmRvdycsICdyZXNpemUnLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIHRoaXMuZGVib3VuY2VSZXNpemUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlQ2xpY2tvdXRMaXN0ZW5lcigpIHtcbiAgICBpZiAodGhpcy5jbGlja291dExpc3RlbmVyKSB7XG4gICAgICB0aGlzLmNsaWNrb3V0TGlzdGVuZXIoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVJlc2l6ZUxpc3RlbmVyKCkge1xuICAgIHRoaXMucmVzaXplTGlzdGVuZXIoKTtcbiAgfVxuXG59XG4iXX0=