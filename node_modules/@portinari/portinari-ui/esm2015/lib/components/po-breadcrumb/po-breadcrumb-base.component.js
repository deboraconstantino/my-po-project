import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
export class PoBreadcrumbBaseComponent {
    constructor() {
        this.itemsView = [];
        this._items = [];
    }
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
    }
    get items() {
        return this._items;
    }
}
tslib_1.__decorate([
    Input('p-favorite-service'),
    tslib_1.__metadata("design:type", String)
], PoBreadcrumbBaseComponent.prototype, "favoriteService", void 0);
tslib_1.__decorate([
    Input('p-items'),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], PoBreadcrumbBaseComponent.prototype, "items", null);
tslib_1.__decorate([
    Input('p-params-service'),
    tslib_1.__metadata("design:type", Object)
], PoBreadcrumbBaseComponent.prototype, "paramsService", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSXRDOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0gsTUFBTSxPQUFPLHlCQUF5QjtJQUF0QztRQUVFLGNBQVMsR0FBNEIsRUFBRSxDQUFDO1FBQ2hDLFdBQU0sR0FBNEIsRUFBRSxDQUFDO0lBaUcvQyxDQUFDO0lBaENDOzs7Ozs7Ozs7T0FTRztJQUNlLElBQUksS0FBSyxDQUFDLEtBQThCO1FBQ3hELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7Q0FlRjtBQWxDOEI7SUFBNUIsS0FBSyxDQUFDLG9CQUFvQixDQUFDOztrRUFBMEI7QUFZcEM7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQztzQ0FBa0IsS0FBSzs2Q0FBTCxLQUFLO3NEQUd2QztBQWEwQjtJQUExQixLQUFLLENBQUMsa0JBQWtCLENBQUM7O2dFQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuL3BvLWJyZWFkY3J1bWItaXRlbS5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBnZXJhIHVtYSBlc3RydXR1cmEgZGUgbmF2ZWdhw6fDo28gcXVlIGFwcmVzZW50YSBhbyB1c3XDoXJpbyBhIGxvY2FsaXphw6fDo29cbiAqIGRhIFVSTCBhdHVhbCwgZXhpYmluZG8gYXMgYW50ZWNlc3NvcmFzIGNvbmZvcm1lIMOpIHJlYWxpemFkbyBhIG5hdmVnYcOnw6NvIG5hIGFwbGljYcOnw6NvLlxuICpcbiAqIFF1YW5kbyBuw6NvIGhvdXZlciBlc3Bhw6dhbWVudG8gc3VmaWNpZW50ZSBwYXJhIGV4aWJpLWzDoXMsIG8gY29tcG9uZW50ZSBzZSBlbmNhcnJlZ2EgdGFtYsOpbVxuICogZGUgYWdydXBhciBhcyBVUkxzIGFudGVjZXNzb3JhcywgZ2VyYW5kbyBhc3NpbSB1bSDDrWNvbmUgcXVlIHBlcm1pdGUgYSB2aXN1YWxpemHDp8OjbyBlbSBjYXNjYXRhLlxuICpcbiAqIENhc28gdW0gZW5kZXJlw6dvIHNlamEgZXNwZWNpZmljYWRvIG5hIHByb3ByaWVkYWRlIGBwLWZhdm9yaXRlLXNlcnZpY2VgLCBvIGNvbXBvbmVudGUgcGVybWl0ZSBhbyB1c3XDoXJpb1xuICogZmF2b3JpdGFyIGEgVVJMLlxuICpcbiAqIEhhdmVuZG8gbmVjZXNzaWRhZGUgZGUgaW5jbHVpciBwYXLDom1ldHJvcyBuYSByZXF1aXNpw6fDo28gZG8gc2VydmnDp28sXG4gKiBvIGNvbXBvbmVudGUgZGlzcMO1ZSBkYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWAgcXVlIHJlY2ViZSB1bSBvYmpldG8gY29udGVuZG8gYXMgaW5mb3JtYcOnw7Vlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvQnJlYWRjcnVtYkJhc2VDb21wb25lbnQge1xuXG4gIGl0ZW1zVmlldzogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT4gPSBbXTtcbiAgcHJpdmF0ZSBfaXRlbXM6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+ID0gW107XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUGVybWl0ZSBkZWZpbmlyIHVtYSBVUkwgbm8gY29tcG9uZW50ZSBgcG8tYnJlYWRjcnVtYmAgcGFyYSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyLlxuICAgKiA+IFBhcmEgdXRpbGl6YXIgZXN0YSBwcm9wcmllZGFkZSwgbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkYSBsaXN0YSBkZSBpdGVtcyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AgZGV2ZSB0ZXIgdW0gbGluayBpbmZvcm1hZG8uXG4gICAqXG4gICAqID4gQSBBUEkgZGV2ZSBlc3RhciBwcmVwYXJhZGEgcGFyYSByZXRvcm5hciB1bSBvYmpldG8gbm8gZm9ybWF0byBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gLlxuICAgKlxuICAgKiBBbyBpbmljaWFyLCBvIGBwby1icmVhZGNydW1iYCBmYXogdW0gR0VUIG5hIFVSTCBkZWZpbmlkYSBuYSBwcm9wcmllZGFkZSBgcC1mYXZvcml0ZS1zZXJ2aWNlYCBlIGRldmUgcmV0b3JuYXIgYSBwcm9wcmllZGFkZVxuICAgKiBgeyBpc0Zhdm9yaXRlOiBib29sZWFuIH1gIGRvIMO6bHRpbW8gYFBvQnJlYWRjcnVtYkl0ZW1gIGRlZmluaWRvIG5hIGxpc3RhIGRlIGl0ZW5zIGRhIHByb3ByaWVkYWRlIGBwLWl0ZW1zYC5cbiAgICpcbiAgICogQW8gY2xpY2FyIGVtIGZhdm9yaXRhciBvdSBkZXNmYXZvcml0YXIgbyBgcG8tYnJlYWRjcnVtYmAgZmF6IHVtIFBPU1QgY29tIG8gbGluayBlIGEgcHJvcHJpZWRhZGUgYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YFxuICAgKiBkZWZpbmlkb3Mgbm8gw7psdGltbyBpdGVtIGRhIHByb3ByaWVkYWRlIGBwLWl0ZW1zYC5cbiAgICpcbiAgICogPiBDYXNvIGFsZ3VtIHBhcsOibWV0cm8gc2VqYSBkZWZpbmlkbyBuYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWAsIG8gbWVzbW8gc2Vyw6EgZW52aWFkbyBwYXJhIGEgQVBJIGUgcmV0b3JuYXLDoVxuICAgKiBhcMOzcyBmYXplciB1bSBHRVQgb3UgUE9TVC5cbiAgICpcbiAgICogRXhlbXBsbyBkZSBVUkwgY29udGVuZG8gbyBzZXJ2acOnbyBkZSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyOlxuICAgKlxuICAgKiBgYGBcbiAgICogaHR0cHM6Ly9wb3J0aW5hcmkuaW8vc2FtcGxlL2FwaS9mYXZvcml0ZVxuICAgKiBgYGBcbiAgICpcbiAgICogQW8gZmF6ZXIgbyBHRVQgbyBgcG8tYnJlYWRjcnVtYmAgY29uY2F0ZW5hIG8gbGluayBjb20gYSBVUkwgZGUgc2VydmnDp28uIEV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiBHRVQgaHR0cDovLzxkb21haW4+L2FwaS9mYXZvcml0ZT91cmw9L2V4YW1wbGVcbiAgICogYGBgXG4gICAqXG4gICAqIGBgYFxuICAgKiBHRVQgaHR0cDovL3BvLnBvcnRpbmFyaS5jb20uYnIvc2FtcGxlL2FwaS9mYXZvcml0ZT91cmw9L2V4YW1wbGVcbiAgICogYGBgXG4gICAqXG4gICAqIGBgYFxuICAgKiBQT1NUXG4gICAqIHBheWxvYWQ6IHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiAnL2V4YW1wbGUnIH1cbiAgICogYGBgXG4gICAqXG4gICAqIENhc28gcG9zc3VhIHBhcsOibWV0cm9zIGRlZmluaWRvcyBuYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWA6XG4gICAqXG4gICAqIGBgYFxuICAgKiBQT1NUXG4gICAqIHBheWxvYWQ6IHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIsIHBhcmFtczogXCJ7IGlkOiAxNCwgdXNlcjogJ2Rldi5wb3J0aW5hcmknIH1cIiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBFeGVtcGxvcyBkZSByZXRvcm5vOlxuICAgKlxuICAgKiBgYGBcbiAgICogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6IFwiL2V4YW1wbGVcIiB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogeyBpc0Zhdm9yaXRlOiBmYWxzZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiLCBwYXJhbXM6IFwieyBpZDogMTQsIHVzZXI6ICdkZXYucG9ydGluYXJpJyB9XCIgfVxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1mYXZvcml0ZS1zZXJ2aWNlJykgZmF2b3JpdGVTZXJ2aWNlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTGlzdGEgZGUgaXRlbnMgZG8gX2JyZWFkY3J1bWJfLlxuICAgKlxuICAgKiAqKkV4ZW1wbG86KipcbiAgICogYGBgXG4gICAqIHsgbGFiZWw6ICdQbyBQb3J0YWwnLCBsaW5rOiAncG9ydGFsJyB9XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLWl0ZW1zJykgc2V0IGl0ZW1zKGl0ZW1zOiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPikge1xuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgdGhpcy5pdGVtc1ZpZXcgPSBbXS5jb25jYXQoaXRlbXMpO1xuICB9XG5cbiAgZ2V0IGl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLl9pdGVtcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBxdWUgcG9zc2liaWxpdGEgbyBlbnZpbyBkZSBwYXLDom1ldHJvcyBhZGljaW9uYWlzIMOgIHJlcXVpc2nDp8Ojby5cbiAgICovXG4gIEBJbnB1dCgncC1wYXJhbXMtc2VydmljZScpIHBhcmFtc1NlcnZpY2U/OiBvYmplY3Q7XG5cbiAgcHJvdGVjdGVkIGNsaWNrb3V0TGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgcHJvdGVjdGVkIHJlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xuXG59XG4iXX0=