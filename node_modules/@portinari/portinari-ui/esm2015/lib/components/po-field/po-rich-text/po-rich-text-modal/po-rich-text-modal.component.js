import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Output, ViewChild } from '@angular/core';
import { NgForm } from '@angular/forms';
import { convertImageToBase64, isExternalLink, isIE } from '../../../../utils/util';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { PoModalComponent } from '../../../po-modal';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
import { PoRichTextModalType } from '../enums/po-rich-text-modal-type.enum';
import { PoUploadComponent } from '../../po-upload/po-upload.component';
const uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
let PoRichTextModalComponent = class PoRichTextModalComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.selection = document.getSelection();
        this.uploadRestrictions = {
            allowedExtensions: uploadRestrictions
        };
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: () => this.insertElementRef()
        };
        this.modalLinkConfirmAction = {
            label: this.linkConfirmAction(),
            disabled: true,
            action: () => this.isLinkEditing ? this.toEditLink() : this.toInsertLink(this.urlLink, this.urlLinkText)
        };
        this.command = new EventEmitter();
        this.linkEditing = new EventEmitter();
    }
    get modalTitle() {
        if (this.modalType === 'image') {
            return this.literals.insertImage;
        }
        return this.linkConfirmAction();
    }
    get isUploadValid() {
        return !!(this.uploadModel && this.uploadModel.length);
    }
    get isUrlValid() {
        return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
    }
    get modalPrimaryAction() {
        return this.modalType === 'image' ? this.modalConfirmAction : this.modalLinkConfirmAction;
    }
    convertToBase64() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.isUploadValid) {
                const uploadImage = this.uploadModel[0].rawFile;
                return yield convertImageToBase64(uploadImage);
            }
        });
    }
    linkConfirmAction() {
        return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
    }
    emitCommand(value) {
        let command;
        if (value && this.modalType === PoRichTextModalType.Image) {
            command = 'insertImage';
            this.command.emit(({ command, value }));
        }
    }
    formModelValidate() {
        return this.modalLinkConfirmAction.disabled = this.modalLinkForm && this.modalLinkForm.invalid;
    }
    insertElementRef() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            let uploadImage;
            if (this.modalType === PoRichTextModalType.Image && !this.urlImage) {
                uploadImage = yield this.convertToBase64();
            }
            this.retrieveCursorPosition();
            this.modal.close();
            if (this.isUrlValid || this.isUploadValid) {
                this.emitCommand(this.urlImage || uploadImage);
            }
            this.cleanUpFields();
        });
    }
    openModal(type) {
        this.modalType = type;
        this.saveCursorPosition();
        if (this.modalType === PoRichTextModalType.Link) {
            this.prepareModalForLink();
            this.modalLinkConfirmAction.label = this.linkConfirmAction();
        }
        this.modal.open();
    }
    selectedLink(event) {
        this.isSelectedLink = !!event;
        this.linkElement = event;
    }
    checkIfIsEmpty(urlLink, urlLinkText) {
        return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
    }
    cleanUpFields() {
        this.urlImage = undefined;
        this.urlLink = undefined;
        this.urlLinkText = undefined;
        this.uploadModel = undefined;
        this.isLinkEditing = false;
        this.isSelectedLink = false;
        this.linkElement = undefined;
    }
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    prepareModalForLink() {
        this.saveSelectionText();
        if (this.modalLinkForm) {
            this.formReset(this.modalLinkForm.control);
        }
        setTimeout(() => { this.formModelValidate(); });
        if (this.isSelectedLink) {
            this.isLinkEditing = true;
            this.setLinkEditableForModal();
        }
        this.linkEditing.emit(this.isLinkEditing);
    }
    restoreSelection() {
        if (this.savedSelection) {
            if (this.selection) {
                this.selection.removeAllRanges();
                this.selection.addRange(this.savedSelection);
            }
            return true;
        }
        else {
            return false;
        }
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
    saveSelectionText() {
        if (this.selection.anchorNode !== null) {
            this.savedSelection = this.selection.getRangeAt(0);
            this.urlLinkText = this.selection.toString();
        }
        else {
            return null;
        }
    }
    setLinkEditableForModal() {
        this.urlLinkText = this.linkElement.innerText;
        this.urlLink = this.linkElement.getAttribute('href');
    }
    toEditLink() {
        if (isIE()) {
            this.linkElement.parentNode.removeChild(this.linkElement);
        }
        else {
            this.linkElement.remove();
        }
        this.toInsertLink(this.urlLink, this.urlLinkText);
    }
    toInsertLink(urlLink, urlLinkText) {
        this.modal.close();
        this.restoreSelection();
        const urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
        const urlAsExternalLink = isExternalLink(urlLink) ? urlLink : `http://${urlLink}`;
        const command = 'InsertHTML';
        const value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
        this.command.emit({ command, value });
        this.cleanUpFields();
    }
};
PoRichTextModalComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
tslib_1.__decorate([
    ViewChild('modal', { static: true }),
    tslib_1.__metadata("design:type", PoModalComponent)
], PoRichTextModalComponent.prototype, "modal", void 0);
tslib_1.__decorate([
    ViewChild('modalImageForm', { static: false }),
    tslib_1.__metadata("design:type", NgForm)
], PoRichTextModalComponent.prototype, "modalImageForm", void 0);
tslib_1.__decorate([
    ViewChild('upload', { static: true }),
    tslib_1.__metadata("design:type", PoUploadComponent)
], PoRichTextModalComponent.prototype, "upload", void 0);
tslib_1.__decorate([
    ViewChild('modalImage', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoRichTextModalComponent.prototype, "modalImage", void 0);
tslib_1.__decorate([
    ViewChild('modalLink', { static: true }),
    tslib_1.__metadata("design:type", PoModalComponent)
], PoRichTextModalComponent.prototype, "modalLink", void 0);
tslib_1.__decorate([
    ViewChild('modalLinkForm', { static: false }),
    tslib_1.__metadata("design:type", NgForm)
], PoRichTextModalComponent.prototype, "modalLinkForm", void 0);
tslib_1.__decorate([
    Output('p-command'),
    tslib_1.__metadata("design:type", Object)
], PoRichTextModalComponent.prototype, "command", void 0);
tslib_1.__decorate([
    Output('p-link-editing'),
    tslib_1.__metadata("design:type", Object)
], PoRichTextModalComponent.prototype, "linkEditing", void 0);
PoRichTextModalComponent = tslib_1.__decorate([
    Component({
        selector: 'po-rich-text-modal',
        template: "<po-modal #modal\r\n  p-hide-close\r\n  [p-primary-action]=\"modalPrimaryAction\"\r\n  [p-secondary-action]=\"modalCancelAction\"\r\n  [p-title]=\"modalTitle\">\r\n\r\n  <ng-container *ngTemplateOutlet=\"modalType === 'image' ? modalImage : modalLink\"></ng-container>\r\n</po-modal>\r\n\r\n<ng-template #modalImage>\r\n  <form #modalImageForm=\"ngForm\">\r\n    <div class=\"po-row\">\r\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\r\n      <po-upload #upload\r\n        class=\"po-md-12\"\r\n        name=\"upload\"\r\n        [(ngModel)]=\"uploadModel\"\r\n        p-drag-drop-height=\"160\"\r\n        p-hide-restrictions-info\r\n        p-hide-send-button\r\n        p-url=\"x\"\r\n        [p-drag-drop]=\"!modal.isHidden\"\r\n        [p-disabled]=\"isUrlValid\"\r\n        [p-restrictions]=\"uploadRestrictions\">\r\n      </po-upload>\r\n    </div>\r\n\r\n    <div class=\"po-row\">\r\n      <po-url\r\n        class=\"po-md-12 po-mt-3\"\r\n        name=\"url\"\r\n        [(ngModel)]=\"urlImage\"\r\n        [p-label]=\"literals.urlImage\"\r\n        [p-disabled]=\"isUploadValid\">\r\n      </po-url>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n\r\n<ng-template #modalLink>\r\n  <form #modalLinkForm=\"ngForm\">\r\n    <div class=\"po-row\">\r\n      <po-input class=\"po-md-12 po-mb-2\"\r\n        name=\"urlLinkText\"\r\n        [(ngModel)]=\"urlLinkText\"\r\n        p-optional\r\n        [p-label]=\"literals.linkTextLabel\"\r\n        [p-placeholder]=\"literals.linkTextLabel\">\r\n      </po-input>\r\n\r\n      <po-url class=\"po-md-12\"\r\n        name=\"urlLink\"\r\n        [(ngModel)]=\"urlLink\"\r\n        p-label=\"Link\"\r\n        p-required\r\n        [p-help]=\"literals.linkUrlTextHelper\"\r\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\r\n        (p-change-model)=\"formModelValidate()\">\r\n      </po-url>\r\n    </div>\r\n  </form>\r\n</ng-template>\r\n"
    }),
    tslib_1.__metadata("design:paramtypes", [PoLanguageService])
], PoRichTextModalComponent);
export { PoRichTextModalComponent };
//# sourceMappingURL=data:application/json;base64,