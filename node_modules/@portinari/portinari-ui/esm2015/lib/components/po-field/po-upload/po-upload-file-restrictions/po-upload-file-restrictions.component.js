import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnInit } from '@angular/core';
import { browserLanguage, formatBytes, poLocaleDefault } from '../../../../utils/util';
import { poUploadLiteralsDefault } from '../po-upload-base.component';
let PoUploadFileRestrictionsComponent = class PoUploadFileRestrictionsComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    set allowedExtensions(value) {
        this._allowedExtensions = this.formatAllowedExtensions(value);
    }
    get allowedExtensions() {
        return this._allowedExtensions;
    }
    set maxFileSize(value) {
        this._maxFileSize = formatBytes(value);
    }
    get maxFileSize() {
        return this._maxFileSize;
    }
    set minFileSize(value) {
        this._minFileSize = formatBytes(value);
    }
    get minFileSize() {
        return this._minFileSize;
    }
    get language() {
        return browserLanguage();
    }
    ngOnInit() {
        this.setLiterals();
    }
    formatAllowedExtensions(allowedExtensions) {
        const conjunction = { 'pt': 'e', 'en': 'and', 'es': 'y' };
        return allowedExtensions ? allowedExtensions
            .join(', ')
            .toUpperCase()
            .replace(/,(?=[^,]*$)/, ` ${conjunction[this.language]}`) : undefined;
    }
    setLiterals() {
        this.literals = Object.assign({}, poUploadLiteralsDefault[poLocaleDefault], poUploadLiteralsDefault[this.language]);
        this.changeDetector.detectChanges();
    }
};
PoUploadFileRestrictionsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    Input('p-allowed-extensions'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "allowedExtensions", null);
tslib_1.__decorate([
    Input('p-max-files'),
    tslib_1.__metadata("design:type", Number)
], PoUploadFileRestrictionsComponent.prototype, "maxFiles", void 0);
tslib_1.__decorate([
    Input('p-max-file-size'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "maxFileSize", null);
tslib_1.__decorate([
    Input('p-min-file-size'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoUploadFileRestrictionsComponent.prototype, "minFileSize", null);
PoUploadFileRestrictionsComponent = tslib_1.__decorate([
    Component({
        selector: 'po-upload-file-restrictions',
        template: "<p class=\"po-font-text-small\" *ngIf=\"maxFiles > 1\">\n  {{ literals?.numberOfFilesAllowed | poI18n:maxFiles }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"allowedExtensions\">\n  {{ literals?.allowedFormats | poI18n:allowedExtensions }}\n</p>\n\n<p class=\"po-font-text-small\" *ngIf=\"minFileSize || maxFileSize\">\n  <span>{{ literals?.allowedSizes }}</span>\n\n  <span *ngIf=\"minFileSize && maxFileSize\">\n    {{ literals?.allowedFileSizeRange | poI18n:[minFileSize, maxFileSize] }}\n  </span>\n\n  <span *ngIf=\"minFileSize && !maxFileSize\">\n    {{ literals?.minFileSizeAllowed | poI18n:minFileSize }}\n  </span>\n\n  <span *ngIf=\"maxFileSize && !minFileSize\">\n    {{ literals?.maxFileSizeAllowed | poI18n:maxFileSize }}\n  </span>\n</p>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
], PoUploadFileRestrictionsComponent);
export { PoUploadFileRestrictionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWZpbGUtcmVzdHJpY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tdXBsb2FkL3BvLXVwbG9hZC1maWxlLXJlc3RyaWN0aW9ucy9wby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckcsT0FBTyxFQUFFLGVBQWUsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFPdEUsSUFBYSxpQ0FBaUMsR0FBOUMsTUFBYSxpQ0FBaUM7SUFzQzVDLFlBQW9CLGNBQWlDO1FBQWpDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtJQUFJLENBQUM7SUE5QjNCLElBQUksaUJBQWlCLENBQUMsS0FBSztRQUN4RCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFNLEtBQUssQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFRCxJQUFJLGlCQUFpQjtRQUNuQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNqQyxDQUFDO0lBSXlCLElBQUksV0FBVyxDQUFDLEtBQUs7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQU0sS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRXlCLElBQUksV0FBVyxDQUFDLEtBQUs7UUFDN0MsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQU0sS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxlQUFlLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBSUQsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRU8sdUJBQXVCLENBQUMsaUJBQWdDO1FBQzlELE1BQU0sV0FBVyxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUUxRCxPQUFPLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxpQkFBaUI7YUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQzthQUNWLFdBQVcsRUFBRTthQUNiLE9BQU8sQ0FBQyxhQUFhLEVBQUUsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQzFFLENBQUM7SUFFTyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxRQUFRLHFCQUNSLHVCQUF1QixDQUFDLGVBQWUsQ0FBQyxFQUN4Qyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQzFDLENBQUM7UUFFRixJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7Q0FFRixDQUFBOztZQXhCcUMsaUJBQWlCOztBQTlCdEI7SUFBOUIsS0FBSyxDQUFDLHNCQUFzQixDQUFDOzs7MEVBRTdCO0FBTXFCO0lBQXJCLEtBQUssQ0FBQyxhQUFhLENBQUM7O21FQUFrQjtBQUViO0lBQXpCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQzs7O29FQUV4QjtBQU15QjtJQUF6QixLQUFLLENBQUMsaUJBQWlCLENBQUM7OztvRUFFeEI7QUE1QlUsaUNBQWlDO0lBTDdDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw2QkFBNkI7UUFDdkMsa3dCQUEyRDtRQUMzRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtLQUNoRCxDQUFDOzZDQXVDb0MsaUJBQWlCO0dBdEMxQyxpQ0FBaUMsQ0E4RDdDO1NBOURZLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGJyb3dzZXJMYW5ndWFnZSwgZm9ybWF0Qnl0ZXMsIHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBwb1VwbG9hZExpdGVyYWxzRGVmYXVsdCB9IGZyb20gJy4uL3BvLXVwbG9hZC1iYXNlLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXVwbG9hZC1maWxlLXJlc3RyaWN0aW9ucycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby11cGxvYWQtZmlsZS1yZXN0cmljdGlvbnMuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQb1VwbG9hZEZpbGVSZXN0cmljdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIHByaXZhdGUgX2FsbG93ZWRFeHRlbnNpb25zOiBzdHJpbmc7XG4gIHByaXZhdGUgX21heEZpbGVTaXplOiBzdHJpbmc7XG4gIHByaXZhdGUgIF9taW5GaWxlU2l6ZTogc3RyaW5nO1xuXG4gIGxpdGVyYWxzOiBhbnk7XG5cbiAgQElucHV0KCdwLWFsbG93ZWQtZXh0ZW5zaW9ucycpIHNldCBhbGxvd2VkRXh0ZW5zaW9ucyh2YWx1ZSkge1xuICAgIHRoaXMuX2FsbG93ZWRFeHRlbnNpb25zID0gdGhpcy5mb3JtYXRBbGxvd2VkRXh0ZW5zaW9ucyg8YW55PnZhbHVlKTtcbiAgfVxuXG4gIGdldCBhbGxvd2VkRXh0ZW5zaW9ucygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9hbGxvd2VkRXh0ZW5zaW9ucztcbiAgfVxuXG4gIEBJbnB1dCgncC1tYXgtZmlsZXMnKSBtYXhGaWxlczogbnVtYmVyO1xuXG4gIEBJbnB1dCgncC1tYXgtZmlsZS1zaXplJykgc2V0IG1heEZpbGVTaXplKHZhbHVlKSB7XG4gICAgdGhpcy5fbWF4RmlsZVNpemUgPSBmb3JtYXRCeXRlcyg8YW55PnZhbHVlKTtcbiAgfVxuXG4gIGdldCBtYXhGaWxlU2l6ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9tYXhGaWxlU2l6ZTtcbiAgfVxuXG4gIEBJbnB1dCgncC1taW4tZmlsZS1zaXplJykgc2V0IG1pbkZpbGVTaXplKHZhbHVlKSB7XG4gICAgdGhpcy5fbWluRmlsZVNpemUgPSBmb3JtYXRCeXRlcyg8YW55PnZhbHVlKTtcbiAgfVxuXG4gIGdldCBtaW5GaWxlU2l6ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9taW5GaWxlU2l6ZTtcbiAgfVxuXG4gIGdldCBsYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBicm93c2VyTGFuZ3VhZ2UoKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldExpdGVyYWxzKCk7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdEFsbG93ZWRFeHRlbnNpb25zKGFsbG93ZWRFeHRlbnNpb25zOiBBcnJheTxzdHJpbmc+KTogc3RyaW5nIHtcbiAgICBjb25zdCBjb25qdW5jdGlvbiA9IHsgJ3B0JzogJ2UnLCAnZW4nOiAnYW5kJywgJ2VzJzogJ3knIH07XG5cbiAgICByZXR1cm4gYWxsb3dlZEV4dGVuc2lvbnMgPyBhbGxvd2VkRXh0ZW5zaW9uc1xuICAgICAgLmpvaW4oJywgJylcbiAgICAgIC50b1VwcGVyQ2FzZSgpXG4gICAgICAucmVwbGFjZSgvLCg/PVteLF0qJCkvLCBgICR7Y29uanVuY3Rpb25bdGhpcy5sYW5ndWFnZV19YCkgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIHNldExpdGVyYWxzKCkge1xuICAgIHRoaXMubGl0ZXJhbHMgPSB7XG4gICAgICAuLi5wb1VwbG9hZExpdGVyYWxzRGVmYXVsdFtwb0xvY2FsZURlZmF1bHRdLFxuICAgICAgLi4ucG9VcGxvYWRMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV0sXG4gICAgfTtcblxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbn1cbiJdfQ==