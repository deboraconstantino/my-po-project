import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { PoSwitchLabelPosition } from './po-switch-label-position.enum';
/**
 * @description
 *
 * O componente `po-switch` é um [checkbox](/documentation/po-checkbox-group) mais intuitivo, pois faz analogia a um interruptor.
 * Deve ser usado quando deseja-se transmitir a ideia de ligar / desligar uma funcionalidade específica.
 *
 * Pode-se ligar ou deligar o botão utilizando a tecla de espaço ou o clique do mouse.
 *
 * O texto exibido pode ser alterado de acordo com o valor setado aumentando as possibilidades de uso do componente,
 * portanto, recomenda-se informar textos que contextualizem seu uso para que facilite a compreensão do usuário.
 *
 * > O componente não altera o valor incial informado no *model*, portanto indica-se inicializa-lo caso ter necessidade.
 */
export class PoSwitchBaseComponent {
    constructor() {
        this._disabled = false;
        this.switchValue = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica o foco no elemento ao ser iniciado.
         *  > Caso mais de um elemento seja configurado com essa propriedade,
         * o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * Texto exibido quando o valor do componente for `true`.
         *
         * @default `true`
         */
        this.labelOn = 'true';
        /**
         * Texto exibido quando o valor do componente for `false`.
         *
         * @default `false`
         */
        this.labelOff = 'false';
        /**
         * @optional
         *
         * @description
         *
         * Posição de exibição do rótulo.
         *
         * > Por padrão exibe à direita.
         */
        this.labelPosition = PoSwitchLabelPosition.Right;
        /** Evento disparado ao alterar valor do campo. */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
    }
    set setLabelOn(label) {
        this.labelOn = label || 'true';
    }
    set setLabelOff(label) {
        this.labelOff = label || 'false';
    }
    set setLabelPosition(position) {
        this.labelPosition = (position in PoSwitchLabelPosition) ? parseInt(position, 10) : PoSwitchLabelPosition.Right;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica se o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    changeValue(value) {
        if (this.switchValue !== value) {
            this.switchValue = value;
            if (this.propagateChange) {
                this.propagateChange(value);
            }
            else {
                this.ngModelChange.emit(value);
            }
            this.change.emit(this.switchValue);
        }
    }
    eventClick() {
        if (!this.disabled) {
            this.changeValue(!this.switchValue);
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) { }
    writeValue(value) {
        if (value !== this.switchValue) {
            this.switchValue = !!value;
        }
    }
}
tslib_1.__decorate([
    Input('name'),
    tslib_1.__metadata("design:type", String)
], PoSwitchBaseComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input('p-auto-focus'), InputBoolean(),
    tslib_1.__metadata("design:type", Boolean)
], PoSwitchBaseComponent.prototype, "autoFocus", void 0);
tslib_1.__decorate([
    Input('p-label'),
    tslib_1.__metadata("design:type", String)
], PoSwitchBaseComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input('p-help'),
    tslib_1.__metadata("design:type", String)
], PoSwitchBaseComponent.prototype, "help", void 0);
tslib_1.__decorate([
    Input('p-label-on'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoSwitchBaseComponent.prototype, "setLabelOn", null);
tslib_1.__decorate([
    Input('p-label-off'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoSwitchBaseComponent.prototype, "setLabelOff", null);
tslib_1.__decorate([
    Input('p-label-position'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], PoSwitchBaseComponent.prototype, "setLabelPosition", null);
tslib_1.__decorate([
    Input('p-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoSwitchBaseComponent.prototype, "disabled", null);
tslib_1.__decorate([
    Output('p-change'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoSwitchBaseComponent.prototype, "change", void 0);
tslib_1.__decorate([
    Output('ngModelChange'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoSwitchBaseComponent.prototype, "ngModelChange", void 0);
//# sourceMappingURL=data:application/json;base64,