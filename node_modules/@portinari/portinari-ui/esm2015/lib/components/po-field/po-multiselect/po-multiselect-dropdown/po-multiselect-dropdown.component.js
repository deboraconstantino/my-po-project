import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
import { PoMultiselectSearchComponent } from './../po-multiselect-search/po-multiselect-search.component';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
let PoMultiselectDropdownComponent = class PoMultiselectDropdownComponent {
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
     */
    constructor() {
        this.scrollTop = 0;
        this.show = false;
        this.haveOptions = false;
        /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
        this.hideSearch = false;
        /** Propriedade que recebe a lista de opções selecionadas. */
        this.selectedValues = [];
        /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
        this.options = [];
        /** Evento disparado a cada tecla digitada na pesquisa. */
        this.changeSearch = new EventEmitter();
        /** Evento disparado a cada alteração na lista das opções selecionadas. */
        this.change = new EventEmitter();
        /**
         * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
         * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
         * para notificar o componente principal que deve fechar o dropdown.
         */
        this.closeDropdown = new EventEmitter();
    }
    scrollTo(index) {
        this.scrollTop = (index <= 2) ? 0 : (index * 44) - 88;
    }
    isSelectedItem(option) {
        return this.selectedValues.some(selectedItem => selectedItem === option.value);
    }
    clickItem(check, option) {
        this.updateSelectedValues(check, option);
        if (!this.hideSearch) {
            this.searchElement.setFocus();
        }
    }
    updateSelectedValues(checked, option) {
        if (checked) {
            this.selectedValues.push(option.value);
        }
        else {
            const indexSelectedValues = this.selectedValues.indexOf(option.value);
            this.selectedValues.splice(indexSelectedValues, 1);
        }
        this.change.emit(this.selectedValues);
    }
    callChangeSearch(event) {
        this.changeSearch.emit(event);
    }
    onKeydown(event) {
        if (event.keyCode === 9) {
            this.closeDropdown.emit();
        }
    }
    controlVisibility(toOpen) {
        this.show = toOpen;
        this.checkInitialOptions();
        setTimeout(() => {
            if (toOpen && this.searchElement && !this.hideSearch) {
                this.searchElement.setFocus();
                this.searchElement.clean();
            }
        });
    }
    checkInitialOptions() {
        if (this.options.length) {
            this.haveOptions = true;
        }
    }
};
tslib_1.__decorate([
    Input('p-hide-search'),
    tslib_1.__metadata("design:type", Boolean)
], PoMultiselectDropdownComponent.prototype, "hideSearch", void 0);
tslib_1.__decorate([
    Input('p-literals'),
    tslib_1.__metadata("design:type", Object)
], PoMultiselectDropdownComponent.prototype, "literals", void 0);
tslib_1.__decorate([
    Input('p-placeholder-search'),
    tslib_1.__metadata("design:type", String)
], PoMultiselectDropdownComponent.prototype, "placeholderSearch", void 0);
tslib_1.__decorate([
    Input('p-selected-values'),
    tslib_1.__metadata("design:type", Array)
], PoMultiselectDropdownComponent.prototype, "selectedValues", void 0);
tslib_1.__decorate([
    Input('p-options'),
    tslib_1.__metadata("design:type", Array)
], PoMultiselectDropdownComponent.prototype, "options", void 0);
tslib_1.__decorate([
    Output('p-change-search'),
    tslib_1.__metadata("design:type", Object)
], PoMultiselectDropdownComponent.prototype, "changeSearch", void 0);
tslib_1.__decorate([
    Output('p-change'),
    tslib_1.__metadata("design:type", Object)
], PoMultiselectDropdownComponent.prototype, "change", void 0);
tslib_1.__decorate([
    Output('p-close-dropdown'),
    tslib_1.__metadata("design:type", Object)
], PoMultiselectDropdownComponent.prototype, "closeDropdown", void 0);
tslib_1.__decorate([
    ViewChild('container', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoMultiselectDropdownComponent.prototype, "container", void 0);
tslib_1.__decorate([
    ViewChild('ulElement', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoMultiselectDropdownComponent.prototype, "ulElement", void 0);
tslib_1.__decorate([
    ViewChild('searchElement', { static: false }),
    tslib_1.__metadata("design:type", PoMultiselectSearchComponent)
], PoMultiselectDropdownComponent.prototype, "searchElement", void 0);
tslib_1.__decorate([
    HostListener('keydown', ['$event']),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], PoMultiselectDropdownComponent.prototype, "onKeydown", null);
PoMultiselectDropdownComponent = tslib_1.__decorate([
    Component({
        selector: 'po-multiselect-dropdown',
        template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\n\n  <po-multiselect-search #searchElement\n    *ngIf=\"!hideSearch && haveOptions\"\n    [p-literals]=\"literals\"\n    [p-placeholder]=\"placeholderSearch\"\n    (p-change)=\"callChangeSearch($event)\">\n  </po-multiselect-search>\n\n  <ul class=\"po-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\n    <div *ngIf=\"!options.length\" class=\"po-multiselect-container-no-data po-text-center\">\n      <span> {{ literals.noData }}</span>\n    </div>\n\n    <po-multiselect-item *ngFor=\"let option of options\"\n      [p-label]=\"option.label\"\n      [p-selected]=\"isSelectedItem(option)\"\n      (p-change)=\"clickItem($event, option)\">\n    </po-multiselect-item>\n  </ul>\n</div>\n"
    })
], PoMultiselectDropdownComponent);
export { PoMultiselectDropdownComponent };
//# sourceMappingURL=data:application/json;base64,