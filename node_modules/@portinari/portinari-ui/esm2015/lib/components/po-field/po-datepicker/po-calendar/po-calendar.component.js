import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isMobile, setYearFrom0To100, validateDateRange } from '../../../../utils/util';
import { PoCalendarLangService } from './po-calendar.lang.service';
import { PoCalendarService } from './po-calendar.service';
const poCalendarLocaleDefault = 'pt';
const poCalendarLocales = ['pt', 'en', 'es'];
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de calendário de uso interno
 */
let PoCalendarComponent = class PoCalendarComponent {
    constructor(poCalendarService, poCalendarLangService) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.monthVisible = false;
        this.overlayInvisible = true;
        this.visible = false;
        this.yearVisible = false;
        this.isMobile = isMobile;
        this.today = new Date();
        this.selectedDateChange = new EventEmitter();
        this.submit = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Data máxima possível de ser selecionada no calendário.
     */
    set dateEnd(val) {
        if (val && val instanceof Date) {
            const year = val.getFullYear();
            const month = val.getMonth();
            const day = val.getDate();
            const date = new Date(year, month, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            this._dateEnd = date;
        }
        else {
            this._dateEnd = undefined;
        }
    }
    get dateEnd() {
        return this._dateEnd;
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * Valores válidos:
     *  - `pt`
     *  - `en`
     *  - `es`
     */
    set locale(locale) {
        this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
        this.initializeLanguage();
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Data selecionada no calendário.
     */
    set selectedDate(selectedDate) {
        this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
    }
    get selectedDate() {
        return this._selectedDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Data mínima possível de ser selecionada no calendário.
     */
    set dateStart(val) {
        if (val && val instanceof Date) {
            const year = val.getFullYear();
            const month = val.getMonth();
            const day = val.getDate();
            const date = new Date(year, month, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            this._dateStart = date;
        }
        else {
            this._dateStart = undefined;
        }
    }
    get dateStart() {
        return this._dateStart;
    }
    close() {
        this.overlayInvisible = true;
        this.visible = false;
    }
    // Obtém um array de todos os anos desta década
    getArrayDecade(year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    }
    getBackgroundColor(displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    }
    getDayBackgroundColor(date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-background-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-background-today';
        }
        else if (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-background';
            }
            else {
                return 'po-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    }
    getDayForegroundColor(date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-foreground-today';
        }
        else {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-foreground';
            }
            else {
                return 'po-calendar-box-foreground-disabled';
            }
        }
    }
    getForegroundColor(displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    }
    getWordMonth() {
        return this.poCalendarLangService.getWordMonth();
    }
    getWordYear() {
        return this.poCalendarLangService.getWordYear();
    }
    init() {
        this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
        if (this.isMobile()) {
            this.overlayInvisible = false;
        }
        this.visible = true;
    }
    initializeLanguage() {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.poCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.poCalendarLangService.getArrayMonths();
    }
    onNextMonth() {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    }
    onPrevMonth() {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    }
    // Ao selecionar uma data
    onSelectDate(date) {
        if (validateDateRange(date, this.dateStart, this.dateEnd)) {
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.submit.emit(date);
        }
    }
    // Ao selecionar um mês
    onSelectMonth(year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    }
    // Ao selecionar um ano
    onSelectYear(year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    }
    selectDay() {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    }
    selectMonth() {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    }
    selectYear() {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    }
    setMobileVisualization() {
        return this.isMobile() ? 'po-calendar po-calendar-mobile' : 'po-calendar';
    }
    updateYear(value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    }
    addAllYearsInDecade(year) {
        let i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    }
    equalsDate(date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    }
    updateDate(date) {
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    }
    updateDecade(year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    }
    updateDisplay(year, month) {
        const calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    }
};
PoCalendarComponent.ctorParameters = () => [
    { type: PoCalendarService },
    { type: PoCalendarLangService }
];
tslib_1.__decorate([
    ViewChild('days', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoCalendarComponent.prototype, "elDays", void 0);
tslib_1.__decorate([
    ViewChild('months', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoCalendarComponent.prototype, "elMonths", void 0);
tslib_1.__decorate([
    ViewChild('years', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoCalendarComponent.prototype, "elYears", void 0);
tslib_1.__decorate([
    Input('p-date-end'),
    tslib_1.__metadata("design:type", Date),
    tslib_1.__metadata("design:paramtypes", [Date])
], PoCalendarComponent.prototype, "dateEnd", null);
tslib_1.__decorate([
    Input('p-locale'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoCalendarComponent.prototype, "locale", null);
tslib_1.__decorate([
    Input('p-selected-date'),
    tslib_1.__metadata("design:type", Date),
    tslib_1.__metadata("design:paramtypes", [Date])
], PoCalendarComponent.prototype, "selectedDate", null);
tslib_1.__decorate([
    Input('p-date-start'),
    tslib_1.__metadata("design:type", Date),
    tslib_1.__metadata("design:paramtypes", [Date])
], PoCalendarComponent.prototype, "dateStart", null);
tslib_1.__decorate([
    Output('p-selected-dateChange'),
    tslib_1.__metadata("design:type", Object)
], PoCalendarComponent.prototype, "selectedDateChange", void 0);
tslib_1.__decorate([
    Output('p-submit'),
    tslib_1.__metadata("design:type", Object)
], PoCalendarComponent.prototype, "submit", void 0);
PoCalendarComponent = tslib_1.__decorate([
    Component({
        selector: 'po-calendar',
        template: "<div class=\"po-calendar-overlay\" [class.po-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\" class=\"po-calendar-day po-calendar-box-background\" (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"po-calendar-month\"\n        (click)=\"onSelectMonth(displayYear, i)\"\n        [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span (click)=\"updateYear(10)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"po-calendar-year\"\n        (click)=\"onSelectYear(year, displayMonthNumber)\"\n        [ngClass]=\"getBackgroundColor(year, currentYear)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
        providers: [PoCalendarService, PoCalendarLangService]
    }),
    tslib_1.__metadata("design:paramtypes", [PoCalendarService,
        PoCalendarLangService])
], PoCalendarComponent);
export { PoCalendarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1kYXRlcGlja2VyL3BvLWNhbGVuZGFyL3BvLWNhbGVuZGFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTlGLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN4RixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQztBQUNyQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUU3Qzs7Ozs7O0dBTUc7QUFNSCxJQUFhLG1CQUFtQixHQUFoQyxNQUFhLG1CQUFtQjtJQXVIOUIsWUFDVSxpQkFBb0MsRUFDcEMscUJBQTRDO1FBRDVDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQWpIdEQsZUFBVSxHQUFZLEtBQUssQ0FBQztRQU01QixrQkFBYSxHQUFlLEtBQUssRUFBRSxDQUFDO1FBRXBDLG9CQUFlLEdBQWUsS0FBSyxFQUFFLENBQUM7UUFFdEMsaUJBQVksR0FBWSxLQUFLLENBQUM7UUFDOUIscUJBQWdCLEdBQVksSUFBSSxDQUFDO1FBQ2pDLFlBQU8sR0FBWSxLQUFLLENBQUM7UUFDekIsZ0JBQVcsR0FBWSxLQUFLLENBQUM7UUFHckIs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QVlzQjtJQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDO3NDQUFvQixJQUFJOzZDQUFKLElBQUk7b0RBYTdDO0FBS2dDO0lBQWhDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQzs7K0RBQStDO0FBQzNEO0lBQW5CLE1BQU0sQ0FBQyxVQUFVLENBQUM7O21EQUFtQztBQXJIM0MsbUJBQW1CO0lBTC9CLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxhQUFhO1FBQ3ZCLCs4R0FBMkM7UUFDM0MsU0FBUyxFQUFFLENBQUMsaUJBQWlCLEVBQUUscUJBQXFCLENBQUU7S0FDdkQsQ0FBQzs2Q0F5SDZCLGlCQUFpQjtRQUNiLHFCQUFxQjtHQXpIM0MsbUJBQW1CLENBeVQvQjtTQXpUWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzTW9iaWxlLCBzZXRZZWFyRnJvbTBUbzEwMCwgdmFsaWRhdGVEYXRlUmFuZ2UgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvQ2FsZW5kYXJMYW5nU2VydmljZSB9IGZyb20gJy4vcG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlJztcbmltcG9ydCB7IFBvQ2FsZW5kYXJTZXJ2aWNlIH0gZnJvbSAnLi9wby1jYWxlbmRhci5zZXJ2aWNlJztcblxuY29uc3QgcG9DYWxlbmRhckxvY2FsZURlZmF1bHQgPSAncHQnO1xuY29uc3QgcG9DYWxlbmRhckxvY2FsZXMgPSBbJ3B0JywgJ2VuJywgJ2VzJ107XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBkZSBjYWxlbmTDoXJpbyBkZSB1c28gaW50ZXJub1xuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1jYWxlbmRhcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1jYWxlbmRhci5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1BvQ2FsZW5kYXJTZXJ2aWNlLCBQb0NhbGVuZGFyTGFuZ1NlcnZpY2UgXVxufSlcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9kYXRlRW5kOiBEYXRlO1xuICBwcml2YXRlIF9kYXRlU3RhcnQ6IERhdGU7XG4gIHByaXZhdGUgX2xvY2FsZTogc3RyaW5nO1xuICBwcml2YXRlIF9zZWxlY3RlZERhdGU/OiBEYXRlO1xuXG4gIGN1cnJlbnRZZWFyOiBudW1iZXI7XG4gIGRheVZpc2libGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZGlzcGxheURheXM6IEFycmF5PG51bWJlcj47XG4gIGRpc3BsYXlEZWNhZGU6IEFycmF5PG51bWJlcj47XG4gIGRpc3BsYXlGaW5hbERlY2FkZTogbnVtYmVyO1xuICBkaXNwbGF5TW9udGg6IGFueTtcbiAgZGlzcGxheU1vbnRoTnVtYmVyOiBudW1iZXI7XG4gIGRpc3BsYXlNb250aHM6IEFycmF5PGFueT4gPSBBcnJheSgpO1xuICBkaXNwbGF5U3RhcnREZWNhZGU6IG51bWJlcjtcbiAgZGlzcGxheVdlZWREYXlzOiBBcnJheTxhbnk+ID0gQXJyYXkoKTtcbiAgZGlzcGxheVllYXI6IG51bWJlcjtcbiAgbW9udGhWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG4gIG92ZXJsYXlJbnZpc2libGU6IGJvb2xlYW4gPSB0cnVlO1xuICB2aXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG4gIHllYXJWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBjdXJyZW50TW9udGhOdW1iZXI6IG51bWJlcjtcbiAgcHJpdmF0ZSBpc01vYmlsZTogYW55ID0gaXNNb2JpbGU7XG4gIHByaXZhdGUgbGFzdERpc3BsYXk6IHN0cmluZztcbiAgcHJpdmF0ZSB0b2RheTogRGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgQFZpZXdDaGlsZCgnZGF5cycsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiB0cnVlIH0pIGVsRGF5czogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZCgnbW9udGhzJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgZWxNb250aHM6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGQoJ3llYXJzJywgeyByZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgZWxZZWFyczogRWxlbWVudFJlZjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEYXRhIG3DoXhpbWEgcG9zc8OtdmVsIGRlIHNlciBzZWxlY2lvbmFkYSBubyBjYWxlbmTDoXJpby5cbiAgICovXG4gIEBJbnB1dCgncC1kYXRlLWVuZCcpIHNldCBkYXRlRW5kKHZhbDogRGF0ZSkge1xuICAgIGlmICh2YWwgJiYgdmFsIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgY29uc3QgeWVhciA9IHZhbC5nZXRGdWxsWWVhcigpO1xuICAgICAgY29uc3QgbW9udGggPSB2YWwuZ2V0TW9udGgoKTtcbiAgICAgIGNvbnN0IGRheSA9IHZhbC5nZXREYXRlKCk7XG5cbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCAyMywgNTksIDU5KTtcbiAgICAgIHNldFllYXJGcm9tMFRvMTAwKGRhdGUsIHllYXIpO1xuXG4gICAgICB0aGlzLl9kYXRlRW5kID0gZGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGF0ZUVuZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgZ2V0IGRhdGVFbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVFbmQ7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJZGlvbWEgZG8gY2FsZW5kw6FyaW8uXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqICAtIGBwdGBcbiAgICogIC0gYGVuYFxuICAgKiAgLSBgZXNgXG4gICAqL1xuICBASW5wdXQoJ3AtbG9jYWxlJykgc2V0IGxvY2FsZShsb2NhbGU6IHN0cmluZykge1xuICAgIHRoaXMuX2xvY2FsZSA9IHBvQ2FsZW5kYXJMb2NhbGVzLmluY2x1ZGVzKGxvY2FsZSkgPyBsb2NhbGUgOiBwb0NhbGVuZGFyTG9jYWxlRGVmYXVsdDtcbiAgICB0aGlzLmluaXRpYWxpemVMYW5ndWFnZSgpO1xuICB9XG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERhdGEgc2VsZWNpb25hZGEgbm8gY2FsZW5kw6FyaW8uXG4gICAqL1xuICBASW5wdXQoJ3Atc2VsZWN0ZWQtZGF0ZScpIHNldCBzZWxlY3RlZERhdGUoc2VsZWN0ZWREYXRlOiBEYXRlKSB7XG4gICAgdGhpcy5fc2VsZWN0ZWREYXRlICA9IHNlbGVjdGVkRGF0ZSAmJiBzZWxlY3RlZERhdGUgaW5zdGFuY2VvZiBEYXRlID8gc2VsZWN0ZWREYXRlIDogdW5kZWZpbmVkO1xuICB9XG4gIGdldCBzZWxlY3RlZERhdGUoKTogRGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkRGF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERhdGEgbcOtbmltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhIG5vIGNhbGVuZMOhcmlvLlxuICAgKi9cbiAgQElucHV0KCdwLWRhdGUtc3RhcnQnKSBzZXQgZGF0ZVN0YXJ0KHZhbDogRGF0ZSkge1xuICAgIGlmICh2YWwgJiYgdmFsIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgY29uc3QgeWVhciA9IHZhbC5nZXRGdWxsWWVhcigpO1xuICAgICAgY29uc3QgbW9udGggPSB2YWwuZ2V0TW9udGgoKTtcbiAgICAgIGNvbnN0IGRheSA9IHZhbC5nZXREYXRlKCk7XG5cbiAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgZGF5LCAwLCAwLCAwKTtcbiAgICAgIHNldFllYXJGcm9tMFRvMTAwKGRhdGUsIHllYXIpO1xuXG4gICAgICB0aGlzLl9kYXRlU3RhcnQgPSBkYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9kYXRlU3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGdldCBkYXRlU3RhcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RhdGVTdGFydDtcbiAgfVxuXG4gIEBPdXRwdXQoJ3Atc2VsZWN0ZWQtZGF0ZUNoYW5nZScpIHNlbGVjdGVkRGF0ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8RGF0ZT4oKTtcbiAgQE91dHB1dCgncC1zdWJtaXQnKSBzdWJtaXQgPSBuZXcgRXZlbnRFbWl0dGVyPERhdGU+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBwb0NhbGVuZGFyU2VydmljZTogUG9DYWxlbmRhclNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwb0NhbGVuZGFyTGFuZ1NlcnZpY2U6IFBvQ2FsZW5kYXJMYW5nU2VydmljZSkge1xuICB9XG5cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5vdmVybGF5SW52aXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnZpc2libGUgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIE9idMOpbSB1bSBhcnJheSBkZSB0b2RvcyBvcyBhbm9zIGRlc3RhIGTDqWNhZGFcbiAgZ2V0QXJyYXlEZWNhZGUoeWVhcikge1xuICAgIHRoaXMuZGlzcGxheURlY2FkZSA9IEFycmF5KCk7XG5cbiAgICBpZiAoeWVhciAlIDEwICE9PSAwKSB7XG4gICAgICB3aGlsZSAoeWVhciAlIDEwICE9PSAwKSB7XG4gICAgICAgIHllYXItLTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy51cGRhdGVEZWNhZGUoeWVhcik7XG4gIH1cblxuICBnZXRCYWNrZ3JvdW5kQ29sb3IoZGlzcGxheVZhbHVlOiBudW1iZXIsIHByb3BlcnR5VmFsdWU6IG51bWJlcikge1xuICAgIHJldHVybiAoZGlzcGxheVZhbHVlID09PSBwcm9wZXJ0eVZhbHVlKSA/ICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1zZWxlY3RlZCcgOiAncG8tY2FsZW5kYXItYm94LWJhY2tncm91bmQnO1xuICB9XG5cbiAgZ2V0RGF5QmFja2dyb3VuZENvbG9yKGRhdGU6IERhdGUpIHtcbiAgICBpZiAodGhpcy5lcXVhbHNEYXRlKGRhdGUsIHRoaXMuc2VsZWN0ZWREYXRlKSkge1xuICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1zZWxlY3RlZCc7XG4gICAgfSBlbHNlIGlmICh0aGlzLmVxdWFsc0RhdGUoZGF0ZSwgdGhpcy50b2RheSkpIHtcbiAgICAgIHJldHVybiAncG8tY2FsZW5kYXItYm94LWJhY2tncm91bmQtdG9kYXknO1xuICAgIH0gZWxzZSBpZiAoZGF0ZSkge1xuICAgICAgaWYgKHZhbGlkYXRlRGF0ZVJhbmdlKGRhdGUsIHRoaXMuZGF0ZVN0YXJ0LCB0aGlzLmRhdGVFbmQpKSB7XG4gICAgICAgIHJldHVybiAncG8tY2FsZW5kYXItYm94LWJhY2tncm91bmQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtYmFja2dyb3VuZC1kaXNhYmxlZCc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBnZXREYXlGb3JlZ3JvdW5kQ29sb3IoZGF0ZTogRGF0ZSkge1xuICAgIGlmICh0aGlzLmVxdWFsc0RhdGUoZGF0ZSwgdGhpcy5zZWxlY3RlZERhdGUpKSB7XG4gICAgICByZXR1cm4gJ3BvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXNlbGVjdGVkJztcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXF1YWxzRGF0ZShkYXRlLCB0aGlzLnRvZGF5KSkge1xuICAgICAgcmV0dXJuICdwby1jYWxlbmRhci1ib3gtZm9yZWdyb3VuZC10b2RheSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2YWxpZGF0ZURhdGVSYW5nZShkYXRlLCB0aGlzLmRhdGVTdGFydCwgdGhpcy5kYXRlRW5kKSkge1xuICAgICAgICByZXR1cm4gJ3BvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAncG8tY2FsZW5kYXItYm94LWZvcmVncm91bmQtZGlzYWJsZWQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldEZvcmVncm91bmRDb2xvcihkaXNwbGF5VmFsdWU6IG51bWJlciwgcHJvcGVydHlWYWx1ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChkaXNwbGF5VmFsdWUgPT09IHByb3BlcnR5VmFsdWUpID8gJ3BvLWNhbGVuZGFyLWJveC1mb3JlZ3JvdW5kLXNlbGVjdGVkJyA6ICdwby1jYWxlbmRhci1ib3gtZm9yZWdyb3VuZCc7XG4gIH1cblxuICBnZXRXb3JkTW9udGgoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9DYWxlbmRhckxhbmdTZXJ2aWNlLmdldFdvcmRNb250aCgpO1xuICB9XG5cbiAgZ2V0V29yZFllYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMucG9DYWxlbmRhckxhbmdTZXJ2aWNlLmdldFdvcmRZZWFyKCk7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuc2VsZWN0ZWREYXRlID8gdGhpcy51cGRhdGVEYXRlKHRoaXMuc2VsZWN0ZWREYXRlKSA6IHRoaXMudXBkYXRlRGF0ZSh0aGlzLnRvZGF5KTtcblxuICAgIHRoaXMuaW5pdGlhbGl6ZUxhbmd1YWdlKCk7XG5cbiAgICB0aGlzLnNlbGVjdERheSgpO1xuXG4gICAgaWYgKHRoaXMuaXNNb2JpbGUoKSkge1xuICAgICAgdGhpcy5vdmVybGF5SW52aXNpYmxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy52aXNpYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIGluaXRpYWxpemVMYW5ndWFnZSgpIHtcbiAgICB0aGlzLnBvQ2FsZW5kYXJMYW5nU2VydmljZS5zZXRMYW5ndWFnZSh0aGlzLmxvY2FsZSk7XG4gICAgdGhpcy5kaXNwbGF5V2VlZERheXMgPSB0aGlzLnBvQ2FsZW5kYXJMYW5nU2VydmljZS5nZXRBcnJheVdlZWtEYXlzKCk7XG4gICAgdGhpcy5kaXNwbGF5TW9udGhzID0gdGhpcy5wb0NhbGVuZGFyTGFuZ1NlcnZpY2UuZ2V0QXJyYXlNb250aHMoKTtcbiAgfVxuXG4gIG9uTmV4dE1vbnRoKCkge1xuICAgIGlmICh0aGlzLmRpc3BsYXlNb250aE51bWJlciA8IDExKSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5kaXNwbGF5WWVhciwgdGhpcy5kaXNwbGF5TW9udGhOdW1iZXIgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVEaXNwbGF5KHRoaXMuZGlzcGxheVllYXIgKyAxLCAwKTtcbiAgICB9XG4gIH1cblxuICBvblByZXZNb250aCgpIHtcbiAgICBpZiAodGhpcy5kaXNwbGF5TW9udGhOdW1iZXIgPiAwKSB7XG4gICAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5kaXNwbGF5WWVhciwgdGhpcy5kaXNwbGF5TW9udGhOdW1iZXIgLSAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cGRhdGVEaXNwbGF5KHRoaXMuZGlzcGxheVllYXIgLSAxLCAxMSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQW8gc2VsZWNpb25hciB1bWEgZGF0YVxuICBvblNlbGVjdERhdGUoZGF0ZTogRGF0ZSkge1xuICAgIGlmICh2YWxpZGF0ZURhdGVSYW5nZShkYXRlLCB0aGlzLmRhdGVTdGFydCwgdGhpcy5kYXRlRW5kKSkge1xuICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBkYXRlO1xuICAgICAgdGhpcy5zZWxlY3RlZERhdGVDaGFuZ2UuZW1pdChkYXRlKTtcbiAgICAgIHRoaXMuc3VibWl0LmVtaXQoZGF0ZSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQW8gc2VsZWNpb25hciB1bSBtw6pzXG4gIG9uU2VsZWN0TW9udGgoeWVhcjogbnVtYmVyLCBtb250aDogbnVtYmVyKSB7XG4gICAgdGhpcy5zZWxlY3REYXkoKTtcbiAgICB0aGlzLnVwZGF0ZURpc3BsYXkoeWVhciwgbW9udGgpO1xuICB9XG5cbiAgLy8gQW8gc2VsZWNpb25hciB1bSBhbm9cbiAgb25TZWxlY3RZZWFyKHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlcikge1xuICAgIC8vIFNlIHZlaW8gZGEgdGVsYSBkZSBzZWxlw6fDo28gZGUgbcOqc1xuICAgIHRoaXMubGFzdERpc3BsYXkgPT09ICdtb250aCcgPyB0aGlzLnNlbGVjdE1vbnRoKCkgOiB0aGlzLnNlbGVjdERheSgpO1xuXG4gICAgdGhpcy5jdXJyZW50WWVhciA9IHllYXI7XG4gICAgdGhpcy51cGRhdGVEaXNwbGF5KHllYXIsIG1vbnRoKTtcbiAgfVxuXG4gIHNlbGVjdERheSgpIHtcbiAgICB0aGlzLmRheVZpc2libGUgPSB0cnVlO1xuICAgIHRoaXMubW9udGhWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy55ZWFyVmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubGFzdERpc3BsYXkgPSAnZGF5JztcbiAgfVxuXG4gIHNlbGVjdE1vbnRoKCkge1xuICAgIHRoaXMuZGF5VmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubW9udGhWaXNpYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnllYXJWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5sYXN0RGlzcGxheSA9ICdtb250aCc7XG4gIH1cblxuICBzZWxlY3RZZWFyKCkge1xuICAgIHRoaXMuZGF5VmlzaWJsZSA9IGZhbHNlO1xuICAgIHRoaXMubW9udGhWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy55ZWFyVmlzaWJsZSA9IHRydWU7XG4gIH1cblxuICBzZXRNb2JpbGVWaXN1YWxpemF0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmlzTW9iaWxlKCkgPyAncG8tY2FsZW5kYXIgcG8tY2FsZW5kYXItbW9iaWxlJyA6ICdwby1jYWxlbmRhcic7XG4gIH1cblxuICB1cGRhdGVZZWFyKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLnVwZGF0ZURpc3BsYXkodGhpcy5kaXNwbGF5WWVhciArIHZhbHVlLCB0aGlzLmRpc3BsYXlNb250aE51bWJlcik7XG4gIH1cblxuICBwcml2YXRlIGFkZEFsbFllYXJzSW5EZWNhZGUoeWVhcjogbnVtYmVyKSB7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0geWVhcjsgaSA8IHllYXIgKyAxMDsgaSsrKSB7XG4gICAgICB0aGlzLmRpc3BsYXlEZWNhZGUucHVzaChpKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGVxdWFsc0RhdGUoZGF0ZTE6IERhdGUsIGRhdGUyOiBEYXRlKTogYm9vbGVhbiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBkYXRlMS5nZXRGdWxsWWVhcigpID09PSBkYXRlMi5nZXRGdWxsWWVhcigpICYmXG4gICAgICAgIGRhdGUxLmdldE1vbnRoKCkgPT09IGRhdGUyLmdldE1vbnRoKCkgJiZcbiAgICAgICAgZGF0ZTEuZ2V0RGF0ZSgpID09PSBkYXRlMi5nZXREYXRlKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZURhdGUoZGF0ZTogRGF0ZSkge1xuICAgIHRoaXMuY3VycmVudE1vbnRoTnVtYmVyID0gZGF0ZS5nZXRNb250aCgpO1xuICAgIHRoaXMuY3VycmVudFllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gICAgdGhpcy51cGRhdGVEaXNwbGF5KHRoaXMuY3VycmVudFllYXIsIHRoaXMuY3VycmVudE1vbnRoTnVtYmVyKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlRGVjYWRlKHllYXI6IG51bWJlcikge1xuICAgIHRoaXMuYWRkQWxsWWVhcnNJbkRlY2FkZSh5ZWFyKTtcbiAgICB0aGlzLmRpc3BsYXlTdGFydERlY2FkZSA9IHllYXI7XG4gICAgdGhpcy5kaXNwbGF5RmluYWxEZWNhZGUgPSB5ZWFyICsgOTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlRGlzcGxheSh5ZWFyOiBudW1iZXIsIG1vbnRoOiBudW1iZXIpIHtcbiAgICBjb25zdCBjYWxlbmRhckFycmF5ID0gdGhpcy5wb0NhbGVuZGFyU2VydmljZS5tb250aERheXMoeWVhciwgbW9udGgpO1xuICAgIHRoaXMuZGlzcGxheURheXMgPSBbXS5jb25jYXQuYXBwbHkoW10sIGNhbGVuZGFyQXJyYXkpO1xuICAgIHRoaXMuZGlzcGxheU1vbnRoTnVtYmVyID0gbW9udGg7XG4gICAgdGhpcy5kaXNwbGF5TW9udGggPSB0aGlzLmRpc3BsYXlNb250aHNbbW9udGhdO1xuICAgIHRoaXMuZGlzcGxheVllYXIgPSB5ZWFyO1xuICAgIHRoaXMuZ2V0QXJyYXlEZWNhZGUoeWVhcik7XG4gIH1cblxufVxuIl19