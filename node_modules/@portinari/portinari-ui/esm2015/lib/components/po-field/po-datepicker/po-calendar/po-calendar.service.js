import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { setYearFrom0To100 } from '../../../../utils/util';
let PoCalendarService = class PoCalendarService {
    constructor() {
        this.firstWeekDay = 0; // 0 = sunday
    }
    weekStartDate(date) {
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== this.firstWeekDay) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if ((typeof month !== 'number') || (month < 0) || (month > 11)) {
            throw Error(('month must be a number (Jan is 0)'));
        }
        const weeks = [];
        let week = [];
        let i = 0;
        let date = new Date(year, month, 1);
        setYearFrom0To100(date, year);
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while ((date.getMonth() <= month) && (date.getFullYear() === year));
        return weeks;
    }
    monthDays(year, month) {
        const getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    }
};
PoCalendarService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [])
], PoCalendarService);
export { PoCalendarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tZGF0ZXBpY2tlci9wby1jYWxlbmRhci9wby1jYWxlbmRhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRzNELElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWlCO0lBRzVCO1FBQ0UsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsQ0FBQyxhQUFhO0lBQ3RDLENBQUM7SUFFRCxhQUFhLENBQUMsSUFBUztRQUNyQixNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMzQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQy9DLFNBQVMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUFTLEVBQUUsS0FBVSxFQUFFLGVBQW9CLElBQUksRUFBRSxnQkFBcUIsSUFBSTtRQUNuRixJQUFJLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEVBQUU7WUFDOUQsTUFBTSxLQUFLLENBQUMsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCxNQUFNLEtBQUssR0FBZSxFQUFFLENBQUM7UUFDN0IsSUFBSSxJQUFJLEdBQWUsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzlCLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhDLEdBQUc7WUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BELElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbEM7WUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRTtRQUN0RSxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBUyxFQUFFLEtBQVU7UUFDN0IsTUFBTSxZQUFZLEdBQUcsVUFBUyxJQUFTO1lBQ3JDLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGLENBQUE7QUE3Q1ksaUJBQWlCO0lBRDdCLFVBQVUsRUFBRTs7R0FDQSxpQkFBaUIsQ0E2QzdCO1NBN0NZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgc2V0WWVhckZyb20wVG8xMDAgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvQ2FsZW5kYXJTZXJ2aWNlIHtcbiAgZmlyc3RXZWVrRGF5OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5maXJzdFdlZWtEYXkgPSAwOyAvLyAwID0gc3VuZGF5XG4gIH1cblxuICB3ZWVrU3RhcnREYXRlKGRhdGU6IGFueSkge1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICB3aGlsZSAoc3RhcnREYXRlLmdldERheSgpICE9PSB0aGlzLmZpcnN0V2Vla0RheSkge1xuICAgICAgc3RhcnREYXRlLnNldERhdGUoc3RhcnREYXRlLmdldERhdGUoKSAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnREYXRlO1xuICB9XG5cbiAgbW9udGhEYXRlcyh5ZWFyOiBhbnksIG1vbnRoOiBhbnksIGRheUZvcm1hdHRlcjogYW55ID0gbnVsbCwgd2Vla0Zvcm1hdHRlcjogYW55ID0gbnVsbCkge1xuICAgIGlmICgodHlwZW9mIG1vbnRoICE9PSAnbnVtYmVyJykgfHwgKG1vbnRoIDwgMCkgfHwgKG1vbnRoID4gMTEpKSB7XG4gICAgICB0aHJvdyBFcnJvcigoJ21vbnRoIG11c3QgYmUgYSBudW1iZXIgKEphbiBpcyAwKScpKTtcbiAgICB9XG5cbiAgICBjb25zdCB3ZWVrczogQXJyYXk8YW55PiA9IFtdO1xuICAgIGxldCB3ZWVrOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpO1xuICAgIHNldFllYXJGcm9tMFRvMTAwKGRhdGUsIHllYXIpO1xuICAgIGRhdGUgPSB0aGlzLndlZWtTdGFydERhdGUoZGF0ZSk7XG5cbiAgICBkbyB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgIHdlZWsucHVzaChkYXlGb3JtYXR0ZXIgPyBkYXlGb3JtYXR0ZXIoZGF0ZSkgOiBkYXRlKTtcbiAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICB9XG4gICAgICB3ZWVrcy5wdXNoKHdlZWtGb3JtYXR0ZXIgPyB3ZWVrRm9ybWF0dGVyKHdlZWspIDogd2Vlayk7XG4gICAgICB3ZWVrID0gW107XG4gICAgfSB3aGlsZSAoKGRhdGUuZ2V0TW9udGgoKSA8PSBtb250aCkgJiYgKGRhdGUuZ2V0RnVsbFllYXIoKSA9PT0geWVhcikpO1xuICAgIHJldHVybiB3ZWVrcztcbiAgfVxuXG4gIG1vbnRoRGF5cyh5ZWFyOiBhbnksIG1vbnRoOiBhbnkpIHtcbiAgICBjb25zdCBnZXREYXlPclplcm8gPSBmdW5jdGlvbihkYXRlOiBhbnkpIHtcbiAgICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCkgPT09IG1vbnRoID8gZGF0ZSA6IDA7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5tb250aERhdGVzKHllYXIsIG1vbnRoLCBnZXREYXlPclplcm8pO1xuICB9XG59XG4iXX0=