import * as tslib_1 from "tslib";
import { ElementRef, EventEmitter, Input, Output } from '@angular/core';
/**
 * @docsPrivate
 *
 * Este componente é de uso interno utilizado por componentes de entrada de dados com o objetivo de resetar as informações do model.
 *
 * Por padrão limpa o valor do campo e executa o método onChangePropagate, caso tenha a necessidade de tratar a função de limpar o campo,
 * deve implementar a interface PoClean.
 */
export class PoCleanBaseComponent {
    constructor() {
        /** Valor que será atribuído ao campo quando for clicado no po-clean. */
        this.defaultValue = '';
        /**
         * Evento disparado quando executada ação do po-clean.
         * Este evento deve ser usado para avisar para o componente que está usando o po-clean, que o botão foi disparado,
         * e provavelmente será preciso emitir o evento para atualizar o model.
         */
        this.changeEvent = new EventEmitter();
    }
    clear() {
        this.setInputValue(this.defaultValue);
        this.changeEvent.emit(this.defaultValue);
    }
    showIcon() {
        return this.defaultValue !== this.getInputValue() && this.hasCleanAttr() && !this.isDisabled() && !this.isReadonly();
    }
    // Este método verifica se o componente pai possui a propriedade clean diferente de vazio,
    // ou seja, se o po-clean deve ser usado.
    hasCleanAttr() {
        return this.parentComponent.clean;
    }
    // Este método verifica se o componente pai está desabilitado.
    isDisabled() {
        return this.parentComponent.disabled;
    }
    // Este método verifica se o componente pai está somente leitura.
    isReadonly() {
        return this.parentComponent.readonly;
    }
}
tslib_1.__decorate([
    Input('p-element-ref'),
    tslib_1.__metadata("design:type", ElementRef)
], PoCleanBaseComponent.prototype, "inputRef", void 0);
tslib_1.__decorate([
    Input('p-default-value'),
    tslib_1.__metadata("design:type", String)
], PoCleanBaseComponent.prototype, "defaultValue", void 0);
tslib_1.__decorate([
    Output('p-change-event'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoCleanBaseComponent.prototype, "changeEvent", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2xlYW4tYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWNsZWFuL3BvLWNsZWFuLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhFOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLE9BQWdCLG9CQUFvQjtJQUExQztRQUtFLHdFQUF3RTtRQUM5QyxpQkFBWSxHQUFZLEVBQUUsQ0FBQztRQUVyRDs7OztXQUlHO1FBQ3VCLGdCQUFXLEdBQXVCLElBQUksWUFBWSxFQUFPLENBQUM7SUFpQ3RGLENBQUM7SUE3QkMsS0FBSztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3ZILENBQUM7SUFFRCwwRkFBMEY7SUFDMUYseUNBQXlDO0lBQ2pDLFlBQVk7UUFDbEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQztJQUNwQyxDQUFDO0lBRUQsOERBQThEO0lBQ3RELFVBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDO0lBRUQsaUVBQWlFO0lBQ3pELFVBQVU7UUFDaEIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQztJQUN2QyxDQUFDO0NBTUY7QUEzQ3lCO0lBQXZCLEtBQUssQ0FBQyxlQUFlLENBQUM7c0NBQVcsVUFBVTtzREFBQztBQUduQjtJQUF6QixLQUFLLENBQUMsaUJBQWlCLENBQUM7OzBEQUE0QjtBQU8zQjtJQUF6QixNQUFNLENBQUMsZ0JBQWdCLENBQUM7c0NBQWUsWUFBWTt5REFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgw6kgZGUgdXNvIGludGVybm8gdXRpbGl6YWRvIHBvciBjb21wb25lbnRlcyBkZSBlbnRyYWRhIGRlIGRhZG9zIGNvbSBvIG9iamV0aXZvIGRlIHJlc2V0YXIgYXMgaW5mb3JtYcOnw7VlcyBkbyBtb2RlbC5cbiAqXG4gKiBQb3IgcGFkcsOjbyBsaW1wYSBvIHZhbG9yIGRvIGNhbXBvIGUgZXhlY3V0YSBvIG3DqXRvZG8gb25DaGFuZ2VQcm9wYWdhdGUsIGNhc28gdGVuaGEgYSBuZWNlc3NpZGFkZSBkZSB0cmF0YXIgYSBmdW7Dp8OjbyBkZSBsaW1wYXIgbyBjYW1wbyxcbiAqIGRldmUgaW1wbGVtZW50YXIgYSBpbnRlcmZhY2UgUG9DbGVhbi5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvQ2xlYW5CYXNlQ29tcG9uZW50IHtcblxuICAvKiogTmVzdGEgcHJvcHJpZWRhZGUgZGV2ZS1zZSBpbmZvcm1hciBvIGVsZW1lbnRSZWYgZG8gY2FtcG8gZGUgZW50cmFkYSBxdWUgdXRpbGl6YXLDoSBvIHBvLWNsZWFuLiAqL1xuICBASW5wdXQoJ3AtZWxlbWVudC1yZWYnKSBpbnB1dFJlZjogRWxlbWVudFJlZjtcblxuICAvKiogVmFsb3IgcXVlIHNlcsOhIGF0cmlidcOtZG8gYW8gY2FtcG8gcXVhbmRvIGZvciBjbGljYWRvIG5vIHBvLWNsZWFuLiAqL1xuICBASW5wdXQoJ3AtZGVmYXVsdC12YWx1ZScpIGRlZmF1bHRWYWx1ZT86IHN0cmluZyA9ICcnO1xuXG4gIC8qKlxuICAgKiBFdmVudG8gZGlzcGFyYWRvIHF1YW5kbyBleGVjdXRhZGEgYcOnw6NvIGRvIHBvLWNsZWFuLlxuICAgKiBFc3RlIGV2ZW50byBkZXZlIHNlciB1c2FkbyBwYXJhIGF2aXNhciBwYXJhIG8gY29tcG9uZW50ZSBxdWUgZXN0w6EgdXNhbmRvIG8gcG8tY2xlYW4sIHF1ZSBvIGJvdMOjbyBmb2kgZGlzcGFyYWRvLFxuICAgKiBlIHByb3ZhdmVsbWVudGUgc2Vyw6EgcHJlY2lzbyBlbWl0aXIgbyBldmVudG8gcGFyYSBhdHVhbGl6YXIgbyBtb2RlbC5cbiAgICovXG4gIEBPdXRwdXQoJ3AtY2hhbmdlLWV2ZW50JykgY2hhbmdlRXZlbnQ/OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHByb3RlY3RlZCBwYXJlbnRDb21wb25lbnQ6IGFueTtcblxuICBjbGVhcigpIHtcbiAgICB0aGlzLnNldElucHV0VmFsdWUodGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgIHRoaXMuY2hhbmdlRXZlbnQuZW1pdCh0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gIH1cblxuICBzaG93SWNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0VmFsdWUgIT09IHRoaXMuZ2V0SW5wdXRWYWx1ZSgpICYmIHRoaXMuaGFzQ2xlYW5BdHRyKCkgJiYgIXRoaXMuaXNEaXNhYmxlZCgpICYmICF0aGlzLmlzUmVhZG9ubHkoKTtcbiAgfVxuXG4gIC8vIEVzdGUgbcOpdG9kbyB2ZXJpZmljYSBzZSBvIGNvbXBvbmVudGUgcGFpIHBvc3N1aSBhIHByb3ByaWVkYWRlIGNsZWFuIGRpZmVyZW50ZSBkZSB2YXppbyxcbiAgLy8gb3Ugc2VqYSwgc2UgbyBwby1jbGVhbiBkZXZlIHNlciB1c2Fkby5cbiAgcHJpdmF0ZSBoYXNDbGVhbkF0dHIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Q29tcG9uZW50LmNsZWFuO1xuICB9XG5cbiAgLy8gRXN0ZSBtw6l0b2RvIHZlcmlmaWNhIHNlIG8gY29tcG9uZW50ZSBwYWkgZXN0w6EgZGVzYWJpbGl0YWRvLlxuICBwcml2YXRlIGlzRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Q29tcG9uZW50LmRpc2FibGVkO1xuICB9XG5cbiAgLy8gRXN0ZSBtw6l0b2RvIHZlcmlmaWNhIHNlIG8gY29tcG9uZW50ZSBwYWkgZXN0w6Egc29tZW50ZSBsZWl0dXJhLlxuICBwcml2YXRlIGlzUmVhZG9ubHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50Q29tcG9uZW50LnJlYWRvbmx5O1xuICB9XG5cbiAgYWJzdHJhY3Qgc2V0SW5wdXRWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZDtcblxuICBhYnN0cmFjdCBnZXRJbnB1dFZhbHVlKCk6IHN0cmluZztcblxufVxuIl19