import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../../utils/util';
import { maxlengpoailed, minlengpoailed, requiredFailed } from '../validators';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <po-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-textarea>
 * ```
 */
export class PoTextareaBaseComponent {
    constructor() {
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        this._rows = 3;
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
        this.placeholder = '';
        /** Evento disparado ao sair do campo. */
        this.blur = new EventEmitter();
        /** Evento disparado ao entrar do campo. */
        this.enter = new EventEmitter();
        /** Evento disparado ao alterar valor e deixar o campo. */
        this.change = new EventEmitter();
        /** Evento disparado ao alterar valor do model. */
        this.changeModel = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(readonly) {
        this._readonly = convertToBoolean(readonly);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @deprecated 2.0.0
     * @description
     *
     * **Deprecated**
     *
     * > Esta propriedade está depreciada e será excluída na versão 2.0.0, utilize a propriedade `p-auto-focus`.
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * @default `false`
     */
    set oldfocus(focus) {
        this.autoFocus = focus;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(minlength) {
        this._minlength = convertToInt(minlength);
        this.validateModel();
    }
    get minlength() {
        return this._minlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(maxlength) {
        this._maxlength = convertToInt(maxlength);
        this.validateModel();
    }
    get maxlength() {
        return this._maxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade de linhas que serão exibidas.
     *
     * @default `3`
     */
    set rows(value) {
        this._rows = isNaN(parseInt(value, 10)) || value < 3 ? 3 : parseInt(value, 10);
    }
    get rows() {
        return this._rows;
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        this.controlChangeModelEmitter(value);
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(func) {
        this.validatorChange = func;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return { required: {
                    valid: false,
                } };
        }
        if (minlengpoailed(this.minlength, abstractControl.value)) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (maxlengpoailed(this.maxlength, abstractControl.value)) {
            return { maxlength: {
                    valid: false,
                } };
        }
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        this.writeValueModel(value);
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
tslib_1.__decorate([
    Input('p-auto-focus'), InputBoolean(),
    tslib_1.__metadata("design:type", Boolean)
], PoTextareaBaseComponent.prototype, "autoFocus", void 0);
tslib_1.__decorate([
    Input('p-label'),
    tslib_1.__metadata("design:type", String)
], PoTextareaBaseComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input('p-help'),
    tslib_1.__metadata("design:type", String)
], PoTextareaBaseComponent.prototype, "help", void 0);
tslib_1.__decorate([
    Input('p-placeholder'),
    tslib_1.__metadata("design:type", String)
], PoTextareaBaseComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input('name'),
    tslib_1.__metadata("design:type", String)
], PoTextareaBaseComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input('p-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoTextareaBaseComponent.prototype, "disabled", null);
tslib_1.__decorate([
    Input('p-optional'),
    tslib_1.__metadata("design:type", Boolean)
], PoTextareaBaseComponent.prototype, "optional", void 0);
tslib_1.__decorate([
    Input('p-readonly'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoTextareaBaseComponent.prototype, "readonly", null);
tslib_1.__decorate([
    Input('p-required'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoTextareaBaseComponent.prototype, "required", null);
tslib_1.__decorate([
    Input('p-focus'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoTextareaBaseComponent.prototype, "oldfocus", null);
tslib_1.__decorate([
    Input('p-minlength'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], PoTextareaBaseComponent.prototype, "minlength", null);
tslib_1.__decorate([
    Input('p-maxlength'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], PoTextareaBaseComponent.prototype, "maxlength", null);
tslib_1.__decorate([
    Input('p-rows'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], PoTextareaBaseComponent.prototype, "rows", null);
tslib_1.__decorate([
    Output('p-blur'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoTextareaBaseComponent.prototype, "blur", void 0);
tslib_1.__decorate([
    Output('p-enter'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoTextareaBaseComponent.prototype, "enter", void 0);
tslib_1.__decorate([
    Output('p-change'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoTextareaBaseComponent.prototype, "change", void 0);
tslib_1.__decorate([
    Output('p-change-model'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoTextareaBaseComponent.prototype, "changeModel", void 0);
//# sourceMappingURL=data:application/json;base64,