import * as tslib_1 from "tslib";
var PoRadioGroupComponent_1;
import { AfterViewInit, Component, DoCheck, ElementRef, forwardRef, Input, IterableDiffers, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { removeDuplicatedOptions } from '../../../utils/util';
import { PoRadioGroupBaseComponent } from './po-radio-group-base.component';
/**
 * @docsExtends PoRadioGroupBaseComponent
 *
 * @example
 *
 * <example name="po-radio-group-basic" title="Portinari Radio Group Basic">
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.html"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.e2e-spec.ts"> </file>
 *  <file name="sample-po-radio-group-basic/sample-po-radio-group-basic.component.po.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-labs" title="Portinari Radio Group Labs">
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.html"> </file>
 *  <file name="sample-po-radio-group-labs/sample-po-radio-group-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator" title="Portinari Radio Group - Translator">
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.html"> </file>
 *  <file name="sample-po-radio-group-translator/sample-po-radio-group-translator.component.ts"> </file>
 * </example>
 *
 * <example name="po-radio-group-translator-reactive-form" title="Portinari Radio Group - Translator Reactive Form">
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.html"> </file>
 *  <file name="sample-po-radio-group-translator-reactive-form/sample-po-radio-group-translator-reactive-form.component.ts"> </file>
 * </example>
 *
 */
let PoRadioGroupComponent = PoRadioGroupComponent_1 = class PoRadioGroupComponent extends PoRadioGroupBaseComponent {
    constructor(differs) {
        super();
        this.differ = differs.find([]).create(null);
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngDoCheck() {
        const change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
        }
    }
    eventClick(value, disabled) {
        if (!disabled) {
            this.changeValue(value);
        }
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoRadioGroupComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoRadioGroupComponent, { static: true }) radio: PoRadioGroupComponent;
     *
     * focusRadio() {
     *   this.radio.focus();
     * }
     * ```
     */
    focus() {
        if (this.radioLabels && !this.disabled) {
            const radioLabel = this.radioLabels.find((_, index) => !this.options[index].disabled);
            if (radioLabel) {
                radioLabel.nativeElement.focus();
            }
        }
    }
    getElementByValue(value) {
        return this.inputEl.nativeElement.querySelector(`input[value='${value}']`);
    }
    onKeyUp(event, value) {
        const key = event.keyCode || event.which;
        if (this.isArrowKey(key)) {
            this.changeValue(value);
        }
    }
    isArrowKey(key) {
        return key >= 37 && key <= 40;
    }
};
PoRadioGroupComponent.ctorParameters = () => [
    { type: IterableDiffers }
];
tslib_1.__decorate([
    Input('p-label'),
    tslib_1.__metadata("design:type", String)
], PoRadioGroupComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input('p-help'),
    tslib_1.__metadata("design:type", String)
], PoRadioGroupComponent.prototype, "help", void 0);
tslib_1.__decorate([
    ViewChild('inp', { read: ElementRef, static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoRadioGroupComponent.prototype, "inputEl", void 0);
tslib_1.__decorate([
    ViewChildren('inputRadio'),
    tslib_1.__metadata("design:type", QueryList)
], PoRadioGroupComponent.prototype, "radioLabels", void 0);
PoRadioGroupComponent = PoRadioGroupComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'po-radio-group',
        template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-row po-pt-1 po-pb-1\" #inp>\n    <div *ngFor=\"let option of options\"\n      class=\"po-radio-group-item po-md-{{ mdColumns }} po-lg-{{ columns }}\">\n\n      <input #inputRadio\n        class=\"po-radio-group-input\"\n        type=\"radio\"\n        [attr.name]=\"name\"\n        [checked]=\"value === option.value\"\n        [class.po-radio-group-input-checked]=\"value === option.value\"\n        [disabled]=\"option.disabled === true || disabled\"\n        [required]=\"required\"\n        [value]=\"option.value\"\n        (keyup)=\"onKeyUp($event, option.value)\">\n        <label\n          class=\"po-radio-group-label\"\n          [class.po-clickable]=\"!inputRadio.disabled\"\n          [for]=\"name\"\n          (click)=\"eventClick(option.value, option.disabled === true || disabled)\">\n        {{ option.label }}\n      </label>\n    </div>\n  </div>\n  <po-field-container-bottom></po-field-container-bottom>\n</po-field-container>\n",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoRadioGroupComponent_1),
                multi: true,
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => PoRadioGroupComponent_1),
                multi: true,
            }
        ]
    }),
    tslib_1.__metadata("design:paramtypes", [IterableDiffers])
], PoRadioGroupComponent);
export { PoRadioGroupComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmFkaW8tZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1yYWRpby1ncm91cC9wby1yYWRpby1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQzlHLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsYUFBYSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFOUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFNUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTJCRztBQWlCSCxJQUFhLHFCQUFxQiw2QkFBbEMsTUFBYSxxQkFBc0IsU0FBUSx5QkFBeUI7SUFhbEUsWUFBWSxPQUF3QjtRQUNsQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsU0FBUztRQUNQLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxJQUFJLE1BQU0sRUFBRTtZQUNWLHVCQUF1QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN2QztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsS0FBVSxFQUFFLFFBQWE7UUFDbEMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7T0FnQkc7SUFDSCxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUN0QyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUV0RixJQUFJLFVBQVUsRUFBRTtnQkFDZCxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2xDO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsaUJBQWlCLENBQUMsS0FBSztRQUNyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQW9CLEVBQUUsS0FBSztRQUNqQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFFekMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRU8sVUFBVSxDQUFDLEdBQVc7UUFDNUIsT0FBTyxHQUFHLElBQUksRUFBRSxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUM7SUFDaEMsQ0FBQztDQUVGLENBQUE7O1lBbkVzQixlQUFlOztBQVZsQjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOztvREFBZ0I7QUFHaEI7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7bURBQWU7QUFFc0I7SUFBcEQsU0FBUyxDQUFDLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDO3NDQUFVLFVBQVU7c0RBQUM7QUFDN0M7SUFBM0IsWUFBWSxDQUFDLFlBQVksQ0FBQztzQ0FBYyxTQUFTOzBEQUFhO0FBVHBELHFCQUFxQjtJQWhCakMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixpa0NBQThDO1FBQzlDLFNBQVMsRUFBRTtZQUNUO2dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7Z0JBQzFCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsdUJBQXFCLENBQUM7Z0JBQ3BELEtBQUssRUFBRSxJQUFJO2FBQ1o7WUFDRDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBcUIsQ0FBQztnQkFDcEQsS0FBSyxFQUFFLElBQUk7YUFDWjtTQUNGO0tBQ0YsQ0FBQzs2Q0FjcUIsZUFBZTtHQWJ6QixxQkFBcUIsQ0FnRmpDO1NBaEZZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRG9DaGVjaywgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgSW5wdXQsIEl0ZXJhYmxlRGlmZmVycywgUXVlcnlMaXN0LCBWaWV3Q2hpbGQsXG4gIFZpZXdDaGlsZHJlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IHJlbW92ZUR1cGxpY2F0ZWRPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvUmFkaW9Hcm91cEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLXJhZGlvLWdyb3VwLWJhc2UuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9SYWRpb0dyb3VwQmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXJhZGlvLWdyb3VwLWJhc2ljXCIgdGl0bGU9XCJQb3J0aW5hcmkgUmFkaW8gR3JvdXAgQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXJhZGlvLWdyb3VwLWJhc2ljL3NhbXBsZS1wby1yYWRpby1ncm91cC1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1yYWRpby1ncm91cC1iYXNpYy9zYW1wbGUtcG8tcmFkaW8tZ3JvdXAtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXJhZGlvLWdyb3VwLWJhc2ljL3NhbXBsZS1wby1yYWRpby1ncm91cC1iYXNpYy5jb21wb25lbnQuZTJlLXNwZWMudHNcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcmFkaW8tZ3JvdXAtYmFzaWMvc2FtcGxlLXBvLXJhZGlvLWdyb3VwLWJhc2ljLmNvbXBvbmVudC5wby50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXJhZGlvLWdyb3VwLWxhYnNcIiB0aXRsZT1cIlBvcnRpbmFyaSBSYWRpbyBHcm91cCBMYWJzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1yYWRpby1ncm91cC1sYWJzL3NhbXBsZS1wby1yYWRpby1ncm91cC1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXJhZGlvLWdyb3VwLWxhYnMvc2FtcGxlLXBvLXJhZGlvLWdyb3VwLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tcmFkaW8tZ3JvdXAtdHJhbnNsYXRvclwiIHRpdGxlPVwiUG9ydGluYXJpIFJhZGlvIEdyb3VwIC0gVHJhbnNsYXRvclwiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcmFkaW8tZ3JvdXAtdHJhbnNsYXRvci9zYW1wbGUtcG8tcmFkaW8tZ3JvdXAtdHJhbnNsYXRvci5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1yYWRpby1ncm91cC10cmFuc2xhdG9yL3NhbXBsZS1wby1yYWRpby1ncm91cC10cmFuc2xhdG9yLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXJhZGlvLWdyb3VwLXRyYW5zbGF0b3ItcmVhY3RpdmUtZm9ybVwiIHRpdGxlPVwiUG9ydGluYXJpIFJhZGlvIEdyb3VwIC0gVHJhbnNsYXRvciBSZWFjdGl2ZSBGb3JtXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1yYWRpby1ncm91cC10cmFuc2xhdG9yLXJlYWN0aXZlLWZvcm0vc2FtcGxlLXBvLXJhZGlvLWdyb3VwLXRyYW5zbGF0b3ItcmVhY3RpdmUtZm9ybS5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1yYWRpby1ncm91cC10cmFuc2xhdG9yLXJlYWN0aXZlLWZvcm0vc2FtcGxlLXBvLXJhZGlvLWdyb3VwLXRyYW5zbGF0b3ItcmVhY3RpdmUtZm9ybS5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tcmFkaW8tZ3JvdXAnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tcmFkaW8tZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IFBvUmFkaW9Hcm91cENvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTElEQVRPUlMsXG4gICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBQb1JhZGlvR3JvdXBDb21wb25lbnQpLFxuICAgICAgbXVsdGk6IHRydWUsXG4gICAgfVxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFBvUmFkaW9Hcm91cENvbXBvbmVudCBleHRlbmRzIFBvUmFkaW9Hcm91cEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBEb0NoZWNrIHtcblxuICAvKiogTGFiZWwgZG8gY2FtcG8uICovXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKiBUZXh0byBkZSBhcG9pbyBkbyBjYW1wby4gKi9cbiAgQElucHV0KCdwLWhlbHAnKSBoZWxwPzogc3RyaW5nO1xuXG4gIEBWaWV3Q2hpbGQoJ2lucCcsIHtyZWFkOiBFbGVtZW50UmVmLCBzdGF0aWM6IHRydWUgfSkgaW5wdXRFbDogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZHJlbignaW5wdXRSYWRpbycpIHJhZGlvTGFiZWxzOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG5cbiAgZGlmZmVyOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoZGlmZmVyczogSXRlcmFibGVEaWZmZXJzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmRpZmZlciA9IGRpZmZlcnMuZmluZChbXSkuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGlmICh0aGlzLmF1dG9Gb2N1cykge1xuICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIG5nRG9DaGVjaygpIHtcbiAgICBjb25zdCBjaGFuZ2UgPSB0aGlzLmRpZmZlci5kaWZmKHRoaXMub3B0aW9ucyk7XG4gICAgaWYgKGNoYW5nZSkge1xuICAgICAgcmVtb3ZlRHVwbGljYXRlZE9wdGlvbnModGhpcy5vcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBldmVudENsaWNrKHZhbHVlOiBhbnksIGRpc2FibGVkOiBhbnkpIHtcbiAgICBpZiAoIWRpc2FibGVkKSB7XG4gICAgICB0aGlzLmNoYW5nZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRnVuw6fDo28gcXVlIGF0cmlidWkgZm9jbyBhbyBjb21wb25lbnRlLlxuICAgKlxuICAgKiBQYXJhIHV0aWxpesOhLWxhIMOpIG5lY2Vzc8OhcmlvIHRlciBhIGluc3TDom5jaWEgZG8gY29tcG9uZW50ZSBubyBET00sIHBvZGVuZG8gc2VyIHV0aWxpemFkbyBvIFZpZXdDaGlsZCBkYSBzZWd1aW50ZSBmb3JtYTpcbiAgICpcbiAgICogYGBgXG4gICAqIGltcG9ydCB7IFBvUmFkaW9Hcm91cENvbXBvbmVudCB9IGZyb20gJ0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpJztcbiAgICpcbiAgICogLi4uXG4gICAqXG4gICAqIEBWaWV3Q2hpbGQoUG9SYWRpb0dyb3VwQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSByYWRpbzogUG9SYWRpb0dyb3VwQ29tcG9uZW50O1xuICAgKlxuICAgKiBmb2N1c1JhZGlvKCkge1xuICAgKiAgIHRoaXMucmFkaW8uZm9jdXMoKTtcbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIGZvY3VzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnJhZGlvTGFiZWxzICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICBjb25zdCByYWRpb0xhYmVsID0gdGhpcy5yYWRpb0xhYmVscy5maW5kKChfLCBpbmRleCkgPT4gIXRoaXMub3B0aW9uc1tpbmRleF0uZGlzYWJsZWQpO1xuXG4gICAgICBpZiAocmFkaW9MYWJlbCkge1xuICAgICAgICByYWRpb0xhYmVsLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRFbGVtZW50QnlWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKGBpbnB1dFt2YWx1ZT0nJHt2YWx1ZX0nXWApO1xuICB9XG5cbiAgb25LZXlVcChldmVudDogS2V5Ym9hcmRFdmVudCwgdmFsdWUpIHtcbiAgICBjb25zdCBrZXkgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LndoaWNoO1xuXG4gICAgaWYgKHRoaXMuaXNBcnJvd0tleShrZXkpKSB7XG4gICAgICB0aGlzLmNoYW5nZVZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGlzQXJyb3dLZXkoa2V5OiBudW1iZXIpIHtcbiAgICByZXR1cm4ga2V5ID49IDM3ICYmIGtleSA8PSA0MDtcbiAgfVxuXG59XG4iXX0=