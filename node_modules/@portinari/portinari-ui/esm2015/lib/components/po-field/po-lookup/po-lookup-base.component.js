import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, isTypeof } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e
 * selecionar o registro que será enviado para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para
 * buscar um registro.
 *
 * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.
 * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.
 *
 * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o
 * `po-select` ou o `po-combo`.
 */
export class PoLookupBaseComponent {
    constructor(defaultService) {
        this.defaultService = defaultService;
        this._disabled = false;
        this._required = false;
        this.oldValue = '';
        this.onChangePropagate = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */
        this.placeholder = '';
        /**
         * Evento será disparado quando ocorrer algum erro na requisição de busca do item.
         * Será passado por parâmetro o objeto de erro retornado.
         */
        this.onError = new EventEmitter();
        /**
         * Evento será disparado quando ocorrer alguma seleção.
         * Será passado por parâmetro o objeto com o valor selecionado.
         */
        this.selected = new EventEmitter();
    }
    /**
     * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface
     * `PoLookupFilter` ou uma URL.
     *
     * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:
     *
     * ```
     * url + ?page=1&pageSize=20&filter=Peter
     * ```
     *
     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:
     * - Coluna decrescente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=-name
     * ```
     *
     * - Coluna ascendente:
     * ```
     *  url + ?page=1&pageSize=20&filter=Peter&order=name
     * ```
     *
     * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o
     * parâmetro `{ age: 23 }` a URL ficaria:
     *
     * ```
     * url + ?page=1&pageSize=20&age=23&filter=Peter
     * ```
     *
     * > Esta URL deve retornar e receber os dados no padrão de
     * [API da PORTINARI](http://tdn.portinari.com/display/public/INT/Guia+de+implementacao+das+APIs+PORTINARI) e utiliza os valores
     * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.
     */
    set filterService(filterService) {
        this._filterService = filterService;
        this.setService(this.filterService);
    }
    get filterService() {
        return this._filterService;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a propriedade nativa `autocomplete` do campo como `off`.
     *
     * @default `false`
     */
    set noAutocomplete(value) {
        this._noAutocomplete = convertToBoolean(value);
    }
    get noAutocomplete() {
        return this._noAutocomplete;
    }
    /**
     * @optional
     * @description
     *
     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel(this.valueToModel);
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @deprecated 2.0.0
     * @description
     *
     * **Deprecated**
     *
     * > Esta propriedade está depreciada e será excluída na versão 2.0.0, utilize a propriedade `p-auto-focus`.
     *
     * Aplica foco no elemento ao ser iniciado.
     *
     * @default `false`
     */
    set oldfocus(focus) {
        this.autoFocus = focus;
    }
    /**
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default false
     * @optional
     */
    set disabled(disabled) {
        this._disabled = disabled === '' ? true : convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.initializeColumn();
    }
    initializeColumn() {
        if (this.fieldLabel) {
            this.keysDescription = [this.fieldLabel];
        }
        else {
            this.keysDescription = [];
            this.keysDescription = this.columns.filter(element => element.fieldLabel)
                .map(element => element.property);
        }
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    // Função implementada do ControlValueAccessor.
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model.
    registerOnTouched(func) {
        this.onTouched = func;
    }
    // Seleciona o valor do model.
    selectValue(valueSelected) {
        this.valueToModel = valueSelected[this.fieldValue];
        this.callOnChange(this.valueToModel);
        this.selected.emit(valueSelected);
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada.
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    }
    searchById(value) {
        if (typeof (value) === 'string') {
            value = value.trim();
        }
        if (value !== '') {
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams).subscribe(element => {
                if (element) {
                    this.oldValue = element[this.fieldLabel];
                    this.selectValue(element);
                    this.setViewValue(this.getFormattedLabel(element), element);
                }
                else {
                    this.cleanModel();
                }
            }, error => {
                this.cleanModel();
                this.onError.emit(error);
            });
        }
        else {
            this.cleanModel();
        }
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
    }
    writeValue(value) {
        if (value && value instanceof Object) {
            // Esta condição é executada quando é retornado o objeto selecionado do componente Po Lookup Modal.
            this.oldValue = value[this.fieldLabel];
            this.valueToModel = value[this.fieldValue];
            this.setViewValue(this.getFormattedLabel(value), value);
        }
        else if (value) {
            // Esta condição é executada somente quando é passado o ID para realizar a busca pelo ID.
            this.searchById(value);
        }
        else {
            this.cleanViewValue();
        }
    }
    cleanModel() {
        this.cleanViewValue();
        this.callOnChange(undefined);
    }
    cleanViewValue() {
        this.setViewValue('', {});
        this.oldValue = '';
        this.valueToModel = null;
    }
    // Formata a label do campo.
    getFormattedLabel(value) {
        return value ? this.keysDescription.map(column => value[column]).join(' - ') : '';
    }
    // Chama o método writeValue e preenche o model.
    selectModel(value) {
        this.writeValue(value);
        if (value && value instanceof Object) {
            this.selectValue(value);
        }
    }
    validateModel(model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    }
    setService(service) {
        if (isTypeof(service, 'object')) {
            this.service = service;
        }
        if (service && isTypeof(service, 'string')) {
            this.service = this.defaultService;
            this.service.setUrl(service);
        }
    }
}
tslib_1.__decorate([
    Input('p-auto-focus'), InputBoolean(),
    tslib_1.__metadata("design:type", Boolean)
], PoLookupBaseComponent.prototype, "autoFocus", void 0);
tslib_1.__decorate([
    Input('p-label'),
    tslib_1.__metadata("design:type", String)
], PoLookupBaseComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input('p-literals'),
    tslib_1.__metadata("design:type", Object)
], PoLookupBaseComponent.prototype, "literals", void 0);
tslib_1.__decorate([
    Input('p-help'),
    tslib_1.__metadata("design:type", String)
], PoLookupBaseComponent.prototype, "help", void 0);
tslib_1.__decorate([
    Input('p-placeholder'),
    tslib_1.__metadata("design:type", String)
], PoLookupBaseComponent.prototype, "placeholder", void 0);
tslib_1.__decorate([
    Input('name'),
    tslib_1.__metadata("design:type", String)
], PoLookupBaseComponent.prototype, "name", void 0);
tslib_1.__decorate([
    Input('p-field-value'),
    tslib_1.__metadata("design:type", String)
], PoLookupBaseComponent.prototype, "fieldValue", void 0);
tslib_1.__decorate([
    Input('p-field-label'),
    tslib_1.__metadata("design:type", String)
], PoLookupBaseComponent.prototype, "fieldLabel", void 0);
tslib_1.__decorate([
    Input('p-filter-params'),
    tslib_1.__metadata("design:type", Object)
], PoLookupBaseComponent.prototype, "filterParams", void 0);
tslib_1.__decorate([
    Input('p-field-format'),
    tslib_1.__metadata("design:type", Function)
], PoLookupBaseComponent.prototype, "fieldFormat", void 0);
tslib_1.__decorate([
    Input('p-columns'),
    tslib_1.__metadata("design:type", Array)
], PoLookupBaseComponent.prototype, "columns", void 0);
tslib_1.__decorate([
    Input('p-filter-service'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoLookupBaseComponent.prototype, "filterService", null);
tslib_1.__decorate([
    Input('p-no-autocomplete'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoLookupBaseComponent.prototype, "noAutocomplete", null);
tslib_1.__decorate([
    Input('p-optional'),
    tslib_1.__metadata("design:type", Boolean)
], PoLookupBaseComponent.prototype, "optional", void 0);
tslib_1.__decorate([
    Input('p-required'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoLookupBaseComponent.prototype, "required", null);
tslib_1.__decorate([
    Input('p-focus'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoLookupBaseComponent.prototype, "oldfocus", null);
tslib_1.__decorate([
    Input('p-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoLookupBaseComponent.prototype, "disabled", null);
tslib_1.__decorate([
    Output('p-error'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoLookupBaseComponent.prototype, "onError", void 0);
tslib_1.__decorate([
    Output('p-selected'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoLookupBaseComponent.prototype, "selected", void 0);
//# sourceMappingURL=data:application/json;base64,