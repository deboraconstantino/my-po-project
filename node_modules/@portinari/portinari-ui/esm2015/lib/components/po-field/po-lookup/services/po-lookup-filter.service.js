import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
let PoLookupFilterService = class PoLookupFilterService {
    constructor(httpClient) {
        this.httpClient = httpClient;
    }
    getFilteredItems(filteredItemsParams) {
        const { filterParams } = filteredItemsParams, restFilteredItemsParams = tslib_1.__rest(filteredItemsParams, ["filterParams"]);
        const validatedFilterParams = this.validateParams(filterParams);
        const params = Object.assign({}, restFilteredItemsParams, validatedFilterParams);
        return this.httpClient.get(this.url, { params });
    }
    getObjectByValue(value, filterParams) {
        const validatedFilterParams = this.validateParams(filterParams);
        return this.httpClient.get(`${this.url}/${value}`, { params: validatedFilterParams });
    }
    setUrl(url) {
        this.url = url;
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
};
PoLookupFilterService.ctorParameters = () => [
    { type: HttpClient }
];
PoLookupFilterService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], PoLookupFilterService);
export { PoLookupFilterService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvc2VydmljZXMvcG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFLbEQ7Ozs7OztHQU1HO0FBRUgsSUFBYSxxQkFBcUIsR0FBbEMsTUFBYSxxQkFBcUI7SUFJaEMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFHLENBQUM7SUFFOUMsZ0JBQWdCLENBQUMsbUJBQWdEO1FBQy9ELE1BQU0sRUFBRSxZQUFZLEtBQWlDLG1CQUFtQixFQUFsRCwrRUFBa0QsQ0FBQztRQUV6RSxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFaEUsTUFBTSxNQUFNLHFCQUFRLHVCQUF1QixFQUFLLHFCQUFxQixDQUFFLENBQUM7UUFFeEUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsS0FBYSxFQUFFLFlBQWtCO1FBQ2hELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVoRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXO1FBQ2hCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ2pCLENBQUM7SUFFTyxjQUFjLENBQUMsTUFBVztRQUNoQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNuRixDQUFDO0NBRUYsQ0FBQTs7WUExQmlDLFVBQVU7O0FBSi9CLHFCQUFxQjtJQURqQyxVQUFVLEVBQUU7NkNBS3FCLFVBQVU7R0FKL0IscUJBQXFCLENBOEJqQztTQTlCWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTG9va3VwRmlsdGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLWxvb2t1cC1maWx0ZXJlZC1pdGVtcy1wYXJhbXMuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyBwYWRyw6NvIHV0aWxpemFkbyBwYXJhIGZpbHRyYXIgb3MgZGFkb3MgZG8gY29tcG9uZW50ZSBwby1sb29rdXAuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0xvb2t1cEZpbHRlclNlcnZpY2UgaW1wbGVtZW50cyBQb0xvb2t1cEZpbHRlciB7XG5cbiAgcHJpdmF0ZSB1cmw6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHt9XG5cbiAgZ2V0RmlsdGVyZWRJdGVtcyhmaWx0ZXJlZEl0ZW1zUGFyYW1zOiBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHsgZmlsdGVyUGFyYW1zLCAuLi5yZXN0RmlsdGVyZWRJdGVtc1BhcmFtcyB9ID0gZmlsdGVyZWRJdGVtc1BhcmFtcztcblxuICAgIGNvbnN0IHZhbGlkYXRlZEZpbHRlclBhcmFtcyA9IHRoaXMudmFsaWRhdGVQYXJhbXMoZmlsdGVyUGFyYW1zKTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IHsgLi4ucmVzdEZpbHRlcmVkSXRlbXNQYXJhbXMsIC4uLnZhbGlkYXRlZEZpbHRlclBhcmFtcyB9O1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQodGhpcy51cmwsIHsgcGFyYW1zIH0pO1xuICB9XG5cbiAgZ2V0T2JqZWN0QnlWYWx1ZSh2YWx1ZTogc3RyaW5nLCBmaWx0ZXJQYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IHZhbGlkYXRlZEZpbHRlclBhcmFtcyA9IHRoaXMudmFsaWRhdGVQYXJhbXMoZmlsdGVyUGFyYW1zKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KGAke3RoaXMudXJsfS8ke3ZhbHVlfWAsIHsgcGFyYW1zOiB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgfSk7XG4gIH1cblxuICBzZXRVcmwodXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLnVybCA9IHVybDtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVQYXJhbXMocGFyYW1zOiBhbnkpIHtcbiAgICByZXR1cm4gaXNUeXBlb2YocGFyYW1zLCAnb2JqZWN0JykgJiYgIUFycmF5LmlzQXJyYXkocGFyYW1zKSA/IHBhcmFtcyA6IHVuZGVmaW5lZDtcbiAgfVxuXG59XG4iXX0=