import { PoInputGeneric } from '../po-input-generic/po-input-generic';
export class PoNumberBaseComponent extends PoInputGeneric {
    constructor(elementRef) {
        super(elementRef);
        this.type = 'number';
    }
    eventOnInput(e) {
        if (!this.mask) {
            let value = e.target.value;
            const valueMaxlength = this.validMaxLength(this.maxlength, value);
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    }
    validMaxLength(maxlength, value) {
        if (maxlength && value.length > maxlength) {
            const substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else { // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    }
    isEndWithDot(value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    }
    formatNumber(value) {
        return value ? Number(value) : null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbnVtYmVyLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1udW1iZXIvcG8tbnVtYmVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUV0RSxNQUFNLE9BQWdCLHFCQUFzQixTQUFRLGNBQWM7SUFJaEUsWUFBWSxVQUFzQjtRQUNoQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFIcEIsU0FBSSxHQUFHLFFBQVEsQ0FBQztJQUloQixDQUFDO0lBRUQsWUFBWSxDQUFDLENBQU07UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUMzQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFbEUsSUFBSSxLQUFLLEtBQUssY0FBYyxFQUFFO2dCQUM1QixLQUFLLEdBQUcsY0FBYyxDQUFDO2dCQUV2QixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2FBQzFDO1lBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDN0M7SUFDSCxDQUFDO0lBRUQsY0FBYyxDQUFDLFNBQWlCLEVBQUUsS0FBYTtRQUU3QyxJQUFJLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRTtZQUN6QyxNQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUVoRSxJQUFJLGNBQWMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxFQUFFO2dCQUN2RCxPQUFPLGNBQWMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5RDtZQUVELE9BQU8sY0FBYyxDQUFDO1NBQ3ZCO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQUs7UUFDbkIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7Z0JBQ3hCLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtvQkFDYixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFFakYsdUZBQXVGO29CQUN2RixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO3dCQUM1QixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztxQkFDbkQ7aUJBQ0Y7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztpQkFDMUM7YUFDRjtpQkFBTSxFQUFFLG9EQUFvRDtnQkFDM0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzthQUN2QztTQUNGO1FBRUQscUVBQXFFO1FBRXJFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRS9CLENBQUM7SUFFTyxZQUFZLENBQUMsS0FBYTtRQUNoQyxPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTyxZQUFZLENBQUMsS0FBSztRQUN4QixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDdEMsQ0FBQztDQUVGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9JbnB1dEdlbmVyaWMgfSBmcm9tICcuLi9wby1pbnB1dC1nZW5lcmljL3BvLWlucHV0LWdlbmVyaWMnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9OdW1iZXJCYXNlQ29tcG9uZW50IGV4dGVuZHMgUG9JbnB1dEdlbmVyaWMge1xuXG4gIHR5cGUgPSAnbnVtYmVyJztcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZik7XG4gIH1cblxuICBldmVudE9uSW5wdXQoZTogYW55KSB7XG4gICAgaWYgKCF0aGlzLm1hc2spIHtcbiAgICAgIGxldCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgY29uc3QgdmFsdWVNYXhsZW5ndGggPSB0aGlzLnZhbGlkTWF4TGVuZ3RoKHRoaXMubWF4bGVuZ3RoLCB2YWx1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gdmFsdWVNYXhsZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZU1heGxlbmd0aDtcblxuICAgICAgICB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGxPbkNoYW5nZSh0aGlzLmZvcm1hdE51bWJlcih2YWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkTWF4TGVuZ3RoKG1heGxlbmd0aDogbnVtYmVyLCB2YWx1ZTogc3RyaW5nKSB7XG5cbiAgICBpZiAobWF4bGVuZ3RoICYmIHZhbHVlLmxlbmd0aCA+IG1heGxlbmd0aCkge1xuICAgICAgY29uc3Qgc3Vic3RyaW5nVmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCBtYXhsZW5ndGgpO1xuXG4gICAgICBpZiAoc3Vic3RyaW5nVmFsdWUgJiYgdGhpcy5pc0VuZFdpdGhEb3Qoc3Vic3RyaW5nVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzdWJzdHJpbmdWYWx1ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCBtYXhsZW5ndGggLSAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN1YnN0cmluZ1ZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHdyaXRlVmFsdWVNb2RlbCh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmlucHV0RWwpIHtcbiAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICBpZiAodGhpcy5tYXNrKSB7XG4gICAgICAgICAgdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLm9iak1hc2suY29udHJvbEZvcm1hdHRpbmcoU3RyaW5nKHZhbHVlKSk7XG5cbiAgICAgICAgICAvLyBTZSBvIG1vZGVsIGZvciBkZWZpbmlkbyBjb21vIGZvcm1hdGFkbywgZW50w6NvIHByZWNpc2EgYXR1YWxpesOhLWxvIG5vIHByaW1laXJvIGFjZXNzb1xuICAgICAgICAgIGlmICh0aGlzLm9iak1hc2suZm9ybWF0TW9kZWwpIHtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2VQcm9wYWdhdGUodGhpcy5vYmpNYXNrLnZhbHVlVG9Nb2RlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7IC8vIFNlIGZvciBvIHZhbG9yIGZvciB1bmRlZmluZWQsIGRldmUgbGltcGFyIG8gY2FtcG9cbiAgICAgICAgdGhpcy5pbnB1dEVsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFbWl0ZSBldmVudG8gcXVhbmRvIG8gbW9kZWwgw6kgYXR1YWxpemFkbywgaW5jbHVzaXZlIGEgcHJpbWVpcmEgdmV6XG5cbiAgICB0aGlzLmNoYW5nZU1vZGVsLmVtaXQodmFsdWUpO1xuXG4gIH1cblxuICBwcml2YXRlIGlzRW5kV2l0aERvdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLmxhc3RJbmRleE9mKCcuJykgPT09IHZhbHVlLmxlbmd0aCAtIDE7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdE51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IE51bWJlcih2YWx1ZSkgOiBudWxsO1xuICB9XG5cbn1cbiJdfQ==