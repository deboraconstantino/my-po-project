import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoColorPaletteEnum } from '../../enums/po-color-palette.enum';
import { PoTagOrientation } from './enums/po-tag-orientation.enum';
import { PoTagType } from './enums/po-tag-type.enum';
const poTagColors = Object.values(PoColorPaletteEnum);
const poTagOrientationDefault = PoTagOrientation.Vertical;
/**
 * @description
 *
 * Este componente permite exibir um valor em forma de um marcador colorido, sendo possível definir uma legenda e realizar customizações
 * na cor, iconografia e tipo.
 *
 * Além disso, é possível definir uma ação que será executada tanto ao *click* quanto através das teclas *enter/space* enquanto navega
 * utilizando a tecla *tab*.
 *
 * Seu uso é recomendado para informações que necessitem de destaque em forma de marcação.
 */
export class PoTagBaseComponent {
    constructor() {
        this._orientation = poTagOrientationDefault;
        this.poTagOrientation = PoTagOrientation;
        /**
         * @optional
         *
         * @description
         *
         * Ação que será executada ao clicar sobre o `po-tag` e que receberá como parâmetro um objeto contendo o seu valor e tipo.
         */
        this.click = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Define uma cor para a *tag*.
     *
     * Valores válidos:
     *  - <span class="dot po-color-01"></span> `color-01`
     *  - <span class="dot po-color-02"></span> `color-02`
     *  - <span class="dot po-color-03"></span> `color-03`
     *  - <span class="dot po-color-04"></span> `color-04`
     *  - <span class="dot po-color-05"></span> `color-05`
     *  - <span class="dot po-color-06"></span> `color-06`
     *  - <span class="dot po-color-07"></span> `color-07`
     *  - <span class="dot po-color-08"></span> `color-08`
     *  - <span class="dot po-color-09"></span> `color-09`
     *  - <span class="dot po-color-10"></span> `color-10`
     *  - <span class="dot po-color-11"></span> `color-11`
     *  - <span class="dot po-color-12"></span> `color-12`
     *
     * > **Atenção:** A propriedade `p-type` sobrepõe esta definição.
     */
    set color(value) {
        this._color = poTagColors.includes(value) ? value : undefined;
    }
    get color() {
        return this._color;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define ou ativa um ícone que será exibido ao lado do valor da *tag*.
     *
     * > Veja os valores válidos na [biblioteca de ícones](guides/icons).
     *
     * Quando `p-type` estiver definida, basta informar um valor igual a `true` para que o ícone seja exibido conforme descrições abaixo:
     * - <span class="po-icon po-icon-ok"></span> - `success`
     * - <span class="po-icon po-icon-warning"></span> - `warning`
     * - <span class="po-icon po-icon-close"></span> - `danger`
     * - <span class="po-icon po-icon-info"></span> - `info`
     *
     * @default `false`
     */
    set icon(value) {
        if (this.type) {
            this._icon = convertToBoolean(value);
        }
        else {
            this._icon = value;
        }
    }
    get icon() {
        return this._icon;
    }
    /**
     * @optional
     *
     * @description
     *
     * Ativa a inversão de cores configuradas no componente, possibilitando uma visualização de status ativo e inativo.
     *
     * > A cor do texto, do ícone e da borda ficam com a cor utilizada na propriedade `p-color` ou a cor correspondente ao `p-type`,
     * e a cor do fundo fica branca.
     *
     * @default `false`
     */
    set inverse(value) {
        this._inverse = convertToBoolean(value);
    }
    get inverse() {
        return this._inverse;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o *layout* de exibição.
     *
     * @default `vertical`
     */
    set orientation(value) {
        this._orientation = Object.values(PoTagOrientation).includes(value) ? value : poTagOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tipo da *tag*.
     *
     * Valores válidos:
     *  - `success`: cor verde utilizada para simbolizar sucesso ou êxito.
     *  - `warning`: cor amarela que representa aviso ou advertência.
     *  - `danger`: cor vermelha para erro ou aviso crítico.
     *  - `info`: cor cinza escuro que caracteriza conteúdo informativo.
     *
     * > Quando esta propriedade for definida, irá sobrepor a definição de `p-color` e `p-icon` somente será exibido caso seja `true`.
     *
     * @default `info`
     */
    set type(value) {
        this._type = Object.values(PoTagType).includes(value) ? value : undefined;
    }
    get type() {
        return this._type;
    }
}
tslib_1.__decorate([
    Input('p-color'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoTagBaseComponent.prototype, "color", null);
tslib_1.__decorate([
    Input('p-icon'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoTagBaseComponent.prototype, "icon", null);
tslib_1.__decorate([
    Input('p-inverse'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoTagBaseComponent.prototype, "inverse", null);
tslib_1.__decorate([
    Input('p-label'),
    tslib_1.__metadata("design:type", String)
], PoTagBaseComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input('p-orientation'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoTagBaseComponent.prototype, "orientation", null);
tslib_1.__decorate([
    Input('p-type'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoTagBaseComponent.prototype, "type", null);
tslib_1.__decorate([
    Input('p-value'),
    tslib_1.__metadata("design:type", String)
], PoTagBaseComponent.prototype, "value", void 0);
tslib_1.__decorate([
    Output('p-click'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoTagBaseComponent.prototype, "click", void 0);
//# sourceMappingURL=data:application/json;base64,