import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChild, DoCheck, ElementRef, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { NavigationCancel, NavigationEnd, Router } from '@angular/router';
import { map } from 'rxjs/operators';
import { getFormattedLink, isMobile, openExternalLink } from '../../utils/util';
import { PoMenuBaseComponent } from './po-menu-base.component';
import { PoMenuHeaderTemplateDirective } from './po-menu-header-template/po-menu-header-template.directive';
import { PoMenuItemsService } from './services/po-menu-items.service';
import { PoMenuService } from './services/po-menu.service';
const poMenuDebounceTime = 400;
const poMenuMinLength = 3;
const poMenuRootLevel = 1;
/**
 * @docsExtends PoMenuBaseComponent
 *
 * @description
 *
 * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.
 *
 * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.
 * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,
 * então o menu alternará novamente para o estado aberto.
 *
 * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.
 *
 * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,
 * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).
 *
 * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de
 * um serviço customizado implementando a interface `PoMenuFilter`.
 *
 * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de
 *  sua aplicação:
 *
 * ````
 * import { RouterModule, Routes } from '@angular/router';
 *
 * ...
 *
 * @NgModule({
 *   imports: [
 *     RouterModule,
 *     Routes,
 *     ...
 *     PoModule,
 *     ...
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 *
 * Além disso é necessário criar um módulo configurando as rotas da aplicação.
 *
 * ```
 * import { NgModule } from '@angular/core';
 *
 * import { RouterModule, Routes } from '@angular/router';
 *
 * import { HelloWorldComponent } from './hello-world/hello-world.component';
 *
 * const routes: Routes = [
 *   {path: 'hello-world', component: HelloWorldComponent}
 * ];
 *
 * @NgModule({
 *   imports: [RouterModule.forRoot(routes, {useHash: true})],
 *   exports: [RouterModule]
 * })
 * export class AppRoutingModule {}
 * ```
 *
 * @example
 *
 * <example name="po-menu-basic" title="Portinari Menu Basic">
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.html"> </file>
 *   <file name="sample-po-menu-basic/sample-po-menu-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-labs" title="Portinari Menu Labs">
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.html"> </file>
 *   <file name="sample-po-menu-labs/sample-po-menu-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-menu-human-resources" title="Portinari Menu - Human Resources">
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.html"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts"> </file>
 *   <file name="sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts"> </file>
 * </example>
 */
let PoMenuComponent = class PoMenuComponent extends PoMenuBaseComponent {
    constructor(changeDetector, viewRef, element, renderer, router, menuItemsService, menuService) {
        super(menuService);
        this.changeDetector = changeDetector;
        this.element = element;
        this.renderer = renderer;
        this.router = router;
        this.menuItemsService = menuItemsService;
        this.filterLoading = false;
        this.mobileOpened = false;
        this.noData = false;
        this.filteringItems = false;
        this.menuInitialized = false;
        this.menuPrevious = null;
        this.parentRef = viewRef['_view']['component'];
    }
    get isActiveItemMenuSubMenu() {
        return this.activeMenuItem['level'] > this.groupedMenuItem['level'];
    }
    get enableCollapse() {
        return this.isCollapsed && !this.collapsedMobile;
    }
    get enableCollapseButton() {
        return this.allowCollapseMenu && !this.collapsed && !this.mobileOpened;
    }
    get hasFooter() {
        return this.allowCollapseMenu && !this.mobileOpened && this.enableCollapseButton || (this.collapsed && !this.collapsedMobile);
    }
    get isCollapsed() {
        return this.allowCollapseMenu && this.collapsed;
    }
    ngDoCheck() {
        if (this.filteringItems && this.filter) {
            return;
        }
        const menuCurrent = JSON.stringify(this.menus);
        if (this.menuPrevious !== menuCurrent || !this.menuInitialized) {
            this.updateMenu();
            this.validateCollapseClass();
        }
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
        if (this.resizeListener) {
            this.resizeListener();
        }
    }
    ngOnInit() {
        this.subscribeToMenuItem();
        this.subscribeToRoute();
        setTimeout(() => {
            const urlRouter = this.checkingRouterChildrenFragments();
            this.checkActiveMenuByUrl(urlRouter);
        });
    }
    activateMenuByUrl(urlPath, menus) {
        if (menus) {
            return menus.some(menu => {
                const formattedLink = getFormattedLink(menu.link);
                if (formattedLink === urlPath) {
                    this.linkActive = formattedLink;
                    this.activateMenuItem(menu);
                    return true;
                }
                else {
                    return this.activateMenuByUrl(urlPath, menu.subItems);
                }
            });
        }
    }
    checkActiveMenuByUrl(urlPath) {
        if (!this.linkActive || this.linkActive !== urlPath) {
            this.activateMenuByUrl(urlPath, this.menus);
        }
    }
    /**
     * <a id="colapseMethod"></a>
     *
     * *Método para colapsar (retrair) o menu.
     */
    collapse() {
        this.validateToggleMenu(true);
    }
    debounceFilter(filter) {
        clearTimeout(this.timeoutFilter);
        this.timeoutFilter = setTimeout(() => {
            this.filterProcess(filter);
        }, poMenuDebounceTime);
    }
    /**
     * <a id="expandMethod"></a>
     *
     * *Método para expandir (aumentar) o menu.
     */
    expand() {
        this.validateToggleMenu(false);
    }
    subscribeToMenuItem() {
        this.itemSubscription = this.menuItemsService.receiveFromChildMenuClicked().subscribe((menu) => {
            this.clickMenuItem(menu);
        });
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkingRouterChildrenFragments();
                this.checkActiveMenuByUrl(urlRouter);
            }
        });
    }
    /**
     * <a id="toggleMethod"></a>
     * *Método que colapsa e expande o menu alternadamente.
     *
     * > *Os métodos apenas vão colapsar/expandir o menu se:
     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.
     */
    toggle() {
        this.validateToggleMenu(!this.collapsed);
    }
    toggleMenuMobile() {
        this.mobileOpened = !this.mobileOpened;
        this.collapsedMobile = this.collapsed && this.mobileOpened;
        this.validateCollapseClass(this.collapsedMobile);
        if (isMobile()) {
            return;
        }
        if (this.mobileOpened) {
            this.createResizeListener();
        }
    }
    activateCollapseSubMenuItem() {
        this.clearGroupMenuIfFirstLevel(this.activeMenuItem);
        if (!this.collapsed && this.activeMenuItem['level'] > poMenuRootLevel && this.isActiveItemMenuSubMenu) {
            this.openParentMenu(this.activeMenuItem);
        }
    }
    activateMenuItem(menu) {
        this.activeMenuItem = menu;
        this.linkActive = menu.link;
        if (this.activeMenuItem['level'] > poMenuRootLevel) {
            this.openParentMenu(this.activeMenuItem);
        }
        else {
            this.groupedMenuItem = null;
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
    }
    areSubMenus(menus) {
        return menus.every(menu => menu['level'] > poMenuRootLevel);
    }
    checkingRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '';
    }
    clearGroupMenuIfFirstLevel(activeMenuItem) {
        if (activeMenuItem['level'] === poMenuRootLevel) {
            this.groupedMenuItem = undefined;
        }
    }
    clickMenuItem(menu) {
        if (menu.action) {
            this.executeMenuAction(menu);
        }
        if (menu['type'] === 'externalLink') {
            openExternalLink(menu.link);
        }
        else if (menu['type'] === 'internalLink') {
            this.activateMenuItem(menu);
        }
        else if (menu['type'] === 'subItems') {
            if (this.filteringItems) {
                this.filteringItems = false;
            }
            this.groupMenuItem(menu);
        }
        if (menu['type'] !== 'subItems') {
            this.mobileOpened = false;
        }
    }
    convertToMenuItemFiltered(menuItem = { label: '', link: '' }) {
        const { label, link } = menuItem;
        const menuItemFiltered = { label, link };
        this.setMenuItemProperties(menuItemFiltered);
        return menuItemFiltered;
    }
    createResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.toggleResize();
            this.resizeListener();
        });
    }
    executeMenuAction(menu) {
        if (typeof menu.action === 'string') {
            this.parentRef[menu.action](menu);
        }
        else {
            menu.action.call(this.parentRef, menu);
        }
    }
    filterItems(filter) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const trimFilter = filter && filter.trim();
            if (trimFilter) {
                this.filteredItems = [];
                this.filteredItems = this.filterService ? yield this.filterOnService(trimFilter) : this.filterLocalItems(trimFilter);
                this.filteringItems = true;
            }
            else {
                this.filteredItems = [...this.menus];
                this.filteringItems = false;
            }
        });
    }
    filterLocalItems(filter) {
        const filteredItems = [];
        this.findItems(this.menus, filter.toLowerCase(), filteredItems);
        return filteredItems;
    }
    filterProcess(filter) {
        this.filterLoading = true;
        this.filterItems(filter).then(() => {
            this.filterLoading = false;
            this.showNoData();
            this.changeDetector.detectChanges();
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
        }).catch(error => {
            this.filterLoading = false;
            Promise.reject(error);
        });
    }
    filterOnService(search = '') {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (search.length >= poMenuMinLength) {
                return yield this.filterService.getFilteredData(search, this.params)
                    .pipe(map(menuItemsFiltered => menuItemsFiltered.map(menuItem => this.convertToMenuItemFiltered(menuItem))))
                    .toPromise();
            }
            else {
                return this.filteredItems;
            }
        });
    }
    findItems(menus, filter, filteredItems) {
        menus.forEach(menu => {
            if ((menu.label.toLowerCase().includes(filter) && !menu.subItems) ||
                (menu.subItems && this.findItems(menu.subItems, filter, filteredItems))) {
                filteredItems.push(menu);
            }
        });
    }
    findParent(menus, menuItem) {
        const getParent = function (menuItems, id) {
            if (menuItems) {
                for (let index = 0; index < menuItems.length; index++) {
                    const menu = menuItems[index];
                    if (menu.subItems && menu.subItems.find(subItem => subItem['id'] === id)) {
                        return menu;
                    }
                    const found = getParent(menu.subItems, id);
                    if (found) {
                        return found;
                    }
                }
            }
        };
        return getParent(menus, menuItem['id']);
    }
    findRootParent(menus, menu) {
        const findParent = this.findParent;
        const getRootParent = function (menuItems, menuItem) {
            let parent = findParent(menuItems, menuItem);
            if (parent['level'] !== poMenuRootLevel) {
                parent = getRootParent(menuItems, parent);
            }
            return parent;
        };
        return getRootParent(menus, menu);
    }
    getActiveMenuParent(menus, activeMenuItem, groupedMenuItem) {
        if (this.areSubMenus([groupedMenuItem, activeMenuItem])) {
            return this.findRootParent(menus, activeMenuItem);
        }
    }
    groupMenuItem(menu) {
        if (this.collapsed) {
            this.toggleMenuCollapse();
        }
        menu['isOpened'] = !menu['isOpened'];
        this.groupedMenuItem = menu;
        if (this.activeMenuItem && menu['isOpened']
            && this.isActiveItemMenuSubMenu
            && this.isRootMenuEqualGroupedMenu(this.menus, this.activeMenuItem, menu)) {
            this.activateMenuItem(this.activeMenuItem);
        }
        this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem });
    }
    isRootMenuEqualGroupedMenu(menus, activeMenuItem, groupedMenuItem) {
        const activeMenuRootParent = this.findRootParent(menus, activeMenuItem);
        return activeMenuRootParent['id'] === groupedMenuItem['id'];
    }
    openParentMenu(childMenu) {
        const parent = this.findParent(this.menus, childMenu);
        parent['isOpened'] = true;
        this.groupedMenuItem = parent;
    }
    showNoData() {
        this.noData = this.filteredItems.length === 0;
    }
    toggleGroupedMenuItem() {
        this.groupedMenuItem['isOpened'] = !this.collapsed && this.allowCollapseMenu;
    }
    toggleMenuCollapse(collapsed = false) {
        this.collapsed = collapsed;
        if (this.groupedMenuItem && this.activeMenuItem) {
            this.groupedMenuItem = this.getActiveMenuParent(this.menus, this.activeMenuItem, this.groupedMenuItem) || this.groupedMenuItem;
            this.toggleGroupedMenuItem();
        }
        if (this.activeMenuItem) {
            this.activateCollapseSubMenuItem();
            this.menuItemsService.sendToChildMenuClicked({ active: this.activeMenuItem, grouped: this.groupedMenuItem, activatedByRoute: true });
        }
        this.updateMenu();
    }
    toggleResize() {
        if (this.mobileOpened) {
            this.mobileOpened = false;
            this.collapsedMobile = false;
            this.validateCollapseClass(this.collapsedMobile);
        }
    }
    validateToggleMenu(collapsed) {
        if (!this.allowCollapseMenu) {
            return;
        }
        this.toggleMenuCollapse(collapsed);
    }
    updateMenu() {
        this.menuInitialized = true;
        this.setMenuExtraProperties();
        this.filteredItems = [...this.menus];
        this.menuPrevious = JSON.stringify(this.menus);
        this.validateMenus(this.menus);
    }
    validateCollapseClass(collapsedMobile) {
        const wrapper = this.element.nativeElement.parentNode;
        this.renderer[this.isCollapsed && !collapsedMobile ? 'addClass' : 'removeClass'](wrapper, 'po-collapsed-menu');
    }
};
PoMenuComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: Renderer2 },
    { type: Router },
    { type: PoMenuItemsService },
    { type: PoMenuService }
];
tslib_1.__decorate([
    ContentChild(PoMenuHeaderTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", PoMenuHeaderTemplateDirective)
], PoMenuComponent.prototype, "menuHeaderTemplate", void 0);
PoMenuComponent = tslib_1.__decorate([
    Component({
        selector: 'po-menu',
        template: "<div *ngIf=\"mobileOpened\" class=\"po-menu-overlay\" (click)=\"toggleMenuMobile()\"></div>\n<div class=\"po-menu-mobile po-clickable\" (click)=\"toggleMenuMobile()\">\n  <span class=\"po-icon po-icon-menu\"></span>\n</div>\n\n<div class=\"po-menu\" [ngClass]=\"{ 'po-menu-animation' : mobileOpened }\">\n\n  <div class=\"po-menu-header\">\n    <div *ngIf=\"logo || (shortLogo && enableCollapse)\" class=\"po-menu-header-container-logo\">\n      <a href=\"./\">\n        <img\n          [ngClass]=\"enableCollapse ? 'po-menu-short-logo' : 'po-menu-logo'\"\n          [src]=\"enableCollapse ? shortLogo || logo : logo\">\n      </a>\n    </div>\n\n    <div *ngIf=\"!enableCollapse && menuHeaderTemplate\" class=\"po-menu-header-template\">\n      <ng-container *ngTemplateOutlet=\"menuHeaderTemplate.templateRef\"></ng-container>\n    </div>\n\n    <po-menu-filter *ngIf=\"filter && !enableCollapse\"\n      [p-loading]=\"filterLoading\"\n      (p-filter)=\"debounceFilter($event)\">\n    </po-menu-filter>\n  </div>\n\n  <nav class=\"po-menu-body\">\n\n    <!-- Inner e outer para esconder scroll -->\n    <div class=\"po-menu-outer\">\n      <div class=\"po-menu-inner\">\n\n        <div *ngIf=\"noData\" class=\"po-menu-item-wrapper\">\n          <div class=\"po-menu-item-first\">\n            <div class=\"po-menu-icon-container po-menu-item-no-data\">\n              <span class=\"po-icon po-icon-info po-menu-icon-item po-lg-2\"></span>\n              <div class=\"po-lg-10 po-menu-icon-label\"> {{literals.itemNotFound}} </div>\n            </div>\n          </div>\n        </div>\n\n        <div *ngFor=\"let menu of filteredItems, let menuIndex = index;\" class=\"po-menu-item-wrapper\">\n          <po-menu-item\n            [class.po-menu-item-first]=\"menuIndex === 0\"\n            [p-action]=\"menu.action\"\n            [p-badge-alert]=\"menu.badgeAlert\"\n            [p-badge-color]=\"menu.badge ? menu.badge.color : undefined\"\n            [p-badge-value]=\"menu.badge ? menu.badge.value : undefined\"\n            [p-collapsed-menu]=\"enableCollapse\"\n            [p-icon]=\"allowIcons ? menu.icon : null\"\n            [p-id]=\"menu.id\"\n            [p-label]=\"menu.label\"\n            [p-level]=\"menu.level\"\n            [p-link]=\"menu.link\"\n            [p-short-label]=\"menu.shortLabel\"\n            [p-sub-items]=\"menu.subItems\"\n            [p-type]=\"menu.type\">\n          </po-menu-item>\n        </div>\n      </div>\n    </div>\n  </nav>\n\n  <div *ngIf=\"hasFooter\" class=\"po-menu-footer\">\n    <a\n      class=\"po-menu-collapse-button-icon po-clickable\"\n      (click)=\"toggle()\">\n\n      <span class=\"po-icon\"\n        [class.po-icon-menu-close]=\"enableCollapseButton\"\n        [class.po-icon-menu-open]=\"enableCollapse\">\n      </span>\n    </a>\n  </div>\n</div>\n",
        providers: [PoMenuItemsService, PoMenuService]
    }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef,
        ViewContainerRef,
        ElementRef,
        Renderer2,
        Router,
        PoMenuItemsService,
        PoMenuService])
], PoMenuComponent);
export { PoMenuComponent };
//# sourceMappingURL=data:application/json;base64,