import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { PoTreeViewBaseComponent } from './po-tree-view-base.component';
import { PoTreeViewService } from './services/po-tree-view.service';
/**
 * @docsExtends PoTreeViewBaseComponent
 *
 * @example
 *
 * <example name="po-tree-view-basic" title="Portinari Tree View Basic">
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-labs" title="Portinari Tree View Labs">
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-folder-structure" title="Portinari Tree View - Folder Structure">
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-supermarket" title="Portinari Tree View - Supermarket">
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
 * </example>
 */
let PoTreeViewComponent = class PoTreeViewComponent extends PoTreeViewBaseComponent {
    constructor(treeViewService) {
        super();
        this.treeViewService = treeViewService;
    }
    get hasItems() {
        return !!(this.items && this.items.length);
    }
    ngOnInit() {
        this.treeViewService.onExpand().subscribe((treeViewItem) => {
            this.emitExpanded(treeViewItem);
        });
        this.treeViewService.onSelect().subscribe((treeViewItem) => {
            this.emitSelected(treeViewItem);
        });
    }
    trackByFunction(index) {
        return index;
    }
};
PoTreeViewComponent.ctorParameters = () => [
    { type: PoTreeViewService }
];
PoTreeViewComponent = tslib_1.__decorate([
    Component({
        selector: 'po-tree-view',
        template: "<po-container *ngIf=\"hasItems\" p-no-padding p-no-shadow>\n  <ul class=\"po-tree-view\">\n    <po-tree-view-item *ngFor=\"let item of items; trackBy: trackByFunction\"\n      [p-item]=\"item\"\n      [p-selectable]=\"selectable\">\n    </po-tree-view-item>\n  </ul>\n</po-container>\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        providers: [PoTreeViewService]
    }),
    tslib_1.__metadata("design:paramtypes", [PoTreeViewService])
], PoTreeViewComponent);
export { PoTreeViewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdHJlZS12aWV3L3BvLXRyZWUtdmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFM0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFeEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFcEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQU9ILElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW9CLFNBQVEsdUJBQXVCO0lBTTlELFlBQW9CLGVBQWtDO1FBQ3BELEtBQUssRUFBRSxDQUFDO1FBRFUsb0JBQWUsR0FBZixlQUFlLENBQW1CO0lBRXRELENBQUM7SUFORCxJQUFJLFFBQVE7UUFDVixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBTUQsUUFBUTtRQUNOLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBNEIsRUFBRSxFQUFFO1lBQ3pFLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQTRCLEVBQUUsRUFBRTtZQUN6RSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGLENBQUE7O1lBakJzQyxpQkFBaUI7O0FBTjNDLG1CQUFtQjtJQU4vQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsY0FBYztRQUN4Qix5U0FBNEM7UUFDNUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07UUFDL0MsU0FBUyxFQUFFLENBQUUsaUJBQWlCLENBQUU7S0FDakMsQ0FBQzs2Q0FPcUMsaUJBQWlCO0dBTjNDLG1CQUFtQixDQXVCL0I7U0F2QlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvVHJlZVZpZXdCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby10cmVlLXZpZXctYmFzZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9UcmVlVmlld0l0ZW0gfSBmcm9tICcuL3BvLXRyZWUtdmlldy1pdGVtL3BvLXRyZWUtdmlldy1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RyZWVWaWV3U2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcG8tdHJlZS12aWV3LnNlcnZpY2UnO1xuXG4vKipcbiAqIEBkb2NzRXh0ZW5kcyBQb1RyZWVWaWV3QmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXRyZWUtdmlldy1iYXNpY1wiIHRpdGxlPVwiUG9ydGluYXJpIFRyZWUgVmlldyBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LWJhc2ljL3NhbXBsZS1wby10cmVlLXZpZXctYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LWJhc2ljL3NhbXBsZS1wby10cmVlLXZpZXctYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdHJlZS12aWV3LWxhYnNcIiB0aXRsZT1cIlBvcnRpbmFyaSBUcmVlIFZpZXcgTGFic1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LWxhYnMvc2FtcGxlLXBvLXRyZWUtdmlldy1sYWJzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1sYWJzL3NhbXBsZS1wby10cmVlLXZpZXctbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZVwiIHRpdGxlPVwiUG9ydGluYXJpIFRyZWUgVmlldyAtIEZvbGRlciBTdHJ1Y3R1cmVcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1mb2xkZXItc3RydWN0dXJlL3NhbXBsZS1wby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZS5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZS9zYW1wbGUtcG8tdHJlZS12aWV3LWZvbGRlci1zdHJ1Y3R1cmUuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdHJlZS12aWV3LXN1cGVybWFya2V0XCIgdGl0bGU9XCJQb3J0aW5hcmkgVHJlZSBWaWV3IC0gU3VwZXJtYXJrZXRcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1zdXBlcm1hcmtldC9zYW1wbGUtcG8tdHJlZS12aWV3LXN1cGVybWFya2V0LmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1zdXBlcm1hcmtldC9zYW1wbGUtcG8tdHJlZS12aWV3LXN1cGVybWFya2V0LmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRyZWUtdmlldycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby10cmVlLXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbIFBvVHJlZVZpZXdTZXJ2aWNlIF1cbn0pXG5leHBvcnQgY2xhc3MgUG9UcmVlVmlld0NvbXBvbmVudCBleHRlbmRzIFBvVHJlZVZpZXdCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBnZXQgaGFzSXRlbXMoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmVlVmlld1NlcnZpY2U6IFBvVHJlZVZpZXdTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudHJlZVZpZXdTZXJ2aWNlLm9uRXhwYW5kKCkuc3Vic2NyaWJlKCh0cmVlVmlld0l0ZW06IFBvVHJlZVZpZXdJdGVtKSA9PiB7XG4gICAgICB0aGlzLmVtaXRFeHBhbmRlZCh0cmVlVmlld0l0ZW0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy50cmVlVmlld1NlcnZpY2Uub25TZWxlY3QoKS5zdWJzY3JpYmUoKHRyZWVWaWV3SXRlbTogUG9UcmVlVmlld0l0ZW0pID0+IHtcbiAgICAgIHRoaXMuZW1pdFNlbGVjdGVkKHRyZWVWaWV3SXRlbSk7XG4gICAgfSk7XG4gIH1cblxuICB0cmFja0J5RnVuY3Rpb24oaW5kZXg6IG51bWJlcikge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxufVxuIl19