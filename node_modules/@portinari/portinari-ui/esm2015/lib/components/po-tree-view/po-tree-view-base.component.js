import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
const poTreeViewMaxLevel = 4;
/**
 * @description
 *
 * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
 * hierárquica, desta forma sendo possível utilizar até 4 níveis.
 *
 * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
 * por meio das teclas *enter* e *space*.
 *
 * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
 *
 * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
 */
export class PoTreeViewBaseComponent {
    constructor() {
        this._items = [];
        this._selectable = false;
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao colapsar um item.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao expandir um item.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao selecionar um item.
         *
         * > Como parâmetro o componente envia o item selecionado.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao desfazer a seleção de um item.
         *
         * > Como parâmetro o componente envia o item que foi desmarcado.
         */
        this.unselected = new EventEmitter();
    }
    /**
     * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
     */
    set items(value) {
        this._items = Array.isArray(value) ? this.getItemsByMaxLevel(value) : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
     *
     * @default false
     */
    set selectable(value) {
        this._selectable = convertToBoolean(value);
    }
    get selectable() {
        return this._selectable;
    }
    emitExpanded(treeViewItem) {
        const event = treeViewItem.expanded ? 'expanded' : 'collapsed';
        this[event].emit(Object.assign({}, treeViewItem));
    }
    emitSelected(treeViewItem) {
        const event = treeViewItem.selected ? 'selected' : 'unselected';
        this.updateItemsOnSelect(treeViewItem);
        this[event].emit(Object.assign({}, treeViewItem));
    }
    addChildItemInParent(childItem, parentItem) {
        if (!parentItem.subItems) {
            parentItem.subItems = [];
        }
        parentItem.subItems.push(childItem);
    }
    // caso houver parentItem:
    //  - expande o parentItem caso o filho estiver expandido;
    //  - adiciona o childItem no parentItem;
    //  - marca o parentItem caso conter subItems marcodos ou nulos;
    // Se não conter parentItem, adiciona o childItem no items.
    addItem(items, childItem, parentItem) {
        if (parentItem) {
            this.expandParentItem(childItem, parentItem);
            this.addChildItemInParent(childItem, parentItem);
            this.selectItemBySubItems(parentItem);
            items.push(parentItem);
        }
        else {
            items.push(childItem);
        }
    }
    selectAllItems(items, isSelected) {
        items.forEach(item => {
            if (item.subItems) {
                this.selectAllItems(item.subItems, isSelected);
            }
            item.selected = isSelected;
        });
    }
    selectItemBySubItems(item) {
        item.selected = this.everyItemSelected(item.subItems);
    }
    // retornará:
    //  - true: se todos os items estiverem marcados;
    //  - null: se no minimo um item esteja marcado ou nullo (indeterminate)
    //  - false: caso não corresponda em nenhuma das opções acima, no caso, nenhum marcado ou nulo;
    everyItemSelected(items = []) {
        const itemsLength = items.length;
        const lengthCheckedItems = items.filter(item => item.selected).length;
        if (itemsLength && itemsLength === lengthCheckedItems) {
            return true;
        }
        const hasIndeterminateItems = items.filter(item => item.selected || item.selected === null).length;
        if (hasIndeterminateItems) {
            return null;
        }
        return false;
    }
    // expande o item pai caso o filho estiver expandido.
    expandParentItem(childItem, parentItem) {
        if (childItem.expanded) {
            parentItem.expanded = true;
        }
    }
    getItemsByMaxLevel(items = [], level = 0, parentItem, newItems = []) {
        items.forEach(item => {
            const { subItems } = item, currentItem = tslib_1.__rest(item, ["subItems"]);
            if (level === poTreeViewMaxLevel) {
                return;
            }
            if (Array.isArray(subItems)) {
                // caso um item pai iniciar selecionado, deve selecionar os filhos.
                if (currentItem.selected) {
                    this.selectAllItems(subItems, currentItem.selected);
                }
                this.getItemsByMaxLevel(subItems, ++level, currentItem);
                --level;
            }
            this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    }
    getItemsWithParentSelected(items = [], parentItem, newItems = []) {
        items.forEach(item => {
            const { subItems } = item, currentItem = tslib_1.__rest(item, ["subItems"]);
            if (Array.isArray(subItems)) {
                this.getItemsWithParentSelected(subItems, currentItem);
            }
            this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    }
    updateItemsOnSelect(selectedItem) {
        if (selectedItem.subItems) {
            this.selectAllItems(selectedItem.subItems, selectedItem.selected);
        }
        this._items = this.getItemsWithParentSelected(this.items);
    }
}
tslib_1.__decorate([
    Input('p-items'),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], PoTreeViewBaseComponent.prototype, "items", null);
tslib_1.__decorate([
    Input('p-selectable'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoTreeViewBaseComponent.prototype, "selectable", null);
tslib_1.__decorate([
    Output('p-collapsed'),
    tslib_1.__metadata("design:type", Object)
], PoTreeViewBaseComponent.prototype, "collapsed", void 0);
tslib_1.__decorate([
    Output('p-expanded'),
    tslib_1.__metadata("design:type", Object)
], PoTreeViewBaseComponent.prototype, "expanded", void 0);
tslib_1.__decorate([
    Output('p-selected'),
    tslib_1.__metadata("design:type", Object)
], PoTreeViewBaseComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Output('p-unselected'),
    tslib_1.__metadata("design:type", Object)
], PoTreeViewBaseComponent.prototype, "unselected", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby10cmVlLXZpZXcvcG8tdHJlZS12aWV3LWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFJcEQsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFFN0I7Ozs7Ozs7Ozs7OztHQVlHO0FBQ0gsTUFBTSxPQUFPLHVCQUF1QjtJQUFwQztRQUVVLFdBQU0sR0FBMEIsRUFBRSxDQUFDO1FBQ25DLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBOEJyQzs7Ozs7Ozs7V0FRRztRQUNvQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFFdEU7Ozs7Ozs7O1dBUUc7UUFDbUIsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBRXBFOzs7Ozs7OztXQVFHO1FBQ21CLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBa0IsQ0FBQztRQUVwRTs7Ozs7Ozs7V0FRRztRQUNxQixlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7SUFvSTFFLENBQUM7SUExTUM7O09BRUc7SUFDZSxJQUFJLEtBQUssQ0FBQyxLQUE0QjtRQUN0RCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQzNFLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FB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UUFBUSxHQUFHLEVBQUU7UUFDOUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNuQixNQUFNLEVBQUUsUUFBUSxLQUFxQixJQUFJLEVBQXZCLGdEQUF1QixDQUFDO1lBRTFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDM0IsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQzthQUN4RDtZQUVELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxZQUE0QjtRQUN0RCxJQUFJLFlBQVksQ0FBQyxRQUFRLEVBQUU7WUFDekIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuRTtRQUVELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1RCxDQUFDO0NBRUY7QUF2TW1CO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7c0NBQWtCLEtBQUs7NkNBQUwsS0FBSztvREFFdkM7QUFlc0I7SUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQzs7O3lEQUVyQjtBQWVzQjtJQUF0QixNQUFNLENBQUMsYUFBYSxDQUFDOzswREFBZ0Q7QUFXaEQ7SUFBckIsTUFBTSxDQUFDLFlBQVksQ0FBQzs7eURBQStDO0FBVzlDO0lBQXJCLE1BQU0sQ0FBQyxZQUFZLENBQUM7O3lEQUErQztBQVc1QztJQUF2QixNQUFNLENBQUMsY0FBYyxDQUFDOzsyREFBaUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1RyZWVWaWV3SXRlbSB9IGZyb20gJy4vcG8tdHJlZS12aWV3LWl0ZW0vcG8tdHJlZS12aWV3LWl0ZW0uaW50ZXJmYWNlJztcblxuY29uc3QgcG9UcmVlVmlld01heExldmVsID0gNDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgZm9ybmVjZSB1bSBtb2RlbG8gZGUgdmlzdWFsaXphw6fDo28gZW0gw6Fydm9yZSwgcG9zc2liaWxpdGFuZG8gYSB2aXN1YWxpemHDp8OjbyBkYXMgaW5mb3JtYcOnw7VlcyBkZSBtYW5laXJhXG4gKiBoaWVyw6FycXVpY2EsIGRlc3RhIGZvcm1hIHNlbmRvIHBvc3PDrXZlbCB1dGlsaXphciBhdMOpIDQgbsOtdmVpcy5cbiAqXG4gKiBOZWxlIMOpIHBvc3PDrXZlbCBuYXZlZ2FyIGVudHJlIG9zIGl0ZW5zIGF0cmF2w6lzIGRhIHRlY2xhICp0YWIqLCBwZXJtaXRpbmRvIGV4cGFuZGlyIG91IGNvbGFwc2FyIG8gaXRlbSBlbSBmb2NvXG4gKiBwb3IgbWVpbyBkYXMgdGVjbGFzICplbnRlciogZSAqc3BhY2UqLlxuICpcbiAqIEFsw6ltIGRhIG5hdmVnYcOnw6NvLCBvIGNvbXBvbmVudGUgcG9zc2liaWxpdGEgdGFtYsOpbSBhIHNlbGXDp8OjbyBkb3MgaXRlbnMgZG8gcHJpbWVpcm8gYW8gw7psdGltbyBuw612ZWwsIHRhbnRvIGRlIGZvcm1hIHBhcmNpYWwgY29tbyBjb21wbGV0YS5cbiAqXG4gKiBPIGNvbXBvbmVudGUgdGFtYsOpbSBwb3NzdWkgZXZlbnRvcyBkaXNwYXJhZG9zIGFvIG1hcmNhci9kZXNtYXJjYXIgZSBleHBhbmRpci9jb2xhcHNhciBvcyBpdGVucy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvVHJlZVZpZXdCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9pdGVtczogQXJyYXk8UG9UcmVlVmlld0l0ZW0+ID0gW107XG4gIHByaXZhdGUgX3NlbGVjdGFibGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogTGlzdGEgZGUgaXRlbnMgZG8gdGlwbyBgUG9UcmVlVmlld0l0ZW1gIHF1ZSBzZXLDoSByZW5kZXJpemFkYSBwZWxvIGNvbXBvbmVudGUuXG4gICAqL1xuICBASW5wdXQoJ3AtaXRlbXMnKSBzZXQgaXRlbXModmFsdWU6IEFycmF5PFBvVHJlZVZpZXdJdGVtPikge1xuICAgIHRoaXMuX2l0ZW1zID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB0aGlzLmdldEl0ZW1zQnlNYXhMZXZlbCh2YWx1ZSkgOiBbXTtcbiAgfVxuXG4gIGdldCBpdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBIYWJpbGl0YSB1bWEgY2FpeGEgZGUgc2VsZcOnw6NvIHBhcmEgc2VsZWNpb25hciBlL291IGRlc21hcmNhciB1bSBpdGVtIGRhIGxpc3RhLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgQElucHV0KCdwLXNlbGVjdGFibGUnKSBzZXQgc2VsZWN0YWJsZSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3NlbGVjdGFibGUgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzZWxlY3RhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLl9zZWxlY3RhYmxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQcOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgYW8gY29sYXBzYXIgdW0gaXRlbS5cbiAgICpcbiAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBjb2xhcHNhZG8uXG4gICAqL1xuICBAT3V0cHV0KCdwLWNvbGxhcHNlZCcpIGNvbGxhcHNlZCA9IG5ldyBFdmVudEVtaXR0ZXI8UG9UcmVlVmlld0l0ZW0+KCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQcOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgYW8gZXhwYW5kaXIgdW0gaXRlbS5cbiAgICpcbiAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBleHBhbmRpZG8uXG4gICAqL1xuICBAT3V0cHV0KCdwLWV4cGFuZGVkJykgZXhwYW5kZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFBvVHJlZVZpZXdJdGVtPigpO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEHDp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIGFvIHNlbGVjaW9uYXIgdW0gaXRlbS5cbiAgICpcbiAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBzZWxlY2lvbmFkby5cbiAgICovXG4gIEBPdXRwdXQoJ3Atc2VsZWN0ZWQnKSBzZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8UG9UcmVlVmlld0l0ZW0+KCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQcOnw6NvIHF1ZSBzZXLDoSBkaXNwYXJhZGEgYW8gZGVzZmF6ZXIgYSBzZWxlw6fDo28gZGUgdW0gaXRlbS5cbiAgICpcbiAgICogPiBDb21vIHBhcsOibWV0cm8gbyBjb21wb25lbnRlIGVudmlhIG8gaXRlbSBxdWUgZm9pIGRlc21hcmNhZG8uXG4gICAqL1xuICBAT3V0cHV0KCdwLXVuc2VsZWN0ZWQnKSB1bnNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxQb1RyZWVWaWV3SXRlbT4oKTtcblxuICBwcm90ZWN0ZWQgZW1pdEV4cGFuZGVkKHRyZWVWaWV3SXRlbTogUG9UcmVlVmlld0l0ZW0pIHtcbiAgICBjb25zdCBldmVudCA9IHRyZWVWaWV3SXRlbS5leHBhbmRlZCA/ICdleHBhbmRlZCcgOiAnY29sbGFwc2VkJztcblxuICAgIHRoaXNbZXZlbnRdLmVtaXQoeyAuLi50cmVlVmlld0l0ZW0gfSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgZW1pdFNlbGVjdGVkKHRyZWVWaWV3SXRlbTogUG9UcmVlVmlld0l0ZW0pIHtcbiAgICBjb25zdCBldmVudCA9IHRyZWVWaWV3SXRlbS5zZWxlY3RlZCA/ICdzZWxlY3RlZCcgOiAndW5zZWxlY3RlZCc7XG5cbiAgICB0aGlzLnVwZGF0ZUl0ZW1zT25TZWxlY3QodHJlZVZpZXdJdGVtKTtcblxuICAgIHRoaXNbZXZlbnRdLmVtaXQoeyAuLi50cmVlVmlld0l0ZW0gfSk7XG4gIH1cblxuICBwcml2YXRlIGFkZENoaWxkSXRlbUluUGFyZW50KGNoaWxkSXRlbTogUG9UcmVlVmlld0l0ZW0sIHBhcmVudEl0ZW06IFBvVHJlZVZpZXdJdGVtKSB7XG4gICAgaWYgKCFwYXJlbnRJdGVtLnN1Ykl0ZW1zKSB7XG4gICAgICBwYXJlbnRJdGVtLnN1Ykl0ZW1zID0gW107XG4gICAgfVxuXG4gICAgcGFyZW50SXRlbS5zdWJJdGVtcy5wdXNoKGNoaWxkSXRlbSk7XG4gIH1cblxuICAvLyBjYXNvIGhvdXZlciBwYXJlbnRJdGVtOlxuICAvLyAgLSBleHBhbmRlIG8gcGFyZW50SXRlbSBjYXNvIG8gZmlsaG8gZXN0aXZlciBleHBhbmRpZG87XG4gIC8vICAtIGFkaWNpb25hIG8gY2hpbGRJdGVtIG5vIHBhcmVudEl0ZW07XG4gIC8vICAtIG1hcmNhIG8gcGFyZW50SXRlbSBjYXNvIGNvbnRlciBzdWJJdGVtcyBtYXJjb2RvcyBvdSBudWxvcztcbiAgLy8gU2UgbsOjbyBjb250ZXIgcGFyZW50SXRlbSwgYWRpY2lvbmEgbyBjaGlsZEl0ZW0gbm8gaXRlbXMuXG4gIHByaXZhdGUgYWRkSXRlbShpdGVtczogQXJyYXk8UG9UcmVlVmlld0l0ZW0+LCBjaGlsZEl0ZW06IFBvVHJlZVZpZXdJdGVtLCBwYXJlbnRJdGVtPzogUG9UcmVlVmlld0l0ZW0pIHtcbiAgICBpZiAocGFyZW50SXRlbSkge1xuICAgICAgdGhpcy5leHBhbmRQYXJlbnRJdGVtKGNoaWxkSXRlbSwgcGFyZW50SXRlbSk7XG4gICAgICB0aGlzLmFkZENoaWxkSXRlbUluUGFyZW50KGNoaWxkSXRlbSwgcGFyZW50SXRlbSk7XG4gICAgICB0aGlzLnNlbGVjdEl0ZW1CeVN1Ykl0ZW1zKHBhcmVudEl0ZW0pO1xuXG4gICAgICBpdGVtcy5wdXNoKHBhcmVudEl0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpdGVtcy5wdXNoKGNoaWxkSXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZWxlY3RBbGxJdGVtcyhpdGVtczogQXJyYXk8UG9UcmVlVmlld0l0ZW0+LCBpc1NlbGVjdGVkOiBib29sZWFuKSB7XG4gICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcblxuICAgICAgaWYgKGl0ZW0uc3ViSXRlbXMpIHtcbiAgICAgICAgdGhpcy5zZWxlY3RBbGxJdGVtcyhpdGVtLnN1Ykl0ZW1zLCBpc1NlbGVjdGVkKTtcbiAgICAgIH1cblxuICAgICAgaXRlbS5zZWxlY3RlZCA9IGlzU2VsZWN0ZWQ7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHNlbGVjdEl0ZW1CeVN1Ykl0ZW1zKGl0ZW06IFBvVHJlZVZpZXdJdGVtKSB7XG4gICAgaXRlbS5zZWxlY3RlZCA9IHRoaXMuZXZlcnlJdGVtU2VsZWN0ZWQoaXRlbS5zdWJJdGVtcyk7XG4gIH1cblxuICAvLyByZXRvcm5hcsOhOlxuICAvLyAgLSB0cnVlOiBzZSB0b2RvcyBvcyBpdGVtcyBlc3RpdmVyZW0gbWFyY2Fkb3M7XG4gIC8vICAtIG51bGw6IHNlIG5vIG1pbmltbyB1bSBpdGVtIGVzdGVqYSBtYXJjYWRvIG91IG51bGxvIChpbmRldGVybWluYXRlKVxuICAvLyAgLSBmYWxzZTogY2FzbyBuw6NvIGNvcnJlc3BvbmRhIGVtIG5lbmh1bWEgZGFzIG9ww6fDtWVzIGFjaW1hLCBubyBjYXNvLCBuZW5odW0gbWFyY2FkbyBvdSBudWxvO1xuICBwcml2YXRlIGV2ZXJ5SXRlbVNlbGVjdGVkKGl0ZW1zOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4gPSBbXSk6IGJvb2xlYW4gfCBudWxsIHtcbiAgICBjb25zdCBpdGVtc0xlbmd0aCA9IGl0ZW1zLmxlbmd0aDtcblxuICAgIGNvbnN0IGxlbmd0aENoZWNrZWRJdGVtcyA9IGl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uc2VsZWN0ZWQpLmxlbmd0aDtcblxuICAgIGlmIChpdGVtc0xlbmd0aCAmJiBpdGVtc0xlbmd0aCA9PT0gbGVuZ3RoQ2hlY2tlZEl0ZW1zKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBoYXNJbmRldGVybWluYXRlSXRlbXMgPSBpdGVtcy5maWx0ZXIoaXRlbSA9PiBpdGVtLnNlbGVjdGVkIHx8IGl0ZW0uc2VsZWN0ZWQgPT09IG51bGwpLmxlbmd0aDtcblxuICAgIGlmIChoYXNJbmRldGVybWluYXRlSXRlbXMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIGV4cGFuZGUgbyBpdGVtIHBhaSBjYXNvIG8gZmlsaG8gZXN0aXZlciBleHBhbmRpZG8uXG4gIHByaXZhdGUgZXhwYW5kUGFyZW50SXRlbShjaGlsZEl0ZW06IFBvVHJlZVZpZXdJdGVtLCBwYXJlbnRJdGVtOiBQb1RyZWVWaWV3SXRlbSkge1xuICAgIGlmIChjaGlsZEl0ZW0uZXhwYW5kZWQpIHtcbiAgICAgIHBhcmVudEl0ZW0uZXhwYW5kZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0SXRlbXNCeU1heExldmVsKGl0ZW1zOiBBcnJheTxQb1RyZWVWaWV3SXRlbT4gPSBbXSwgbGV2ZWw6IG51bWJlciA9IDAsIHBhcmVudEl0ZW0/OiBQb1RyZWVWaWV3SXRlbSwgbmV3SXRlbXMgPSBbXSkge1xuICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBjb25zdCB7IHN1Ykl0ZW1zLCAuLi5jdXJyZW50SXRlbSB9ID0gaXRlbTtcblxuICAgICAgaWYgKGxldmVsID09PSBwb1RyZWVWaWV3TWF4TGV2ZWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJJdGVtcykpIHtcblxuICAgICAgICAvLyBjYXNvIHVtIGl0ZW0gcGFpIGluaWNpYXIgc2VsZWNpb25hZG8sIGRldmUgc2VsZWNpb25hciBvcyBmaWxob3MuXG4gICAgICAgIGlmIChjdXJyZW50SXRlbS5zZWxlY3RlZCkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0QWxsSXRlbXMoc3ViSXRlbXMsIGN1cnJlbnRJdGVtLnNlbGVjdGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0SXRlbXNCeU1heExldmVsKHN1Ykl0ZW1zLCArK2xldmVsLCBjdXJyZW50SXRlbSk7XG4gICAgICAgIC0tbGV2ZWw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkSXRlbShuZXdJdGVtcywgY3VycmVudEl0ZW0sIHBhcmVudEl0ZW0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld0l0ZW1zO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJdGVtc1dpdGhQYXJlbnRTZWxlY3RlZChpdGVtczogQXJyYXk8UG9UcmVlVmlld0l0ZW0+ID0gW10sIHBhcmVudEl0ZW0/OiBQb1RyZWVWaWV3SXRlbSwgbmV3SXRlbXMgPSBbXSkge1xuICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBjb25zdCB7IHN1Ykl0ZW1zLCAuLi5jdXJyZW50SXRlbSB9ID0gaXRlbTtcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc3ViSXRlbXMpKSB7XG4gICAgICAgIHRoaXMuZ2V0SXRlbXNXaXRoUGFyZW50U2VsZWN0ZWQoc3ViSXRlbXMsIGN1cnJlbnRJdGVtKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hZGRJdGVtKG5ld0l0ZW1zLCBjdXJyZW50SXRlbSwgcGFyZW50SXRlbSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbmV3SXRlbXM7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUl0ZW1zT25TZWxlY3Qoc2VsZWN0ZWRJdGVtOiBQb1RyZWVWaWV3SXRlbSkge1xuICAgIGlmIChzZWxlY3RlZEl0ZW0uc3ViSXRlbXMpIHtcbiAgICAgIHRoaXMuc2VsZWN0QWxsSXRlbXMoc2VsZWN0ZWRJdGVtLnN1Ykl0ZW1zLCBzZWxlY3RlZEl0ZW0uc2VsZWN0ZWQpO1xuICAgIH1cblxuICAgIHRoaXMuX2l0ZW1zID0gdGhpcy5nZXRJdGVtc1dpdGhQYXJlbnRTZWxlY3RlZCh0aGlzLml0ZW1zKTtcbiAgfVxuXG59XG4iXX0=