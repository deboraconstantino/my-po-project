import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { convertToBoolean } from './../../../utils/util';
export const poLoadingOverlayLiteralsDefault = {
    en: {
        loading: 'Loading',
    },
    es: {
        loading: 'Cargando',
    },
    pt: {
        loading: 'Carregando',
    },
    ru: {
        loading: 'погрузка',
    }
};
/**
 *
 * @description
 *
 * Este componente mostra ao usuário uma imagem de _loading_ e bloqueia a página inteira ou o container escolhido,
 * enquanto aguarda a resposta de alguma requisição.
 */
export class PoLoadingOverlayBaseComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this._screenLock = false;
        if (!this.text) {
            this.text = this.getTextDefault();
        }
    }
    /**
     * @optional
     *
     * @description
     *
     * Define se o *overlay* será aplicado a um *container* ou a página inteira.
     *
     * Para utilizar o componente como um *container*, o elemento pai deverá receber uma posição relativa, por exemplo:
     *
     * ```
     * <div style="position: relative">
     *
     *  <po-chart [p-series]="[{ value: 10, category: 'Example' }]">
     *  </po-chart>
     *
     *  <po-loading-overlay>
     *  </po-loading-overlay>
     * </div>
     * ```
     *
     * @default `false`
     */
    set screenLock(screenLock) {
        this._screenLock = convertToBoolean(screenLock);
    }
    get screenLock() {
        return this._screenLock;
    }
    /**
     * @optional
     *
     * @description
     *
     * Texto a ser exibido no componente.
     *
     * > O valor padrão será traduzido acordo com o idioma configurado no [**PoI18n**](/documentation/po-i18n) ou navegador.
     *
     * @default `Carregando`
     */
    set text(value) {
        this._text = value || this.getTextDefault();
    }
    get text() {
        return this._text;
    }
    getTextDefault() {
        const language = this.languageService.getShortLanguage();
        return poLoadingOverlayLiteralsDefault[language].loading;
    }
}
tslib_1.__decorate([
    Input('p-screen-lock'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoLoadingOverlayBaseComponent.prototype, "screenLock", null);
tslib_1.__decorate([
    Input('p-text'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoLoadingOverlayBaseComponent.prototype, "text", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9hZGluZy1vdmVybGF5LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1sb2FkaW5nL3BvLWxvYWRpbmctb3ZlcmxheS9wby1sb2FkaW5nLW92ZXJsYXktYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFNekQsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQUc7SUFDN0MsRUFBRSxFQUE2QjtRQUM3QixPQUFPLEVBQUUsU0FBUztLQUNuQjtJQUNELEVBQUUsRUFBNkI7UUFDN0IsT0FBTyxFQUFFLFVBQVU7S0FDcEI7SUFDRCxFQUFFLEVBQTZCO1FBQzdCLE9BQU8sRUFBRSxZQUFZO0tBQ3RCO0lBQ0QsRUFBRSxFQUE2QjtRQUM3QixPQUFPLEVBQUUsVUFBVTtLQUNwQjtDQUNGLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sNkJBQTZCO0lBc0R4QyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFwRDlDLGdCQUFXLEdBQWEsS0FBSyxDQUFDO1FBcURwQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ25DO0lBQ0gsQ0FBQztJQXJERDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BcUJHO0lBQ3FCLElBQUksVUFBVSxDQUFDLFVBQW1CO1FBQ3hELElBQUksQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUNjLElBQUksSUFBSSxDQUFDLEtBQWE7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQVFPLGNBQWM7UUFDcEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBRXpELE9BQU8sK0JBQStCLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQzNELENBQUM7Q0FFRjtBQXZDeUI7SUFBdkIsS0FBSyxDQUFDLGVBQWUsQ0FBQzs7OytEQUV0QjtBQWlCZ0I7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7O3lEQUVmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1sb2FkaW5nLW92ZXJsYXktbGl0ZXJhbHMuaW50ZXJmYWNlJztcblxuZXhwb3J0IGNvbnN0IHBvTG9hZGluZ092ZXJsYXlMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ0xvYWRpbmcnLFxuICB9LFxuICBlczogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz4ge1xuICAgIGxvYWRpbmc6ICdDYXJnYW5kbycsXG4gIH0sXG4gIHB0OiA8UG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzPiB7XG4gICAgbG9hZGluZzogJ0NhcnJlZ2FuZG8nLFxuICB9LFxuICBydTogPFBvTG9hZGluZ092ZXJsYXlMaXRlcmFscz4ge1xuICAgIGxvYWRpbmc6ICfQv9C+0LPRgNGD0LfQutCwJyxcbiAgfVxufTtcblxuLyoqXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIG1vc3RyYSBhbyB1c3XDoXJpbyB1bWEgaW1hZ2VtIGRlIF9sb2FkaW5nXyBlIGJsb3F1ZWlhIGEgcMOhZ2luYSBpbnRlaXJhIG91IG8gY29udGFpbmVyIGVzY29saGlkbyxcbiAqIGVucXVhbnRvIGFndWFyZGEgYSByZXNwb3N0YSBkZSBhbGd1bWEgcmVxdWlzacOnw6NvLlxuICovXG5leHBvcnQgY2xhc3MgUG9Mb2FkaW5nT3ZlcmxheUJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX3NjcmVlbkxvY2s/OiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgX3RleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIHNlIG8gKm92ZXJsYXkqIHNlcsOhIGFwbGljYWRvIGEgdW0gKmNvbnRhaW5lciogb3UgYSBww6FnaW5hIGludGVpcmEuXG4gICAqXG4gICAqIFBhcmEgdXRpbGl6YXIgbyBjb21wb25lbnRlIGNvbW8gdW0gKmNvbnRhaW5lciosIG8gZWxlbWVudG8gcGFpIGRldmVyw6EgcmVjZWJlciB1bWEgcG9zacOnw6NvIHJlbGF0aXZhLCBwb3IgZXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmVcIj5cbiAgICpcbiAgICogIDxwby1jaGFydCBbcC1zZXJpZXNdPVwiW3sgdmFsdWU6IDEwLCBjYXRlZ29yeTogJ0V4YW1wbGUnIH1dXCI+XG4gICAqICA8L3BvLWNoYXJ0PlxuICAgKlxuICAgKiAgPHBvLWxvYWRpbmctb3ZlcmxheT5cbiAgICogIDwvcG8tbG9hZGluZy1vdmVybGF5PlxuICAgKiA8L2Rpdj5cbiAgICogYGBgXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1zY3JlZW4tbG9jaycpIHNldCBzY3JlZW5Mb2NrKHNjcmVlbkxvY2s6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zY3JlZW5Mb2NrID0gY29udmVydFRvQm9vbGVhbihzY3JlZW5Mb2NrKTtcbiAgfVxuXG4gIGdldCBzY3JlZW5Mb2NrKCkge1xuICAgIHJldHVybiB0aGlzLl9zY3JlZW5Mb2NrO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGV4dG8gYSBzZXIgZXhpYmlkbyBubyBjb21wb25lbnRlLlxuICAgKlxuICAgKiA+IE8gdmFsb3IgcGFkcsOjbyBzZXLDoSB0cmFkdXppZG8gYWNvcmRvIGNvbSBvIGlkaW9tYSBjb25maWd1cmFkbyBubyBbKipQb0kxOG4qKl0oL2RvY3VtZW50YXRpb24vcG8taTE4bikgb3UgbmF2ZWdhZG9yLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgQ2FycmVnYW5kb2BcbiAgICovXG4gIEBJbnB1dCgncC10ZXh0Jykgc2V0IHRleHQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3RleHQgPSB2YWx1ZSB8fCB0aGlzLmdldFRleHREZWZhdWx0KCk7XG4gIH1cblxuICBnZXQgdGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90ZXh0O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgaWYgKCF0aGlzLnRleHQpIHtcbiAgICAgIHRoaXMudGV4dCA9IHRoaXMuZ2V0VGV4dERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFRleHREZWZhdWx0KCk6IHN0cmluZyB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG5cbiAgICByZXR1cm4gcG9Mb2FkaW5nT3ZlcmxheUxpdGVyYWxzRGVmYXVsdFtsYW5ndWFnZV0ubG9hZGluZztcbiAgfVxuXG59XG4iXX0=