import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { DecimalPipe } from '@angular/common';
import { capitalizeFirstLetter, isTypeof } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por apresentar o detalhe de cada linha da tabela.
 */
let PoTableDetailComponent = class PoTableDetailComponent {
    constructor(decimalPipe) {
        this.decimalPipe = decimalPipe;
        /**
         * Define se a tabela possui a opção de `selectable` habilitada.
         */
        this.isSelectable = false;
        /**
         * Ação executada ao selecionar ou desmarcar a seleção de uma linha de detalhe do `po-table`.
         */
        this.selectRow = new EventEmitter();
    }
    /**
     * Configuração da linha de detalhes.
     */
    set detail(value) {
        this._detail = this.returnPoTableDetailObject(value);
    }
    get detail() {
        return this._detail;
    }
    get detailColumns() {
        return this.detail && this.detail.columns || [];
    }
    get typeHeaderInline() {
        return this.detail && !this.detail['typeHeader'] || this.detail['typeHeader'] === 'inline';
    }
    get typeHeaderTop() {
        return this.detail && this.detail['typeHeader'] === 'top';
    }
    formatNumberDetail(value, format) {
        if (!format) {
            return value;
        }
        return this.decimalPipe.transform(value, format);
    }
    getColumnTitleLabel(detail) {
        return detail.label || capitalizeFirstLetter(detail.property);
    }
    onSelectRow(item) {
        item.$selected = !item.$selected;
        this.selectRow.emit(item);
    }
    returnPoTableDetailObject(value) {
        if (value && isTypeof(value, 'object')) {
            if (value.columns) {
                value.columns.forEach(column => column.property = column.property || column.column);
            }
            if (Array.isArray(value)) {
                return { columns: value };
            }
            if (value.columns) {
                return value;
            }
        }
    }
};
PoTableDetailComponent.ctorParameters = () => [
    { type: DecimalPipe }
];
tslib_1.__decorate([
    Input('p-detail'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoTableDetailComponent.prototype, "detail", null);
tslib_1.__decorate([
    Input('p-items'),
    tslib_1.__metadata("design:type", Array)
], PoTableDetailComponent.prototype, "items", void 0);
tslib_1.__decorate([
    Input('p-selectable'),
    tslib_1.__metadata("design:type", Boolean)
], PoTableDetailComponent.prototype, "isSelectable", void 0);
tslib_1.__decorate([
    Output('p-select-row'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoTableDetailComponent.prototype, "selectRow", void 0);
PoTableDetailComponent = tslib_1.__decorate([
    Component({
        selector: 'po-table-detail',
        template: "<table class=\"po-table-master-detail\">\n  <thead *ngIf=\"typeHeaderTop\">\n    <tr>\n      <th class=\"po-table-header po-table-column-selectable\" *ngIf=\"isSelectable\"></th>\n      <th class=\"po-table-header po-table-header-column po-table-header-master-detail\"></th>\n      <th class=\"po-table-header po-table-header-ellipsis\" *ngFor=\"let detail of detail.columns\">\n        {{ getColumnTitleLabel(detail) }}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class=\"po-table-detail-row\"\n        [class.po-table-row-active]=\"item.$selected && isSelectable\"\n        *ngFor=\"let item of items\">\n\n      <ng-container *ngIf=\"isSelectable; else masterDetailSpace\">\n\n        <td class=\"po-table-column-master-detail-space-checkbox\"></td>\n        <td class=\"po-table-column po-table-column-selectable\">\n          <input\n            class=\"po-table-checkbox\"\n            type=\"checkbox\"\n            [class.po-table-checkbox-checked]=\"item.$selected\">\n          <label class=\"po-table-checkbox-label po-clickable\" (click)=\"onSelectRow(item)\">\n          </label>\n        </td>\n\n      </ng-container>\n\n      <ng-template #masterDetailSpace>\n        <td class=\"po-table-column-master-detail-space\"></td>\n      </ng-template>\n\n      <td class=\"po-table-column-master-detail po-table-master-detail-label\"\n        (click)=\"isSelectable ? onSelectRow(item) : 'javascript:;'\"\n        *ngFor=\"let detail of detailColumns\">\n        <strong *ngIf=\"typeHeaderInline\"> {{ getColumnTitleLabel(detail) }}: </strong>\n\n        <ng-container [ngSwitch]=\"detail.type\">\n          <span *ngSwitchCase=\"'currency'\">{{ item[detail.property] | currency: detail.format:'symbol':'1.2-2' }}</span>\n          <span *ngSwitchCase=\"'date'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy' }}</span>\n          <span *ngSwitchCase=\"'time'\">{{ item[detail.property] | po_time: detail.format || 'HH:mm:ss.ffffff' }}</span>\n          <span *ngSwitchCase=\"'dateTime'\">{{ item[detail.property] | date: detail.format || 'dd/MM/yyyy HH:mm:ss' }}</span>\n          <span *ngSwitchCase=\"'number'\">{{ formatNumberDetail(item[detail.property], detail.format) }}</span>\n          <span *ngSwitchDefault>{{ item[detail.property] }}</span>\n        </ng-container>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [DecimalPipe])
], PoTableDetailComponent);
export { PoTableDetailComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtZGV0YWlsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtZGV0YWlsL3BvLXRhYmxlLWRldGFpbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUt0RTs7Ozs7O0dBTUc7QUFLSCxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUFzQjtJQThCakMsWUFBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFWNUM7O1dBRUc7UUFDb0IsaUJBQVksR0FBYSxLQUFLLENBQUM7UUFFdEQ7O1dBRUc7UUFDcUIsY0FBUyxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBRWpDLENBQUM7SUExQmhEOztPQUVHO0lBQ2dCLElBQUksTUFBTSxDQUFDLEtBQW9CO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQW1CRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssUUFBUSxDQUFDO0lBQzdGLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxLQUFLLENBQUM7SUFDNUQsQ0FBQztJQUVELGtCQUFrQixDQUFDLEtBQVUsRUFBRSxNQUFjO1FBQzNDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELG1CQUFtQixDQUFDLE1BQTJCO1FBQzdDLE9BQU8sTUFBTSxDQUFDLEtBQUssSUFBSSxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELFdBQVcsQ0FBQyxJQUFJO1FBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVPLHlCQUF5QixDQUFDLEtBQVU7UUFDMUMsSUFBSSxLQUFLLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsRUFBRTtZQUV0QyxJQUFJLEtBQUssQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pCLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNyRjtZQUVELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDeEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUMzQjtZQUVELElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO0lBQ0gsQ0FBQztDQUVGLENBQUE7O1lBaERrQyxXQUFXOztBQXZCekI7SUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7O29EQUVqQjtBQVNpQjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDO3NDQUFRLEtBQUs7cURBQU07QUFLYjtJQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDOzs0REFBZ0M7QUFLOUI7SUFBdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQztzQ0FBYSxZQUFZO3lEQUFnQztBQTVCckUsc0JBQXNCO0lBSmxDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxpQkFBaUI7UUFDM0IsdzBFQUErQztLQUNoRCxDQUFDOzZDQStCaUMsV0FBVztHQTlCakMsc0JBQXNCLENBOEVsQztTQTlFWSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGVjaW1hbFBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIsIGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvVGFibGVEZXRhaWwgfSBmcm9tICcuL3BvLXRhYmxlLWRldGFpbC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9UYWJsZURldGFpbENvbHVtbiB9IGZyb20gJy4vcG8tdGFibGUtZGV0YWlsLWNvbHVtbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcmVzcG9uc8OhdmVsIHBvciBhcHJlc2VudGFyIG8gZGV0YWxoZSBkZSBjYWRhIGxpbmhhIGRhIHRhYmVsYS5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdGFibGUtZGV0YWlsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRhYmxlLWRldGFpbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWJsZURldGFpbENvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfZGV0YWlsOiBQb1RhYmxlRGV0YWlsO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmHDp8OjbyBkYSBsaW5oYSBkZSBkZXRhbGhlcy5cbiAgICovXG4gIEBJbnB1dCgncC1kZXRhaWwnKSBzZXQgZGV0YWlsKHZhbHVlOiBQb1RhYmxlRGV0YWlsKSB7XG4gICAgdGhpcy5fZGV0YWlsID0gdGhpcy5yZXR1cm5Qb1RhYmxlRGV0YWlsT2JqZWN0KHZhbHVlKTtcbiAgfVxuXG4gIGdldCBkZXRhaWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RldGFpbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0YSBkZSBpdGVucyBkbyBfZGV0YWlsXyBkYSB0YWJlbGEuXG4gICAqL1xuICBASW5wdXQoJ3AtaXRlbXMnKSBpdGVtczogQXJyYXk8YW55PjtcblxuICAvKipcbiAgICogRGVmaW5lIHNlIGEgdGFiZWxhIHBvc3N1aSBhIG9ww6fDo28gZGUgYHNlbGVjdGFibGVgIGhhYmlsaXRhZGEuXG4gICAqL1xuICBASW5wdXQoJ3Atc2VsZWN0YWJsZScpIGlzU2VsZWN0YWJsZT86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQcOnw6NvIGV4ZWN1dGFkYSBhbyBzZWxlY2lvbmFyIG91IGRlc21hcmNhciBhIHNlbGXDp8OjbyBkZSB1bWEgbGluaGEgZGUgZGV0YWxoZSBkbyBgcG8tdGFibGVgLlxuICAgKi9cbiAgQE91dHB1dCgncC1zZWxlY3Qtcm93Jykgc2VsZWN0Um93PzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRlY2ltYWxQaXBlOiBEZWNpbWFsUGlwZSkge31cblxuICBnZXQgZGV0YWlsQ29sdW1ucygpOiBBcnJheTxQb1RhYmxlRGV0YWlsQ29sdW1uPiB7XG4gICAgcmV0dXJuIHRoaXMuZGV0YWlsICYmIHRoaXMuZGV0YWlsLmNvbHVtbnMgfHwgW107XG4gIH1cblxuICBnZXQgdHlwZUhlYWRlcklubGluZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXRhaWwgJiYgIXRoaXMuZGV0YWlsWyd0eXBlSGVhZGVyJ10gfHwgdGhpcy5kZXRhaWxbJ3R5cGVIZWFkZXInXSA9PT0gJ2lubGluZSc7XG4gIH1cblxuICBnZXQgdHlwZUhlYWRlclRvcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXRhaWwgJiYgdGhpcy5kZXRhaWxbJ3R5cGVIZWFkZXInXSA9PT0gJ3RvcCc7XG4gIH1cblxuICBmb3JtYXROdW1iZXJEZXRhaWwodmFsdWU6IGFueSwgZm9ybWF0OiBzdHJpbmcpIHtcbiAgICBpZiAoIWZvcm1hdCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRlY2ltYWxQaXBlLnRyYW5zZm9ybSh2YWx1ZSwgZm9ybWF0KTtcbiAgfVxuXG4gIGdldENvbHVtblRpdGxlTGFiZWwoZGV0YWlsOiBQb1RhYmxlRGV0YWlsQ29sdW1uKSB7XG4gICAgcmV0dXJuIGRldGFpbC5sYWJlbCB8fCBjYXBpdGFsaXplRmlyc3RMZXR0ZXIoZGV0YWlsLnByb3BlcnR5KTtcbiAgfVxuXG4gIG9uU2VsZWN0Um93KGl0ZW0pIHtcbiAgICBpdGVtLiRzZWxlY3RlZCA9ICFpdGVtLiRzZWxlY3RlZDtcbiAgICB0aGlzLnNlbGVjdFJvdy5lbWl0KGl0ZW0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXR1cm5Qb1RhYmxlRGV0YWlsT2JqZWN0KHZhbHVlOiBhbnkpIHtcbiAgICBpZiAodmFsdWUgJiYgaXNUeXBlb2YodmFsdWUsICdvYmplY3QnKSkge1xuXG4gICAgICBpZiAodmFsdWUuY29sdW1ucykge1xuICAgICAgICB2YWx1ZS5jb2x1bW5zLmZvckVhY2goY29sdW1uID0+IGNvbHVtbi5wcm9wZXJ0eSA9IGNvbHVtbi5wcm9wZXJ0eSB8fCBjb2x1bW4uY29sdW1uKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB7IGNvbHVtbnM6IHZhbHVlIH07XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZS5jb2x1bW5zKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuIl19