import * as tslib_1 from "tslib";
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
let PoTableColumnIconComponent = class PoTableColumnIconComponent {
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente responsável por exibir ícones nas colunas.
     */
    constructor() {
        this._icons = [];
    }
    /** Lista de colunas com ícones. */
    set icons(icons) {
        this._icons = this.convertToColumnIcon(icons);
    }
    get icons() {
        return this._icons;
    }
    click(columnIcon) {
        const isAbleAction = !this.isDisabled(columnIcon);
        if (columnIcon.action && isAbleAction) {
            columnIcon.action(this.row, columnIcon);
        }
        else if (this.column.action && isAbleAction) {
            this.column.action(this.row, columnIcon);
        }
    }
    getColor(column) {
        const color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return `po-text-${color}`;
        }
    }
    getIcon(column) {
        return column.icon || column.value;
    }
    isClickable(columnIcon) {
        return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
    }
    isDisabled(column) {
        return column.disabled ? column.disabled(this.row) : false;
    }
    trackByFunction(index) {
        return index;
    }
    convertToColumnIcon(rowIcons) {
        if (Array.isArray(rowIcons)) {
            return rowIcons.map(rowIcon => typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon);
        }
        if (typeof rowIcons === 'string') {
            return [{ value: rowIcons }];
        }
        return [];
    }
};
tslib_1.__decorate([
    Input('p-column'),
    tslib_1.__metadata("design:type", Object)
], PoTableColumnIconComponent.prototype, "column", void 0);
tslib_1.__decorate([
    Input('p-icons'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoTableColumnIconComponent.prototype, "icons", null);
tslib_1.__decorate([
    Input('p-row'),
    tslib_1.__metadata("design:type", Object)
], PoTableColumnIconComponent.prototype, "row", void 0);
PoTableColumnIconComponent = tslib_1.__decorate([
    Component({
        selector: 'po-table-column-icon',
        template: "<po-table-icon *ngFor=\"let column of icons trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column)\">\n</po-table-icon>\n",
        changeDetection: ChangeDetectionStrategy.OnPush
    })
], PoTableColumnIconComponent);
export { PoTableColumnIconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4taWNvbi9wby10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzFFOzs7Ozs7R0FNRztBQU9ILElBQWEsMEJBQTBCLEdBQXZDLE1BQWEsMEJBQTBCO0lBYnZDOzs7Ozs7T0FNRztJQUNIO1FBUVUsV0FBTSxHQUE2QixFQUFFLENBQUM7SUFpRWhELENBQUM7SUE1REMsbUNBQW1DO0lBQ2pCLElBQUksS0FBSyxDQUFDLEtBQXdEO1FBQ2xGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUtELEtBQUssQ0FBQyxVQUE2QjtRQUNqQyxNQUFNLFlBQVksR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFbEQsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLFlBQVksRUFBRTtZQUNyQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDekM7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLFlBQVksRUFBRTtZQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzFDO0lBRUgsQ0FBQztJQUVELFFBQVEsQ0FBQyxNQUF5QjtRQUNoQyxNQUFNLEtBQUssR0FBRyxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFFakcsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLFdBQVcsS0FBSyxFQUFFLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQsT0FBTyxDQUFDLE1BQXlCO1FBQy9CLE9BQU8sTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxXQUFXLENBQUMsVUFBNkI7UUFDdkMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQsVUFBVSxDQUFDLE1BQXlCO1FBQ2xDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM3RCxDQUFDO0lBRUQsZUFBZSxDQUFDLEtBQUs7UUFDbkIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sbUJBQW1CLENBQUMsUUFBMkQ7UUFFckYsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzNCLE9BQWMsUUFBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3BHO1FBRUQsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7WUFDaEMsT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDOUI7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Q0FFRixDQUFBO0FBOURvQjtJQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDOzswREFBdUI7QUFHdkI7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7O3VEQUVoQjtBQU9lO0lBQWYsS0FBSyxDQUFDLE9BQU8sQ0FBQzs7dURBQVU7QUFqQmQsMEJBQTBCO0lBTnRDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxzQkFBc0I7UUFDaEMsK1RBQW9EO1FBQ3BELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO0tBQ2hELENBQUM7R0FFVywwQkFBMEIsQ0FtRXRDO1NBbkVZLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvVGFibGVDb2x1bW4gfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLXRhYmxlLWNvbHVtbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9UYWJsZUNvbHVtbkljb24gfSBmcm9tICcuL3BvLXRhYmxlLWNvbHVtbi1pY29uLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSByZXNwb25zw6F2ZWwgcG9yIGV4aWJpciDDrWNvbmVzIG5hcyBjb2x1bmFzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby10YWJsZS1jb2x1bW4taWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuXG5leHBvcnQgY2xhc3MgUG9UYWJsZUNvbHVtbkljb25Db21wb25lbnQge1xuXG4gIHByaXZhdGUgX2ljb25zOiBBcnJheTxQb1RhYmxlQ29sdW1uSWNvbj4gPSBbXTtcblxuICAvKiogRGVmaW5pw6fDo28gZGEgY29sdW5hIHF1ZSB1dGlsaXphIG9zIGljb25lcy4gKi9cbiAgQElucHV0KCdwLWNvbHVtbicpIGNvbHVtbjogUG9UYWJsZUNvbHVtbjtcblxuICAvKiogTGlzdGEgZGUgY29sdW5hcyBjb20gw61jb25lcy4gKi9cbiAgQElucHV0KCdwLWljb25zJykgc2V0IGljb25zKGljb25zOiBBcnJheTxQb1RhYmxlQ29sdW1uSWNvbj4gfCBBcnJheTxzdHJpbmc+IHwgc3RyaW5nKSB7XG4gICAgdGhpcy5faWNvbnMgPSB0aGlzLmNvbnZlcnRUb0NvbHVtbkljb24oaWNvbnMpO1xuICB9XG5cbiAgZ2V0IGljb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9pY29ucztcbiAgfVxuXG4gIC8qKiBEYWRvcyBkYSBsaW5oYSBkYSB0YWJlbGEuICovXG4gIEBJbnB1dCgncC1yb3cnKSByb3c6IGFueTtcblxuICBjbGljayhjb2x1bW5JY29uOiBQb1RhYmxlQ29sdW1uSWNvbik6IHZvaWQge1xuICAgIGNvbnN0IGlzQWJsZUFjdGlvbiA9ICF0aGlzLmlzRGlzYWJsZWQoY29sdW1uSWNvbik7XG5cbiAgICBpZiAoY29sdW1uSWNvbi5hY3Rpb24gJiYgaXNBYmxlQWN0aW9uKSB7XG4gICAgICBjb2x1bW5JY29uLmFjdGlvbih0aGlzLnJvdywgY29sdW1uSWNvbik7XG4gICAgfSBlbHNlIGlmICh0aGlzLmNvbHVtbi5hY3Rpb24gJiYgaXNBYmxlQWN0aW9uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5hY3Rpb24odGhpcy5yb3csIGNvbHVtbkljb24pO1xuICAgIH1cblxuICB9XG5cbiAgZ2V0Q29sb3IoY29sdW1uOiBQb1RhYmxlQ29sdW1uSWNvbik6IHN0cmluZyB7XG4gICAgY29uc3QgY29sb3IgPSB0eXBlb2YgY29sdW1uLmNvbG9yID09PSAnZnVuY3Rpb24nID8gY29sdW1uLmNvbG9yKHRoaXMucm93LCBjb2x1bW4pIDogY29sdW1uLmNvbG9yO1xuXG4gICAgaWYgKGNvbG9yKSB7XG4gICAgICByZXR1cm4gYHBvLXRleHQtJHtjb2xvcn1gO1xuICAgIH1cbiAgfVxuXG4gIGdldEljb24oY29sdW1uOiBQb1RhYmxlQ29sdW1uSWNvbikge1xuICAgIHJldHVybiBjb2x1bW4uaWNvbiB8fCBjb2x1bW4udmFsdWU7XG4gIH1cblxuICBpc0NsaWNrYWJsZShjb2x1bW5JY29uOiBQb1RhYmxlQ29sdW1uSWNvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhISghdGhpcy5pc0Rpc2FibGVkKGNvbHVtbkljb24pICYmIChjb2x1bW5JY29uLmFjdGlvbiB8fCB0aGlzLmNvbHVtbi5hY3Rpb24pKTtcbiAgfVxuXG4gIGlzRGlzYWJsZWQoY29sdW1uOiBQb1RhYmxlQ29sdW1uSWNvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBjb2x1bW4uZGlzYWJsZWQgPyBjb2x1bW4uZGlzYWJsZWQodGhpcy5yb3cpIDogZmFsc2U7XG4gIH1cblxuICB0cmFja0J5RnVuY3Rpb24oaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRUb0NvbHVtbkljb24ocm93SWNvbnM6IEFycmF5PFBvVGFibGVDb2x1bW5JY29uPiB8IEFycmF5PHN0cmluZz4gfCBzdHJpbmcpOiBBcnJheTxQb1RhYmxlQ29sdW1uSWNvbj4ge1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkocm93SWNvbnMpKSB7XG4gICAgICByZXR1cm4gKDxhbnk+IHJvd0ljb25zKS5tYXAocm93SWNvbiA9PiB0eXBlb2Ygcm93SWNvbiA9PT0gJ3N0cmluZycgPyB7IHZhbHVlOiByb3dJY29uIH0gOiByb3dJY29uKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJvd0ljb25zID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIFt7IHZhbHVlOiByb3dJY29ucyB9XTtcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxufVxuIl19