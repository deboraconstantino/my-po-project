import * as tslib_1 from "tslib";
import { AfterViewInit, Component, DoCheck, ElementRef, Input, OnDestroy, Renderer2 } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a criação de um conjunto de legendas.
 */
let PoTableSubtitleFooterComponent = class PoTableSubtitleFooterComponent {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
    }
    ngAfterViewInit() {
        this.initializeResizeListener();
        this.debounceResize();
    }
    ngDoCheck() {
        if (!this.isVisible && this.getContainerSize() > 0) {
            this.toggleShowCompleteSubtitle();
            this.isVisible = true;
        }
    }
    ngOnDestroy() {
        this.removeResizeListener();
    }
    debounceResize() {
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(() => {
            this.toggleShowCompleteSubtitle();
        });
    }
    getContainerSize() {
        return this.element.nativeElement.querySelector('.po-table-subtitle-footer-container').offsetWidth;
    }
    getItemsSize() {
        const items = this.element.nativeElement.querySelectorAll('.po-table-subtitle-footer');
        return Array.from(items).map(item => item['offsetWidth']).reduce((a, b) => a + b, 16);
    }
    initializeResizeListener() {
        this.resizeListener = this.renderer.listen('window', 'resize', (event) => {
            this.debounceResize();
        });
    }
    removeResizeListener() {
        this.resizeListener();
    }
    toggleShowCompleteSubtitle() {
        const containerSize = this.getContainerSize();
        const itemsSize = this.getItemsSize();
        this.showSubtitle = itemsSize > containerSize;
    }
};
PoTableSubtitleFooterComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
tslib_1.__decorate([
    Input('p-literals'),
    tslib_1.__metadata("design:type", Object)
], PoTableSubtitleFooterComponent.prototype, "literals", void 0);
tslib_1.__decorate([
    Input('p-subtitles'),
    tslib_1.__metadata("design:type", Array)
], PoTableSubtitleFooterComponent.prototype, "subtitles", void 0);
PoTableSubtitleFooterComponent = tslib_1.__decorate([
    Component({
        selector: 'po-table-subtitle-footer',
        template: "<div class=\"po-table-subtitle-footer-container\">\n  <div *ngFor=\"let subtitle of subtitles\" class=\"po-table-subtitle-footer\">\n    <po-table-subtitle-circle\n      p-hide-title=\"true\"\n      [p-subtitle]=\"subtitle\">\n    </po-table-subtitle-circle>\n    <span class=\"po-table-subtitle-text\">{{ subtitle.label }}</span>\n  </div>\n  <po-table-show-subtitle *ngIf=\"showSubtitle\"\n    [p-literals]=\"literals\"\n    [p-subtitles]=\"subtitles\">\n  </po-table-show-subtitle>\n</div>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], PoTableSubtitleFooterComponent);
export { PoTableSubtitleFooterComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtc3VidGl0bGUtZm9vdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtc3VidGl0bGUtZm9vdGVyL3BvLXRhYmxlLXN1YnRpdGxlLWZvb3Rlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0c7Ozs7OztHQU1HO0FBS0gsSUFBYSw4QkFBOEIsR0FBM0MsTUFBYSw4QkFBOEI7SUFjekMsWUFBb0IsT0FBbUIsRUFBUyxRQUFtQjtRQUEvQyxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBVztJQUFJLENBQUM7SUFFeEUsZUFBZTtRQUNiLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsU0FBUztRQUVQLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUNsRCxJQUFJLENBQUMsMEJBQTBCLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUN2QjtJQUVILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVPLGNBQWM7UUFDcEIsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDbkMsSUFBSSxDQUFDLDBCQUEwQixFQUFFLENBQUM7UUFDcEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLHFDQUFxQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQ3JHLENBQUM7SUFFTyxZQUFZO1FBQ2xCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFFdkYsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQUVPLHdCQUF3QjtRQUM5QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxLQUFpQixFQUFFLEVBQUU7WUFDbkYsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLG9CQUFvQjtRQUMxQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVPLDBCQUEwQjtRQUNoQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM5QyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFdEMsSUFBSSxDQUFDLFlBQVksR0FBRyxTQUFTLEdBQUcsYUFBYSxDQUFDO0lBQ2hELENBQUM7Q0FFRixDQUFBOztZQXREOEIsVUFBVTtZQUFtQixTQUFTOztBQUw5QztJQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOztnRUFBVTtBQUdSO0lBQXJCLEtBQUssQ0FBQyxhQUFhLENBQUM7c0NBQVksS0FBSztpRUFBd0I7QUFabkQsOEJBQThCO0lBSjFDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSwwQkFBMEI7UUFDcEMsMGZBQXdEO0tBQ3pELENBQUM7NkNBZTZCLFVBQVUsRUFBbUIsU0FBUztHQWR4RCw4QkFBOEIsQ0FvRTFDO1NBcEVZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRG9DaGVjaywgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvVGFibGVTdWJ0aXRsZUNvbHVtbiB9IGZyb20gJy4vcG8tdGFibGUtc3VidGl0bGUtY29sdW1uLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBwYXJhIGEgY3JpYcOnw6NvIGRlIHVtIGNvbmp1bnRvIGRlIGxlZ2VuZGFzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby10YWJsZS1zdWJ0aXRsZS1mb290ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFibGUtc3VidGl0bGUtZm9vdGVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RhYmxlU3VidGl0bGVGb290ZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBEb0NoZWNrLCBPbkRlc3Ryb3kge1xuXG4gIHNob3dTdWJ0aXRsZTogYm9vbGVhbjtcblxuICBwcml2YXRlIGlzVmlzaWJsZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSB0aW1lb3V0UmVzaXplO1xuICBwcm90ZWN0ZWQgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgLyoqIFByb3ByaWVkYWRlIHF1ZSByZWNlYmUgYXMgbGl0ZXJhaXMgZGVmaW5pZGFzIG5vIGBwby10YWJsZWAuICovXG4gIEBJbnB1dCgncC1saXRlcmFscycpIGxpdGVyYWxzO1xuXG4gIC8qKiBQcm9wcmllZGFkZSBxdWUgcmVjZWJlIGFzIGxlZ2VuZGFzIGRlZmluaWRhcyBubyBgUG9UYWJsZVN1YnRpdGxlQ2lyY2xlQ29tcG9uZW50YC4gKi9cbiAgQElucHV0KCdwLXN1YnRpdGxlcycpIHN1YnRpdGxlczogQXJyYXk8UG9UYWJsZVN1YnRpdGxlQ29sdW1uPjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYsIHB1YmxpYyByZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplUmVzaXplTGlzdGVuZXIoKTtcbiAgICB0aGlzLmRlYm91bmNlUmVzaXplKCk7XG4gIH1cblxuICBuZ0RvQ2hlY2soKSB7XG5cbiAgICBpZiAoIXRoaXMuaXNWaXNpYmxlICYmIHRoaXMuZ2V0Q29udGFpbmVyU2l6ZSgpID4gMCkge1xuICAgICAgdGhpcy50b2dnbGVTaG93Q29tcGxldGVTdWJ0aXRsZSgpO1xuICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xuICAgIH1cblxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZW1vdmVSZXNpemVMaXN0ZW5lcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZWJvdW5jZVJlc2l6ZSgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0UmVzaXplKTtcbiAgICB0aGlzLnRpbWVvdXRSZXNpemUgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMudG9nZ2xlU2hvd0NvbXBsZXRlU3VidGl0bGUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29udGFpbmVyU2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBvLXRhYmxlLXN1YnRpdGxlLWZvb3Rlci1jb250YWluZXInKS5vZmZzZXRXaWR0aDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SXRlbXNTaXplKCkge1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvLXRhYmxlLXN1YnRpdGxlLWZvb3RlcicpO1xuXG4gICAgcmV0dXJuIEFycmF5LmZyb20oaXRlbXMpLm1hcChpdGVtID0+IGl0ZW1bJ29mZnNldFdpZHRoJ10pLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDE2KTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZVJlc2l6ZUxpc3RlbmVyKCkge1xuICAgIHRoaXMucmVzaXplTGlzdGVuZXIgPSB0aGlzLnJlbmRlcmVyLmxpc3Rlbignd2luZG93JywgJ3Jlc2l6ZScsIChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgdGhpcy5kZWJvdW5jZVJlc2l6ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVSZXNpemVMaXN0ZW5lcigpIHtcbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyKCk7XG4gIH1cblxuICBwcml2YXRlIHRvZ2dsZVNob3dDb21wbGV0ZVN1YnRpdGxlKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lclNpemUgPSB0aGlzLmdldENvbnRhaW5lclNpemUoKTtcbiAgICBjb25zdCBpdGVtc1NpemUgPSB0aGlzLmdldEl0ZW1zU2l6ZSgpO1xuXG4gICAgdGhpcy5zaG93U3VidGl0bGUgPSBpdGVtc1NpemUgPiBjb250YWluZXJTaXplO1xuICB9XG5cbn1cbiJdfQ==