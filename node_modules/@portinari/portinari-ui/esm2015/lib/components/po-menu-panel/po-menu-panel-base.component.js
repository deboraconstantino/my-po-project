import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { v4 as uuid } from 'uuid';
import { isExternalLink } from '../../utils/util';
/**
 * @description
 *
 * Este é um componente de menu lateral composto apenas por ícones e com um nível, utilizado para navegação
 * em páginas internas, externas da aplicação ou aciona uma ação.
 *
 * O componente `po-menu-panel` recebe uma lista de objetos do tipo `MenuPanelItem` com as informações dos
 * itens de menu como textos, links para redirecionamento, ações e ícones.
 */
export class PoMenuPanelBaseComponent {
    /** Lista dos itens do `po-menu-panel`. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */
    set menus(menus) {
        this._menus = Array.isArray(menus) ? menus : [];
        this.setMenuExtraProperties(this._menus);
        this.validateMenus(this._menus);
    }
    get menus() {
        return this._menus;
    }
    setMenuExtraProperties(menus) {
        menus.forEach(menuItem => this.setMenuItemProperties(menuItem));
    }
    setMenuItemProperties(menuItem) {
        menuItem.id = menuItem.id || uuid();
        menuItem.type = this.setMenuType(menuItem);
    }
    setMenuType(menuItem) {
        if (!menuItem.link) {
            return 'noLink';
        }
        if (isExternalLink(menuItem.link)) {
            return 'externalLink';
        }
        return 'internalLink';
    }
    validateMenu(menuItem) {
        if (!menuItem.label) {
            throw new Error('O atributo PoMenuPanelItem.label não pode ser vazio.');
        }
        if (!menuItem.icon) {
            throw new Error('O atributo PoMenuPanelItem.icon não pode ser vazio.');
        }
    }
    validateMenus(menus) {
        menus.forEach(menu => this.validateMenu(menu));
    }
}
tslib_1.__decorate([
    Input('p-menus'),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], PoMenuPanelBaseComponent.prototype, "menus", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbWVudS1wYW5lbC1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tbWVudS1wYW5lbC9wby1tZW51LXBhbmVsLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxFQUFFLElBQUksSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUtsRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sT0FBTyx3QkFBd0I7SUFJbkMsNEhBQTRIO0lBQzFHLElBQUksS0FBSyxDQUFDLEtBQTZCO1FBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFaEQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxLQUE2QjtRQUMxRCxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUEyQixRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzVGLENBQUM7SUFFTyxxQkFBcUIsQ0FBQyxRQUFpQztRQUM3RCxRQUFRLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUM7UUFDcEMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTyxXQUFXLENBQUMsUUFBeUI7UUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUU7WUFDbEIsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFFRCxJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDakMsT0FBTyxjQUFjLENBQUM7U0FDdkI7UUFFRCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDO0lBRU8sWUFBWSxDQUFDLFFBQXlCO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQztTQUN6RTtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztTQUN4RTtJQUNILENBQUM7SUFFTyxhQUFhLENBQUMsS0FBSztRQUN6QixLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FFRjtBQTlDbUI7SUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQztzQ0FBa0IsS0FBSzs2Q0FBTCxLQUFLO3FEQUt2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHY0IGFzIHV1aWQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IGlzRXh0ZXJuYWxMaW5rIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTWVudVBhbmVsSXRlbSB9IGZyb20gJy4vcG8tbWVudS1wYW5lbC1pdGVtL3BvLW1lbnUtcGFuZWwtaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9NZW51UGFuZWxJdGVtSW50ZXJuYWwgfSBmcm9tICcuL3BvLW1lbnUtcGFuZWwtaXRlbS9wby1tZW51LXBhbmVsLWl0ZW0taW50ZXJuYWwuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIMOpIHVtIGNvbXBvbmVudGUgZGUgbWVudSBsYXRlcmFsIGNvbXBvc3RvIGFwZW5hcyBwb3Igw61jb25lcyBlIGNvbSB1bSBuw612ZWwsIHV0aWxpemFkbyBwYXJhIG5hdmVnYcOnw6NvXG4gKiBlbSBww6FnaW5hcyBpbnRlcm5hcywgZXh0ZXJuYXMgZGEgYXBsaWNhw6fDo28gb3UgYWNpb25hIHVtYSBhw6fDo28uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1tZW51LXBhbmVsYCByZWNlYmUgdW1hIGxpc3RhIGRlIG9iamV0b3MgZG8gdGlwbyBgTWVudVBhbmVsSXRlbWAgY29tIGFzIGluZm9ybWHDp8O1ZXMgZG9zXG4gKiBpdGVucyBkZSBtZW51IGNvbW8gdGV4dG9zLCBsaW5rcyBwYXJhIHJlZGlyZWNpb25hbWVudG8sIGHDp8O1ZXMgZSDDrWNvbmVzLlxuICovXG5leHBvcnQgY2xhc3MgUG9NZW51UGFuZWxCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9tZW51cztcblxuICAvKiogTGlzdGEgZG9zIGl0ZW5zIGRvIGBwby1tZW51LXBhbmVsYC4gU2UgbyB2YWxvciBlc3RpdmVyIGluZGVmaW5pZG8gb3UgaW52w6FsaWRvLCBzZXLDoSBpbmljaWFsaXphZG8gY29tbyB1bSBhcnJheSB2YXppby4gKi9cbiAgQElucHV0KCdwLW1lbnVzJykgc2V0IG1lbnVzKG1lbnVzOiBBcnJheTxQb01lbnVQYW5lbEl0ZW0+KSB7XG4gICAgdGhpcy5fbWVudXMgPSBBcnJheS5pc0FycmF5KG1lbnVzKSA/IG1lbnVzIDogW107XG5cbiAgICB0aGlzLnNldE1lbnVFeHRyYVByb3BlcnRpZXModGhpcy5fbWVudXMpO1xuICAgIHRoaXMudmFsaWRhdGVNZW51cyh0aGlzLl9tZW51cyk7XG4gIH1cblxuICBnZXQgbWVudXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lbnVzO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRNZW51RXh0cmFQcm9wZXJ0aWVzKG1lbnVzOiBBcnJheTxQb01lbnVQYW5lbEl0ZW0+KSB7XG4gICAgbWVudXMuZm9yRWFjaChtZW51SXRlbSA9PiB0aGlzLnNldE1lbnVJdGVtUHJvcGVydGllcyg8UG9NZW51UGFuZWxJdGVtSW50ZXJuYWw+IG1lbnVJdGVtKSk7XG4gIH1cblxuICBwcml2YXRlIHNldE1lbnVJdGVtUHJvcGVydGllcyhtZW51SXRlbTogUG9NZW51UGFuZWxJdGVtSW50ZXJuYWwpIHtcbiAgICBtZW51SXRlbS5pZCA9IG1lbnVJdGVtLmlkIHx8IHV1aWQoKTtcbiAgICBtZW51SXRlbS50eXBlID0gdGhpcy5zZXRNZW51VHlwZShtZW51SXRlbSk7XG4gIH1cblxuICBwcml2YXRlIHNldE1lbnVUeXBlKG1lbnVJdGVtOiBQb01lbnVQYW5lbEl0ZW0pOiBzdHJpbmcge1xuICAgIGlmICghbWVudUl0ZW0ubGluaykge1xuICAgICAgcmV0dXJuICdub0xpbmsnO1xuICAgIH1cblxuICAgIGlmIChpc0V4dGVybmFsTGluayhtZW51SXRlbS5saW5rKSkge1xuICAgICAgcmV0dXJuICdleHRlcm5hbExpbmsnO1xuICAgIH1cblxuICAgIHJldHVybiAnaW50ZXJuYWxMaW5rJztcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVNZW51KG1lbnVJdGVtOiBQb01lbnVQYW5lbEl0ZW0pIHtcbiAgICBpZiAoIW1lbnVJdGVtLmxhYmVsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ08gYXRyaWJ1dG8gUG9NZW51UGFuZWxJdGVtLmxhYmVsIG7Do28gcG9kZSBzZXIgdmF6aW8uJyk7XG4gICAgfVxuXG4gICAgaWYgKCFtZW51SXRlbS5pY29uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ08gYXRyaWJ1dG8gUG9NZW51UGFuZWxJdGVtLmljb24gbsOjbyBwb2RlIHNlciB2YXppby4nKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlTWVudXMobWVudXMpOiB2b2lkIHtcbiAgICBtZW51cy5mb3JFYWNoKG1lbnUgPT4gdGhpcy52YWxpZGF0ZU1lbnUobWVudSkpO1xuICB9XG5cbn1cbiJdfQ==