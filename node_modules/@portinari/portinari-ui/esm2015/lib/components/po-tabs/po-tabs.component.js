import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ContentChildren, QueryList, ViewChild } from '@angular/core';
import { isMobile } from './../../utils/util';
import { PoTabComponent } from './po-tab/po-tab.component';
import { PoTabDropdownComponent } from './po-tab-dropdown/po-tab-dropdown.component';
import { PoTabsBaseComponent } from './po-tabs-base.component';
const poTabsMaxNumberOfTabs = 5;
/**
 * @docsExtends PoTabsBaseComponent
 *
 * @example
 *
 * <example name="po-tabs-basic" title="Portinari Tabs Basic">
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.html"> </file>
 *  <file name="sample-po-tabs-basic/sample-po-tabs-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-labs" title="Portinari Tabs Labs">
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.html"> </file>
 *  <file name="sample-po-tabs-labs/sample-po-tabs-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-travel" title="Portinari Tabs - Travel">
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.html"> </file>
 *  <file name="sample-po-tabs-travel/sample-po-tabs-travel.component.ts"> </file>
 * </example>
 *
 * <example name="po-tabs-business-conf" title="Portinari Tabs - Business Conference">
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.html"> </file>
 *  <file name="sample-po-tabs-business-conf/sample-po-tabs-business-conf.component.ts"> </file>
 * </example>
 */
let PoTabsComponent = class PoTabsComponent extends PoTabsBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
        this.maxNumberOfTabs = poTabsMaxNumberOfTabs;
    }
    get isMobileDevice() {
        return isMobile();
    }
    get isShowTabDropdown() {
        return !this.isMobileDevice && this.visibleTabs.length > this.maxNumberOfTabs;
    }
    // tabs que serão apresentadas na aba "Mais"
    get overflowedTabs() {
        return this.visibleTabs.filter((_tab, index) => index > (this.maxNumberOfTabs - 2));
    }
    get visibleTabs() {
        return this.tabs.filter(tab => !tab.hide);
    }
    closePopover() {
        const containsPopoverVisible = this.tabDropdown && this.tabDropdown.popover && !this.tabDropdown.popover.isHidden;
        if (containsPopoverVisible) {
            this.tabDropdown.popover.close();
        }
    }
    isVisibleTab(tab) {
        if (this.isMobileDevice) {
            return true;
        }
        const visibleTabIndex = this.visibleTabs.findIndex(visibleTab => visibleTab.id === tab.id);
        return (this.visibleTabs.length <= this.maxNumberOfTabs) || (visibleTabIndex < (this.maxNumberOfTabs - 1));
    }
    // Função disparada quando alguma tab ficar ativa
    onTabActive(tab) {
        this.previousActiveTab = this.tabs.find(tabChild => tabChild.active && tabChild.id !== tab.id);
        this.deactivateTab();
    }
    // funcao será disparada quando mudar o estado do poTab para desabilitado ou escondido.
    onTabChangeState(tab) {
        if (tab.active) {
            tab.active = false;
            this.activeDistinctTab();
            this.changeDetector.detectChanges();
        }
    }
    // selectiona a aba informada por parametro, caso houver click faz a emição do evento.
    selectedTab(tab) {
        tab.active = true;
        if (tab.click) {
            tab.click.emit(tab);
        }
        this.changeDetector.detectChanges();
    }
    trackByFn(_i, tab) {
        return tab.id;
    }
    // ativa a previousActiveTab ou primeira tab encontrada.
    activeDistinctTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = true;
        }
        else {
            this.activeFirstTab();
        }
    }
    // Ativa a primeira Tab que não estiver desabilitada ou escondida.
    activeFirstTab() {
        this.tabs.some(tabChild => {
            if (!tabChild.disabled && !tabChild.hide) {
                tabChild.active = true;
                return true;
            }
        });
    }
    // desativa previousActiveTab e dispara a detecção de mudança.
    deactivateTab() {
        if (this.previousActiveTab) {
            this.previousActiveTab.active = false;
            this.changeDetector.detectChanges();
        }
    }
};
PoTabsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
tslib_1.__decorate([
    ContentChildren(PoTabComponent),
    tslib_1.__metadata("design:type", QueryList)
], PoTabsComponent.prototype, "tabs", void 0);
tslib_1.__decorate([
    ViewChild('tabDropdown', { static: true }),
    tslib_1.__metadata("design:type", PoTabDropdownComponent)
], PoTabsComponent.prototype, "tabDropdown", void 0);
PoTabsComponent = tslib_1.__decorate([
    Component({
        selector: 'po-tabs',
        template: "<div class=\"po-tabs-container\"\n  [class.po-tabs-container-mobile]=\"isMobileDevice\">\n  <div class=\"po-tabs-header\">\n\n    <ng-container *ngFor=\"let tab of tabs; trackBy: trackByFn\">\n      <po-tab-button *ngIf=\"isVisibleTab(tab)\"\n        class=\"po-tab-button\"\n        [class.po-tab-button-mobile]=\"isMobileDevice\"\n        [p-active]=\"tab.active\"\n        [p-disabled]=\"tab.disabled\"\n        [p-hide]=\"tab.hide\"\n        [p-id]=\"tab.id\"\n        [p-label]=\"tab.label\"\n        [p-small]=\"small\"\n        (keyup.enter)=\"closePopover()\"\n        (p-activated)=\"onTabActive(tab)\"\n        (p-change-state)=\"onTabChangeState(tab)\"\n        (p-click)=\"selectedTab(tab)\">\n      </po-tab-button>\n    </ng-container>\n\n    <po-tab-dropdown #tabDropdown\n      *ngIf=\"isShowTabDropdown\"\n      class=\"po-tab-button po-tab-dropdown\"\n      p-label=\"Mais\"\n      [p-small]=\"small\"\n      [p-tabs]=\"overflowedTabs\"\n      (p-activated)=\"onTabActive($event)\"\n      (p-change-state)=\"onTabChangeState($event)\"\n      (p-click)=\"selectedTab($event)\">\n    </po-tab-dropdown>\n  </div>\n</div>\n\n<div class=\"po-tabs-content\">\n  <ng-content></ng-content>\n</div>\n\n"
    }),
    tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
], PoTabsComponent);
export { PoTabsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFicy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXRhYnMvcG8tdGFicy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFcEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNyRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQztBQUVoQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBS0gsSUFBYSxlQUFlLEdBQTVCLE1BQWEsZUFBZ0IsU0FBUSxtQkFBbUI7SUFXdEQsWUFBb0IsY0FBaUM7UUFDbkQsS0FBSyxFQUFFLENBQUM7UUFEVSxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFUckQsb0JBQWUsR0FBRyxxQkFBcUIsQ0FBQztJQVd4QyxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksaUJBQWlCO1FBQ25CLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDaEYsQ0FBQztJQUVELDRDQUE0QztJQUM1QyxJQUFJLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFL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UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw4REFBOEQ7SUFDdEQsYUFBYTtRQUNuQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUMxQixJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztZQUV0QyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3JDO0lBQ0gsQ0FBQztDQUVGLENBQUE7O1lBcEdxQyxpQkFBaUI7O0FBSnBCO0lBQWhDLGVBQWUsQ0FBQyxjQUFjLENBQUM7c0NBQU8sU0FBUzs2Q0FBaUI7QUFFckI7SUFBM0MsU0FBUyxDQUFDLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztzQ0FBYyxzQkFBc0I7b0RBQUM7QUFUckUsZUFBZTtJQUozQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsU0FBUztRQUNuQix3c0NBQXVDO0tBQ3hDLENBQUM7NkNBWW9DLGlCQUFpQjtHQVgxQyxlQUFlLENBK0czQjtTQS9HWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc01vYmlsZSB9IGZyb20gJy4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvVGFiQ29tcG9uZW50IH0gZnJvbSAnLi9wby10YWIvcG8tdGFiLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1RhYkRyb3Bkb3duQ29tcG9uZW50IH0gZnJvbSAnLi9wby10YWItZHJvcGRvd24vcG8tdGFiLWRyb3Bkb3duLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1RhYnNCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9wby10YWJzLWJhc2UuY29tcG9uZW50JztcblxuY29uc3QgcG9UYWJzTWF4TnVtYmVyT2ZUYWJzID0gNTtcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9UYWJzQmFzZUNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXRhYnMtYmFzaWNcIiB0aXRsZT1cIlBvcnRpbmFyaSBUYWJzIEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10YWJzLWJhc2ljL3NhbXBsZS1wby10YWJzLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRhYnMtYmFzaWMvc2FtcGxlLXBvLXRhYnMtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdGFicy1sYWJzXCIgdGl0bGU9XCJQb3J0aW5hcmkgVGFicyBMYWJzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10YWJzLWxhYnMvc2FtcGxlLXBvLXRhYnMtbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10YWJzLWxhYnMvc2FtcGxlLXBvLXRhYnMtbGFicy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10YWJzLXRyYXZlbFwiIHRpdGxlPVwiUG9ydGluYXJpIFRhYnMgLSBUcmF2ZWxcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRhYnMtdHJhdmVsL3NhbXBsZS1wby10YWJzLXRyYXZlbC5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10YWJzLXRyYXZlbC9zYW1wbGUtcG8tdGFicy10cmF2ZWwuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdGFicy1idXNpbmVzcy1jb25mXCIgdGl0bGU9XCJQb3J0aW5hcmkgVGFicyAtIEJ1c2luZXNzIENvbmZlcmVuY2VcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRhYnMtYnVzaW5lc3MtY29uZi9zYW1wbGUtcG8tdGFicy1idXNpbmVzcy1jb25mLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRhYnMtYnVzaW5lc3MtY29uZi9zYW1wbGUtcG8tdGFicy1idXNpbmVzcy1jb25mLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRhYnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tdGFicy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWJzQ29tcG9uZW50IGV4dGVuZHMgUG9UYWJzQmFzZUNvbXBvbmVudCB7XG5cbiAgbWF4TnVtYmVyT2ZUYWJzID0gcG9UYWJzTWF4TnVtYmVyT2ZUYWJzO1xuXG4gIHByaXZhdGUgcHJldmlvdXNBY3RpdmVUYWI6IFBvVGFiQ29tcG9uZW50O1xuXG4gIC8vIFRhYnMgdXRpbGl6YWRvcyBubyBuZy1jb250ZW50XG4gIEBDb250ZW50Q2hpbGRyZW4oUG9UYWJDb21wb25lbnQpIHRhYnM6IFF1ZXJ5TGlzdDxQb1RhYkNvbXBvbmVudD47XG5cbiAgQFZpZXdDaGlsZCgndGFiRHJvcGRvd24nLCB7IHN0YXRpYzogdHJ1ZSB9KSB0YWJEcm9wZG93bjogUG9UYWJEcm9wZG93bkNvbXBvbmVudDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBnZXQgaXNNb2JpbGVEZXZpY2UoKSB7XG4gICAgcmV0dXJuIGlzTW9iaWxlKCk7XG4gIH1cblxuICBnZXQgaXNTaG93VGFiRHJvcGRvd24oKSB7XG4gICAgcmV0dXJuICF0aGlzLmlzTW9iaWxlRGV2aWNlICYmIHRoaXMudmlzaWJsZVRhYnMubGVuZ3RoID4gdGhpcy5tYXhOdW1iZXJPZlRhYnM7XG4gIH1cblxuICAvLyB0YWJzIHF1ZSBzZXLDo28gYXByZXNlbnRhZGFzIG5hIGFiYSBcIk1haXNcIlxuICBnZXQgb3ZlcmZsb3dlZFRhYnMoKSB7XG4gICAgcmV0dXJuIHRoaXMudmlzaWJsZVRhYnMuZmlsdGVyKChfdGFiLCBpbmRleCkgPT4gaW5kZXggPiAodGhpcy5tYXhOdW1iZXJPZlRhYnMgLSAyKSk7XG4gIH1cblxuICBnZXQgdmlzaWJsZVRhYnMoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFicy5maWx0ZXIodGFiID0+ICF0YWIuaGlkZSk7XG4gIH1cblxuICBjbG9zZVBvcG92ZXIoKTogdm9pZCB7XG4gICAgY29uc3QgY29udGFpbnNQb3BvdmVyVmlzaWJsZSA9IHRoaXMudGFiRHJvcGRvd24gJiYgdGhpcy50YWJEcm9wZG93bi5wb3BvdmVyICYmICF0aGlzLnRhYkRyb3Bkb3duLnBvcG92ZXIuaXNIaWRkZW47XG5cbiAgICBpZiAoY29udGFpbnNQb3BvdmVyVmlzaWJsZSkge1xuICAgICAgdGhpcy50YWJEcm9wZG93bi5wb3BvdmVyLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgaXNWaXNpYmxlVGFiKHRhYikge1xuICAgIGlmICh0aGlzLmlzTW9iaWxlRGV2aWNlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCB2aXNpYmxlVGFiSW5kZXggPSB0aGlzLnZpc2libGVUYWJzLmZpbmRJbmRleCh2aXNpYmxlVGFiID0+IHZpc2libGVUYWIuaWQgPT09IHRhYi5pZCk7XG5cbiAgICByZXR1cm4gKHRoaXMudmlzaWJsZVRhYnMubGVuZ3RoIDw9IHRoaXMubWF4TnVtYmVyT2ZUYWJzKSB8fCAodmlzaWJsZVRhYkluZGV4IDwgKHRoaXMubWF4TnVtYmVyT2ZUYWJzIC0gMSkpO1xuICB9XG5cbiAgLy8gRnVuw6fDo28gZGlzcGFyYWRhIHF1YW5kbyBhbGd1bWEgdGFiIGZpY2FyIGF0aXZhXG4gIG9uVGFiQWN0aXZlKHRhYikge1xuICAgIHRoaXMucHJldmlvdXNBY3RpdmVUYWIgPSB0aGlzLnRhYnMuZmluZCh0YWJDaGlsZCA9PiB0YWJDaGlsZC5hY3RpdmUgJiYgdGFiQ2hpbGQuaWQgIT09IHRhYi5pZCk7XG5cbiAgICB0aGlzLmRlYWN0aXZhdGVUYWIoKTtcbiAgfVxuXG4gIC8vIGZ1bmNhbyBzZXLDoSBkaXNwYXJhZGEgcXVhbmRvIG11ZGFyIG8gZXN0YWRvIGRvIHBvVGFiIHBhcmEgZGVzYWJpbGl0YWRvIG91IGVzY29uZGlkby5cbiAgb25UYWJDaGFuZ2VTdGF0ZSh0YWI6IFBvVGFiQ29tcG9uZW50KSB7XG4gICAgaWYgKHRhYi5hY3RpdmUpIHtcbiAgICAgIHRhYi5hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgdGhpcy5hY3RpdmVEaXN0aW5jdFRhYigpO1xuXG4gICAgICB0aGlzLmNoYW5nZURldGVjdG9yLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG4gIH1cblxuICAvLyBzZWxlY3Rpb25hIGEgYWJhIGluZm9ybWFkYSBwb3IgcGFyYW1ldHJvLCBjYXNvIGhvdXZlciBjbGljayBmYXogYSBlbWnDp8OjbyBkbyBldmVudG8uXG4gIHNlbGVjdGVkVGFiKHRhYjogUG9UYWJDb21wb25lbnQpIHtcbiAgICB0YWIuYWN0aXZlID0gdHJ1ZTtcblxuICAgIGlmICh0YWIuY2xpY2spIHtcbiAgICAgIHRhYi5jbGljay5lbWl0KHRhYik7XG4gICAgfVxuXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxuICB0cmFja0J5Rm4oX2ksIHRhYjogUG9UYWJDb21wb25lbnQpIHtcbiAgICByZXR1cm4gdGFiLmlkO1xuICB9XG5cbiAgLy8gYXRpdmEgYSBwcmV2aW91c0FjdGl2ZVRhYiBvdSBwcmltZWlyYSB0YWIgZW5jb250cmFkYS5cbiAgcHJpdmF0ZSBhY3RpdmVEaXN0aW5jdFRhYigpIHtcbiAgICBpZiAodGhpcy5wcmV2aW91c0FjdGl2ZVRhYikge1xuICAgICAgdGhpcy5wcmV2aW91c0FjdGl2ZVRhYi5hY3RpdmUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFjdGl2ZUZpcnN0VGFiKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQXRpdmEgYSBwcmltZWlyYSBUYWIgcXVlIG7Do28gZXN0aXZlciBkZXNhYmlsaXRhZGEgb3UgZXNjb25kaWRhLlxuICBwcml2YXRlIGFjdGl2ZUZpcnN0VGFiKCkge1xuICAgIHRoaXMudGFicy5zb21lKHRhYkNoaWxkID0+IHtcbiAgICAgIGlmICghdGFiQ2hpbGQuZGlzYWJsZWQgJiYgIXRhYkNoaWxkLmhpZGUpIHtcbiAgICAgICAgdGFiQ2hpbGQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBkZXNhdGl2YSBwcmV2aW91c0FjdGl2ZVRhYiBlIGRpc3BhcmEgYSBkZXRlY8Onw6NvIGRlIG11ZGFuw6dhLlxuICBwcml2YXRlIGRlYWN0aXZhdGVUYWIoKSB7XG4gICAgaWYgKHRoaXMucHJldmlvdXNBY3RpdmVUYWIpIHtcbiAgICAgIHRoaXMucHJldmlvdXNBY3RpdmVUYWIuYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=