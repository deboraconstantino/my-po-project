import * as tslib_1 from "tslib";
import { AfterViewInit, Component, OnDestroy, Renderer2 } from '@angular/core';
import { PoPageContentBaseComponent } from './po-page-content-base.component';
/**
 * @docsPrivate
 *
 * @docsExtends PoPageContentBaseComponent
 */
let PoPageContentComponent = class PoPageContentComponent extends PoPageContentBaseComponent {
    constructor(renderer) {
        super();
        this.renderer = renderer;
        this.contentOpacity = 0;
        this.height = '90%';
        this.overflowY = 'none';
        this.initializeListeners();
    }
    ngAfterViewInit() {
        this.recalculateHeaderSize();
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    recalculateHeaderSize() {
        setTimeout(() => {
            const pageHeaderElement = document.querySelector('div.po-page-header');
            this.setHeightContent(pageHeaderElement);
            this.contentOpacity = 1;
        });
    }
    setHeightContent(poPageHeader) {
        const bodyHeight = document.body.clientHeight;
        const pageHeaderHeight = poPageHeader ? poPageHeader.offsetTop + poPageHeader.offsetHeight : 0;
        const newHeight = bodyHeight - pageHeaderHeight;
        this.height = `${newHeight}px`;
    }
    initializeListeners() {
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.recalculateHeaderSize();
        });
    }
    removeListeners() {
        this.resizeListener();
    }
};
PoPageContentComponent.ctorParameters = () => [
    { type: Renderer2 }
];
PoPageContentComponent = tslib_1.__decorate([
    Component({
        selector: 'po-page-content',
        template: "<div class=\"po-page-content\"\n  [style.height]=\"height\"\n  [style.opacity]=\"contentOpacity\"\n  [style.overflow-y]=\"overflowY\">\n  <ng-content></ng-content>\n</div>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2])
], PoPageContentComponent);
export { PoPageContentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tcGFnZS9wby1wYWdlLWNvbnRlbnQvcG8tcGFnZS1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUU5RTs7OztHQUlHO0FBS0gsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBdUIsU0FBUSwwQkFBMEI7SUFNcEUsWUFBbUIsUUFBbUI7UUFDcEMsS0FBSyxFQUFFLENBQUM7UUFEUyxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSnRDLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO1FBQzNCLFdBQU0sR0FBVyxLQUFLLENBQUM7UUFDdkIsY0FBUyxHQUFXLE1BQU0sQ0FBQztRQUl6QixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxxQkFBcUI7UUFDbkIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE1BQU0saUJBQWlCLEdBQWdCLFFBQVEsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUVwRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxZQUF5QjtRQUN4QyxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUM5QyxNQUFNLGdCQUFnQixHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0YsTUFBTSxTQUFTLEdBQUcsVUFBVSxHQUFHLGdCQUFnQixDQUFDO1FBRWhELElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxTQUFTLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUU7WUFDbEUsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sZUFBZTtRQUNyQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztDQUVGLENBQUE7O1lBeEM4QixTQUFTOztBQU4zQixzQkFBc0I7SUFKbEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQix5TEFBK0M7S0FDaEQsQ0FBQzs2Q0FPNkIsU0FBUztHQU4zQixzQkFBc0IsQ0E4Q2xDO1NBOUNZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9QYWdlQ29udGVudEJhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLXBhZ2UtY29udGVudC1iYXNlLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRvY3NFeHRlbmRzIFBvUGFnZUNvbnRlbnRCYXNlQ29tcG9uZW50XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXBhZ2UtY29udGVudCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1wYWdlLWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvUGFnZUNvbnRlbnRDb21wb25lbnQgZXh0ZW5kcyBQb1BhZ2VDb250ZW50QmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgY29udGVudE9wYWNpdHk6IG51bWJlciA9IDA7XG4gIGhlaWdodDogc3RyaW5nID0gJzkwJSc7XG4gIG92ZXJmbG93WTogc3RyaW5nID0gJ25vbmUnO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmluaXRpYWxpemVMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IHBhZ2VIZWFkZXJFbGVtZW50OiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5wby1wYWdlLWhlYWRlcicpO1xuXG4gICAgICB0aGlzLnNldEhlaWdodENvbnRlbnQocGFnZUhlYWRlckVsZW1lbnQpO1xuICAgICAgdGhpcy5jb250ZW50T3BhY2l0eSA9IDE7XG4gICAgfSk7XG4gIH1cblxuICBzZXRIZWlnaHRDb250ZW50KHBvUGFnZUhlYWRlcjogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBib2R5SGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQ7XG4gICAgY29uc3QgcGFnZUhlYWRlckhlaWdodCA9IHBvUGFnZUhlYWRlciA/IHBvUGFnZUhlYWRlci5vZmZzZXRUb3AgKyBwb1BhZ2VIZWFkZXIub2Zmc2V0SGVpZ2h0IDogMDtcbiAgICBjb25zdCBuZXdIZWlnaHQgPSBib2R5SGVpZ2h0IC0gcGFnZUhlYWRlckhlaWdodDtcblxuICAgIHRoaXMuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZUxpc3RlbmVycygpIHtcbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyID0gdGhpcy5yZW5kZXJlci5saXN0ZW4oJ3dpbmRvdycsICdyZXNpemUnLCAoKSA9PiB7XG4gICAgICB0aGlzLnJlY2FsY3VsYXRlSGVhZGVyU2l6ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5yZXNpemVMaXN0ZW5lcigpO1xuICB9XG5cbn1cbiJdfQ==