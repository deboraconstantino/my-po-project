import * as tslib_1 from "tslib";
import { Input, ViewChild } from '@angular/core';
import { browserLanguage, poLocaleDefault } from './../../../utils/util';
import { PoPageContentComponent } from '../po-page-content/po-page-content.component';
export const poPageDetailLiteralsDefault = {
    en: {
        back: 'Back',
        edit: 'Edit',
        remove: 'Remove'
    },
    es: {
        back: 'Volver',
        edit: 'Editar',
        remove: 'Eliminar'
    },
    pt: {
        back: 'Voltar',
        edit: 'Editar',
        remove: 'Remover'
    },
    ru: {
        back: 'возвращение',
        edit: 'редактировать',
        remove: 'удаление'
    }
};
/**
 * @description
 *
 * O componente **po-page-detail** é utilizado como container principal para a tela de detalhamento de um registro.
 * Por padrão possui 3 ações, cada ação na tela executa uma função no componente que está utilizando o po-page-detail,
 * são elas:
 *  - Voltar (função: back);
 *  - Editar (função: edit);
 *  - Remover (função: remove);
 *
 * Caso não estiver implementado alguma função, listado anteriormente, o mesmo não será apresentado.
 */
export class PoPageDetailBaseComponent {
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-detail`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    edit: 'Edição',
     *    remove: 'Exclusão',
     *    back: 'Menu'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDetailLiterals = {
     *    remove: 'Excluir registro permanentemente'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-detail
     *   [p-literals]="customLiterals">
     * </po-page-detail>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, poPageDetailLiteralsDefault[poLocaleDefault], poPageDetailLiteralsDefault[browserLanguage()], value);
        }
        else {
            this._literals = poPageDetailLiteralsDefault[browserLanguage()];
        }
    }
    get literals() {
        return this._literals || poPageDetailLiteralsDefault[browserLanguage()];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        this.poPageContent.recalculateHeaderSize();
    }
    get title() {
        return this._title;
    }
}
tslib_1.__decorate([
    ViewChild(PoPageContentComponent, { static: true }),
    tslib_1.__metadata("design:type", PoPageContentComponent)
], PoPageDetailBaseComponent.prototype, "poPageContent", void 0);
tslib_1.__decorate([
    Input('p-breadcrumb'),
    tslib_1.__metadata("design:type", Object)
], PoPageDetailBaseComponent.prototype, "breadcrumb", void 0);
tslib_1.__decorate([
    Input('p-literals'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoPageDetailBaseComponent.prototype, "literals", null);
tslib_1.__decorate([
    Input('p-title'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoPageDetailBaseComponent.prototype, "title", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1kZXRhaWwtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXBhZ2UvcG8tcGFnZS1kZXRhaWwvcG8tcGFnZS1kZXRhaWwtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFHdEYsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQUc7SUFDekMsRUFBRSxFQUF5QjtRQUN6QixJQUFJLEVBQUUsTUFBTTtRQUNaLElBQUksRUFBRSxNQUFNO1FBQ1osTUFBTSxFQUFFLFFBQVE7S0FDakI7SUFDRCxFQUFFLEVBQXlCO1FBQ3pCLElBQUksRUFBRSxRQUFRO1FBQ2QsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNLEVBQUUsVUFBVTtLQUNuQjtJQUNELEVBQUUsRUFBeUI7UUFDekIsSUFBSSxFQUFFLFFBQVE7UUFDZCxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxTQUFTO0tBQ2xCO0lBQ0QsRUFBRSxFQUF5QjtRQUN6QixJQUFJLEVBQUUsYUFBYTtRQUNuQixJQUFJLEVBQUUsZUFBZTtRQUNyQixNQUFNLEVBQUUsVUFBVTtLQUNuQjtDQUNGLENBQUM7QUFFRjs7Ozs7Ozs7Ozs7R0FXRztBQUNILE1BQU0sT0FBTyx5QkFBeUI7SUFVcEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FrQ0c7SUFDa0IsSUFBSSxRQUFRLENBQUMsS0FBMkI7UUFDM0QsSUFBSSxLQUFLLFlBQVksTUFBTSxJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDLEVBQUU7WUFDeEQsSUFBSSxDQUFDLFNBQVMscUJBQ1QsMkJBQTJCLENBQUMsZUFBZSxDQUFDLEVBQzVDLDJCQUEyQixDQUFDLGVBQWUsRUFBRSxDQUFDLEVBQzlDLEtBQUssQ0FDVCxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcsMkJBQTJCLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztTQUNqRTtJQUNILENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLElBQUksMkJBQTJCLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsd0JBQXdCO0lBQ04sSUFBSSxLQUFLLENBQUMsS0FBYTtRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0NBRUY7QUFqRXNEO0lBQXBELFNBQVMsQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztzQ0FBZ0Isc0JBQXNCO2dFQUFDO0FBR3BFO0lBQXRCLEtBQUssQ0FBQyxjQUFjLENBQUM7OzZEQUEwQjtBQXFDM0I7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7O3lEQVVuQjtBQU1pQjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzs7c0RBR2hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvQnJlYWRjcnVtYiB9IGZyb20gJy4uLy4uL3BvLWJyZWFkY3J1bWIvcG8tYnJlYWRjcnVtYi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlQ29udGVudENvbXBvbmVudCB9IGZyb20gJy4uL3BvLXBhZ2UtY29udGVudC9wby1wYWdlLWNvbnRlbnQuY29tcG9uZW50JztcbmltcG9ydCB7IFBvUGFnZURldGFpbExpdGVyYWxzIH0gZnJvbSAnLi9wby1wYWdlLWRldGFpbC1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgcG9QYWdlRGV0YWlsTGl0ZXJhbHNEZWZhdWx0ID0ge1xuICBlbjogPFBvUGFnZURldGFpbExpdGVyYWxzPiB7XG4gICAgYmFjazogJ0JhY2snLFxuICAgIGVkaXQ6ICdFZGl0JyxcbiAgICByZW1vdmU6ICdSZW1vdmUnXG4gIH0sXG4gIGVzOiA8UG9QYWdlRGV0YWlsTGl0ZXJhbHM+IHtcbiAgICBiYWNrOiAnVm9sdmVyJyxcbiAgICBlZGl0OiAnRWRpdGFyJyxcbiAgICByZW1vdmU6ICdFbGltaW5hcidcbiAgfSxcbiAgcHQ6IDxQb1BhZ2VEZXRhaWxMaXRlcmFscz4ge1xuICAgIGJhY2s6ICdWb2x0YXInLFxuICAgIGVkaXQ6ICdFZGl0YXInLFxuICAgIHJlbW92ZTogJ1JlbW92ZXInXG4gIH0sXG4gIHJ1OiA8UG9QYWdlRGV0YWlsTGl0ZXJhbHM+IHtcbiAgICBiYWNrOiAn0LLQvtC30LLRgNCw0YnQtdC90LjQtScsXG4gICAgZWRpdDogJ9GA0LXQtNCw0LrRgtC40YDQvtCy0LDRgtGMJyxcbiAgICByZW1vdmU6ICfRg9C00LDQu9C10L3QuNC1J1xuICB9XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSAqKnBvLXBhZ2UtZGV0YWlsKiogw6kgdXRpbGl6YWRvIGNvbW8gY29udGFpbmVyIHByaW5jaXBhbCBwYXJhIGEgdGVsYSBkZSBkZXRhbGhhbWVudG8gZGUgdW0gcmVnaXN0cm8uXG4gKiBQb3IgcGFkcsOjbyBwb3NzdWkgMyBhw6fDtWVzLCBjYWRhIGHDp8OjbyBuYSB0ZWxhIGV4ZWN1dGEgdW1hIGZ1bsOnw6NvIG5vIGNvbXBvbmVudGUgcXVlIGVzdMOhIHV0aWxpemFuZG8gbyBwby1wYWdlLWRldGFpbCxcbiAqIHPDo28gZWxhczpcbiAqICAtIFZvbHRhciAoZnVuw6fDo286IGJhY2spO1xuICogIC0gRWRpdGFyIChmdW7Dp8OjbzogZWRpdCk7XG4gKiAgLSBSZW1vdmVyIChmdW7Dp8OjbzogcmVtb3ZlKTtcbiAqXG4gKiBDYXNvIG7Do28gZXN0aXZlciBpbXBsZW1lbnRhZG8gYWxndW1hIGZ1bsOnw6NvLCBsaXN0YWRvIGFudGVyaW9ybWVudGUsIG8gbWVzbW8gbsOjbyBzZXLDoSBhcHJlc2VudGFkby5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvUGFnZURldGFpbEJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2xpdGVyYWxzOiBQb1BhZ2VEZXRhaWxMaXRlcmFscztcbiAgcHJpdmF0ZSBfdGl0bGU6IHN0cmluZztcblxuICBAVmlld0NoaWxkKFBvUGFnZUNvbnRlbnRDb21wb25lbnQsIHsgc3RhdGljOiB0cnVlIH0pIHBvUGFnZUNvbnRlbnQ6IFBvUGFnZUNvbnRlbnRDb21wb25lbnQ7XG5cbiAgLyoqIE9iamV0byBjb20gcHJvcHJpZWRhZGVzIGRvIGJyZWFkY3J1bWIuICovXG4gIEBJbnB1dCgncC1icmVhZGNydW1iJykgYnJlYWRjcnVtYjogUG9CcmVhZGNydW1iO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGBwby1wYWdlLWRldGFpbGAuXG4gICAqXG4gICAqIEV4aXN0ZW0gZHVhcyBtYW5laXJhcyBkZSBjdXN0b21pemFyIG8gY29tcG9uZW50ZSwgcGFzc2FuZG8gdW0gb2JqZXRvIGNvbSB0b2RhcyBhcyBsaXRlcmFpcyBkaXNwb27DrXZlaXM6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvUGFnZURldGFpbExpdGVyYWxzID0ge1xuICAgKiAgICBlZGl0OiAnRWRpw6fDo28nLFxuICAgKiAgICByZW1vdmU6ICdFeGNsdXPDo28nLFxuICAgKiAgICBiYWNrOiAnTWVudSdcbiAgICogIH07XG4gICAqIGBgYFxuICAgKlxuICAgKiBPdSBwYXNzYW5kbyBhcGVuYXMgYXMgbGl0ZXJhaXMgcXVlIGRlc2VqYSBjdXN0b21pemFyOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb1BhZ2VEZXRhaWxMaXRlcmFscyA9IHtcbiAgICogICAgcmVtb3ZlOiAnRXhjbHVpciByZWdpc3RybyBwZXJtYW5lbnRlbWVudGUnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDxwby1wYWdlLWRldGFpbFxuICAgKiAgIFtwLWxpdGVyYWxzXT1cImN1c3RvbUxpdGVyYWxzXCI+XG4gICAqIDwvcG8tcGFnZS1kZXRhaWw+XG4gICAqIGBgYFxuICAgKlxuICAgKiAgPiBPIG9iamV0byBwYWRyw6NvIGRlIGxpdGVyYWlzIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGRvIGJyb3dzZXIgKHB0LCBlbiwgZXMpLlxuICAgKi9cbiAgQElucHV0KCdwLWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb1BhZ2VEZXRhaWxMaXRlcmFscykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHtcbiAgICAgICAgLi4ucG9QYWdlRGV0YWlsTGl0ZXJhbHNEZWZhdWx0W3BvTG9jYWxlRGVmYXVsdF0sXG4gICAgICAgIC4uLnBvUGFnZURldGFpbExpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV0sXG4gICAgICAgIC4uLnZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHBvUGFnZURldGFpbExpdGVyYWxzRGVmYXVsdFticm93c2VyTGFuZ3VhZ2UoKV07XG4gICAgfVxuICB9XG4gIGdldCBsaXRlcmFscygpIHtcbiAgICByZXR1cm4gdGhpcy5fbGl0ZXJhbHMgfHwgcG9QYWdlRGV0YWlsTGl0ZXJhbHNEZWZhdWx0W2Jyb3dzZXJMYW5ndWFnZSgpXTtcbiAgfVxuXG4gIC8qKiBUw610dWxvIGRhIHDDoWdpbmEuICovXG4gIEBJbnB1dCgncC10aXRsZScpIHNldCB0aXRsZSh0aXRsZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLnBvUGFnZUNvbnRlbnQucmVjYWxjdWxhdGVIZWFkZXJTaXplKCk7XG4gIH1cblxuICBnZXQgdGl0bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpdGxlO1xuICB9XG5cbn1cbiJdfQ==