import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { poLocaleDefault } from './../../../utils/util';
import { PoPageDefaultBaseComponent } from '../po-page-default/po-page-default-base.component';
export const poPageListLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
export class PoPageListBaseComponent extends PoPageDefaultBaseComponent {
    constructor(languageService) {
        super();
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value) {
        if (!value) {
            value = {};
        }
        this._disclaimerGroup = value;
    }
    get disclaimerGroup() {
        return this._disclaimerGroup;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, poPageListLiteralsDefault[poLocaleDefault], poPageListLiteralsDefault[this.language], value);
        }
        else {
            this._literals = poPageListLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageListLiteralsDefault[this.language];
    }
}
tslib_1.__decorate([
    Input('p-breadcrumb'),
    tslib_1.__metadata("design:type", Object)
], PoPageListBaseComponent.prototype, "breadcrumb", void 0);
tslib_1.__decorate([
    Input('p-disclaimer-group'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoPageListBaseComponent.prototype, "disclaimerGroup", null);
tslib_1.__decorate([
    Input('p-filter'),
    tslib_1.__metadata("design:type", Object)
], PoPageListBaseComponent.prototype, "filter", void 0);
tslib_1.__decorate([
    Input('p-literals'),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], PoPageListBaseComponent.prototype, "literals", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1saXN0LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlL3BvLXBhZ2UtbGlzdC9wby1wYWdlLWxpc3QtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBS3hELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBSS9GLE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHO0lBQ3ZDLEVBQUUsRUFBdUI7UUFDdkIsWUFBWSxFQUFFLGVBQWU7S0FDOUI7SUFDRCxFQUFFLEVBQXVCO1FBQ3ZCLFlBQVksRUFBRSxnQkFBZ0I7S0FDL0I7SUFDRCxFQUFFLEVBQXVCO1FBQ3ZCLFlBQVksRUFBRSxjQUFjO0tBQzdCO0lBQ0QsRUFBRSxFQUF1QjtRQUN2QixZQUFZLEVBQUUsaUJBQWlCO0tBQ2hDO0NBQ0YsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7R0FZRztBQUNILE1BQU0sT0FBZ0IsdUJBQXdCLFNBQVEsMEJBQTBCO0lBNEY5RSxZQUFZLGVBQWtDO1FBQzVDLEtBQUssRUFBRSxDQUFDO1FBRVIsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUNyRCxDQUFDO0lBL0VEOzs7Ozs7T0FNRztJQUMwQixJQUFJLGVBQWUsQ0FBQyxLQUF3QjtRQUN2RSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsS0FBSyxHQUFTLEVBQUUsQ0FBQztTQUNsQjtRQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDO0lBU0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BZ0NHO0lBQ2tCLElBQUksUUFBUSxDQUFDLEtBQXlCO1FBQ3pELElBQUksS0FBSyxZQUFZLE1BQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxFQUFFO1lBQ3hELElBQUksQ0FBQyxTQUFTLHFCQUNULHlCQUF5QixDQUFDLGVBQWUsQ0FBQyxFQUMxQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQ3hDLEtBQUssQ0FDVCxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcseUJBQXlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNEO0lBQ0gsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEUsQ0FBQztDQVFGO0FBbkZ3QjtJQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDOzsyREFBMkI7QUFTcEI7SUFBNUIsS0FBSyxDQUFDLG9CQUFvQixDQUFDOzs7OERBTTNCO0FBV2tCO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7O3VEQUFzQjtBQW1DbkI7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7O3VEQVVuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4vLi4vLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IFBvQnJlYWRjcnVtYiB9IGZyb20gJy4uLy4uL3BvLWJyZWFkY3J1bWIvcG8tYnJlYWRjcnVtYi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EaXNjbGFpbWVyR3JvdXAgfSBmcm9tICcuLi8uLi9wby1kaXNjbGFpbWVyLWdyb3VwL3BvLWRpc2NsYWltZXItZ3JvdXAuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZURlZmF1bHRCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vcG8tcGFnZS1kZWZhdWx0L3BvLXBhZ2UtZGVmYXVsdC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1BhZ2VGaWx0ZXIgfSBmcm9tICcuLy4uL3BvLXBhZ2UtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BhZ2VMaXN0TGl0ZXJhbHMgfSBmcm9tICcuL3BvLXBhZ2UtbGlzdC1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgcG9QYWdlTGlzdExpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxQb1BhZ2VMaXN0TGl0ZXJhbHM+IHtcbiAgICBvdGhlckFjdGlvbnM6ICdPdGhlciBhY3Rpb25zJ1xuICB9LFxuICBlczogPFBvUGFnZUxpc3RMaXRlcmFscz4ge1xuICAgIG90aGVyQWN0aW9uczogJ090cmFzIGFjY2lvbmVzJ1xuICB9LFxuICBwdDogPFBvUGFnZUxpc3RMaXRlcmFscz4ge1xuICAgIG90aGVyQWN0aW9uczogJ091dHJhcyBhw6fDtWVzJ1xuICB9LFxuICBydTogPFBvUGFnZUxpc3RMaXRlcmFscz4ge1xuICAgIG90aGVyQWN0aW9uczogJ9CU0YDRg9Cz0LjQtSDQtNC10LnRgdGC0LLQuNGPJ1xuICB9XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tcGFnZS1saXN0YCDDqSB1dGlsaXphZG8gY29tbyBvIGNvbnRhaW5lciBwcmluY2lwYWwgcGFyYSBhcyB0ZWxhcyBkZSBsaXN0YWdlbSBkZSBkYWRvcyxcbiAqIHBvZGVuZG8gc2VyIGFwcmVzZW50YWRvIGNvbW8gbGlzdGEgb3UgdGFiZWxhLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBwb3NzaWJpbGl0YSByZWFsaXphciBmaWx0cm8gZG9zIGRhZG9zLCBubyBxdWFsIHBlcm1pdGUgcXVlIHNlamEgYXRyaWJ1aWRvIHVtYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIG5vIG1vbWVudG9cbiAqIGRhIGZpbHRyYWdlbS4gRXN0ZSBjb21wb3J0YW1lbnRvIHBvZGUgc2VyIGFjaW9uYWRvIHRhbnRvIGFvICpjbGljayogZG8gw61jb25lIFtwby1pY29uLXNlYXJjaF0oL2d1aWRlcy9pY29ucylcbiAqIHF1YW50byBhbyBwcmVzc2lvbmFyIGRhIHRlY2xhICpFTlRFUiogcXVhbmRvIG8gZm9jbyBlc3RpdmVyIG5vIGNhbXBvIGRlIHBlc3F1aXNhLlxuICpcbiAqIFBhcmEgZmFjaWxpdGFyIGEgbWFuaXB1bGHDp8OjbyBlIHZpc3VhbGl6YcOnw6NvIGRvcyBmaWx0cm9zIGFwbGljYWRvcywgw6kgcG9zc8OtdmVsIHRhbWLDqW0gdXRpbGl6YXIgbyBjb21wb25lbnRlXG4gKiBbYHBvLWRpc2NsYWltZXItZ3JvdXBgXSgvZG9jdW1lbnRhdGlvbi9wby1kaXNjbGFpbWVyLWdyb3VwKS5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvUGFnZUxpc3RCYXNlQ29tcG9uZW50IGV4dGVuZHMgUG9QYWdlRGVmYXVsdEJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2Rpc2NsYWltZXJHcm91cD86IFBvRGlzY2xhaW1lckdyb3VwO1xuICBwcml2YXRlIF9saXRlcmFsczogUG9QYWdlTGlzdExpdGVyYWxzO1xuXG4gIHByb3RlY3RlZCBsYW5ndWFnZTogc3RyaW5nO1xuICBwcm90ZWN0ZWQgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFBvQnJlYWRjcnVtYmAuXG4gICAqL1xuICBASW5wdXQoJ3AtYnJlYWRjcnVtYicpIGJyZWFkY3J1bWI/OiBQb0JyZWFkY3J1bWI7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFBvRGlzY2xhaW1lckdyb3VwYC5cbiAgICovXG4gIEBJbnB1dCgncC1kaXNjbGFpbWVyLWdyb3VwJykgc2V0IGRpc2NsYWltZXJHcm91cCh2YWx1ZTogUG9EaXNjbGFpbWVyR3JvdXApIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IDxhbnk+IHt9O1xuICAgIH1cblxuICAgIHRoaXMuX2Rpc2NsYWltZXJHcm91cCA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGRpc2NsYWltZXJHcm91cCgpOiBQb0Rpc2NsYWltZXJHcm91cCB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2NsYWltZXJHcm91cDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIHF1ZSBpbXBsZW1lbnRhIGFzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgYFBvUGFnZUZpbHRlcmAuXG4gICAqL1xuICBASW5wdXQoJ3AtZmlsdGVyJykgZmlsdGVyOiBQb1BhZ2VGaWx0ZXI7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIGNvbSBhcyBsaXRlcmFpcyB1c2FkYXMgbm8gYHBvLXBhZ2UtbGlzdGAuXG4gICAqXG4gICAqIEV4aXN0ZW0gZHVhcyBtYW5laXJhcyBkZSBjdXN0b21pemFyIG8gY29tcG9uZW50ZSwgcGFzc2FuZG8gdW0gb2JqZXRvIGNvbSB0b2RhcyBhcyBsaXRlcmFpcyBkaXNwb27DrXZlaXM6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvUGFnZUxpc3RMaXRlcmFscyA9IHtcbiAgICogICAgb3RoZXJBY3Rpb25zOiAnTWFpcyBhw6fDtWVzJ1xuICAgKiAgfTtcbiAgICogYGBgXG4gICAqXG4gICAqIE91IHBhc3NhbmRvIGFwZW5hcyBhcyBsaXRlcmFpcyBxdWUgZGVzZWphIGN1c3RvbWl6YXI6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvUGFnZUxpc3RMaXRlcmFscyA9IHtcbiAgICogICAgb3RoZXJBY3Rpb25zOiAnQcOnw7VlcyBkYSBww6FnaW5hJ1xuICAgKiAgfTtcbiAgICogYGBgXG4gICAqXG4gICAqIEUgcGFyYSBjYXJyZWdhciBhcyBsaXRlcmFpcyBjdXN0b21pemFkYXMsIGJhc3RhIGFwZW5hcyBwYXNzYXIgbyBvYmpldG8gcGFyYSBvIGNvbXBvbmVudGUuXG4gICAqXG4gICAqIGBgYFxuICAgKiA8cG8tcGFnZS1saXN0XG4gICAqICAgW3AtbGl0ZXJhbHNdPVwiY3VzdG9tTGl0ZXJhbHNcIj5cbiAgICogPC9wby1wYWdlLWxpc3Q+XG4gICAqIGBgYFxuICAgKlxuICAgKiA+IE8gdmFsb3IgcGFkcsOjbyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBjb25maWd1cmFkbyBubyBbYFBvSTE4blNlcnZpY2VgXSgvZG9jdW1lbnRhdGlvbi9wby1pMThuKSBvdSAqYnJvd3NlciouXG4gICAqL1xuICBASW5wdXQoJ3AtbGl0ZXJhbHMnKSBzZXQgbGl0ZXJhbHModmFsdWU6IFBvUGFnZUxpc3RMaXRlcmFscykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHtcbiAgICAgICAgLi4ucG9QYWdlTGlzdExpdGVyYWxzRGVmYXVsdFtwb0xvY2FsZURlZmF1bHRdLFxuICAgICAgICAuLi5wb1BhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdLFxuICAgICAgICAuLi52YWx1ZVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGl0ZXJhbHMgPSBwb1BhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsaXRlcmFscygpIHtcbiAgICByZXR1cm4gdGhpcy5fbGl0ZXJhbHMgfHwgcG9QYWdlTGlzdExpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlXTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG4gIH1cblxufVxuIl19