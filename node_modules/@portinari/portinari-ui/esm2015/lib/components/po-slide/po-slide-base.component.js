import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { convertToInt } from './../../utils/util';
const poSlideIntervalDefault = 4000;
/**
 * @description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 */
export class PoSlideBaseComponent {
    constructor() {
        this._interval = poSlideIntervalDefault;
    }
    /**
     * @optional
     *
     * @description
     * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * @default `336`
     */
    set height(value) {
        this._height = convertToInt(value);
        this.setSlideHeight(this.height);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * @default `4000`
     */
    set interval(value) {
        this._interval = convertToInt(value, poSlideIntervalDefault);
        this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
    }
    get interval() {
        return this._interval;
    }
    /**
     * @description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `PoSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     */
    set slides(value) {
        this._slides = value;
        this.setSlideItems(value);
        if (value && value.length) {
            this.startSlide();
        }
    }
    get slides() {
        return this._slides;
    }
}
tslib_1.__decorate([
    Input('p-height'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], PoSlideBaseComponent.prototype, "height", null);
tslib_1.__decorate([
    Input('p-interval'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], PoSlideBaseComponent.prototype, "interval", null);
tslib_1.__decorate([
    Input('p-slides'),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], PoSlideBaseComponent.prototype, "slides", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXNsaWRlL3BvLXNsaWRlLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUlsRCxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQztBQUVwQzs7Ozs7Ozs7OztHQVVHO0FBQ0gsTUFBTSxPQUFnQixvQkFBb0I7SUFBMUM7UUFFVSxjQUFTLEdBQVcsc0JBQXNCLENBQUM7SUErRXJELENBQUM7SUEzRUM7Ozs7Ozs7T0FPRztJQUNnQixJQUFJLE1BQU0sQ0FBQyxLQUFhO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ2tCLElBQUksUUFBUSxDQUFDLEtBQWE7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BbUJHO0lBQ2dCLElBQUksTUFBTSxDQUFDLEtBQXdDO1FBQ3BFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Q0FTRjtBQW5Fb0I7SUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7O2tEQUdqQjtBQWVvQjtJQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzs7b0RBR25CO0FBMEJrQjtJQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDO3NDQUFtQixLQUFLOzZDQUFMLEtBQUs7a0RBT3pDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvSW50IH0gZnJvbSAnLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9TbGlkZUl0ZW0gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tc2xpZGUtaXRlbS5pbnRlcmZhY2UnO1xuXG5jb25zdCBwb1NsaWRlSW50ZXJ2YWxEZWZhdWx0ID0gNDAwMDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIGRlIHNsaWRlIHBhcmEgdmlzdWFsaXphw6fDo28gZSBjb250cm9sZSBkZSBlbGVtZW50b3MgZGUgZm9ybWEgY8OtY2xpY2EuIEV4aWJlIHVtIGNvbmp1bnRvIGRlIGltYWdlbnMgb3UgZGFkb3MgcXVlIHBlcm1pdGVtXG4gKiBjdXN0b21pemFyIHN1YSB2aXN1YWxpemHDp8OjbyB1dGlsaXphbmRvIGEgZGlyZXRpdmEgKipbcC1zbGlkZS1jb250ZW50LXRlbXBsYXRlXSgvZG9jdW1lbnRhdGlvbi9wby1zbGlkZS1jb250ZW50LXRlbXBsYXRlKSoqLlxuICpcbiAqICMjIyMgQm9hcyBwcsOhdGljYXM6XG4gKiAtIFV0aWxpemFyIGltYWdlbnMgbm8gc2xpZGUsIG1lc21vIHF1YW5kbyBwb3NzdWkgY29udGXDumRvIHBlcnNvbmFsaXphZG8uXG4gKiAtIEV2aXRhciB1dGlsaXphciBhcGVuYXMgdW0gc2xpZGUgaXNvbGFkbywgdXRpbGl6ZSBwZWxvIG1lbm9zIGRvaXMuXG4gKiAtIEV2aXRhciB1dGlsaXphciBtYWlzIGRlIDUgc2xpZGVzLCBwb2lzIGEgaWRlaWEgZG8gY29tcG9uZW50ZSDDqSBkZXN0YWNhciBhcGVuYXMgaW5mb3JtYcOnw7VlcyBpbXBvcnRhbnRlcy5cbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvU2xpZGVCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9pbnRlcnZhbDogbnVtYmVyID0gcG9TbGlkZUludGVydmFsRGVmYXVsdDtcbiAgcHJpdmF0ZSBfaGVpZ2h0PzogbnVtYmVyO1xuICBwcml2YXRlIF9zbGlkZXM6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55PjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBbHR1cmEgZG8gcG8tc2xpZGUsIGNhc28gc2VqYSBzbGlkZSBjb20gdGVtcGxhdGUgY3VzdG9taXphZG8sIG7Do28gYXNzdW1lIG8gdmFsb3IgYGRlZmF1bHRgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgMzM2YFxuICAgKi9cbiAgQElucHV0KCdwLWhlaWdodCcpIHNldCBoZWlnaHQodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2hlaWdodCA9IGNvbnZlcnRUb0ludCh2YWx1ZSk7XG4gICAgdGhpcy5zZXRTbGlkZUhlaWdodCh0aGlzLmhlaWdodCk7XG4gIH1cblxuICBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFZhbG9yIGVtIG1pbGlzc2VndW5kb3MgcXVlIGRlZmluZSBvIHRlbXBvIGRlIHRyb2NhIGRvcyBzbGlkZXMsIGNhc28gbyB2YWxvciBzZWphIG1lbm9yIHF1ZSBgMTAwMGAgb3Mgc2xpZGVzIG7Do28gdHJvY2FtIGF1dG9tYXRpY2FtZW50ZS5cbiAgICpcbiAgICogQGRlZmF1bHQgYDQwMDBgXG4gICAqL1xuICBASW5wdXQoJ3AtaW50ZXJ2YWwnKSBzZXQgaW50ZXJ2YWwodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2ludGVydmFsID0gY29udmVydFRvSW50KHZhbHVlLCBwb1NsaWRlSW50ZXJ2YWxEZWZhdWx0KTtcbiAgICB0aGlzLl9pbnRlcnZhbCA+PSAxMDAwID8gdGhpcy5zdGFydEludGVydmFsKCkgOiB0aGlzLmNhbmNlbEludGVydmFsKCk7XG4gIH1cblxuICBnZXQgaW50ZXJ2YWwoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faW50ZXJ2YWw7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFycmF5IGRlIGltYWdlbnMgb3UgZGFkb3MgcGFyYSBvIHNsaWRlLCBwb2RlIHNlciBkZSB0csOqcyBmb3JtYXM6XG4gICAqXG4gICAqIC0gQXJyYXkgaW1wbGVtZW50YW5kbyBvYmpldG9zIGRhIGludGVyZmFjZSBgUG9TbGlkZUl0ZW1gOlxuICAgKiBgYGBcbiAgICogW3sgaW1hZ2U6ICcvYXNzZXRzL2ltYWdlLTEnLCBhY3Rpb246ICdpbWFnZUNsaWNrLmJpbmQodGhpcyknfSwgeyBpbWFnZTogJy9hc3NldHMvaW1hZ2UtMicgfV1cbiAgICogYGBgXG4gICAqIC0gQXJyYXkgZGUgYHN0cmluZ3NgIGNvbSBvcyBjYW1pbmhvcyBkYXMgaW1hZ2VuczpcbiAgICogYGBgXG4gICAqIFsnL2Fzc2V0cy9pbWFnZS0xJywgJy9hc3NldHMvaW1hZ2UtMicgXVxuICAgKiBgYGBcbiAgICogLSBBcnJheSBjb20gbGlzdGEgZGUgaXRlbnMgKHBhcmEgdXRpbGl6YXIgdGVtcGxhdGUpOlxuICAgKiBgYGBcbiAgICogW3sgbGFiZWw6ICcxJywgaW1nOiAnL2Fzc2V0cy9pbWFnZS0xJyB9LCB7IGxhYmVsOiAnMicsIGltZzogJy9hc3NldHMvaW1hZ2UtMScgfV1cbiAgICogYGBgXG4gICAqXG4gICAqID4gQXMgc2V0YXMgZGUgbmF2ZWdhw6fDo28gZSBvIGNvbnRyb2xlIGNvbSBjw61yY3Vsb3MgYXBlbmFzIHNlcsOjbyByZW5kZXJpemFkb3MgY2FzbyBwb3NzdWEgbWFpcyBkZSB1bSBzbGlkZS5cbiAgICovXG4gIEBJbnB1dCgncC1zbGlkZXMnKSBzZXQgc2xpZGVzKHZhbHVlOiBBcnJheTxQb1NsaWRlSXRlbSB8IHN0cmluZyB8IGFueT4pIHtcbiAgICB0aGlzLl9zbGlkZXMgPSB2YWx1ZTtcbiAgICB0aGlzLnNldFNsaWRlSXRlbXModmFsdWUpO1xuXG4gICAgaWYgKHZhbHVlICYmIHZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhpcy5zdGFydFNsaWRlKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHNsaWRlcygpOiBBcnJheTxQb1NsaWRlSXRlbSB8IHN0cmluZyB8IGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9zbGlkZXM7XG4gIH1cblxuICBhYnN0cmFjdCBzZXRTbGlkZUhlaWdodChoZWlnaHQ6IG51bWJlcik6IHZvaWQ7XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNhbmNlbEludGVydmFsKCk6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzZXRTbGlkZUl0ZW1zKHZhbHVlOiBBcnJheTxQb1NsaWRlSXRlbSB8IHN0cmluZyB8IGFueT4pOiB2b2lkO1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc3RhcnRTbGlkZSgpOiB2b2lkO1xuICBwcm90ZWN0ZWQgYWJzdHJhY3Qgc3RhcnRJbnRlcnZhbCgpOiB2b2lkO1xuXG59XG4iXX0=