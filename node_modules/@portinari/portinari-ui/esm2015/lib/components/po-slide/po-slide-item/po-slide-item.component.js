import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, ViewChild } from '@angular/core';
import { isIEOrEdge } from '../../../utils/util';
import { PoSlideContentTemplateDirective } from '../directives/po-slide-content-template.directive';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para cada item do po-slide.
 */
let PoSlideItemComponent = class PoSlideItemComponent {
    /**
     * @docsPrivate
     *
     * @description
     *
     * Componente para cada item do po-slide.
     */
    constructor() {
        this.isIEOrEdge = isIEOrEdge();
    }
    setLinkType() {
        if (!this.template && this.link) {
            return this.link.startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    }
};
tslib_1.__decorate([
    ViewChild('slideItem', { static: true }),
    tslib_1.__metadata("design:type", ElementRef)
], PoSlideItemComponent.prototype, "itemElement", void 0);
tslib_1.__decorate([
    Input('p-action'),
    tslib_1.__metadata("design:type", Function)
], PoSlideItemComponent.prototype, "action", void 0);
tslib_1.__decorate([
    Input('p-alt'),
    tslib_1.__metadata("design:type", String)
], PoSlideItemComponent.prototype, "alt", void 0);
tslib_1.__decorate([
    Input('p-data'),
    tslib_1.__metadata("design:type", Array)
], PoSlideItemComponent.prototype, "data", void 0);
tslib_1.__decorate([
    Input('p-image'),
    tslib_1.__metadata("design:type", String)
], PoSlideItemComponent.prototype, "image", void 0);
tslib_1.__decorate([
    Input('p-image-height'),
    tslib_1.__metadata("design:type", Number)
], PoSlideItemComponent.prototype, "imageHeight", void 0);
tslib_1.__decorate([
    Input('p-template'),
    tslib_1.__metadata("design:type", PoSlideContentTemplateDirective)
], PoSlideItemComponent.prototype, "template", void 0);
tslib_1.__decorate([
    Input('p-link'),
    tslib_1.__metadata("design:type", String)
], PoSlideItemComponent.prototype, "link", void 0);
PoSlideItemComponent = tslib_1.__decorate([
    Component({
        selector: 'po-slide-item',
        template: "<div #slideItem\n  class=\"po-slide-item\"\n  [class.po-slide-item-background-image]=\"!template && isIEOrEdge\"\n  [style.background-image]=\"!template && isIEOrEdge ? 'url(' + image + ')' : ''\"\n  [ngSwitch]=\"setLinkType()\">\n\n  <!-- slide com link interno -->\n  <a\n    *ngSwitchCase=\"'internalLink'\" \n    class=\"po-slide-item-link\" \n    [routerLink]=\"link\">\n    <ng-container \n      [ngTemplateOutlet]=\"slideItemImage\" \n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\">\n    </ng-container>\n  </a>\n  <!-- slide com link externo -->\n  <a \n    *ngSwitchCase=\"'externalLink'\"\n    class=\"po-slide-item-link\" \n    [href]=\"link\">\n    <ng-container \n      [ngTemplateOutlet]=\"slideItemImage\" \n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image }}\">\n    </ng-container>\n  </a>\n  <!-- slide sem link -->\n  <a \n    *ngSwitchCase=\"'noLink'\"\n    [ngClass]=\"action ? 'po-slide-item-link' : 'po-slide-item-no-link'\"\n    (click)=\"action ? action(data) : undefined\">\n    <ng-container \n      [ngTemplateOutlet]=\"template ? slideItemTemplate : slideItemImage\"\n      [ngTemplateOutletContext]=\"{ item: { alt: alt, image: image, data: data }}\">\n    </ng-container>\n  </a>\n\n</div>\n\n<ng-template #slideItemTemplate let-item='item'; let-index='index'>\n  <div\n    *ngIf=\"template\"\n    class=\"po-slide-item-content\">\n    <ng-template\n      [ngTemplateOutlet]=\"template.templateRef\"\n      [ngTemplateOutletContext]=\"{ $implicit: item.data, index: index }\">\n    </ng-template>\n  </div>\n</ng-template>\n\n<ng-template #slideItemImage let-item='item'>\n  <img\n    *ngIf=\"item.image && !isIEOrEdge\"\n    class=\"po-slide-image\"\n    [alt]=\"item.alt\"\n    [src]=\"item.image\"\n    [style.height.px]=\"imageHeight\">\n</ng-template>\n"
    })
], PoSlideItemComponent);
export { PoSlideItemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtaXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXNsaWRlL3BvLXNsaWRlLWl0ZW0vcG8tc2xpZGUtaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpELE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBRXBHOzs7Ozs7R0FNRztBQUtILElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0lBWGpDOzs7Ozs7T0FNRztJQUNIO1FBUUUsZUFBVSxHQUFRLFVBQVUsRUFBRSxDQUFDO0lBK0JqQyxDQUFDO0lBUkMsV0FBVztRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDL0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7U0FDdkU7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBRUYsQ0FBQTtBQWpDMkM7SUFBekMsU0FBUyxDQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztzQ0FBYyxVQUFVO3lEQUFDO0FBSy9DO0lBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7c0NBQVMsUUFBUTtvREFBQztBQUdwQjtJQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7O2lEQUFhO0FBR1g7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQztzQ0FBTyxLQUFLO2tEQUFNO0FBR2hCO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7O21EQUFlO0FBR1A7SUFBeEIsS0FBSyxDQUFDLGdCQUFnQixDQUFDOzt5REFBcUI7QUFHeEI7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQztzQ0FBVywrQkFBK0I7c0RBQUM7QUFHOUM7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7a0RBQWM7QUF6Qm5CLG9CQUFvQjtJQUpoQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZUFBZTtRQUN6QixvekRBQTZDO0tBQzlDLENBQUM7R0FDVyxvQkFBb0IsQ0FtQ2hDO1NBbkNZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc0lFT3JFZGdlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvU2xpZGVDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL3BvLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGUuZGlyZWN0aXZlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHBhcmEgY2FkYSBpdGVtIGRvIHBvLXNsaWRlLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1zbGlkZS1pdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXNsaWRlLWl0ZW0uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvU2xpZGVJdGVtQ29tcG9uZW50IHtcblxuICBAVmlld0NoaWxkKCdzbGlkZUl0ZW0nLCB7IHN0YXRpYzogdHJ1ZSB9KSBpdGVtRWxlbWVudDogRWxlbWVudFJlZjtcblxuICBpc0lFT3JFZGdlOiBhbnkgPSBpc0lFT3JFZGdlKCk7XG5cbiAgLyoqIEHDp8OjbyBleGVjdXRhZGEgYW8gY2xpY2FyIGVtIHVtYSBpbWFnZW0gKi9cbiAgQElucHV0KCdwLWFjdGlvbicpIGFjdGlvbjogRnVuY3Rpb247XG5cbiAgLyoqIFRleHRvIGFsdGVybmF0aXZvIHF1YW5kbyBhIGltYWdlbSBuw6NvIMOpIGVuY29udHJhZGEgKi9cbiAgQElucHV0KCdwLWFsdCcpIGFsdDogc3RyaW5nO1xuXG4gIC8qKiBEYWRvcyBwYXJhIG8gdGVtcGxhdGUgY3VzdG9taXphZG8gKi9cbiAgQElucHV0KCdwLWRhdGEnKSBkYXRhOiBBcnJheTxhbnk+O1xuXG4gIC8qKiBDYW1pbmhvIGRhIGltYWdlbSAqL1xuICBASW5wdXQoJ3AtaW1hZ2UnKSBpbWFnZTogc3RyaW5nO1xuXG4gIC8qKiBBbHR1cmEgZGEgaW1hZ2VtICovXG4gIEBJbnB1dCgncC1pbWFnZS1oZWlnaHQnKSBpbWFnZUhlaWdodDogbnVtYmVyO1xuXG4gIC8qKiBUZW1wbGF0ZSBjdXN0b21pemFkbyAqL1xuICBASW5wdXQoJ3AtdGVtcGxhdGUnKSB0ZW1wbGF0ZTogUG9TbGlkZUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZTtcblxuICAvKiogTGluayBleGVjdXRhZG8gYW8gY2xpY2FyIGVtIHVtYSBpbWFnZW0gKi9cbiAgQElucHV0KCdwLWxpbmsnKSBsaW5rOiBzdHJpbmc7XG5cbiAgc2V0TGlua1R5cGUoKSB7XG4gICAgaWYgKCF0aGlzLnRlbXBsYXRlICYmIHRoaXMubGluaykge1xuICAgICAgcmV0dXJuIHRoaXMubGluay5zdGFydHNXaXRoKCdodHRwJykgPyAnZXh0ZXJuYWxMaW5rJyA6ICdpbnRlcm5hbExpbmsnO1xuICAgIH1cblxuICAgIHJldHVybiAnbm9MaW5rJztcbiAgfVxuXG59XG4iXX0=