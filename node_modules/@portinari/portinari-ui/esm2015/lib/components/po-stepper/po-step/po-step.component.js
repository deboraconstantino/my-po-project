import * as tslib_1 from "tslib";
import { AfterContentInit, Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
let PoStepComponent = class PoStepComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._status = PoStepperStatus.Disabled;
        // ID do step
        this.id = uuid();
    }
    // Estado de exibição do `po-step`.
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    get status() {
        return this._status;
    }
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            (this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error) ? '' : 'none';
    }
};
PoStepComponent.ctorParameters = () => [
    { type: ElementRef }
];
tslib_1.__decorate([
    Input('p-can-active-next-step'),
    tslib_1.__metadata("design:type", Function)
], PoStepComponent.prototype, "canActiveNextStep", void 0);
tslib_1.__decorate([
    Input('p-label'),
    tslib_1.__metadata("design:type", String)
], PoStepComponent.prototype, "label", void 0);
tslib_1.__decorate([
    Input('p-status'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoStepComponent.prototype, "status", null);
PoStepComponent = tslib_1.__decorate([
    Component({
        selector: 'po-step',
        template: "<ng-content></ng-content>\n"
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], PoStepComponent);
export { PoStepComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXN0ZXBwZXIvcG8tc3RlcC9wby1zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRy9FLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFbEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9DRztBQUtILElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUE2QzFCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUEzQ2xDLFlBQU8sR0FBcUIsZUFBZSxDQUFDLFFBQVEsQ0FBQztRQUU3RCxhQUFhO1FBQ2IsT0FBRSxHQUFZLElBQUksRUFBRSxDQUFDO0lBd0N5QixDQUFDO0lBWC9DLG1DQUFtQztJQUNoQixJQUFJLE1BQU0sQ0FBQyxNQUF1QjtRQUNuRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUV0QixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFJRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVTLHlCQUF5QjtRQUNqQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTztZQUN6QyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDcEcsQ0FBQztDQUVGLENBQUE7O1lBWGlDLFVBQVU7O0FBaEJUO0lBQWhDLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQzs7MERBQXdGO0FBR3RHO0lBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OzhDQUFlO0FBR2I7SUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7OzZDQUlqQjtBQXZDVSxlQUFlO0lBSjNCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxTQUFTO1FBQ25CLHVDQUFxQztLQUN0QyxDQUFDOzZDQThDZ0MsVUFBVTtHQTdDL0IsZUFBZSxDQXdEM0I7U0F4RFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgdXVpZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1N0ZXBwZXJTdGF0dXMgfSBmcm9tICcuLi9lbnVtcy9wby1zdGVwcGVyLXN0YXR1cy5lbnVtJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXN0ZXBgIMOpIHV0aWxpemFkbyBwYXJhIGVudm9sdmVyIGUgcmVuZGVyaXphciBvIGNvbnRlw7pkbyBkZSB1bSBwYXNzbyAoKnN0ZXAqKSBkbyBgcG8tc3RlcHBlcmAsIHBvciBleGVtcGxvOlxuICpcbiAqIGBgYFxuICogPHBvLXN0ZXBwZXI+XG4gKlxuICogICAgPHBvLXN0ZXAgcC1sYWJlbD1cIkVuZGVyZcOnb1wiPlxuICpcbiAqICAgICAgICA8IS0tIENvbnRlw7pkbyByZWZlcmVudGUgYW8gZW5kZXJlw6dvIC0tPlxuICpcbiAqICAgIDwvcG8tc3RlcD5cbiAqXG4gKiAgICA8cG8tc3RlcCBwLWxhYmVsPVwiUGFnYW1lbnRvXCI+XG4gKlxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBwYWdhbWVudG8gLS0+XG4gKlxuICogICAgPC9wby1zdGVwPlxuICpcbiAqICA8L3BvLXN0ZXBwZXI+XG4gKiBgYGBcbiAqXG4gKiBBIHJlbmRlcml6YcOnw6NvIGRvIGNvbnRlw7pkbyBlbnZvbHZpZG8gbmEgdGVsYSBlIG8gY29udHJvbGUgZG9zIHN0YXR1cyBzw6NvIGZlaXRvcyBhdXRvbWF0aWNhbWVudGUuIE5vIHF1YWwsIG8gcHJpbWVpcm9cbiAqIGBwby1zdGVwYCBlbmNvbnRyYWRvIHNlcsOhIGNvbG9jYWRvIGNvbW8gYXRpdm8sIG8gcHLDs3hpbW8gZmljYSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgb3MgZGVtYWlzIGZpY2FtXG4gKiBkZXNhYmlsaXRhZG9zICgqZGlzYWJsZWQqKS5cbiAqXG4gKiBBbyBjbGljYXIgbm8gYHBvLXN0ZXBgIHF1ZSBlc3TDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqLCBvIHF1ZSBlc3TDoSBhdGl2byBmaWNhcsOhIGNvbSBvXG4gKiBzdGF0dXMgZGUgY29uY2x1w61kbyAoKmRvbmUqKSBlIG8gcHLDs3hpbW8gcXVlIGVzdGF2YSBkZXNhYmlsaXRhZG8gZmljYXLDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgbyByZXN0YW50ZSBwZXJtYW5lY2Vyw6FcbiAqIGNvbSBvIHN0YXR1cyBkZXNhYmlsaXRhZG8uXG4gKlxuICogPiBBbyB1dGlsaXphciBvIGBwby1zdGVwYCwgbyBjb21wb25lbnRlIGBwby1zdGVwcGVyYCBmdW5jaW9uYXLDoSBkZSBmb3JtYSBzZXF1ZW5jaWFsLCBvdSBzZWphLCBuw6NvIHNlcsOhIHBvc3PDrXZlbFxuICogcHVsYXIgcGFyYSBvdXRybyBgcG8tc3RlcGAgcXVlIGVzdGVqYSBjb20gbyBzdGF0dXMgaWd1YWwgYSBkZXNhYmlsaXRhZG8gKCpkaXNhYmxlZCopLlxuICpcbiAqIEFjZXNzZSBhIFtkb2N1bWVudGHDp8OjbyBkbyBgcG8tc3RlcHBlcmBdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXBwZXIpIHBhcmEgdGVyIG1haXMgaW5mb3JtYcOnw7VlcyBzb2JyZSBvIHNldSBmdW5jaW9uYW1lbnRvXG4gKiBlIGV4ZW1wbG9zIGRlIHVzby5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tc3RlcCcsXG4gIHRlbXBsYXRlVXJsOiAncG8tc3RlcC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9TdGVwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cbiAgcHJpdmF0ZSBfc3RhdHVzPzogUG9TdGVwcGVyU3RhdHVzID0gUG9TdGVwcGVyU3RhdHVzLkRpc2FibGVkO1xuXG4gIC8vIElEIGRvIHN0ZXBcbiAgaWQ/OiBzdHJpbmcgPSB1dWlkKCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRnVuw6fDo28gY2hhbWFkYSBxdWFuZG8gbyBwcsOzeGltbyAqc3RlcCogZm9yIGNsaWNhZG8gb3UgcXVhbmRvIG8gbcOpdG9kbyBgUG9TdGVwcGVyQ29tcG9uZW50Lm5leHQoKWAgZm9yIGNoYW1hZG8uXG4gICAqIEFvIHJldG9ybmFyIGB0cnVlYCBkZWZpbmUgcXVlIGVzc2UgKnN0ZXAqIGZpY2Fyw6EgYXRpdm8gZSBvIGF0dWFsIGNvbW8gY29uY2x1w61kbyAoKmRvbmUqKS5cbiAgICogVGFtYsOpbSBhY2VpdGEgZnVuw6fDtWVzIHF1ZSByZXRvcm5lbSBgT2JzZXJ2YWJsZTxib29sZWFuPmAuIEFvIHJldG9ybmFyIHVtIGBPYnNlcnZhYmxlPGJvb2xlYW4+YCxcbiAgICogZ2FyYW50YSBxdWUgZXNzZSBgT2JzZXJ2YWJsZWAgc2Vyw6EgY29tcGxldGFkby5cbiAgICpcbiAgICogQW8gc2VyIGRpc3BhcmFkYSwgYSBtZXNtYSByZWNlYmVyw6EgcG9yIHBhcsOibWV0cm8gbyBgUG9TdGVwQ29tcG9uZW50YCBhdHVhbC5cbiAgICpcbiAgICogTyBjb250ZXh0byBkYSBmdW7Dp8OjbyBxdWUgc2Vyw6EgY2hhbWFkYSwgc2Vyw6EgbyBtZXNtbyBxdWUgbyBkbyBgUG9TdGVwQ29tcG9uZW50YCwgZW50w6NvIHBhcmEgcG9kZXIgYWx0ZXJhclxuICAgKiBwYXJhIG8gY29udGV4dG8gZG8gY29tcG9uZW50ZSBxdWUgbyBlc3TDoSB1dGlsaXphbmRvLCBwb2RlIHNlciB1dGlsaXphZG8gYSBwcm9wcmllZGFkZSBgYmluZGAgZG8gSmF2YXNjcmlwdC5cbiAgICogUG9yIGV4ZW1wbG8sIHBhcmEgYSBmdW7Dp8OjbyBgdmFsaWRhdGVgOlxuICAgKlxuICAgKiBgYGBcbiAgICogPHBvLXN0ZXAgcC1sYWJlbD1cIlN0ZXAgMVwiIFtwLWNhbi1hY3RpdmUtbmV4dC1zdGVwXT1cInZhbGlkYXRlLmJpbmQodGhpcylcIj5cbiAgICogLi4uXG4gICAqIDwvcG8tc3RlcD5cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtY2FuLWFjdGl2ZS1uZXh0LXN0ZXAnKSBjYW5BY3RpdmVOZXh0U3RlcDogKChjdXJyZW50U3RlcCkgPT4gYm9vbGVhbikgfCAoKGN1cnJlbnRTdGVwKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+KTtcblxuICAvKiogVMOtdHVsbyBxdWUgc2Vyw6EgZXhpYmlkbyBkZXNjcmV2ZW5kbyBvIHBhc3NvICgqc3RlcCopLiAqL1xuICBASW5wdXQoJ3AtbGFiZWwnKSBsYWJlbDogc3RyaW5nO1xuXG4gIC8vIEVzdGFkbyBkZSBleGliacOnw6NvIGRvIGBwby1zdGVwYC5cbiAgQElucHV0KCdwLXN0YXR1cycpIHNldCBzdGF0dXMoc3RhdHVzOiBQb1N0ZXBwZXJTdGF0dXMpIHtcbiAgICB0aGlzLl9zdGF0dXMgPSBzdGF0dXM7XG5cbiAgICB0aGlzLnNldERpc3BsYXlPbkFjdGl2ZU9yRXJyb3IoKTtcbiAgfVxuXG4gIGdldCBzdGF0dXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHNldERpc3BsYXlPbkFjdGl2ZU9yRXJyb3IoKSB7XG4gICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9XG4gICAgICAodGhpcy5zdGF0dXMgPT09IFBvU3RlcHBlclN0YXR1cy5BY3RpdmUgfHwgdGhpcy5zdGF0dXMgPT09IFBvU3RlcHBlclN0YXR1cy5FcnJvcikgPyAnJyA6ICdub25lJztcbiAgfVxuXG59XG4iXX0=