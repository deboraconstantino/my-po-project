import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../utils/util';
import { PoProgressStatus } from './enums/po-progress-status.enum';
const poProgressMaxValue = 100;
const poProgressMinValue = 0;
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
export class PoProgressBaseComponent {
    constructor() {
        this._value = 0;
        /**
         * @optional
         *
         * @description
         *
         * Status da barra de progresso que indicará visualmente ao usuário
         * o andamento, por exemplo, se a mesma foi concluída com sucesso.
         *
         * @default `PoProgressStatus.Default`
         */
        this.status = PoProgressStatus.Default;
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
         *
         * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
         *
         * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
         * o ícone de cancelamento não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
         *
         * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
         * `PoProgressStatus.Error`.
         */
        this.retry = new EventEmitter();
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * @default `0`
     */
    set value(value) {
        const integerValue = convertToInt(value, poProgressMinValue);
        const isProgressRangeValue = this.isProgressRangeValue(integerValue);
        this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
    }
    get value() {
        return this._value;
    }
    isProgressRangeValue(value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    }
}
tslib_1.__decorate([
    Input('p-indeterminate'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], PoProgressBaseComponent.prototype, "indeterminate", null);
tslib_1.__decorate([
    Input('p-info'),
    tslib_1.__metadata("design:type", String)
], PoProgressBaseComponent.prototype, "info", void 0);
tslib_1.__decorate([
    Input('p-info-icon'),
    tslib_1.__metadata("design:type", String)
], PoProgressBaseComponent.prototype, "infoIcon", void 0);
tslib_1.__decorate([
    Input('p-status'),
    tslib_1.__metadata("design:type", String)
], PoProgressBaseComponent.prototype, "status", void 0);
tslib_1.__decorate([
    Input('p-text'),
    tslib_1.__metadata("design:type", String)
], PoProgressBaseComponent.prototype, "text", void 0);
tslib_1.__decorate([
    Input('p-value'),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], PoProgressBaseComponent.prototype, "value", null);
tslib_1.__decorate([
    Output('p-cancel'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoProgressBaseComponent.prototype, "cancel", void 0);
tslib_1.__decorate([
    Output('p-retry'),
    tslib_1.__metadata("design:type", EventEmitter)
], PoProgressBaseComponent.prototype, "retry", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXByb2dyZXNzL3BvLXByb2dyZXNzLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRW5FLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0FBRTdCOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyx1QkFBdUI7SUFBcEM7UUFHVSxXQUFNLEdBQVksQ0FBQyxDQUFDO1FBMkM1Qjs7Ozs7Ozs7O1dBU0c7UUFDZ0IsV0FBTSxHQUFxQixnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7UUFpQ3ZFOzs7Ozs7Ozs7OztXQVdHO1FBQ2lCLFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVuRTs7Ozs7Ozs7O1dBU0c7UUFDZ0IsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBTW5FLENBQUM7SUFsSEM7Ozs7Ozs7Ozs7OztPQVlHO0lBQ3VCLElBQUksYUFBYSxDQUFDLGFBQXNCO1FBQ2hFLElBQUksQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBMkNEOzs7Ozs7Ozs7O09BVUc7SUFDZSxJQUFJLEtBQUssQ0FBQyxLQUFhO1FBQ3ZDLE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztRQUM3RCxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyRSxJQUFJLENBQUMsTUFBTSxHQUFHLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDO0lBQ3pFLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQTRCTyxvQkFBb0IsQ0FBQyxLQUFhO1FBQ3hDLE9BQU8sS0FBSyxJQUFJLGtCQUFrQixJQUFJLEtBQUssSUFBSSxrQkFBa0IsQ0FBQztJQUNwRSxDQUFDO0NBRUY7QUFyRzJCO0lBQXpCLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQzs7OzREQUV4QjtBQWFnQjtJQUFoQixLQUFLLENBQUMsUUFBUSxDQUFDOztxREFBZTtBQVdUO0lBQXJCLEtBQUssQ0FBQyxhQUFhLENBQUM7O3lEQUFtQjtBQVlyQjtJQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDOzt1REFBcUQ7QUFTdEQ7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7cURBQWU7QUFhYjtJQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzs7b0RBS2hCO0FBa0JtQjtJQUFuQixNQUFNLENBQUMsVUFBVSxDQUFDO3NDQUFTLFlBQVk7dURBQTJCO0FBWWhEO0lBQWxCLE1BQU0sQ0FBQyxTQUFTLENBQUM7c0NBQVEsWUFBWTtzREFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiwgY29udmVydFRvSW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvUHJvZ3Jlc3NTdGF0dXMgfSBmcm9tICcuL2VudW1zL3BvLXByb2dyZXNzLXN0YXR1cy5lbnVtJztcblxuY29uc3QgcG9Qcm9ncmVzc01heFZhbHVlID0gMTAwO1xuY29uc3QgcG9Qcm9ncmVzc01pblZhbHVlID0gMDtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIGRlIGJhcnJhIGRlIHByb2dyZXNzbyBxdWUgcG9zc2liaWxpdGEgZXhpYmlyIHZpc3VhbG1lbnRlIG8gcHJvZ3Jlc3NvL2NhcnJlZ2FtZW50byBkZSB1bWEgdGFyZWZhLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBwb2RlIHNlciB1dGlsaXphZG8gbm8gKnVwbG9hZCogZGUgYXJxdWl2b3MsIHVtYSBhdHVhbGl6YcOnw6NvIG5vIHNpc3RlbWEgb3UgbyBwcm9jZXNzYW1lbnRvIGRlIHVtYSBpbWFnZW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBQb1Byb2dyZXNzQmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfaW5kZXRlcm1pbmF0ZT86IGJvb2xlYW47XG4gIHByaXZhdGUgX3ZhbHVlPzogbnVtYmVyID0gMDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBIYWJpbGl0YSBvIG1vZG8gaW5kZXRlcm1pbmFkbyBuYSBiYXJyYSBkZSBwcm9ncmVzc28sIHF1ZSBtb3N0cmEgdW1hIGFuaW1hw6fDo28gZml4YSBzZW0gdW0gdmFsb3IgZXN0YWJlbGVjaWRvLlxuICAgKlxuICAgKiBFc3RhIG9ww6fDo28gcG9kZSBzZXIgdXRpbGl6YWRhIHF1YW5kbyBuw6NvIHNvdWJlciBxdWFudG8gdGVtcG8gbGV2YXLDoSBwYXJhIHF1ZSB1bSBwcm9jZXNzbyBzZWphIGNvbmNsdcOtZG8uXG4gICAqXG4gICAqID4gQ2FzbyBlc3RhIHByb3ByaWVkYWRlIGUgYSBgcC12YWx1ZWAgc2VqYSBoYWJpbGl0YWRhLCBhIHByb3ByaWVkYWRlIGBwLXZhbHVlYCBzZXLDoSBpZ25vcmFkYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWluZGV0ZXJtaW5hdGUnKSBzZXQgaW5kZXRlcm1pbmF0ZShpbmRldGVybWluYXRlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faW5kZXRlcm1pbmF0ZSA9IGNvbnZlcnRUb0Jvb2xlYW4oaW5kZXRlcm1pbmF0ZSk7XG4gIH1cblxuICBnZXQgaW5kZXRlcm1pbmF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faW5kZXRlcm1pbmF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEluZm9ybWHDp8OjbyBhZGljaW9uYWwgcXVlIGFwYXJlY2Vyw6EgYWJhaXhvIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBhbyBsYWRvIGRpcmVpdG8uXG4gICAqL1xuICBASW5wdXQoJ3AtaW5mbycpIGluZm8/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogw41jb25lIHF1ZSBhcGFyZWNlcsOhIGFvIGxhZG8gZG8gdGV4dG8gZGEgcHJvcHJpZWRhZGUgYHAtaW5mb2AuXG4gICAqXG4gICAqIEV4ZW1wbG86IGBwby1pY29uLW9rYC5cbiAgICovXG4gIEBJbnB1dCgncC1pbmZvLWljb24nKSBpbmZvSWNvbj86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBTdGF0dXMgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIHF1ZSBpbmRpY2Fyw6EgdmlzdWFsbWVudGUgYW8gdXN1w6FyaW9cbiAgICogbyBhbmRhbWVudG8sIHBvciBleGVtcGxvLCBzZSBhIG1lc21hIGZvaSBjb25jbHXDrWRhIGNvbSBzdWNlc3NvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgUG9Qcm9ncmVzc1N0YXR1cy5EZWZhdWx0YFxuICAgKi9cbiAgQElucHV0KCdwLXN0YXR1cycpIHN0YXR1czogUG9Qcm9ncmVzc1N0YXR1cyA9IFBvUHJvZ3Jlc3NTdGF0dXMuRGVmYXVsdDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUZXh0byBwcmluY2lwYWwgcXVlIGFwYXJlY2Vyw6EgYWJhaXhvIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBubyBsYWRvIGVzcXVlcmRvLlxuICAgKi9cbiAgQElucHV0KCdwLXRleHQnKSB0ZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFZhbG9yIHF1ZSByZXByZXNlbnRhcsOhIG8gcHJvZ3Jlc3NvLlxuICAgKlxuICAgKiA+IE9zIHZhbG9yZXMgYWNlaXRvcyBzw6NvIG7Dum1lcm9zIGludGVpcm9zIGRlIGAwYCDDoCBgMTAwYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYDBgXG4gICAqL1xuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IGludGVnZXJWYWx1ZSA9IGNvbnZlcnRUb0ludCh2YWx1ZSwgcG9Qcm9ncmVzc01pblZhbHVlKTtcbiAgICBjb25zdCBpc1Byb2dyZXNzUmFuZ2VWYWx1ZSA9IHRoaXMuaXNQcm9ncmVzc1JhbmdlVmFsdWUoaW50ZWdlclZhbHVlKTtcblxuICAgIHRoaXMuX3ZhbHVlID0gaXNQcm9ncmVzc1JhbmdlVmFsdWUgPyBpbnRlZ2VyVmFsdWUgOiBwb1Byb2dyZXNzTWluVmFsdWU7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRXZlbnRvIHF1ZSBzZXLDoSBkaXNwYXJhZG8gYW8gY2xpY2FyIG5vIMOtY29uZSBkZSBjYW5jZWxhbWVudG8gKFwieFwiKSBuYSBwYXJ0ZSBpbmZlcmlvciBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXG4gICAqXG4gICAqIEFvIHNlciBkaXNwYXJhZG8sIGEgZnVuw6fDo28gcmVjZWJlcsOhIGNvbW8gcGFyw6JtZXRybyBvIHN0YXR1cyBhdHVhbCBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXG4gICAqXG4gICAqID4gU2UgbmVuaHVtYSBmdW7Dp8OjbyBmb3IgcGFzc2FkYSBwYXJhIG8gZXZlbnRvIG91IGEgYmFycmEgZGUgcHJvZ3Jlc3NvIGVzdGl2ZXIgY29tIG8gc3RhdHVzIGBQb1Byb2dyZXNzU3RhdHVzLlN1Y2Nlc3NgLFxuICAgKiBvIMOtY29uZSBkZSBjYW5jZWxhbWVudG8gbsOjbyBzZXLDoSBleGliaWRvLlxuICAgKi9cbiAgQE91dHB1dCgncC1jYW5jZWwnKSBjYW5jZWw6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEV2ZW50byBxdWUgc2Vyw6EgZGlzcGFyYWRvIGFvIGNsaWNhciBubyDDrWNvbmUgZGUgdGVudGFyIG5vdmFtZW50ZSBuYSBwYXJ0ZSBpbmZlcmlvciBkYSBiYXJyYSBkZSBwcm9ncmVzc28uXG4gICAqXG4gICAqID4gbyDDrWNvbmUgc2Vyw6EgZXhpYmlkbyBhcGVuYXMgc2UgaW5mb3JtYXIgdW1hIGZ1bsOnw6NvIG5lc3RlIGV2ZW50byBlIG8gc3RhdHVzIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBmb3JcbiAgICogYFBvUHJvZ3Jlc3NTdGF0dXMuRXJyb3JgLlxuICAgKi9cbiAgQE91dHB1dCgncC1yZXRyeScpIHJldHJ5OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcml2YXRlIGlzUHJvZ3Jlc3NSYW5nZVZhbHVlKHZhbHVlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdmFsdWUgPj0gcG9Qcm9ncmVzc01pblZhbHVlICYmIHZhbHVlIDw9IHBvUHJvZ3Jlc3NNYXhWYWx1ZTtcbiAgfVxuXG59XG4iXX0=