import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { PoButtonModule } from '../po-button/po-button.module';
import { PoPopupModule } from '../po-popup/po-popup.module';
import { PoListViewComponent } from './po-list-view.component';
import { PoListViewContentTemplateDirective } from './po-list-view-content-template/po-list-view-content-template.directive';
import { PoListViewDetailTemplateDirective } from './po-list-view-detail-template/po-list-view-detail-template.directive';
/**
 * @description
 *
 * Módulo do componente `po-list-view`.
 *
 * > Para o correto funcionamento do componente `po-list-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@portinari/portinari-ui';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
let PoListViewModule = class PoListViewModule {
};
PoListViewModule = tslib_1.__decorate([
    NgModule({
        imports: [
            CommonModule,
            RouterModule,
            PoButtonModule,
            PoPopupModule
        ],
        declarations: [
            PoListViewComponent,
            PoListViewContentTemplateDirective,
            PoListViewDetailTemplateDirective
        ],
        exports: [
            PoListViewComponent,
            PoListViewContentTemplateDirective,
            PoListViewDetailTemplateDirective
        ],
        providers: [],
        schemas: []
    })
], PoListViewModule);
export { PoListViewModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tbGlzdC12aWV3L3BvLWxpc3Qtdmlldy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTVELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxNQUFNLHlFQUF5RSxDQUFDO0FBQzdILE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHVFQUF1RSxDQUFDO0FBRTFIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0E4Qkc7QUFxQkgsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7Q0FBSSxDQUFBO0FBQXBCLGdCQUFnQjtJQXBCNUIsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFO1lBQ1AsWUFBWTtZQUNaLFlBQVk7WUFDWixjQUFjO1lBQ2QsYUFBYTtTQUNkO1FBQ0QsWUFBWSxFQUFFO1lBQ1osbUJBQW1CO1lBQ25CLGtDQUFrQztZQUNsQyxpQ0FBaUM7U0FDbEM7UUFDRCxPQUFPLEVBQUU7WUFDUCxtQkFBbUI7WUFDbkIsa0NBQWtDO1lBQ2xDLGlDQUFpQztTQUNsQztRQUNELFNBQVMsRUFBRSxFQUFFO1FBQ2IsT0FBTyxFQUFFLEVBQUU7S0FDWixDQUFDO0dBQ1csZ0JBQWdCLENBQUk7U0FBcEIsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBQb0J1dHRvbk1vZHVsZSB9IGZyb20gJy4uL3BvLWJ1dHRvbi9wby1idXR0b24ubW9kdWxlJztcbmltcG9ydCB7IFBvUG9wdXBNb2R1bGUgfSBmcm9tICcuLi9wby1wb3B1cC9wby1wb3B1cC5tb2R1bGUnO1xuXG5pbXBvcnQgeyBQb0xpc3RWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9wby1saXN0LXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IFBvTGlzdFZpZXdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3BvLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1jb250ZW50LXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBQb0xpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUvcG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE3Ds2R1bG8gZG8gY29tcG9uZW50ZSBgcG8tbGlzdC12aWV3YC5cbiAqXG4gKiA+IFBhcmEgbyBjb3JyZXRvIGZ1bmNpb25hbWVudG8gZG8gY29tcG9uZW50ZSBgcG8tbGlzdC12aWV3YCwgZGV2ZSBzZXIgaW1wb3J0YWRvIG8gbcOzZHVsbyBgQnJvd3NlckFuaW1hdGlvbnNNb2R1bGVgIG5vXG4gKiA+IG3Ds2R1bG8gcHJpbmNpcGFsIGRhIHN1YSBhcGxpY2HDp8Ojby5cbiAqXG4gKiBNw7NkdWxvIGRhIGFwbGljYcOnw6NvOlxuICogYGBgXG4gKiBpbXBvcnQgeyBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG4gKiBpbXBvcnQgeyBQb01vZHVsZSB9IGZyb20gJ0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpJztcbiAqIC4uLlxuICpcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICBCcm93c2VyTW9kdWxlLFxuICogICAgIEJyb3dzZXJBbmltYXRpb25zTW9kdWxlLFxuICogICAgIC4uLlxuICogICAgIFBvTW9kdWxlXG4gKiAgIF0sXG4gKiAgIGRlY2xhcmF0aW9uczogW1xuICogICAgIEFwcENvbXBvbmVudCxcbiAqICAgICAuLi5cbiAqICAgXSxcbiAqICAgcHJvdmlkZXJzOiBbXSxcbiAqICAgYm9vdHN0cmFwOiBbQXBwQ29tcG9uZW50XVxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUgeyB9XG4gKiBgYGBcbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGUsXG4gICAgUG9CdXR0b25Nb2R1bGUsXG4gICAgUG9Qb3B1cE1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBQb0xpc3RWaWV3Q29tcG9uZW50LFxuICAgIFBvTGlzdFZpZXdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBQb0xpc3RWaWV3Q29tcG9uZW50LFxuICAgIFBvTGlzdFZpZXdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlXG4gIF0sXG4gIHByb3ZpZGVyczogW10sXG4gIHNjaGVtYXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFBvTGlzdFZpZXdNb2R1bGUgeyB9XG4iXX0=