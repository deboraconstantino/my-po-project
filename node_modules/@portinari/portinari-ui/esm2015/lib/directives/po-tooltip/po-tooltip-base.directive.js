import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { PO_CONTROL_POSITIONS } from './../../services/po-control-position/po-control-position.constants';
const CONTENT_MAX_LENGTH = 140;
const PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * @description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://portinari.io/documentation/po-popover?view=doc).
 */
export class PoTooltipBaseDirective {
    constructor() {
        this._tooltip = '';
        this._tooltipPosition = 'bottom';
    }
    /**
     * @description
     *
     * Habilita e atribui um texto ao po-tooltip, com limitação de 140 caracteres.
     */
    set tooltip(tooltip) {
        if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
            this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
        }
        else {
            this._tooltip = tooltip;
        }
    }
    get tooltip() {
        return this._tooltip;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
     * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
     * automaticamente para se adequar a tela, caso necessário.
     *
     * Posições válidas:
     * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
     * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
     * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
     * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
     * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
     * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
     * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
     * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
     * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
     * - `top`: Posiciona o po-tooltip acima do componente alvo.
     * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
     * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
     *
     * @default bottom
     */
    set tooltipPosition(position) {
        this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
    }
    get tooltipPosition() {
        return this._tooltipPosition;
    }
}
tslib_1.__decorate([
    Input('p-tooltip'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoTooltipBaseDirective.prototype, "tooltip", null);
tslib_1.__decorate([
    Input('p-tooltip-position'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], PoTooltipBaseDirective.prototype, "tooltipPosition", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbHRpcC1iYXNlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcG8tdG9vbHRpcC9wby10b29sdGlwLWJhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9FQUFvRSxDQUFDO0FBRTFHLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sMkJBQTJCLEdBQUcsUUFBUSxDQUFDO0FBRTdDOzs7Ozs7Ozs7OztHQVdHO0FBRUgsTUFBTSxPQUFPLHNCQUFzQjtJQUFuQztRQUVVLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDcEIscUJBQWdCLEdBQVksUUFBUSxDQUFDO0lBa0RqRCxDQUFDO0lBaERDOzs7O09BSUc7SUFDaUIsSUFBSSxPQUFPLENBQUMsT0FBZTtRQUM3QyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLGtCQUFrQixFQUFFO1lBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztTQUMzRDthQUFNO1lBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBQ0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Bd0JHO0lBQzBCLElBQUksZUFBZSxDQUFDLFFBQWdCO1FBQy9ELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUM7SUFDM0csQ0FBQztJQUNELElBQUksZUFBZTtRQUNqQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUMvQixDQUFDO0NBRUY7QUEzQ3FCO0lBQW5CLEtBQUssQ0FBQyxXQUFXLENBQUM7OztxREFNbEI7QUE4QjRCO0lBQTVCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQzs7OzZEQUUzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBPX0NPTlRST0xfUE9TSVRJT05TIH0gZnJvbSAnLi8uLi8uLi9zZXJ2aWNlcy9wby1jb250cm9sLXBvc2l0aW9uL3BvLWNvbnRyb2wtcG9zaXRpb24uY29uc3RhbnRzJztcblxuY29uc3QgQ09OVEVOVF9NQVhfTEVOR1RIID0gMTQwO1xuY29uc3QgUE9fVE9PTFRJUF9QT1NJVElPTl9ERUZBVUxUID0gJ2JvdHRvbSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQSBkaXJldGl2YSBwby10b29sdGlwIGRldmUgc2VyIHV0aWxpemFkYSBwYXJhIG9mZXJlY2VyIGluZm9ybWHDp8O1ZXMgYWRpY2lvbmFpcyBxdWFuZG8gb3MgdXN1w6FyaW9zXG4gKiBwYXNzYW0gbyBtb3VzZSBzb2JyZSBvIGVsZW1lbnRvIGFsdm8gYW8gcXVhbCBlbGEgZXN0w6EgYXRyaWJ1w61kYS5cbiAqXG4gKiBPIGNvbnRlw7pkbyDDqSBmb3JtYWRvIHBvciB1bSBwZXF1ZW5vIHRleHRvIHF1ZSBkZXZlIGNvbnRyaWJ1aXIgcGFyYSB1bWEgdG9tYWRhIGRlIGRlY2lzw6NvIG91XG4gKiBvcmllbnRhw6fDo28gZG8gdXN1w6FyaW8uIEEgYXRpdmHDp8OjbyBkZWxlIHBvZGUgZXN0YXIgZW0gcXVhbHF1ZXIgY29tcG9uZW50ZSBvdSB0YWcgSFRNTC5cbiAqXG4gKiBQYXJhIHRleHRvcyBtYWlvcmVzIG91IG5vIGNhc28gZGUgaGF2ZXIgYSBuZWNlc3NpZGFkZSBkZSB1dGlsaXphciBhbGd1bSBvdXRybyBlbGVtZW50byBjb21vXG4gKiBjb250ZcO6ZG8gZGV2ZS1zZSB1dGlsaXphciBvIFsqKnBvLXBvcG92ZXIqKl0oaHR0cHM6Ly9wb3J0aW5hcmkuaW8vZG9jdW1lbnRhdGlvbi9wby1wb3BvdmVyP3ZpZXc9ZG9jKS5cbiAqL1xuXG5leHBvcnQgY2xhc3MgUG9Ub29sdGlwQmFzZURpcmVjdGl2ZSB7XG5cbiAgcHJpdmF0ZSBfdG9vbHRpcDogc3RyaW5nID0gJyc7XG4gIHByb3RlY3RlZCBfdG9vbHRpcFBvc2l0aW9uPzogc3RyaW5nID0gJ2JvdHRvbSc7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBIYWJpbGl0YSBlIGF0cmlidWkgdW0gdGV4dG8gYW8gcG8tdG9vbHRpcCwgY29tIGxpbWl0YcOnw6NvIGRlIDE0MCBjYXJhY3RlcmVzLlxuICAgKi9cbiAgQElucHV0KCdwLXRvb2x0aXAnKSBzZXQgdG9vbHRpcCh0b29sdGlwOiBzdHJpbmcpIHtcbiAgICBpZiAodG9vbHRpcCAmJiB0b29sdGlwLmxlbmd0aCA+IENPTlRFTlRfTUFYX0xFTkdUSCkge1xuICAgICAgIHRoaXMuX3Rvb2x0aXAgPSB0b29sdGlwLnN1YnN0cmluZygwLCBDT05URU5UX01BWF9MRU5HVEgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl90b29sdGlwID0gdG9vbHRpcDtcbiAgICB9XG4gIH1cbiAgZ2V0IHRvb2x0aXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Rvb2x0aXA7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBwb3Npw6fDo28gcXVlIG8gcG8tdG9vbHRpcCBhYnJpcsOhIGVtIHJlbGHDp8OjbyBhbyBjb21wb25lbnRlIGFsdm8uIFN1Z2VyZS1zZSBxdWUgc2VqYVxuICAgKiB1c2FkYSBhIG9yaWVudGHDp8OjbyBcImJvdHRvbVwiIChhYmFpeG8pLCBwb3LDqW0gbyBtZXNtbyDDqSBmbGV4w612ZWwgZSBzZXLDoSByb3RhY2lvbmFkb1xuICAgKiBhdXRvbWF0aWNhbWVudGUgcGFyYSBzZSBhZGVxdWFyIGEgdGVsYSwgY2FzbyBuZWNlc3PDoXJpby5cbiAgICpcbiAgICogUG9zacOnw7VlcyB2w6FsaWRhczpcbiAgICogLSBgcmlnaHRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZGlyZWl0byBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYHJpZ2h0LWJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBkaXJlaXRvIGluZmVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgcmlnaHQtdG9wYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gc3VwZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGBib3R0b21gOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFiYWl4byBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGJvdHRvbS1sZWZ0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhYmFpeG8gZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGJvdHRvbS1yaWdodGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWJhaXhvIGUgw6AgZGlyZWl0YSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGxlZnRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZXNxdWVyZG8gZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGBsZWZ0LXRvcGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBlc3F1ZXJkbyBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGxlZnQtYm90dG9tYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIGluZmVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgdG9wYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhY2ltYSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYHRvcC1yaWdodGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWNpbWEgZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgdG9wLWxlZnRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFjaW1hIGUgw6AgZXNxdWVyZGEgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBib3R0b21cbiAgICovXG4gIEBJbnB1dCgncC10b29sdGlwLXBvc2l0aW9uJykgc2V0IHRvb2x0aXBQb3NpdGlvbihwb3NpdGlvbjogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9vbHRpcFBvc2l0aW9uID0gUE9fQ09OVFJPTF9QT1NJVElPTlMuaW5jbHVkZXMocG9zaXRpb24pID8gcG9zaXRpb24gOiBQT19UT09MVElQX1BPU0lUSU9OX0RFRkFVTFQ7XG4gIH1cbiAgZ2V0IHRvb2x0aXBQb3NpdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90b29sdGlwUG9zaXRpb247XG4gIH1cblxufVxuIl19