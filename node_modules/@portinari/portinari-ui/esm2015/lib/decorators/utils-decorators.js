/**
 * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
 * o ciclo de vida do Angular.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param lifecycleName clico de vida que se deseja executar com a validação.
 * @param callback função que será executada para validadar a propriedade.
 */
export function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
    const { target, property } = decoratorProperties;
    const emptyFunction = () => { };
    const lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
    Object.defineProperty(target, lifecycleName, {
        value: function () {
            callback.call(this, property, target);
            lifecycleFunctionClone.call(this);
        }
    });
}
/**
 * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
 *
 * > Este decorator irá criar os métodos get e set internamente. Portanto,
 * é importante **não** criar nomes privados para as propriedades utilizando
 * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
 * criada pelo decorator.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param decoratorName nome do decorator
 * @param callback função que será executada para alterar o valor da propriedade
 */
export function changeValueByCallback(decoratorProperties, decoratorName, callback) {
    const { target, property, originalDescriptor } = decoratorProperties;
    const privatePropertyName = createPrivateProperty(target, property, decoratorName);
    return {
        get: getter(originalDescriptor, privatePropertyName),
        set: setter(originalDescriptor, callback, privatePropertyName)
    };
}
function setter(originalDescriptor, callback, privatePropertyName) {
    return function (value) {
        if (originalDescriptor && originalDescriptor.set) {
            originalDescriptor.set.bind(this)(callback(value));
        }
        this[privatePropertyName] = callback(value);
    };
}
function getter(originalDescriptor, privatePropName) {
    return function () {
        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
    };
}
export function createPrivateProperty(target, propertyName, decoratorName) {
    const privatePropName = `$$__${propertyName}`;
    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
        console.warn(`The prop "${privatePropName}" is already exist, it will be overrided by ${decoratorName} decorator.`);
    }
    Object.defineProperty(target, privatePropName, {
        configurable: true,
        writable: true
    });
    return privatePropName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMtZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2RlY29yYXRvcnMvdXRpbHMtZGVjb3JhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxtQkFBK0MsRUFDL0MsYUFBcUIsRUFDckIsUUFBa0I7SUFFbEIsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztJQUNqRCxNQUFNLGFBQWEsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEMsTUFBTSxzQkFBc0IsR0FBb0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLGFBQWEsQ0FBQztJQUV2RixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUU7UUFDM0MsS0FBSyxFQUFFO1lBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBRUwsQ0FBQztBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxVQUFVLHFCQUFxQixDQUFDLG1CQUErQyxFQUFFLGFBQXFCLEVBQUUsUUFBa0I7SUFDOUgsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxtQkFBbUIsQ0FBQztJQUNyRSxNQUFNLG1CQUFtQixHQUFHLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFbkYsT0FBTztRQUNMLEdBQUcsRUFBRSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsbUJBQW1CLENBQUM7UUFDcEQsR0FBRyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLENBQUM7S0FDL0QsQ0FBQztBQUVKLENBQUM7QUFDRCxTQUFTLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxRQUFrQixFQUFFLG1CQUEyQjtJQUNqRixPQUFPLFVBQVMsS0FBSztRQUVuQixJQUFJLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtZQUNoRCxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxrQkFBZ0QsRUFBRSxlQUF1QjtJQUN2RixPQUFPO1FBQ0wsT0FBTyxrQkFBa0IsSUFBSSxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3BILENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQUMsTUFBVyxFQUFFLFlBQW9CLEVBQUUsYUFBcUI7SUFDNUYsTUFBTSxlQUFlLEdBQUcsT0FBTyxZQUFZLEVBQUUsQ0FBQztJQUU5QyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUU7UUFDakUsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLGVBQWUsK0NBQStDLGFBQWEsYUFBYSxDQUFDLENBQUM7S0FDckg7SUFFRCxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxlQUFlLEVBQUU7UUFDN0MsWUFBWSxFQUFFLElBQUk7UUFDbEIsUUFBUSxFQUFFLElBQUk7S0FDZixDQUFDLENBQUM7SUFFSCxPQUFPLGVBQWUsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UgfSBmcm9tICcuL3Byb3BlcnR5LWRlY29yYXRvci5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEZ1bsOnw6NvIHV0aWxpemFkYSBwZWxhIGbDoWJyaWNhIGRlIGRlY29yYWRvcmVzIHBhcmEgdmFsaWRhciB1bWEgcHJvcHJpZWRhZGUgZGUgdW1hIGNsYXNzZSBkdXJhbnRlXG4gKiBvIGNpY2xvIGRlIHZpZGEgZG8gQW5ndWxhci5cbiAqXG4gKiBAcGFyYW0gZGVjb3JhdG9yUHJvcGVydGllcyBwcm9wcmllZGFkZXMgZGEgaW50ZXJmYWNlIFBvUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UuXG4gKiBAcGFyYW0gbGlmZWN5Y2xlTmFtZSBjbGljbyBkZSB2aWRhIHF1ZSBzZSBkZXNlamEgZXhlY3V0YXIgY29tIGEgdmFsaWRhw6fDo28uXG4gKiBAcGFyYW0gY2FsbGJhY2sgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBwYXJhIHZhbGlkYWRhciBhIHByb3ByaWVkYWRlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0eU9uTGlmZUN5Y2xlKFxuICBkZWNvcmF0b3JQcm9wZXJ0aWVzOiBQcm9wZXJ0eURlY29yYXRvckludGVyZmFjZSxcbiAgbGlmZWN5Y2xlTmFtZTogc3RyaW5nLFxuICBjYWxsYmFjazogRnVuY3Rpb24pIHtcblxuICBjb25zdCB7IHRhcmdldCwgcHJvcGVydHkgfSA9IGRlY29yYXRvclByb3BlcnRpZXM7XG4gIGNvbnN0IGVtcHR5RnVuY3Rpb24gPSAoKSA9PiB7IH07XG4gIGNvbnN0IGxpZmVjeWNsZUZ1bmN0aW9uQ2xvbmU6IEZ1bmN0aW9uIHwgbnVsbCA9IHRhcmdldFtsaWZlY3ljbGVOYW1lXSB8fCBlbXB0eUZ1bmN0aW9uO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGxpZmVjeWNsZU5hbWUsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHByb3BlcnR5LCB0YXJnZXQpO1xuICAgICAgbGlmZWN5Y2xlRnVuY3Rpb25DbG9uZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbn1cblxuLyoqXG4gKiBGdW7Dp8OjbyB1dGlsaXphZGEgcGVsYSBmw6FicmljYSBkZSBkZWNvcmFkb3JlcyBwYXJhIGFsdGVyYXIvbWFuaXB1bGFyIG8gdmFsb3IgZGUgdW1hIHByb3ByaWVkYWRlLlxuICpcbiAqID4gRXN0ZSBkZWNvcmF0b3IgaXLDoSBjcmlhciBvcyBtw6l0b2RvcyBnZXQgZSBzZXQgaW50ZXJuYW1lbnRlLiBQb3J0YW50byxcbiAqIMOpIGltcG9ydGFudGUgKipuw6NvKiogY3JpYXIgbm9tZXMgcHJpdmFkb3MgcGFyYSBhcyBwcm9wcmllZGFkZXMgdXRpbGl6YW5kb1xuICogYCQkX19ub21lRGFQcm9wcmllZGFkZWAgYW8gdXRpbGl6YXIgZXN0ZSBkZWNvcmF0b3IsIHBvaXMgZWxhIHNlcsOhIHNvYnJlc2NyaXRhIHBlbGEgcHJvcHJpZWRhZGUgcHJpdmFkYVxuICogY3JpYWRhIHBlbG8gZGVjb3JhdG9yLlxuICpcbiAqIEBwYXJhbSBkZWNvcmF0b3JQcm9wZXJ0aWVzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgUG9Qcm9wZXJ0eURlY29yYXRvckludGVyZmFjZS5cbiAqIEBwYXJhbSBkZWNvcmF0b3JOYW1lIG5vbWUgZG8gZGVjb3JhdG9yXG4gKiBAcGFyYW0gY2FsbGJhY2sgZnVuw6fDo28gcXVlIHNlcsOhIGV4ZWN1dGFkYSBwYXJhIGFsdGVyYXIgbyB2YWxvciBkYSBwcm9wcmllZGFkZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlVmFsdWVCeUNhbGxiYWNrKGRlY29yYXRvclByb3BlcnRpZXM6IFByb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlLCBkZWNvcmF0b3JOYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuICBjb25zdCB7IHRhcmdldCwgcHJvcGVydHksIG9yaWdpbmFsRGVzY3JpcHRvciB9ID0gZGVjb3JhdG9yUHJvcGVydGllcztcbiAgY29uc3QgcHJpdmF0ZVByb3BlcnR5TmFtZSA9IGNyZWF0ZVByaXZhdGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5LCBkZWNvcmF0b3JOYW1lKTtcblxuICByZXR1cm4ge1xuICAgIGdldDogZ2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvciwgcHJpdmF0ZVByb3BlcnR5TmFtZSksXG4gICAgc2V0OiBzZXR0ZXIob3JpZ2luYWxEZXNjcmlwdG9yLCBjYWxsYmFjaywgcHJpdmF0ZVByb3BlcnR5TmFtZSlcbiAgfTtcblxufVxuZnVuY3Rpb24gc2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvciwgY2FsbGJhY2s6IEZ1bmN0aW9uLCBwcml2YXRlUHJvcGVydHlOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKTogdm9pZCB7XG5cbiAgICBpZiAob3JpZ2luYWxEZXNjcmlwdG9yICYmIG9yaWdpbmFsRGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIG9yaWdpbmFsRGVzY3JpcHRvci5zZXQuYmluZCh0aGlzKShjYWxsYmFjayh2YWx1ZSkpO1xuICAgIH1cblxuICAgIHRoaXNbcHJpdmF0ZVByb3BlcnR5TmFtZV0gPSBjYWxsYmFjayh2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldHRlcihvcmlnaW5hbERlc2NyaXB0b3I6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPGFueT4sIHByaXZhdGVQcm9wTmFtZTogc3RyaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JpZ2luYWxEZXNjcmlwdG9yICYmIG9yaWdpbmFsRGVzY3JpcHRvci5nZXQgPyBvcmlnaW5hbERlc2NyaXB0b3IuZ2V0LmJpbmQodGhpcykoKSA6IHRoaXNbcHJpdmF0ZVByb3BOYW1lXTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByaXZhdGVQcm9wZXJ0eSh0YXJnZXQ6IGFueSwgcHJvcGVydHlOYW1lOiBzdHJpbmcsIGRlY29yYXRvck5hbWU6IHN0cmluZykge1xuICBjb25zdCBwcml2YXRlUHJvcE5hbWUgPSBgJCRfXyR7cHJvcGVydHlOYW1lfWA7XG5cbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIHByaXZhdGVQcm9wTmFtZSkpIHtcbiAgICBjb25zb2xlLndhcm4oYFRoZSBwcm9wIFwiJHtwcml2YXRlUHJvcE5hbWV9XCIgaXMgYWxyZWFkeSBleGlzdCwgaXQgd2lsbCBiZSBvdmVycmlkZWQgYnkgJHtkZWNvcmF0b3JOYW1lfSBkZWNvcmF0b3IuYCk7XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcml2YXRlUHJvcE5hbWUsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWVcbiAgfSk7XG5cbiAgcmV0dXJuIHByaXZhdGVQcm9wTmFtZTtcbn1cbiJdfQ==