import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isTypeof } from '../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Portinari.
 */
let PoTimePipe = class PoTimePipe {
    transform(time, format) {
        const hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            const amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            const miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            const formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    }
    addDotMiliseconds(miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    }
    formatValue(time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            const hour = time.substring(0, 2);
            const minutes = time.substring(3, 5);
            const seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace(`.${formatMiliseconds}`, miliseconds);
            return format;
        }
        else {
            return time;
        }
    }
    getFormatMiliseconds(amountOfF) {
        let formatMiliseconds = '';
        for (let i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    }
};
PoTimePipe = tslib_1.__decorate([
    Pipe({
        name: 'po_time'
    })
], PoTimePipe);
export { PoTimePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGltZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvcG8tdGltZS9wby10aW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU1Qzs7Ozs7O0dBTUc7QUFJSCxJQUFhLFVBQVUsR0FBdkIsTUFBYSxVQUFVO0lBRXJCLFNBQVMsQ0FBQyxJQUFZLEVBQUUsTUFBZTtRQUVyQyxNQUFNLFNBQVMsR0FBRyxvRUFBb0UsQ0FBQztRQUV2RixJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUVwRCxNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqRixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ3hGLE1BQU0saUJBQWlCLEdBQVcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXZFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZFO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8saUJBQWlCLENBQUMsV0FBbUIsRUFBRSxTQUFpQjtRQUM5RCxJQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUU7WUFDNUIsV0FBVyxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUM7U0FDakM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRU8sV0FBVyxDQUFDLElBQVksRUFBRSxNQUFjLEVBQUUsaUJBQXlCLEVBQUUsV0FBbUI7UUFDOUYsSUFBSSxJQUFJLElBQUksTUFBTSxFQUFFO1lBQ2xCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXJDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksaUJBQWlCLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUU5RCxPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVPLG9CQUFvQixDQUFDLFNBQWlCO1FBQzVDLElBQUksaUJBQWlCLEdBQVcsRUFBRSxDQUFDO1FBRW5DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbEMsaUJBQWlCLElBQUksR0FBRyxDQUFDO1NBQzFCO1FBRUQsT0FBTyxpQkFBaUIsQ0FBQztJQUMzQixDQUFDO0NBRUYsQ0FBQTtBQXBEWSxVQUFVO0lBSHRCLElBQUksQ0FBQztRQUNKLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUM7R0FDVyxVQUFVLENBb0R0QjtTQXBEWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc1R5cGVvZiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFBpcGUgcmVzcG9uc8OhdmVsIHBvciBhcHJlc2VudGFyIHVtIGhvcsOhcmlvIGJhc2VhZG8gbm8gZm9ybWF0byBkZSBlbnRyYWRhIGRlZmluaWRvIG5hIEFQSSBkYSBQb3J0aW5hcmkuXG4gKi9cbkBQaXBlKHtcbiAgbmFtZTogJ3BvX3RpbWUnXG59KVxuZXhwb3J0IGNsYXNzIFBvVGltZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICB0cmFuc2Zvcm0odGltZTogc3RyaW5nLCBmb3JtYXQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuXG4gICAgY29uc3QgaG91clJlZ2V4ID0gL14oKFswLTFdWzAtOV0pfCgyWzAtM10pKTpbMC01XVswLTldOlswLTVdWzAtOV1bXFwuXT8oWzAtOV17MSw2fSk/JC9nO1xuXG4gICAgaWYgKGlzVHlwZW9mKHRpbWUsICdzdHJpbmcnKSAmJiBob3VyUmVnZXgudGVzdCh0aW1lKSkge1xuXG4gICAgICBjb25zdCBhbW91bnRPZkYgPSBmb3JtYXQgPyBmb3JtYXQubGFzdEluZGV4T2YoJ2YnKSAtIGZvcm1hdC5pbmRleE9mKCdmJykgKyAxIDogMDtcblxuICAgICAgY29uc3QgbWlsaXNlY29uZHMgPSB0aGlzLmFkZERvdE1pbGlzZWNvbmRzKHRpbWUuc3Vic3RyaW5nKDksIDkgKyBhbW91bnRPZkYpLCBhbW91bnRPZkYpO1xuICAgICAgY29uc3QgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZyA9IHRoaXMuZ2V0Rm9ybWF0TWlsaXNlY29uZHMoYW1vdW50T2ZGKTtcblxuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0VmFsdWUodGltZSwgZm9ybWF0LCBmb3JtYXRNaWxpc2Vjb25kcywgbWlsaXNlY29uZHMpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgYWRkRG90TWlsaXNlY29uZHMobWlsaXNlY29uZHM6IHN0cmluZywgYW1vdW50T2ZGOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGlmIChtaWxpc2Vjb25kcyAmJiBhbW91bnRPZkYpIHtcbiAgICAgIG1pbGlzZWNvbmRzID0gJy4nICsgbWlsaXNlY29uZHM7XG4gICAgfVxuICAgIHJldHVybiBtaWxpc2Vjb25kcztcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0VmFsdWUodGltZTogc3RyaW5nLCBmb3JtYXQ6IHN0cmluZywgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZywgbWlsaXNlY29uZHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKHRpbWUgJiYgZm9ybWF0KSB7XG4gICAgICBjb25zdCBob3VyID0gdGltZS5zdWJzdHJpbmcoMCwgMik7XG4gICAgICBjb25zdCBtaW51dGVzID0gdGltZS5zdWJzdHJpbmcoMywgNSk7XG4gICAgICBjb25zdCBzZWNvbmRzID0gdGltZS5zdWJzdHJpbmcoNiwgOCk7XG5cbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCdISCcsIGhvdXIpO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ21tJywgbWludXRlcyk7XG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnc3MnLCBzZWNvbmRzKTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKGAuJHtmb3JtYXRNaWxpc2Vjb25kc31gLCBtaWxpc2Vjb25kcyk7XG5cbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rm9ybWF0TWlsaXNlY29uZHMoYW1vdW50T2ZGOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGxldCBmb3JtYXRNaWxpc2Vjb25kczogc3RyaW5nID0gJyc7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mRjsgaSsrKSB7XG4gICAgICBmb3JtYXRNaWxpc2Vjb25kcyArPSAnZic7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvcm1hdE1pbGlzZWNvbmRzO1xuICB9XG5cbn1cbiJdfQ==