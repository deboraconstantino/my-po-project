import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Inject } from '@angular/core';
import { Observable } from 'rxjs';
import { isLanguage, reloadCurrentPage } from '../../utils/util';
import { PoLanguageService } from '../po-language/po-language.service';
import { I18N_CONFIG } from './po-i18n-config-injection-token';
/**
 * @description
 *
 * O serviço `PoI18nService` possibilita utilizar múltiplos idiomas e contextos na aplicação.
 *
 * > Antes da utilização do serviço, é necessário realizar a
 * [importação e configuração do módulo `PoI18nModule`](/documentation/po-i18n#i18n-config).
 *
 * **Utilização do serviço `PoI18nService`:**
 *
 * Para utilizar o serviço basta importá-lo nos componentes que necessitarem de literais e fazer a injeção de
 * dependência no construtor:
 * ```
 *  import { PoI18nService } from '@portinari/portinari-ui';
 *  ...
 *  constructor(private poI18nService: PoI18nService) { }
 *  ...
 * ```
 *
 * Por fim realizar a busca pelas literais, inscrevendo-se no [Observable](https://angular.io/guide/observables) pelo
 * método `getLiterals()`.
 *
 * > O método `getLiterals()` pode receber um objeto do tipo da interface `PoI18nLiterals` como parâmetro,
 * porém, nenhuma das propriedades são obrigatórias. Caso nenhum parâmetro seja passado, serão buscadas
 * todas as literais do contexto definido com padrão, no idioma definido como padrão.
 *
 * Exemplos de requisição:
 * ```
 * literals = {};
 * literalsEn = {};
 * literalsCrm = {};
 *
 * constructor(private poI18nService: PoI18nService) {
 *   poI18nService.getLiterals()
 *     .subscribe((literals) => {
 *       this.literals = literals;
 *     });
 *
 *   poI18nService.getLiterals({context: 'crm', literals: ['add', 'remove']})
 *     .subscribe((literals) => {
 *       this.literalsCrm = literals;
 *     });
 *
 *   poI18nService.getLiterals({language: 'en-us'})
 *     .subscribe((literals) => {
 *       this.literalsEn = literals;
 *     });
 * }
 * ```
 *
 * Para apresentar as literais capturadas acima no HTML do componente, deve-se utilizar o
 * seguinte código:
 *
 * <pre ngNonBindable>
 * {{ literals?.add }}
 * {{ literals?.remove }}
 * </pre>
 *
 * Caso as literais contenham variáveis que precisem ser substituídas, pode-se utilizar o *pipe* `poI18n`.
 * É possível informar propriedades do componente como `name` e `nickname` ou
 * informar o valor diretamente com "" ou número, conforme o exemplo abaixo:
 *
 * <pre ngNonBindable>
 * {{ literals?.people | poI18n:[120] }}
 * {{ literals?.greeting | poI18n:[name, nickname] }}
 * {{ literals?.greeting | poI18n:["Brad", "Green"] }}
 * </pre>
 *
 * > É importante o uso do operador `?` (Elvis) para evitar erros enquanto as literais não forem carregadas.
 *
 * ### Teste unitário
 *
 * Abaixo segue um exemplo de *setup* inicial de teste unitário do *AppComponent* que utiliza o `PoI18nService`:
 *
 * ```
 * import { async, TestBed } from '@angular/core/testing';
 * import { HttpClientTestingModule } from '@angular/common/http/testing';
 *
 * import { PoI18nModule } from '@portinari/portinari-ui';
 *
 * import { AppComponent } from './app.component';
 *
 * describe('AppComponent', () => {
 *   const anotherPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const generalPT = {
 *     text: 'texto',
 *     add: 'adicionar',
 *     remove: 'remover'
 *   };
 *
 *   const config = {
 *     default: {
 *       language: 'pt-BR',
 *       context: 'general',
 *       cache: false
 *     },
 *     contexts: {
 *       general: {
 *         'pt-br': generalPT
 *       },
 *       another: {
 *         'pt-br': anotherPT
 *       }
 *     }
 *   };
 *
 *   beforeEach(async(() => {
 *     TestBed.configureTestingModule({
 *       declarations: [
 *         AppComponent
 *       ],
 *       imports: [
 *         HttpClientTestingModule,
 *         PoI18nModule.config(config)
 *       ]
 *     }).compileComponents();
 *   }));
 *
 *   it('should create the app', async(() => {
 *     const fixture = TestBed.createComponent(AppComponent);
 *     const app = fixture.debugElement.componentInstance;
 *
 *     expect(app).toBeTruthy();
 *   }));
 *
 * });
 * ```
 */
var PoI18nBaseService = /** @class */ (function () {
    function PoI18nBaseService(config, http, languageService) {
        this.config = config;
        this.http = http;
        this.languageService = languageService;
        this.varI18n = {};
        this.useCache = false;
        this.servicesContext = {};
        this.setConfig(config);
    }
    /**
     * <a id="get-language"></a>
     * Método que retorna o idioma padrão ativo.
     *
     * A busca deste idioma pelo método será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método [`setLanguage()`](documentation/po-i18n#setLanguage).
     *
     *   2 - o valor inserido no módulo do i18n através do parâmetro `config`, sendo o idioma inserido na propriedade
     * `language` da interface [`PoI18nConfigDefault`](documentation/po-i18n#poI18nConfigDefault).
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en` ou `es`), será retornado valor `pt`.
     *
     * @returns {string} sigla do idioma padrão.
     */
    PoI18nBaseService.prototype.getLanguage = function () {
        return this.languageService.getLanguage();
    };
    /**
     * Método que retorna o idioma padrão ativo, com somente a abreviação do idioma (duas primeiras letras).
     * Por exemplo: "pt" ou "es".
     *
     * A busca deste idioma é baseada no método [**getLanguage()**](/documentation/po-i18n#get-language).
     *
     * @returns {string} sigla do idioma padrão.
     */
    PoI18nBaseService.prototype.getShortLanguage = function () {
        return this.languageService.getShortLanguage();
    };
    /**
     * <a id="setLanguage"></a>
     * Método para alterar o idioma padrão do módulo do i18n.
     *
     * Ao utilizar este método, o idioma ficará gravado no armazenamento local do navegador, que será utilizado pelo
     * serviço do `i18n` para buscar as literais no idioma padrão.
     *
     * @param {string} language Sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     *
     * @param {boolean} reload Indica se a página atual poderá ser recarregada após a alteração do idioma.
     *
     * Este recurso pode ser útil para os usuários que utilizam o método `getLiterals()` do serviço do i18n para poder
     * buscar novamente as literais no novo idioma configurado.
     */
    PoI18nBaseService.prototype.setLanguage = function (language, reload) {
        if (!isLanguage(language)) {
            return;
        }
        this.languageService.setLanguage(language);
        if (reload) {
            reloadCurrentPage();
        }
    };
    PoI18nBaseService.prototype.setConfig = function (config) {
        // Seta as configurações padrões definidas no importação do módulo
        if (config['default']) {
            this.languageService.setLanguageDefault(config['default']['language']);
            this.contextDefault = (config['default']['context']) ? config['default']['context'] : '';
            this.useCache = (config['default']['cache']) ? config['default']['cache'] : false;
        }
        // Carrega a lista dos contextos e as contantes informadas
        if (config['contexts']) {
            this.setVarI18n(config['contexts']);
            // Se nenhum contexto foi definido como padrão,
            // então define o primeiro contexto
            if (!this.contextDefault) {
                for (var context in config['contexts']) {
                    if (this.config['contexts'].hasOwnProperty(context)) {
                        this.contextDefault = context;
                        break;
                    }
                }
            }
        }
    };
    PoI18nBaseService.prototype.getLiterals = function (options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        var language = options['language'] ? options['language'].toLowerCase() : this.getLanguage();
        var context = (options['context']) ? options['context'] : this.contextDefault;
        var literals = (options['literals']) ? options['literals'] : [];
        return new Observable(function (observer) {
            if (_this.servicesContext[context]) {
                // Faz o processo de busca de um contexto que contém serviço
                _this.getLiteralsFromContextService(language, context, literals, observer);
            }
            else {
                // Faz o processo de busca de um contexto que utiliza constante
                _this.getLiteralsFromContextConstant(language, context, literals, observer);
            }
        });
    };
    // Processo de busca de um contexto que contém serviço.
    //    1 - Procura na variável I18n deste serviço
    //    2 - Procura no local storage (Se o cache estiver definido como true na configuração do módulo)
    //    3 - Dispara o serviço, mesmo que já tenha encontrado no local storage, para garantir a atualização
    //    4 - Se nenhuma literal for encontrada, então busca em pt-br
    PoI18nBaseService.prototype.getLiteralsFromContextService = function (language, context, literals, observer, translations, languageAlternative) {
        if (translations === void 0) { translations = {}; }
        if (languageAlternative === void 0) { languageAlternative = null; }
        // Idioma usado para tentar buscar as literais faltantes
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        translations = this.mergeObject(translations, this.searchInVarI18n(languageSearch, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // realiza a busca no localStorage e em seguida no serviço
        this.getLiteralsLocalStorageAndCache(languageSearch, context, literals, observer, translations, languageAlternative);
    };
    // Procura no local storage e em seguida no serviço
    // Caso não encontre nem no serviço, recomeça a busca em pt-br
    PoI18nBaseService.prototype.getLiteralsLocalStorageAndCache = function (language, context, literals, observer, translations, languageAlternative) {
        var _this = this;
        if (languageAlternative === void 0) { languageAlternative = null; }
        var languageSearch = (languageAlternative) ? languageAlternative : language;
        var translationTemp;
        // Verifica se usa cache
        if (this.useCache) {
            translationTemp = this.searchInLocalStorage(languageSearch, context, literals);
            if (this.countObject(translationTemp) > 0) {
                this.updateVarI18n(language, context, translationTemp);
                translations = this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
        }
        // Busca do Serviço
        this.getHttpService(this.servicesContext[context], languageSearch, literals)
            .subscribe(function (response) {
            if (response) {
                _this.updateLocalStorage(language, context, response);
                _this.updateVarI18n(language, context, response);
                translationTemp = _this.searchInVarI18n(language, context, literals);
                translations = _this.mergeObject(translationTemp, translations);
                observer.next(translations);
            }
            // Se não encontrou todas as literais pesquisadas no idioma
            // Então refaz o processo procurando em português
            if (literals.length > _this.countObject(translations)) {
                if (languageAlternative === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = _this.completeFaultLiterals(language, context, literals, translations);
                    _this.updateLocalStorage(language, context, translations);
                    _this.updateVarI18n(language, context, translations);
                    observer.next(translations);
                }
                else {
                    _this.getLiteralsFromContextService(language, context, literals, observer, translations, 'pt-br');
                }
            }
        });
    };
    // Procura pela lista de literais
    // Se não encontrar todas, procura em pt-br
    PoI18nBaseService.prototype.getLiteralsFromContextConstant = function (language, context, literals, observer, translations) {
        if (translations === void 0) { translations = {}; }
        translations = this.mergeObject(translations, this.searchInVarI18n(language, context, literals));
        if (this.countObject(translations) > 0) {
            observer.next(translations);
        }
        // Se foi pesquisado por literais
        if (literals.length > 0) {
            // Se não encontrou todas as literais pesquisadas no idioma, procura em português
            if (literals.length > this.countObject(translations)) {
                if (language === 'pt-br') {
                    // Se não encontrou nem em português, então retorna o nome das literais
                    translations = this.completeFaultLiterals(language, context, literals, translations);
                    observer.next(translations);
                }
                else {
                    this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
                }
            }
        }
        else {
            // Se não encontrar nenhuma literal, procura em português
            if (this.countObject(translations) === 0 && language !== 'pt-br') {
                this.getLiteralsFromContextConstant('pt-br', context, literals, observer, translations);
            }
            // caso não informar literais e não houver tradução
            observer.next(translations);
            observer.complete();
        }
    };
    // Busca pelas literais no local storage
    PoI18nBaseService.prototype.searchInLocalStorage = function (language, context, literals) {
        var translations = {};
        if (literals.length > 0) {
            for (var i = 0; i < literals.length; i++) {
                var literal = literals[i];
                var translation = localStorage.getItem(language + '-' + context + '-' + literal);
                if (translation) {
                    translations[literal] = translation;
                }
            }
        }
        return translations;
    };
    // Busca pelas literais na variável do serviço
    PoI18nBaseService.prototype.searchInVarI18n = function (language, context, literals) {
        var translations = {};
        if (this.varI18n[language] && this.varI18n[language][context]) {
            var content = this.varI18n[language][context];
            if (literals.length > 0) {
                // Busca as literais desejadas
                for (var i = 0; i < literals.length; i++) {
                    var literal = literals[i];
                    if (content.hasOwnProperty(literal)) {
                        translations[literal] = content[literal];
                    }
                }
            }
            else {
                // Atribui todas as literais
                translations = tslib_1.__assign({}, content);
            }
        }
        return translations;
    };
    // Atualiza o local storage
    PoI18nBaseService.prototype.updateLocalStorage = function (language, context, data) {
        if (this.useCache) {
            for (var literal in data) {
                if (data.hasOwnProperty(literal)) {
                    localStorage.setItem(language + '-' + context + '-' + literal, data[literal]);
                }
            }
        }
    };
    // Atualiza a variável local com as literais com os objetos passados na configuração
    PoI18nBaseService.prototype.setVarI18n = function (contexts) {
        // Percorre os contextos
        for (var context in contexts) {
            if (contexts.hasOwnProperty(context)) {
                var contextContent = contexts[context];
                // Percorre os idiomas dentro do contexto
                for (var language in contextContent) {
                    if (contextContent.hasOwnProperty(language)) {
                        var languageContent = contextContent[language];
                        if (language === 'url') {
                            this.servicesContext[context] = languageContent;
                        }
                        else {
                            this.updateVarI18n(language, context, languageContent);
                        }
                    }
                }
            }
        }
    };
    // Atualiza a variável local com as literais idioma e contexto
    PoI18nBaseService.prototype.updateVarI18n = function (language, context, data) {
        var _a;
        language = language.toLowerCase();
        if (!this.varI18n[language]) {
            this.varI18n[language] = (_a = {}, _a[context] = {}, _a);
        }
        if (!this.varI18n[language][context]) {
            this.varI18n[language][context] = {};
        }
        // Cria ou atualiza o contexto dentro do storage
        this.varI18n[language][context] = this.mergeObject(data, this.varI18n[language][context]);
    };
    PoI18nBaseService.prototype.getHttpService = function (url, language, literals) {
        var param = '?language=' + language;
        if (literals.length > 0) {
            param += '&literals=' + literals.join();
        }
        // Remove a barra final do endereço
        url = (url.lastIndexOf('/') === url.length - 1) ? url.substr(0, url.length - 1) : url;
        return this.http.get(url + param);
    };
    // Completa com o nome da literais, as que não foram encontradas
    PoI18nBaseService.prototype.completeFaultLiterals = function (language, context, literals, translations) {
        for (var i = 0; i < literals.length; i++) {
            var literal = literals[i];
            if (!translations[literal]) {
                translations[literal] = literal;
            }
        }
        return translations;
    };
    // Conta os atributos do objeto
    PoI18nBaseService.prototype.countObject = function (obj) {
        return Object.keys(obj).length;
    };
    // Faz o merge dos objetos, sempre dando preferência para o primeiro objeto de parâmetro
    PoI18nBaseService.prototype.mergeObject = function (objPermanent, obj) {
        return tslib_1.__assign({}, obj, objPermanent);
    };
    PoI18nBaseService = tslib_1.__decorate([
        tslib_1.__param(0, Inject(I18N_CONFIG)),
        tslib_1.__param(1, Inject(HttpClient)),
        tslib_1.__metadata("design:paramtypes", [Object, HttpClient,
            PoLanguageService])
    ], PoI18nBaseService);
    return PoI18nBaseService;
}());
export { PoI18nBaseService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taTE4bi1iYXNlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wby1pMThuL3BvLWkxOG4tYmFzZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUV2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFJL0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9JRztBQUVIO0lBVUUsMkJBQytCLE1BQXFCLEVBQ3RCLElBQWlCLEVBQ3JDLGVBQW1DO1FBRmQsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUN0QixTQUFJLEdBQUosSUFBSSxDQUFhO1FBQ3JDLG9CQUFlLEdBQWYsZUFBZSxDQUFvQjtRQVhyQyxZQUFPLEdBQVEsRUFBRSxDQUFDO1FBSWxCLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFFMUIsb0JBQWUsR0FBUSxFQUFFLENBQUM7UUFPaEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7T0FnQkc7SUFDSCx1Q0FBVyxHQUFYO1FBQ0UsT0FBTyxJQUFJLENB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QUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxnRUFBZ0U7SUFDeEQsaURBQXFCLEdBQTdCLFVBQThCLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixRQUF1QixFQUN2QixZQUFpQjtRQUM3QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDMUIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQzthQUNqQztTQUNGO1FBQ0QsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVELCtCQUErQjtJQUN2Qix1Q0FBVyxHQUFuQixVQUFvQixHQUFXO1FBQzdCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDakMsQ0FBQztJQUVELHdGQUF3RjtJQUNoRix1Q0FBVyxHQUFuQixVQUFvQixZQUFpQixFQUFFLEdBQVE7UUFDN0MsNEJBQVksR0FBRyxFQUFLLFlBQVksRUFBRztJQUNyQyxDQUFDO0lBeFdVLGlCQUFpQjtRQVd6QixtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDbkIsbUJBQUEsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO3lEQUFnQixVQUFVO1lBQ25CLGlCQUFpQjtPQWJsQyxpQkFBaUIsQ0F5VzdCO0lBQUQsd0JBQUM7Q0FBQSxBQXpXRCxJQXlXQztTQXpXWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgaXNMYW5ndWFnZSwgcmVsb2FkQ3VycmVudFBhZ2UgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi4vcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2Uuc2VydmljZSc7XG5cbmltcG9ydCB7IEkxOE5fQ09ORklHIH0gZnJvbSAnLi9wby1pMThuLWNvbmZpZy1pbmplY3Rpb24tdG9rZW4nO1xuaW1wb3J0IHsgUG9JMThuQ29uZmlnIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWkxOG4tY29uZmlnLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0kxOG5MaXRlcmFscyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1pMThuLWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBzZXJ2acOnbyBgUG9JMThuU2VydmljZWAgcG9zc2liaWxpdGEgdXRpbGl6YXIgbcO6bHRpcGxvcyBpZGlvbWFzIGUgY29udGV4dG9zIG5hIGFwbGljYcOnw6NvLlxuICpcbiAqID4gQW50ZXMgZGEgdXRpbGl6YcOnw6NvIGRvIHNlcnZpw6dvLCDDqSBuZWNlc3PDoXJpbyByZWFsaXphciBhXG4gKiBbaW1wb3J0YcOnw6NvIGUgY29uZmlndXJhw6fDo28gZG8gbcOzZHVsbyBgUG9JMThuTW9kdWxlYF0oL2RvY3VtZW50YXRpb24vcG8taTE4biNpMThuLWNvbmZpZykuXG4gKlxuICogKipVdGlsaXphw6fDo28gZG8gc2VydmnDp28gYFBvSTE4blNlcnZpY2VgOioqXG4gKlxuICogUGFyYSB1dGlsaXphciBvIHNlcnZpw6dvIGJhc3RhIGltcG9ydMOhLWxvIG5vcyBjb21wb25lbnRlcyBxdWUgbmVjZXNzaXRhcmVtIGRlIGxpdGVyYWlzIGUgZmF6ZXIgYSBpbmplw6fDo28gZGVcbiAqIGRlcGVuZMOqbmNpYSBubyBjb25zdHJ1dG9yOlxuICogYGBgXG4gKiAgaW1wb3J0IHsgUG9JMThuU2VydmljZSB9IGZyb20gJ0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpJztcbiAqICAuLi5cbiAqICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvSTE4blNlcnZpY2U6IFBvSTE4blNlcnZpY2UpIHsgfVxuICogIC4uLlxuICogYGBgXG4gKlxuICogUG9yIGZpbSByZWFsaXphciBhIGJ1c2NhIHBlbGFzIGxpdGVyYWlzLCBpbnNjcmV2ZW5kby1zZSBubyBbT2JzZXJ2YWJsZV0oaHR0cHM6Ly9hbmd1bGFyLmlvL2d1aWRlL29ic2VydmFibGVzKSBwZWxvXG4gKiBtw6l0b2RvIGBnZXRMaXRlcmFscygpYC5cbiAqXG4gKiA+IE8gbcOpdG9kbyBgZ2V0TGl0ZXJhbHMoKWAgcG9kZSByZWNlYmVyIHVtIG9iamV0byBkbyB0aXBvIGRhIGludGVyZmFjZSBgUG9JMThuTGl0ZXJhbHNgIGNvbW8gcGFyw6JtZXRybyxcbiAqIHBvcsOpbSwgbmVuaHVtYSBkYXMgcHJvcHJpZWRhZGVzIHPDo28gb2JyaWdhdMOzcmlhcy4gQ2FzbyBuZW5odW0gcGFyw6JtZXRybyBzZWphIHBhc3NhZG8sIHNlcsOjbyBidXNjYWRhc1xuICogdG9kYXMgYXMgbGl0ZXJhaXMgZG8gY29udGV4dG8gZGVmaW5pZG8gY29tIHBhZHLDo28sIG5vIGlkaW9tYSBkZWZpbmlkbyBjb21vIHBhZHLDo28uXG4gKlxuICogRXhlbXBsb3MgZGUgcmVxdWlzacOnw6NvOlxuICogYGBgXG4gKiBsaXRlcmFscyA9IHt9O1xuICogbGl0ZXJhbHNFbiA9IHt9O1xuICogbGl0ZXJhbHNDcm0gPSB7fTtcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvSTE4blNlcnZpY2U6IFBvSTE4blNlcnZpY2UpIHtcbiAqICAgcG9JMThuU2VydmljZS5nZXRMaXRlcmFscygpXG4gKiAgICAgLnN1YnNjcmliZSgobGl0ZXJhbHMpID0+IHtcbiAqICAgICAgIHRoaXMubGl0ZXJhbHMgPSBsaXRlcmFscztcbiAqICAgICB9KTtcbiAqXG4gKiAgIHBvSTE4blNlcnZpY2UuZ2V0TGl0ZXJhbHMoe2NvbnRleHQ6ICdjcm0nLCBsaXRlcmFsczogWydhZGQnLCAncmVtb3ZlJ119KVxuICogICAgIC5zdWJzY3JpYmUoKGxpdGVyYWxzKSA9PiB7XG4gKiAgICAgICB0aGlzLmxpdGVyYWxzQ3JtID0gbGl0ZXJhbHM7XG4gKiAgICAgfSk7XG4gKlxuICogICBwb0kxOG5TZXJ2aWNlLmdldExpdGVyYWxzKHtsYW5ndWFnZTogJ2VuLXVzJ30pXG4gKiAgICAgLnN1YnNjcmliZSgobGl0ZXJhbHMpID0+IHtcbiAqICAgICAgIHRoaXMubGl0ZXJhbHNFbiA9IGxpdGVyYWxzO1xuICogICAgIH0pO1xuICogfVxuICogYGBgXG4gKlxuICogUGFyYSBhcHJlc2VudGFyIGFzIGxpdGVyYWlzIGNhcHR1cmFkYXMgYWNpbWEgbm8gSFRNTCBkbyBjb21wb25lbnRlLCBkZXZlLXNlIHV0aWxpemFyIG9cbiAqIHNlZ3VpbnRlIGPDs2RpZ286XG4gKlxuICogPHByZSBuZ05vbkJpbmRhYmxlPlxuICoge3sgbGl0ZXJhbHM/LmFkZCB9fVxuICoge3sgbGl0ZXJhbHM/LnJlbW92ZSB9fVxuICogPC9wcmU+XG4gKlxuICogQ2FzbyBhcyBsaXRlcmFpcyBjb250ZW5oYW0gdmFyacOhdmVpcyBxdWUgcHJlY2lzZW0gc2VyIHN1YnN0aXR1w61kYXMsIHBvZGUtc2UgdXRpbGl6YXIgbyAqcGlwZSogYHBvSTE4bmAuXG4gKiDDiSBwb3Nzw612ZWwgaW5mb3JtYXIgcHJvcHJpZWRhZGVzIGRvIGNvbXBvbmVudGUgY29tbyBgbmFtZWAgZSBgbmlja25hbWVgIG91XG4gKiBpbmZvcm1hciBvIHZhbG9yIGRpcmV0YW1lbnRlIGNvbSBcIlwiIG91IG7Dum1lcm8sIGNvbmZvcm1lIG8gZXhlbXBsbyBhYmFpeG86XG4gKlxuICogPHByZSBuZ05vbkJpbmRhYmxlPlxuICoge3sgbGl0ZXJhbHM/LnBlb3BsZSB8IHBvSTE4bjpbMTIwXSB9fVxuICoge3sgbGl0ZXJhbHM/LmdyZWV0aW5nIHwgcG9JMThuOltuYW1lLCBuaWNrbmFtZV0gfX1cbiAqIHt7IGxpdGVyYWxzPy5ncmVldGluZyB8IHBvSTE4bjpbXCJCcmFkXCIsIFwiR3JlZW5cIl0gfX1cbiAqIDwvcHJlPlxuICpcbiAqID4gw4kgaW1wb3J0YW50ZSBvIHVzbyBkbyBvcGVyYWRvciBgP2AgKEVsdmlzKSBwYXJhIGV2aXRhciBlcnJvcyBlbnF1YW50byBhcyBsaXRlcmFpcyBuw6NvIGZvcmVtIGNhcnJlZ2FkYXMuXG4gKlxuICogIyMjIFRlc3RlIHVuaXTDoXJpb1xuICpcbiAqIEFiYWl4byBzZWd1ZSB1bSBleGVtcGxvIGRlICpzZXR1cCogaW5pY2lhbCBkZSB0ZXN0ZSB1bml0w6FyaW8gZG8gKkFwcENvbXBvbmVudCogcXVlIHV0aWxpemEgbyBgUG9JMThuU2VydmljZWA6XG4gKlxuICogYGBgXG4gKiBpbXBvcnQgeyBhc3luYywgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG4gKiBpbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnO1xuICpcbiAqIGltcG9ydCB7IFBvSTE4bk1vZHVsZSB9IGZyb20gJ0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpJztcbiAqXG4gKiBpbXBvcnQgeyBBcHBDb21wb25lbnQgfSBmcm9tICcuL2FwcC5jb21wb25lbnQnO1xuICpcbiAqIGRlc2NyaWJlKCdBcHBDb21wb25lbnQnLCAoKSA9PiB7XG4gKiAgIGNvbnN0IGFub3RoZXJQVCA9IHtcbiAqICAgICB0ZXh0OiAndGV4dG8nLFxuICogICAgIGFkZDogJ2FkaWNpb25hcicsXG4gKiAgICAgcmVtb3ZlOiAncmVtb3ZlcidcbiAqICAgfTtcbiAqXG4gKiAgIGNvbnN0IGdlbmVyYWxQVCA9IHtcbiAqICAgICB0ZXh0OiAndGV4dG8nLFxuICogICAgIGFkZDogJ2FkaWNpb25hcicsXG4gKiAgICAgcmVtb3ZlOiAncmVtb3ZlcidcbiAqICAgfTtcbiAqXG4gKiAgIGNvbnN0IGNvbmZpZyA9IHtcbiAqICAgICBkZWZhdWx0OiB7XG4gKiAgICAgICBsYW5ndWFnZTogJ3B0LUJSJyxcbiAqICAgICAgIGNvbnRleHQ6ICdnZW5lcmFsJyxcbiAqICAgICAgIGNhY2hlOiBmYWxzZVxuICogICAgIH0sXG4gKiAgICAgY29udGV4dHM6IHtcbiAqICAgICAgIGdlbmVyYWw6IHtcbiAqICAgICAgICAgJ3B0LWJyJzogZ2VuZXJhbFBUXG4gKiAgICAgICB9LFxuICogICAgICAgYW5vdGhlcjoge1xuICogICAgICAgICAncHQtYnInOiBhbm90aGVyUFRcbiAqICAgICAgIH1cbiAqICAgICB9XG4gKiAgIH07XG4gKlxuICogICBiZWZvcmVFYWNoKGFzeW5jKCgpID0+IHtcbiAqICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICogICAgICAgZGVjbGFyYXRpb25zOiBbXG4gKiAgICAgICAgIEFwcENvbXBvbmVudFxuICogICAgICAgXSxcbiAqICAgICAgIGltcG9ydHM6IFtcbiAqICAgICAgICAgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsXG4gKiAgICAgICAgIFBvSTE4bk1vZHVsZS5jb25maWcoY29uZmlnKVxuICogICAgICAgXVxuICogICAgIH0pLmNvbXBpbGVDb21wb25lbnRzKCk7XG4gKiAgIH0pKTtcbiAqXG4gKiAgIGl0KCdzaG91bGQgY3JlYXRlIHRoZSBhcHAnLCBhc3luYygoKSA9PiB7XG4gKiAgICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KEFwcENvbXBvbmVudCk7XG4gKiAgICAgY29uc3QgYXBwID0gZml4dHVyZS5kZWJ1Z0VsZW1lbnQuY29tcG9uZW50SW5zdGFuY2U7XG4gKlxuICogICAgIGV4cGVjdChhcHApLnRvQmVUcnV0aHkoKTtcbiAqICAgfSkpO1xuICpcbiAqIH0pO1xuICogYGBgXG4gKi9cblxuZXhwb3J0IGNsYXNzIFBvSTE4bkJhc2VTZXJ2aWNlIHtcblxuICBwcml2YXRlIHZhckkxOG46IGFueSA9IHt9O1xuXG4gIHByaXZhdGUgY29udGV4dERlZmF1bHQ6IHN0cmluZztcblxuICBwcml2YXRlIHVzZUNhY2hlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBzZXJ2aWNlc0NvbnRleHQ6IGFueSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoSTE4Tl9DT05GSUcpIHByaXZhdGUgY29uZmlnPzogUG9JMThuQ29uZmlnLFxuICAgIEBJbmplY3QoSHR0cENsaWVudCkgcHJpdmF0ZSBodHRwPzogSHR0cENsaWVudCxcbiAgICBwcml2YXRlIGxhbmd1YWdlU2VydmljZT86IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XG5cbiAgICB0aGlzLnNldENvbmZpZyhjb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIDxhIGlkPVwiZ2V0LWxhbmd1YWdlXCI+PC9hPlxuICAgKiBNw6l0b2RvIHF1ZSByZXRvcm5hIG8gaWRpb21hIHBhZHLDo28gYXRpdm8uXG4gICAqXG4gICAqIEEgYnVzY2EgZGVzdGUgaWRpb21hIHBlbG8gbcOpdG9kbyBzZXLDoSBmZWl0YSBuYSBzZWd1aW50ZSBvcmRlbTpcbiAgICpcbiAgICogICAxIC0gbyBpZGlvbWEgcXVlIGZvaSBhcm1hemVuYWRvIG5vICpsb2NhbFN0b3JhZ2UqLCBhdHJhdsOpcyBkbyBtw6l0b2RvIFtgc2V0TGFuZ3VhZ2UoKWBdKGRvY3VtZW50YXRpb24vcG8taTE4biNzZXRMYW5ndWFnZSkuXG4gICAqXG4gICAqICAgMiAtIG8gdmFsb3IgaW5zZXJpZG8gbm8gbcOzZHVsbyBkbyBpMThuIGF0cmF2w6lzIGRvIHBhcsOibWV0cm8gYGNvbmZpZ2AsIHNlbmRvIG8gaWRpb21hIGluc2VyaWRvIG5hIHByb3ByaWVkYWRlXG4gICAqIGBsYW5ndWFnZWAgZGEgaW50ZXJmYWNlIFtgUG9JMThuQ29uZmlnRGVmYXVsdGBdKGRvY3VtZW50YXRpb24vcG8taTE4biNwb0kxOG5Db25maWdEZWZhdWx0KS5cbiAgICpcbiAgICogICAzIC0gbyBpZGlvbWEgZG8gbmF2ZWdhZG9yIHV0aWxpemFkby5cbiAgICpcbiAgICogPiBDYXNvIG8gaWRpb21hIGRvIG5hdmVnYWRvciBuw6NvIHNlamEgc3Vwb3J0YWRvIHBlbG8gUE8gKGBwdGAsIGBlbmAgb3UgYGVzYCksIHNlcsOhIHJldG9ybmFkbyB2YWxvciBgcHRgLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBzaWdsYSBkbyBpZGlvbWEgcGFkcsOjby5cbiAgICovXG4gIGdldExhbmd1YWdlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLmdldExhbmd1YWdlKCk7XG4gIH1cblxuICAvKipcbiAgICogTcOpdG9kbyBxdWUgcmV0b3JuYSBvIGlkaW9tYSBwYWRyw6NvIGF0aXZvLCBjb20gc29tZW50ZSBhIGFicmV2aWHDp8OjbyBkbyBpZGlvbWEgKGR1YXMgcHJpbWVpcmFzIGxldHJhcykuXG4gICAqIFBvciBleGVtcGxvOiBcInB0XCIgb3UgXCJlc1wiLlxuICAgKlxuICAgKiBBIGJ1c2NhIGRlc3RlIGlkaW9tYSDDqSBiYXNlYWRhIG5vIG3DqXRvZG8gWyoqZ2V0TGFuZ3VhZ2UoKSoqXSgvZG9jdW1lbnRhdGlvbi9wby1pMThuI2dldC1sYW5ndWFnZSkuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IHNpZ2xhIGRvIGlkaW9tYSBwYWRyw6NvLlxuICAgKi9cbiAgZ2V0U2hvcnRMYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG4gIH1cblxuICAvKipcbiAgICogPGEgaWQ9XCJzZXRMYW5ndWFnZVwiPjwvYT5cbiAgICogTcOpdG9kbyBwYXJhIGFsdGVyYXIgbyBpZGlvbWEgcGFkcsOjbyBkbyBtw7NkdWxvIGRvIGkxOG4uXG4gICAqXG4gICAqIEFvIHV0aWxpemFyIGVzdGUgbcOpdG9kbywgbyBpZGlvbWEgZmljYXLDoSBncmF2YWRvIG5vIGFybWF6ZW5hbWVudG8gbG9jYWwgZG8gbmF2ZWdhZG9yLCBxdWUgc2Vyw6EgdXRpbGl6YWRvIHBlbG9cbiAgICogc2VydmnDp28gZG8gYGkxOG5gIHBhcmEgYnVzY2FyIGFzIGxpdGVyYWlzIG5vIGlkaW9tYSBwYWRyw6NvLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2UgU2lnbGEgZG8gaWRpb21hLlxuICAgKlxuICAgKiBFc3RhIHNpZ2xhIGRldmUgc2VyIGNvbXBvc3RhIHBvciBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gaWRpb21hLFxuICAgKiBwb2RlbmRvIHNlciBhZGljaW9uYWRvIG91dHJhcyBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gcGHDrXMsIHBvciBleGVtcGxvOiBgcHRgLCBgcHQtQlJgLCBgcHQtYnJgLCBgZW5gIG91IGBlbi1VU2AuXG4gICAqXG4gICAqID4gQ2FzbyBzZWphIGluZm9ybWFkbyB1bSB2YWxvciBkaWZlcmVudGUgZGVzdGUgcGFkcsOjbywgbyBtZXNtbyBzZXLDoSBpZ25vcmFkby5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSByZWxvYWQgSW5kaWNhIHNlIGEgcMOhZ2luYSBhdHVhbCBwb2RlcsOhIHNlciByZWNhcnJlZ2FkYSBhcMOzcyBhIGFsdGVyYcOnw6NvIGRvIGlkaW9tYS5cbiAgICpcbiAgICogRXN0ZSByZWN1cnNvIHBvZGUgc2VyIMO6dGlsIHBhcmEgb3MgdXN1w6FyaW9zIHF1ZSB1dGlsaXphbSBvIG3DqXRvZG8gYGdldExpdGVyYWxzKClgIGRvIHNlcnZpw6dvIGRvIGkxOG4gcGFyYSBwb2RlclxuICAgKiBidXNjYXIgbm92YW1lbnRlIGFzIGxpdGVyYWlzIG5vIG5vdm8gaWRpb21hIGNvbmZpZ3VyYWRvLlxuICAgKi9cbiAgc2V0TGFuZ3VhZ2UobGFuZ3VhZ2U6IHN0cmluZywgcmVsb2FkPzogYm9vbGVhbik6IHZvaWQge1xuXG4gICAgaWYgKCFpc0xhbmd1YWdlKGxhbmd1YWdlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubGFuZ3VhZ2VTZXJ2aWNlLnNldExhbmd1YWdlKGxhbmd1YWdlKTtcblxuICAgIGlmIChyZWxvYWQpIHtcbiAgICAgIHJlbG9hZEN1cnJlbnRQYWdlKCk7XG4gICAgfVxuXG4gIH1cblxuICBwcml2YXRlIHNldENvbmZpZyhjb25maWc6IFBvSTE4bkNvbmZpZykge1xuICAgIC8vIFNldGEgYXMgY29uZmlndXJhw6fDtWVzIHBhZHLDtWVzIGRlZmluaWRhcyBubyBpbXBvcnRhw6fDo28gZG8gbcOzZHVsb1xuICAgIGlmIChjb25maWdbJ2RlZmF1bHQnXSkge1xuXG4gICAgICB0aGlzLmxhbmd1YWdlU2VydmljZS5zZXRMYW5ndWFnZURlZmF1bHQoY29uZmlnWydkZWZhdWx0J11bJ2xhbmd1YWdlJ10pO1xuXG4gICAgICB0aGlzLmNvbnRleHREZWZhdWx0ID0gKGNvbmZpZ1snZGVmYXVsdCddWydjb250ZXh0J10pID8gY29uZmlnWydkZWZhdWx0J11bJ2NvbnRleHQnXSA6ICcnO1xuICAgICAgdGhpcy51c2VDYWNoZSA9IChjb25maWdbJ2RlZmF1bHQnXVsnY2FjaGUnXSkgPyBjb25maWdbJ2RlZmF1bHQnXVsnY2FjaGUnXSA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENhcnJlZ2EgYSBsaXN0YSBkb3MgY29udGV4dG9zIGUgYXMgY29udGFudGVzIGluZm9ybWFkYXNcbiAgICBpZiAoY29uZmlnWydjb250ZXh0cyddKSB7XG4gICAgICB0aGlzLnNldFZhckkxOG4oY29uZmlnWydjb250ZXh0cyddKTtcblxuICAgICAgLy8gU2UgbmVuaHVtIGNvbnRleHRvIGZvaSBkZWZpbmlkbyBjb21vIHBhZHLDo28sXG4gICAgICAvLyBlbnTDo28gZGVmaW5lIG8gcHJpbWVpcm8gY29udGV4dG9cbiAgICAgIGlmICghdGhpcy5jb250ZXh0RGVmYXVsdCkge1xuICAgICAgICBmb3IgKGNvbnN0IGNvbnRleHQgaW4gY29uZmlnWydjb250ZXh0cyddKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY29uZmlnWydjb250ZXh0cyddLmhhc093blByb3BlcnR5KGNvbnRleHQpKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHREZWZhdWx0ID0gY29udGV4dDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldExpdGVyYWxzKG9wdGlvbnM6IFBvSTE4bkxpdGVyYWxzID0ge30pOiBPYnNlcnZhYmxlPG9iamVjdD4ge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gb3B0aW9uc1snbGFuZ3VhZ2UnXSA/IG9wdGlvbnNbJ2xhbmd1YWdlJ10udG9Mb3dlckNhc2UoKSA6IHRoaXMuZ2V0TGFuZ3VhZ2UoKTtcbiAgICBjb25zdCBjb250ZXh0ID0gKG9wdGlvbnNbJ2NvbnRleHQnXSkgPyBvcHRpb25zWydjb250ZXh0J10gOiB0aGlzLmNvbnRleHREZWZhdWx0O1xuICAgIGNvbnN0IGxpdGVyYWxzOiBBcnJheTxzdHJpbmc+ID0gKG9wdGlvbnNbJ2xpdGVyYWxzJ10pID8gb3B0aW9uc1snbGl0ZXJhbHMnXSA6IFtdO1xuXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICAgIGlmICh0aGlzLnNlcnZpY2VzQ29udGV4dFtjb250ZXh0XSkge1xuICAgICAgICAvLyBGYXogbyBwcm9jZXNzbyBkZSBidXNjYSBkZSB1bSBjb250ZXh0byBxdWUgY29udMOpbSBzZXJ2acOnb1xuICAgICAgICB0aGlzLmdldExpdGVyYWxzRnJvbUNvbnRleHRTZXJ2aWNlKGxhbmd1YWdlLCBjb250ZXh0LCBsaXRlcmFscywgb2JzZXJ2ZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRmF6IG8gcHJvY2Vzc28gZGUgYnVzY2EgZGUgdW0gY29udGV4dG8gcXVlIHV0aWxpemEgY29uc3RhbnRlXG4gICAgICAgIHRoaXMuZ2V0TGl0ZXJhbHNGcm9tQ29udGV4dENvbnN0YW50KGxhbmd1YWdlLCBjb250ZXh0LCBsaXRlcmFscywgb2JzZXJ2ZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy8gUHJvY2Vzc28gZGUgYnVzY2EgZGUgdW0gY29udGV4dG8gcXVlIGNvbnTDqW0gc2VydmnDp28uXG4gIC8vICAgIDEgLSBQcm9jdXJhIG5hIHZhcmnDoXZlbCBJMThuIGRlc3RlIHNlcnZpw6dvXG4gIC8vICAgIDIgLSBQcm9jdXJhIG5vIGxvY2FsIHN0b3JhZ2UgKFNlIG8gY2FjaGUgZXN0aXZlciBkZWZpbmlkbyBjb21vIHRydWUgbmEgY29uZmlndXJhw6fDo28gZG8gbcOzZHVsbylcbiAgLy8gICAgMyAtIERpc3BhcmEgbyBzZXJ2acOnbywgbWVzbW8gcXVlIGrDoSB0ZW5oYSBlbmNvbnRyYWRvIG5vIGxvY2FsIHN0b3JhZ2UsIHBhcmEgZ2FyYW50aXIgYSBhdHVhbGl6YcOnw6NvXG4gIC8vICAgIDQgLSBTZSBuZW5odW1hIGxpdGVyYWwgZm9yIGVuY29udHJhZGEsIGVudMOjbyBidXNjYSBlbSBwdC1iclxuICBwcml2YXRlIGdldExpdGVyYWxzRnJvbUNvbnRleHRTZXJ2aWNlKGxhbmd1YWdlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWxzOiBBcnJheTxzdHJpbmc+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyOiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zOiBhbnkgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZUFsdGVybmF0aXZlOiBzdHJpbmcgPSBudWxsKSB7XG5cbiAgICAvLyBJZGlvbWEgdXNhZG8gcGFyYSB0ZW50YXIgYnVzY2FyIGFzIGxpdGVyYWlzIGZhbHRhbnRlc1xuICAgIGNvbnN0IGxhbmd1YWdlU2VhcmNoID0gKGxhbmd1YWdlQWx0ZXJuYXRpdmUpID8gbGFuZ3VhZ2VBbHRlcm5hdGl2ZSA6IGxhbmd1YWdlO1xuXG4gICAgdHJhbnNsYXRpb25zID0gdGhpcy5tZXJnZU9iamVjdCh0cmFuc2xhdGlvbnMsIHRoaXMuc2VhcmNoSW5WYXJJMThuKGxhbmd1YWdlU2VhcmNoLCBjb250ZXh0LCBsaXRlcmFscykpO1xuXG4gICAgaWYgKHRoaXMuY291bnRPYmplY3QodHJhbnNsYXRpb25zKSA+IDApIHtcbiAgICAgIG9ic2VydmVyLm5leHQodHJhbnNsYXRpb25zKTtcbiAgICB9XG5cbiAgICAvLyByZWFsaXphIGEgYnVzY2Egbm8gbG9jYWxTdG9yYWdlIGUgZW0gc2VndWlkYSBubyBzZXJ2acOnb1xuICAgIHRoaXMuZ2V0TGl0ZXJhbHNMb2NhbFN0b3JhZ2VBbmRDYWNoZShsYW5ndWFnZVNlYXJjaCwgY29udGV4dCwgbGl0ZXJhbHMsIG9ic2VydmVyLCB0cmFuc2xhdGlvbnMsIGxhbmd1YWdlQWx0ZXJuYXRpdmUpO1xuICB9XG5cbiAgLy8gUHJvY3VyYSBubyBsb2NhbCBzdG9yYWdlIGUgZW0gc2VndWlkYSBubyBzZXJ2acOnb1xuICAvLyBDYXNvIG7Do28gZW5jb250cmUgbmVtIG5vIHNlcnZpw6dvLCByZWNvbWXDp2EgYSBidXNjYSBlbSBwdC1iclxuICBwcml2YXRlIGdldExpdGVyYWxzTG9jYWxTdG9yYWdlQW5kQ2FjaGUobGFuZ3VhZ2U6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpdGVyYWxzOiBBcnJheTxzdHJpbmc+LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXI6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uczogYW55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VBbHRlcm5hdGl2ZTogc3RyaW5nID0gbnVsbCkge1xuXG4gICAgY29uc3QgbGFuZ3VhZ2VTZWFyY2ggPSAobGFuZ3VhZ2VBbHRlcm5hdGl2ZSkgPyBsYW5ndWFnZUFsdGVybmF0aXZlIDogbGFuZ3VhZ2U7XG4gICAgbGV0IHRyYW5zbGF0aW9uVGVtcDtcbiAgICAvLyBWZXJpZmljYSBzZSB1c2EgY2FjaGVcbiAgICBpZiAodGhpcy51c2VDYWNoZSkge1xuICAgICAgdHJhbnNsYXRpb25UZW1wID0gdGhpcy5zZWFyY2hJbkxvY2FsU3RvcmFnZShsYW5ndWFnZVNlYXJjaCwgY29udGV4dCwgbGl0ZXJhbHMpO1xuICAgICAgaWYgKHRoaXMuY291bnRPYmplY3QodHJhbnNsYXRpb25UZW1wKSA+IDApIHtcbiAgICAgICAgdGhpcy51cGRhdGVWYXJJMThuKGxhbmd1YWdlLCBjb250ZXh0LCB0cmFuc2xhdGlvblRlbXApO1xuICAgICAgICB0cmFuc2xhdGlvbnMgPSB0aGlzLm1lcmdlT2JqZWN0KHRyYW5zbGF0aW9uVGVtcCwgdHJhbnNsYXRpb25zKTtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cmFuc2xhdGlvbnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEJ1c2NhIGRvIFNlcnZpw6dvXG4gICAgdGhpcy5nZXRIdHRwU2VydmljZSh0aGlzLnNlcnZpY2VzQ29udGV4dFtjb250ZXh0XSwgbGFuZ3VhZ2VTZWFyY2gsIGxpdGVyYWxzKVxuICAgICAgLnN1YnNjcmliZShcbiAgICAgICAgcmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVMb2NhbFN0b3JhZ2UobGFuZ3VhZ2UsIGNvbnRleHQsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFySTE4bihsYW5ndWFnZSwgY29udGV4dCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgdHJhbnNsYXRpb25UZW1wID0gdGhpcy5zZWFyY2hJblZhckkxOG4obGFuZ3VhZ2UsIGNvbnRleHQsIGxpdGVyYWxzKTtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9ucyA9IHRoaXMubWVyZ2VPYmplY3QodHJhbnNsYXRpb25UZW1wLCB0cmFuc2xhdGlvbnMpO1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cmFuc2xhdGlvbnMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNlIG7Do28gZW5jb250cm91IHRvZGFzIGFzIGxpdGVyYWlzIHBlc3F1aXNhZGFzIG5vIGlkaW9tYVxuICAgICAgICAgIC8vIEVudMOjbyByZWZheiBvIHByb2Nlc3NvIHByb2N1cmFuZG8gZW0gcG9ydHVndcOqc1xuICAgICAgICAgIGlmIChsaXRlcmFscy5sZW5ndGggPiB0aGlzLmNvdW50T2JqZWN0KHRyYW5zbGF0aW9ucykpIHtcbiAgICAgICAgICAgIGlmIChsYW5ndWFnZUFsdGVybmF0aXZlID09PSAncHQtYnInKSB7XG4gICAgICAgICAgICAgIC8vIFNlIG7Do28gZW5jb250cm91IG5lbSBlbSBwb3J0dWd1w6pzLCBlbnTDo28gcmV0b3JuYSBvIG5vbWUgZGFzIGxpdGVyYWlzXG4gICAgICAgICAgICAgIHRyYW5zbGF0aW9ucyA9IHRoaXMuY29tcGxldGVGYXVsdExpdGVyYWxzKGxhbmd1YWdlLCBjb250ZXh0LCBsaXRlcmFscywgdHJhbnNsYXRpb25zKTtcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVMb2NhbFN0b3JhZ2UobGFuZ3VhZ2UsIGNvbnRleHQsIHRyYW5zbGF0aW9ucyk7XG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlVmFySTE4bihsYW5ndWFnZSwgY29udGV4dCwgdHJhbnNsYXRpb25zKTtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cmFuc2xhdGlvbnMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5nZXRMaXRlcmFsc0Zyb21Db250ZXh0U2VydmljZShsYW5ndWFnZSwgY29udGV4dCwgbGl0ZXJhbHMsIG9ic2VydmVyLCB0cmFuc2xhdGlvbnMsICdwdC1icicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gIH1cblxuICAvLyBQcm9jdXJhIHBlbGEgbGlzdGEgZGUgbGl0ZXJhaXNcbiAgLy8gU2UgbsOjbyBlbmNvbnRyYXIgdG9kYXMsIHByb2N1cmEgZW0gcHQtYnJcbiAgcHJpdmF0ZSBnZXRMaXRlcmFsc0Zyb21Db250ZXh0Q29uc3RhbnQobGFuZ3VhZ2U6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXRlcmFsczogQXJyYXk8c3RyaW5nPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXI6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb25zOiBhbnkgPSB7fSkge1xuXG4gICAgdHJhbnNsYXRpb25zID0gdGhpcy5tZXJnZU9iamVjdCh0cmFuc2xhdGlvbnMsIHRoaXMuc2VhcmNoSW5WYXJJMThuKGxhbmd1YWdlLCBjb250ZXh0LCBsaXRlcmFscykpO1xuICAgIGlmICh0aGlzLmNvdW50T2JqZWN0KHRyYW5zbGF0aW9ucykgPiAwKSB7XG4gICAgICBvYnNlcnZlci5uZXh0KHRyYW5zbGF0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gU2UgZm9pIHBlc3F1aXNhZG8gcG9yIGxpdGVyYWlzXG4gICAgaWYgKGxpdGVyYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFNlIG7Do28gZW5jb250cm91IHRvZGFzIGFzIGxpdGVyYWlzIHBlc3F1aXNhZGFzIG5vIGlkaW9tYSwgcHJvY3VyYSBlbSBwb3J0dWd1w6pzXG4gICAgICBpZiAobGl0ZXJhbHMubGVuZ3RoID4gdGhpcy5jb3VudE9iamVjdCh0cmFuc2xhdGlvbnMpKSB7XG4gICAgICAgIGlmIChsYW5ndWFnZSA9PT0gJ3B0LWJyJykge1xuICAgICAgICAgIC8vIFNlIG7Do28gZW5jb250cm91IG5lbSBlbSBwb3J0dWd1w6pzLCBlbnTDo28gcmV0b3JuYSBvIG5vbWUgZGFzIGxpdGVyYWlzXG4gICAgICAgICAgdHJhbnNsYXRpb25zID0gdGhpcy5jb21wbGV0ZUZhdWx0TGl0ZXJhbHMobGFuZ3VhZ2UsIGNvbnRleHQsIGxpdGVyYWxzLCB0cmFuc2xhdGlvbnMpO1xuICAgICAgICAgIG9ic2VydmVyLm5leHQodHJhbnNsYXRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmdldExpdGVyYWxzRnJvbUNvbnRleHRDb25zdGFudCgncHQtYnInLCBjb250ZXh0LCBsaXRlcmFscywgb2JzZXJ2ZXIsIHRyYW5zbGF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2UgbsOjbyBlbmNvbnRyYXIgbmVuaHVtYSBsaXRlcmFsLCBwcm9jdXJhIGVtIHBvcnR1Z3XDqnNcbiAgICAgIGlmICh0aGlzLmNvdW50T2JqZWN0KHRyYW5zbGF0aW9ucykgPT09IDAgJiYgbGFuZ3VhZ2UgIT09ICdwdC1icicpIHtcbiAgICAgICAgdGhpcy5nZXRMaXRlcmFsc0Zyb21Db250ZXh0Q29uc3RhbnQoJ3B0LWJyJywgY29udGV4dCwgbGl0ZXJhbHMsIG9ic2VydmVyLCB0cmFuc2xhdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBjYXNvIG7Do28gaW5mb3JtYXIgbGl0ZXJhaXMgZSBuw6NvIGhvdXZlciB0cmFkdcOnw6NvXG4gICAgICBvYnNlcnZlci5uZXh0KHRyYW5zbGF0aW9ucyk7XG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEJ1c2NhIHBlbGFzIGxpdGVyYWlzIG5vIGxvY2FsIHN0b3JhZ2VcbiAgcHJpdmF0ZSBzZWFyY2hJbkxvY2FsU3RvcmFnZShsYW5ndWFnZTogc3RyaW5nLCBjb250ZXh0OiBzdHJpbmcsIGxpdGVyYWxzOiBBcnJheTxzdHJpbmc+KTogYW55IHtcbiAgICBjb25zdCB0cmFuc2xhdGlvbnM6IGFueSA9IHt9O1xuXG4gICAgaWYgKGxpdGVyYWxzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGl0ZXJhbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbGl0ZXJhbCA9IGxpdGVyYWxzW2ldO1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxhbmd1YWdlICsgJy0nICsgY29udGV4dCArICctJyArIGxpdGVyYWwpO1xuICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICB0cmFuc2xhdGlvbnNbbGl0ZXJhbF0gPSB0cmFuc2xhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJhbnNsYXRpb25zO1xuICB9XG5cbiAgLy8gQnVzY2EgcGVsYXMgbGl0ZXJhaXMgbmEgdmFyacOhdmVsIGRvIHNlcnZpw6dvXG4gIHByaXZhdGUgc2VhcmNoSW5WYXJJMThuKGxhbmd1YWdlOiBzdHJpbmcsIGNvbnRleHQ6IHN0cmluZywgbGl0ZXJhbHM6IEFycmF5PHN0cmluZz4pOiBhbnkge1xuICAgIGxldCB0cmFuc2xhdGlvbnM6IGFueSA9IHt9O1xuXG4gICAgaWYgKHRoaXMudmFySTE4bltsYW5ndWFnZV0gJiYgdGhpcy52YXJJMThuW2xhbmd1YWdlXVtjb250ZXh0XSkge1xuICAgICAgY29uc3QgY29udGVudCA9IHRoaXMudmFySTE4bltsYW5ndWFnZV1bY29udGV4dF07XG5cbiAgICAgIGlmIChsaXRlcmFscy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIEJ1c2NhIGFzIGxpdGVyYWlzIGRlc2VqYWRhc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpdGVyYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgbGl0ZXJhbCA9IGxpdGVyYWxzW2ldO1xuICAgICAgICAgIGlmIChjb250ZW50Lmhhc093blByb3BlcnR5KGxpdGVyYWwpKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGlvbnNbbGl0ZXJhbF0gPSBjb250ZW50W2xpdGVyYWxdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQXRyaWJ1aSB0b2RhcyBhcyBsaXRlcmFpc1xuICAgICAgICB0cmFuc2xhdGlvbnMgPSB7IC4uLmNvbnRlbnQgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zbGF0aW9ucztcbiAgfVxuXG4gIC8vIEF0dWFsaXphIG8gbG9jYWwgc3RvcmFnZVxuICBwcml2YXRlIHVwZGF0ZUxvY2FsU3RvcmFnZShsYW5ndWFnZTogc3RyaW5nLCBjb250ZXh0OiBzdHJpbmcsIGRhdGE6IGFueSkge1xuICAgIGlmICh0aGlzLnVzZUNhY2hlKSB7XG4gICAgICBmb3IgKGNvbnN0IGxpdGVyYWwgaW4gZGF0YSkge1xuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShsaXRlcmFsKSkge1xuICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGxhbmd1YWdlICsgJy0nICsgY29udGV4dCArICctJyArIGxpdGVyYWwsIGRhdGFbbGl0ZXJhbF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQXR1YWxpemEgYSB2YXJpw6F2ZWwgbG9jYWwgY29tIGFzIGxpdGVyYWlzIGNvbSBvcyBvYmpldG9zIHBhc3NhZG9zIG5hIGNvbmZpZ3VyYcOnw6NvXG4gIHByaXZhdGUgc2V0VmFySTE4bihjb250ZXh0czogYW55KSB7XG4gICAgLy8gUGVyY29ycmUgb3MgY29udGV4dG9zXG4gICAgZm9yIChjb25zdCBjb250ZXh0IGluIGNvbnRleHRzKSB7XG4gICAgICBpZiAoY29udGV4dHMuaGFzT3duUHJvcGVydHkoY29udGV4dCkpIHtcbiAgICAgICAgY29uc3QgY29udGV4dENvbnRlbnQgPSBjb250ZXh0c1tjb250ZXh0XTtcblxuICAgICAgICAvLyBQZXJjb3JyZSBvcyBpZGlvbWFzIGRlbnRybyBkbyBjb250ZXh0b1xuICAgICAgICBmb3IgKGNvbnN0IGxhbmd1YWdlIGluIGNvbnRleHRDb250ZW50KSB7XG4gICAgICAgICAgaWYgKGNvbnRleHRDb250ZW50Lmhhc093blByb3BlcnR5KGxhbmd1YWdlKSkge1xuICAgICAgICAgICAgY29uc3QgbGFuZ3VhZ2VDb250ZW50ID0gY29udGV4dENvbnRlbnRbbGFuZ3VhZ2VdO1xuXG4gICAgICAgICAgICBpZiAobGFuZ3VhZ2UgPT09ICd1cmwnKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2VydmljZXNDb250ZXh0W2NvbnRleHRdID0gbGFuZ3VhZ2VDb250ZW50O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVWYXJJMThuKGxhbmd1YWdlLCBjb250ZXh0LCBsYW5ndWFnZUNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEF0dWFsaXphIGEgdmFyacOhdmVsIGxvY2FsIGNvbSBhcyBsaXRlcmFpcyBpZGlvbWEgZSBjb250ZXh0b1xuICBwcml2YXRlIHVwZGF0ZVZhckkxOG4obGFuZ3VhZ2U6IHN0cmluZywgY29udGV4dDogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbiAgICBsYW5ndWFnZSA9IGxhbmd1YWdlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoIXRoaXMudmFySTE4bltsYW5ndWFnZV0pIHtcbiAgICAgIHRoaXMudmFySTE4bltsYW5ndWFnZV0gPSB7W2NvbnRleHRdOiB7fX07XG4gICAgfVxuICAgIGlmICghdGhpcy52YXJJMThuW2xhbmd1YWdlXVtjb250ZXh0XSkge1xuICAgICAgdGhpcy52YXJJMThuW2xhbmd1YWdlXVtjb250ZXh0XSA9IHt9O1xuICAgIH1cblxuICAgIC8vIENyaWEgb3UgYXR1YWxpemEgbyBjb250ZXh0byBkZW50cm8gZG8gc3RvcmFnZVxuICAgIHRoaXMudmFySTE4bltsYW5ndWFnZV1bY29udGV4dF0gPSB0aGlzLm1lcmdlT2JqZWN0KGRhdGEsIHRoaXMudmFySTE4bltsYW5ndWFnZV1bY29udGV4dF0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRIdHRwU2VydmljZSh1cmw6IHN0cmluZywgbGFuZ3VhZ2U6IHN0cmluZywgbGl0ZXJhbHM6IEFycmF5PHN0cmluZz4pOiBPYnNlcnZhYmxlPG9iamVjdD4ge1xuICAgIGxldCBwYXJhbSA9ICc/bGFuZ3VhZ2U9JyArIGxhbmd1YWdlO1xuICAgIGlmIChsaXRlcmFscy5sZW5ndGggPiAwKSB7XG4gICAgICBwYXJhbSArPSAnJmxpdGVyYWxzPScgKyBsaXRlcmFscy5qb2luKCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIGEgYmFycmEgZmluYWwgZG8gZW5kZXJlw6dvXG4gICAgdXJsID0gKHVybC5sYXN0SW5kZXhPZignLycpID09PSB1cmwubGVuZ3RoIC0gMSkgPyB1cmwuc3Vic3RyKDAsIHVybC5sZW5ndGggLSAxKSA6IHVybDtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCArIHBhcmFtKTtcbiAgfVxuXG4gIC8vIENvbXBsZXRhIGNvbSBvIG5vbWUgZGEgbGl0ZXJhaXMsIGFzIHF1ZSBuw6NvIGZvcmFtIGVuY29udHJhZGFzXG4gIHByaXZhdGUgY29tcGxldGVGYXVsdExpdGVyYWxzKGxhbmd1YWdlOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl0ZXJhbHM6IEFycmF5PHN0cmluZz4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uczogYW55KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXRlcmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGl0ZXJhbCA9IGxpdGVyYWxzW2ldO1xuICAgICAgaWYgKCF0cmFuc2xhdGlvbnNbbGl0ZXJhbF0pIHtcbiAgICAgICAgdHJhbnNsYXRpb25zW2xpdGVyYWxdID0gbGl0ZXJhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zbGF0aW9ucztcbiAgfVxuXG4gIC8vIENvbnRhIG9zIGF0cmlidXRvcyBkbyBvYmpldG9cbiAgcHJpdmF0ZSBjb3VudE9iamVjdChvYmo6IG9iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aDtcbiAgfVxuXG4gIC8vIEZheiBvIG1lcmdlIGRvcyBvYmpldG9zLCBzZW1wcmUgZGFuZG8gcHJlZmVyw6puY2lhIHBhcmEgbyBwcmltZWlybyBvYmpldG8gZGUgcGFyw6JtZXRyb1xuICBwcml2YXRlIG1lcmdlT2JqZWN0KG9ialBlcm1hbmVudDogYW55LCBvYmo6IGFueSkge1xuICAgIHJldHVybiB7IC4uLm9iaiwgLi4ub2JqUGVybWFuZW50IH07XG4gIH1cbn1cbiJdfQ==