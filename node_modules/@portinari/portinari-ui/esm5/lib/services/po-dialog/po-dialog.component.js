import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { browserLanguage, poLocaleDefault } from '../../utils/util';
import { PoDialogType } from './po-dialog.enum';
import { PoModalComponent } from '../../components/po-modal/po-modal.component';
export var poDialogAlertLiteralsDefault = {
    en: { ok: 'Ok' },
    es: { ok: 'Ok' },
    pt: { ok: 'Ok' },
    ru: { ok: 'Ок' }
};
export var poDialogConfirmLiteralsDefault = {
    en: { cancel: 'Cancel', confirm: 'Confirm' },
    es: { cancel: 'Cancelar', confirm: 'Confirmar' },
    pt: { cancel: 'Cancelar', confirm: 'Confirmar' },
    ru: { cancel: 'отменить', confirm: 'подтвердить' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que serve como container do po-dialog.service
 */
var PoDialogComponent = /** @class */ (function () {
    function PoDialogComponent() {
        // Objeto primary do poModal
        this.primaryAction = { label: 'ok', action: function () { } };
    }
    PoDialogComponent.prototype.ngOnDestroy = function () {
        this.closeSubscription.unsubscribe();
    };
    PoDialogComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.closeSubscription = this.poModal.onXClosed.subscribe(function (close) { return _this.destroy(); });
    };
    // Fecha o poModal
    PoDialogComponent.prototype.close = function () {
        this.poModal.close();
        this.destroy();
    };
    PoDialogComponent.prototype.destroy = function () {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    };
    // Insere os valores recebidos de this.open para o poModal
    PoDialogComponent.prototype.configDialog = function (primaryLabel, primaryAction, secondaryLabel, secondaryAction) {
        var _this = this;
        this.primaryAction = {
            label: primaryLabel,
            action: function () {
                if (primaryAction) {
                    primaryAction();
                }
                _this.close();
            }
        };
        if (secondaryLabel) {
            this.secondaryAction = {
                label: secondaryLabel,
                action: function () {
                    if (secondaryAction) {
                        secondaryAction();
                    }
                    _this.close();
                }
            };
        }
    };
    // Insere os valores recebidos de po-dialog.service de acordo com o tipo de diálago solicitado
    PoDialogComponent.prototype.open = function (dialogOptions, dialogType, componentRef) {
        this.title = dialogOptions.title;
        this.message = dialogOptions.message;
        this.componentRef = componentRef;
        this.setDialogLiterals(dialogOptions, dialogType);
        switch (dialogType) {
            case PoDialogType.Confirm: {
                this.configDialog(this.literalsConfirm.confirm, dialogOptions.confirm, this.literalsConfirm.cancel, dialogOptions.cancel);
                break;
            }
            case PoDialogType.Alert: {
                this.configDialog(this.literalsAlert.ok, dialogOptions.ok);
                break;
            }
        }
        this.poModal.open();
    };
    PoDialogComponent.prototype.setDialogLiterals = function (dialogOptions, dialogType) {
        var alertLiterals = poDialogAlertLiteralsDefault;
        var confirmLiterals = poDialogConfirmLiteralsDefault;
        var literals = dialogOptions.literals;
        if (dialogType === PoDialogType.Alert) {
            this.literalsAlert = tslib_1.__assign({}, alertLiterals[poLocaleDefault], alertLiterals[browserLanguage()], literals);
        }
        else {
            this.literalsConfirm = tslib_1.__assign({}, confirmLiterals[poLocaleDefault], confirmLiterals[browserLanguage()], literals);
        }
    };
    tslib_1.__decorate([
        ViewChild(PoModalComponent, { static: true }),
        tslib_1.__metadata("design:type", PoModalComponent)
    ], PoDialogComponent.prototype, "poModal", void 0);
    PoDialogComponent = tslib_1.__decorate([
        Component({
            template: "<po-modal\n  [p-title]=\"title\"\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\">\n  {{ message }}\n</po-modal>\n"
        })
    ], PoDialogComponent);
    return PoDialogComponent;
}());
export { PoDialogComponent };
//# sourceMappingURL=data:application/json;base64,