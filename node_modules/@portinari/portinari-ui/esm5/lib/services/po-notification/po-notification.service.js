import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { PoComponentInjectorService } from './../po-component-injector/po-component-injector.service';
import { PoNotificationBaseService } from './po-notification-base.service';
import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterComponent } from './po-toaster/po-toaster.component';
import * as i0 from "@angular/core";
import * as i1 from "../po-component-injector/po-component-injector.service";
/**
 * @docsExtends PoNotificationBaseService
 *
 * @example
 *
 * <example name="po-notification-basic" title="Portinari Notification Basic">
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.html"> </file>
 *  <file name="sample-po-notification-basic/sample-po-notification-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-labs" title="Portinari Notification Labs">
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.html"> </file>
 *  <file name="sample-po-notification-labs/sample-po-notification-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-notification-sales" title="Portinari Notification - Sales">
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.html"> </file>
 *  <file name="sample-po-notification-sales/sample-po-notification-sales.component.ts"> </file>
 * </example>
 */
var PoNotificationService = /** @class */ (function (_super) {
    tslib_1.__extends(PoNotificationService, _super);
    function PoNotificationService(poComponentInjector) {
        var _this = _super.call(this) || this;
        _this.poComponentInjector = poComponentInjector;
        return _this;
    }
    PoNotificationService.prototype.createToaster = function (toaster) {
        var _this = this;
        var componentRef = this.poComponentInjector.createComponentInApplication(PoToasterComponent);
        toaster.componentRef = componentRef;
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.configToaster(toaster);
        if (toaster.orientation === PoToasterOrientation.Top) {
            this.stackTop.push(componentRef);
        }
        else {
            this.stackBottom.push(componentRef);
        }
        this.observableOnClose(componentRef);
        if (toaster.action === undefined) {
            setTimeout(function () {
                _this.destroyToaster(componentRef);
            }, toaster.duration);
        }
    };
    PoNotificationService.prototype.destroyToaster = function (toaster) {
        var stack;
        if (toaster.instance.orientation === PoToasterOrientation.Top) {
            stack = this.stackTop;
        }
        else {
            stack = this.stackBottom;
        }
        var index = stack.indexOf(toaster);
        stack.splice(index, 1);
        this.poComponentInjector.destroyComponentInApplication(toaster);
        for (var count = 0; count < stack.length; count++) {
            stack[count].instance.changePosition(count);
        }
    };
    PoNotificationService.prototype.observableOnClose = function (componentRef) {
        var _this = this;
        componentRef.instance.observableOnClose.subscribe(function () {
            _this.destroyToaster(componentRef);
        });
    };
    PoNotificationService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };
    PoNotificationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PoNotificationService_Factory() { return new PoNotificationService(i0.ɵɵinject(i1.PoComponentInjectorService)); }, token: PoNotificationService, providedIn: "root" });
    PoNotificationService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        }),
        tslib_1.__metadata("design:paramtypes", [PoComponentInjectorService])
    ], PoNotificationService);
    return PoNotificationService;
}(PoNotificationBaseService));
export { PoNotificationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9wby1ub3RpZmljYXRpb24vcG8tbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBZ0IsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDOzs7QUFFdkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFLSDtJQUEyQyxpREFBeUI7SUFFbEUsK0JBQW9CLG1CQUErQztRQUFuRSxZQUNFLGlCQUFPLFNBQ1I7UUFGbUIseUJBQW1CLEdBQW5CLG1CQUFtQixDQUE0Qjs7SUFFbkUsQ0FBQztJQUVELDZDQUFhLEdBQWIsVUFBYyxPQUFrQjtRQUFoQyxpQkFxQkM7UUFwQkMsSUFBTSxZQUFZLEdBQXNCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRWxILE9BQU8sQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBRXBDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMvQyxZQUFZLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU3QyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEtBQUssb0JBQW9CLENBQUMsR0FBRyxFQUFFO1lBQ3BELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQ2xDO2FBQU07WUFDTCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUNyQztRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVyQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ2hDLFVBQVUsQ0FBQztnQkFDVCxLQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3BDLENBQUMsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRUQsOENBQWMsR0FBZCxVQUFlLE9BQVk7UUFDekIsSUFBSSxLQUFLLENBQUM7UUFFVixJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxLQUFLLG9CQUFvQixDQUFDLEdBQUcsRUFBRTtZQUM3RCxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUN2QjthQUFNO1lBQ0wsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7U0FDMUI7UUFFRCxJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRXZCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw2QkFBNkIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVoRSxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNqRCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFTyxpREFBaUIsR0FBekIsVUFBMEIsWUFBaUI7UUFBM0MsaUJBSUM7UUFIQyxZQUFZLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQztZQUNoRCxLQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBbER3QywwQkFBMEI7OztJQUZ4RCxxQkFBcUI7UUFIakMsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztpREFHeUMsMEJBQTBCO09BRnhELHFCQUFxQixDQXNEakM7Z0NBdEZEO0NBc0ZDLEFBdERELENBQTJDLHlCQUF5QixHQXNEbkU7U0F0RFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50UmVmLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi8uLi9wby1jb21wb25lbnQtaW5qZWN0b3IvcG8tY29tcG9uZW50LWluamVjdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9Ob3RpZmljYXRpb25CYXNlU2VydmljZSB9IGZyb20gJy4vcG8tbm90aWZpY2F0aW9uLWJhc2Uuc2VydmljZSc7XG5pbXBvcnQgeyBQb1RvYXN0ZXIgfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Ub2FzdGVyT3JpZW50YXRpb24gfSBmcm9tICcuL3BvLXRvYXN0ZXIvcG8tdG9hc3Rlci1vcmllbnRhdGlvbi5lbnVtJztcbmltcG9ydCB7IFBvVG9hc3RlckNvbXBvbmVudCB9IGZyb20gJy4vcG8tdG9hc3Rlci9wby10b2FzdGVyLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvTm90aWZpY2F0aW9uQmFzZVNlcnZpY2VcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1ub3RpZmljYXRpb24tYmFzaWNcIiB0aXRsZT1cIlBvcnRpbmFyaSBOb3RpZmljYXRpb24gQmFzaWNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1iYXNpYy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1iYXNpYy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLWJhc2ljLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLW5vdGlmaWNhdGlvbi1sYWJzXCIgdGl0bGU9XCJQb3J0aW5hcmkgTm90aWZpY2F0aW9uIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1sYWJzL3NhbXBsZS1wby1ub3RpZmljYXRpb24tbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1ub3RpZmljYXRpb24tbGFicy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbm90aWZpY2F0aW9uLXNhbGVzXCIgdGl0bGU9XCJQb3J0aW5hcmkgTm90aWZpY2F0aW9uIC0gU2FsZXNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1zYWxlcy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLXNhbGVzLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLW5vdGlmaWNhdGlvbi1zYWxlcy9zYW1wbGUtcG8tbm90aWZpY2F0aW9uLXNhbGVzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9Ob3RpZmljYXRpb25TZXJ2aWNlIGV4dGVuZHMgUG9Ob3RpZmljYXRpb25CYXNlU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwb0NvbXBvbmVudEluamVjdG9yOiBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBjcmVhdGVUb2FzdGVyKHRvYXN0ZXI6IFBvVG9hc3Rlcik6IHZvaWQge1xuICAgIGNvbnN0IGNvbXBvbmVudFJlZjogQ29tcG9uZW50UmVmPGFueT4gPSB0aGlzLnBvQ29tcG9uZW50SW5qZWN0b3IuY3JlYXRlQ29tcG9uZW50SW5BcHBsaWNhdGlvbihQb1RvYXN0ZXJDb21wb25lbnQpO1xuXG4gICAgdG9hc3Rlci5jb21wb25lbnRSZWYgPSBjb21wb25lbnRSZWY7XG5cbiAgICBjb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb25maWdUb2FzdGVyKHRvYXN0ZXIpO1xuXG4gICAgaWYgKHRvYXN0ZXIub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgdGhpcy5zdGFja1RvcC5wdXNoKGNvbXBvbmVudFJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc3RhY2tCb3R0b20ucHVzaChjb21wb25lbnRSZWYpO1xuICAgIH1cblxuICAgIHRoaXMub2JzZXJ2YWJsZU9uQ2xvc2UoY29tcG9uZW50UmVmKTtcblxuICAgIGlmICh0b2FzdGVyLmFjdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5kZXN0cm95VG9hc3Rlcihjb21wb25lbnRSZWYpO1xuICAgICAgfSwgdG9hc3Rlci5kdXJhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZGVzdHJveVRvYXN0ZXIodG9hc3RlcjogYW55KTogdm9pZCB7XG4gICAgbGV0IHN0YWNrO1xuXG4gICAgaWYgKHRvYXN0ZXIuaW5zdGFuY2Uub3JpZW50YXRpb24gPT09IFBvVG9hc3Rlck9yaWVudGF0aW9uLlRvcCkge1xuICAgICAgc3RhY2sgPSB0aGlzLnN0YWNrVG9wO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFjayA9IHRoaXMuc3RhY2tCb3R0b207XG4gICAgfVxuXG4gICAgY29uc3QgaW5kZXggPSBzdGFjay5pbmRleE9mKHRvYXN0ZXIpO1xuICAgIHN0YWNrLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICB0aGlzLnBvQ29tcG9uZW50SW5qZWN0b3IuZGVzdHJveUNvbXBvbmVudEluQXBwbGljYXRpb24odG9hc3Rlcik7XG5cbiAgICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgc3RhY2subGVuZ3RoOyBjb3VudCsrKSB7XG4gICAgICBzdGFja1tjb3VudF0uaW5zdGFuY2UuY2hhbmdlUG9zaXRpb24oY291bnQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb2JzZXJ2YWJsZU9uQ2xvc2UoY29tcG9uZW50UmVmOiBhbnkpIHtcbiAgICBjb21wb25lbnRSZWYuaW5zdGFuY2Uub2JzZXJ2YWJsZU9uQ2xvc2Uuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuZGVzdHJveVRvYXN0ZXIoY29tcG9uZW50UmVmKTtcbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=