import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { getBrowserLanguage, getShortLanguage, isLanguage, poLocaleDefault, poLocales } from '../../utils/util';
import * as i0 from "@angular/core";
var poDefaultLanguage = 'PO_DEFAULT_LANGUAGE';
var poLocaleKey = 'PO_USER_LOCALE';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço responsável por gerenciar as linguagens da aplicação.
 */
var PoLanguageService = /** @class */ (function () {
    function PoLanguageService() {
    }
    Object.defineProperty(PoLanguageService.prototype, "languageDefault", {
        get: function () {
            return localStorage.getItem(poDefaultLanguage);
        },
        set: function (language) {
            if (language && isLanguage(language)) {
                localStorage.setItem(poDefaultLanguage, language);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @description
     *
     * Método responsável por retornar o idioma ativo.
     *
     * A busca do idioma será feita na seguinte ordem:
     *
     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.
     *
     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido
     * na propriedade `language` da interface `PoI18nConfigDefault`.
     *
     *   3 - o idioma do navegador utilizado.
     *
     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.
     *
     * **Retorno:** `string` com a sigla do idioma ativo.
     */
    PoLanguageService.prototype.getLanguage = function () {
        var language = localStorage.getItem(poLocaleKey) || this.languageDefault || getBrowserLanguage();
        return language && language.toLowerCase();
    };
    /**
     * @description
     *
     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através
     * do parâmetro `config`.
     *
     * **Retorno:** `string` com a sigla do idioma *default*.
     */
    PoLanguageService.prototype.getLanguageDefault = function () {
        return this.languageDefault;
    };
    /**
     * @description
     *
     * Método responsável por retornar a abreviação do idioma ativo na aplicação.
     *
     * @default `pt`
     *
     * **Retorno:** `string` com a sigla abreviada do idioma ativo.
     */
    PoLanguageService.prototype.getShortLanguage = function () {
        var language = this.getLanguage();
        var shortLanguage = getShortLanguage(language);
        return poLocales.includes(shortLanguage) ? shortLanguage : poLocaleDefault;
    };
    /**
     * @description
     *
     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.
     *
     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    PoLanguageService.prototype.setLanguage = function (language) {
        if (!isLanguage(language)) {
            return;
        }
        localStorage.setItem(poLocaleKey, language.toLowerCase());
    };
    /**
     * @description
     *
     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.
     *
     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.
     *
     * @param language sigla do idioma.
     *
     * Esta sigla deve ser composta por duas letras representando o idioma,
     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.
     *
     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.
     */
    PoLanguageService.prototype.setLanguageDefault = function (language) {
        this.languageDefault = language;
    };
    PoLanguageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PoLanguageService_Factory() { return new PoLanguageService(); }, token: PoLanguageService, providedIn: "root" });
    PoLanguageService = tslib_1.__decorate([
        Injectable({
            providedIn: 'root'
        })
    ], PoLanguageService);
    return PoLanguageService;
}());
export { PoLanguageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGFuZ3VhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLFVBQVUsRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBRWhILElBQU0saUJBQWlCLEdBQUcscUJBQXFCLENBQUM7QUFDaEQsSUFBTSxXQUFXLEdBQUcsZ0JBQWdCLENBQUM7QUFFckM7Ozs7OztHQU1HO0FBSUg7SUFBQTtLQXdHQztJQXRHQyxzQkFBSSw4Q0FBZTthQU1uQjtZQUNFLE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pELENBQUM7YUFSRCxVQUFvQixRQUFnQjtZQUNsQyxJQUFJLFFBQVEsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3BDLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDbkQ7UUFDSCxDQUFDOzs7T0FBQTtJQU1EOzs7Ozs7Ozs7Ozs7Ozs7OztPQWlCRztJQUNILHVDQUFXLEdBQVg7UUFDRSxJQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksa0JBQWtCLEVBQUUsQ0FBQztRQUVuRyxPQUFPLFFBQVEsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCw4Q0FBa0IsR0FBbEI7UUFDRSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsNENBQWdCLEdBQWhCO1FBQ0UsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLElBQU0sYUFBYSxHQUFHLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRWpELE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUM7SUFDN0UsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDSCx1Q0FBVyxHQUFYLFVBQVksUUFBZ0I7UUFDMUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN6QixPQUFPO1NBQ1I7UUFFRCxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNILDhDQUFrQixHQUFsQixVQUFtQixRQUFnQjtRQUNqQyxJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQztJQUNsQyxDQUFDOztJQXRHVSxpQkFBaUI7UUFIN0IsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztPQUNXLGlCQUFpQixDQXdHN0I7NEJBekhEO0NBeUhDLEFBeEdELElBd0dDO1NBeEdZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgZ2V0QnJvd3Nlckxhbmd1YWdlLCBnZXRTaG9ydExhbmd1YWdlLCBpc0xhbmd1YWdlLCBwb0xvY2FsZURlZmF1bHQsIHBvTG9jYWxlcyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5jb25zdCBwb0RlZmF1bHRMYW5ndWFnZSA9ICdQT19ERUZBVUxUX0xBTkdVQUdFJztcbmNvbnN0IHBvTG9jYWxlS2V5ID0gJ1BPX1VTRVJfTE9DQUxFJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyByZXNwb25zw6F2ZWwgcG9yIGdlcmVuY2lhciBhcyBsaW5ndWFnZW5zIGRhIGFwbGljYcOnw6NvLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQb0xhbmd1YWdlU2VydmljZSB7XG5cbiAgc2V0IGxhbmd1YWdlRGVmYXVsdChsYW5ndWFnZTogc3RyaW5nKSB7XG4gICAgaWYgKGxhbmd1YWdlICYmIGlzTGFuZ3VhZ2UobGFuZ3VhZ2UpKSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShwb0RlZmF1bHRMYW5ndWFnZSwgbGFuZ3VhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsYW5ndWFnZURlZmF1bHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocG9EZWZhdWx0TGFuZ3VhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIHJlc3BvbnPDoXZlbCBwb3IgcmV0b3JuYXIgbyBpZGlvbWEgYXRpdm8uXG4gICAqXG4gICAqIEEgYnVzY2EgZG8gaWRpb21hIHNlcsOhIGZlaXRhIG5hIHNlZ3VpbnRlIG9yZGVtOlxuICAgKlxuICAgKiAgIDEgLSBvIGlkaW9tYSBxdWUgZm9pIGFybWF6ZW5hZG8gbm8gKmxvY2FsU3RvcmFnZSosIGF0cmF2w6lzIGRvIG3DqXRvZG8gYHNldExhbmd1YWdlKClgIHV0aWxpemFkbyBwZWxvIGkxOG4uXG4gICAqXG4gICAqICAgMiAtIG8gdmFsb3IgaW5zZXJpZG8gbmFzIGNvbmZpZ3VyYcOnw7VlcyBkbyBtw7NkdWxvIGRvIGkxOG4gYXRyYXbDqXMgZG8gcGFyw6JtZXRybyBgY29uZmlnYCwgc2VuZG8gbyBpZGlvbWEgaW5zZXJpZG9cbiAgICogbmEgcHJvcHJpZWRhZGUgYGxhbmd1YWdlYCBkYSBpbnRlcmZhY2UgYFBvSTE4bkNvbmZpZ0RlZmF1bHRgLlxuICAgKlxuICAgKiAgIDMgLSBvIGlkaW9tYSBkbyBuYXZlZ2Fkb3IgdXRpbGl6YWRvLlxuICAgKlxuICAgKiA+IENhc28gbyBpZGlvbWEgZG8gbmF2ZWdhZG9yIG7Do28gc2VqYSBzdXBvcnRhZG8gcGVsbyBQTyAoYHB0YCwgYGVuYCwgYGVzYCBvdSBgcnVgKSwgc2Vyw6EgcmV0b3JuYWRvIHZhbG9yIGBwdGAuXG4gICAqXG4gICAqICoqUmV0b3JubzoqKiBgc3RyaW5nYCBjb20gYSBzaWdsYSBkbyBpZGlvbWEgYXRpdm8uXG4gICAqL1xuICBnZXRMYW5ndWFnZSgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0ocG9Mb2NhbGVLZXkpIHx8IHRoaXMubGFuZ3VhZ2VEZWZhdWx0IHx8IGdldEJyb3dzZXJMYW5ndWFnZSgpO1xuXG4gICAgcmV0dXJuIGxhbmd1YWdlICYmIGxhbmd1YWdlLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciByZXRvcm5hciBvIGlkaW9tYSAqZGVmYXVsdCogZGEgYXBsaWNhw6fDo28gZGVmaW5pZG8gbmFzIGNvbmZpZ3VyYcOnw7VlcyBkbyBtw7NkdWxvIGRvIGkxOG4gYXRyYXbDqXNcbiAgICogZG8gcGFyw6JtZXRybyBgY29uZmlnYC5cbiAgICpcbiAgICogKipSZXRvcm5vOioqIGBzdHJpbmdgIGNvbSBhIHNpZ2xhIGRvIGlkaW9tYSAqZGVmYXVsdCouXG4gICAqL1xuICBnZXRMYW5ndWFnZURlZmF1bHQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5sYW5ndWFnZURlZmF1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciByZXRvcm5hciBhIGFicmV2aWHDp8OjbyBkbyBpZGlvbWEgYXRpdm8gbmEgYXBsaWNhw6fDo28uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBwdGBcbiAgICpcbiAgICogKipSZXRvcm5vOioqIGBzdHJpbmdgIGNvbSBhIHNpZ2xhIGFicmV2aWFkYSBkbyBpZGlvbWEgYXRpdm8uXG4gICAqL1xuICBnZXRTaG9ydExhbmd1YWdlKCk6IHN0cmluZyB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLmdldExhbmd1YWdlKCk7XG4gICAgY29uc3Qgc2hvcnRMYW5ndWFnZSA9IGdldFNob3J0TGFuZ3VhZ2UobGFuZ3VhZ2UpO1xuXG4gICAgcmV0dXJuIHBvTG9jYWxlcy5pbmNsdWRlcyhzaG9ydExhbmd1YWdlKSA/IHNob3J0TGFuZ3VhZ2UgOiBwb0xvY2FsZURlZmF1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE3DqXRvZG8gcGFyYSBzYWx2YXIgbyBpZGlvbWEgZGEgYXBsaWNhw6fDo28gbm8gKnN0b3JhZ2UqLCB1dGlsaXphZG8gcGVsbyBzZXJ2acOnbyBkbyBpMThuLlxuICAgKlxuICAgKiA+IEFvIGRlZmluaXIgdW0gaWRpb21hIHBvciBlc3RlIG3DqXRvZG8sIHRvZG9zIG9zIG3Ds2R1bG9zIGRhIGFwbGljYcOnw6NvIHV0aWxpemFyw6NvIG8gaWRpb21hIGRlZmluaWRvLlxuICAgKlxuICAgKiBAcGFyYW0gbGFuZ3VhZ2Ugc2lnbGEgZG8gaWRpb21hLlxuICAgKlxuICAgKiBFc3RhIHNpZ2xhIGRldmUgc2VyIGNvbXBvc3RhIHBvciBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gaWRpb21hLFxuICAgKiBwb2RlbmRvIHNlciBhZGljaW9uYWRvIG91dHJhcyBkdWFzIGxldHJhcyByZXByZXNlbnRhbmRvIG8gcGHDrXMsIHBvciBleGVtcGxvOiBgcHRgLCBgcHQtQlJgLCBgcHQtYnJgLCBgZW5gIG91IGBlbi1VU2AuXG4gICAqXG4gICAqID4gQ2FzbyBzZWphIGluZm9ybWFkbyB1bSB2YWxvciBkaWZlcmVudGUgZGVzdGUgcGFkcsOjbywgbyBtZXNtbyBzZXLDoSBpZ25vcmFkby5cbiAgICovXG4gIHNldExhbmd1YWdlKGxhbmd1YWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoIWlzTGFuZ3VhZ2UobGFuZ3VhZ2UpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0ocG9Mb2NhbGVLZXksIGxhbmd1YWdlLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBNw6l0b2RvIHF1ZSBkZWZpbmUgbyBpZGlvbWEgY29uZmlndXJhZG8gYSBwYXJ0aXIgZG8gcGFyw6JtZXRybyBgY29uZmlnYCB1dGlsaXphZG8gcGVsbyBtw7NkdWxvIGRvIGkxOG4uXG4gICAqXG4gICAqID4gQW8gZGVmaW5pciB1bSBpZGlvbWEgcG9yIGVzdGUgc2VydmnDp28sIGFwZW5hcyBvIG3Ds2R1bG8gZG8gaTE4biByZWZlcmVudGUgYSBlc3RhIGNvbmZpZ3VyYcOnw6NvIHV0aWxpemFyw6EgbyBpZGlvbWEgZGVmaW5pZG8uXG4gICAqXG4gICAqIEBwYXJhbSBsYW5ndWFnZSBzaWdsYSBkbyBpZGlvbWEuXG4gICAqXG4gICAqIEVzdGEgc2lnbGEgZGV2ZSBzZXIgY29tcG9zdGEgcG9yIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBpZGlvbWEsXG4gICAqIHBvZGVuZG8gc2VyIGFkaWNpb25hZG8gb3V0cmFzIGR1YXMgbGV0cmFzIHJlcHJlc2VudGFuZG8gbyBwYcOtcywgcG9yIGV4ZW1wbG86IGBwdGAsIGBwdC1CUmAsIGBwdC1icmAsIGBlbmAgb3UgYGVuLVVTYC5cbiAgICpcbiAgICogPiBDYXNvIHNlamEgaW5mb3JtYWRvIHVtIHZhbG9yIGRpZmVyZW50ZSBkZXN0ZSBwYWRyw6NvLCBvIG1lc21vIHNlcsOhIGlnbm9yYWRvLlxuICAgKi9cbiAgc2V0TGFuZ3VhZ2VEZWZhdWx0KGxhbmd1YWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmxhbmd1YWdlRGVmYXVsdCA9IGxhbmd1YWdlO1xuICB9XG5cbn1cbiJdfQ==