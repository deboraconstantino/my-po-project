/**
 * Função utilizada pela fábrica de decoradores para validar uma propriedade de uma classe durante
 * o ciclo de vida do Angular.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param lifecycleName clico de vida que se deseja executar com a validação.
 * @param callback função que será executada para validadar a propriedade.
 */
export function validatePropertyOnLifeCycle(decoratorProperties, lifecycleName, callback) {
    var target = decoratorProperties.target, property = decoratorProperties.property;
    var emptyFunction = function () { };
    var lifecycleFunctionClone = target[lifecycleName] || emptyFunction;
    Object.defineProperty(target, lifecycleName, {
        value: function () {
            callback.call(this, property, target);
            lifecycleFunctionClone.call(this);
        }
    });
}
/**
 * Função utilizada pela fábrica de decoradores para alterar/manipular o valor de uma propriedade.
 *
 * > Este decorator irá criar os métodos get e set internamente. Portanto,
 * é importante **não** criar nomes privados para as propriedades utilizando
 * `$$__nomeDaPropriedade` ao utilizar este decorator, pois ela será sobrescrita pela propriedade privada
 * criada pelo decorator.
 *
 * @param decoratorProperties propriedades da interface PoPropertyDecoratorInterface.
 * @param decoratorName nome do decorator
 * @param callback função que será executada para alterar o valor da propriedade
 */
export function changeValueByCallback(decoratorProperties, decoratorName, callback) {
    var target = decoratorProperties.target, property = decoratorProperties.property, originalDescriptor = decoratorProperties.originalDescriptor;
    var privatePropertyName = createPrivateProperty(target, property, decoratorName);
    return {
        get: getter(originalDescriptor, privatePropertyName),
        set: setter(originalDescriptor, callback, privatePropertyName)
    };
}
function setter(originalDescriptor, callback, privatePropertyName) {
    return function (value) {
        if (originalDescriptor && originalDescriptor.set) {
            originalDescriptor.set.bind(this)(callback(value));
        }
        this[privatePropertyName] = callback(value);
    };
}
function getter(originalDescriptor, privatePropName) {
    return function () {
        return originalDescriptor && originalDescriptor.get ? originalDescriptor.get.bind(this)() : this[privatePropName];
    };
}
export function createPrivateProperty(target, propertyName, decoratorName) {
    var privatePropName = "$$__" + propertyName;
    if (Object.prototype.hasOwnProperty.call(target, privatePropName)) {
        console.warn("The prop \"" + privatePropName + "\" is already exist, it will be overrided by " + decoratorName + " decorator.");
    }
    Object.defineProperty(target, privatePropName, {
        configurable: true,
        writable: true
    });
    return privatePropName;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMtZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2RlY29yYXRvcnMvdXRpbHMtZGVjb3JhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxtQkFBK0MsRUFDL0MsYUFBcUIsRUFDckIsUUFBa0I7SUFFVixJQUFBLG1DQUFNLEVBQUUsdUNBQVEsQ0FBeUI7SUFDakQsSUFBTSxhQUFhLEdBQUcsY0FBUSxDQUFDLENBQUM7SUFDaEMsSUFBTSxzQkFBc0IsR0FBb0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLGFBQWEsQ0FBQztJQUV2RixNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUU7UUFDM0MsS0FBSyxFQUFFO1lBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBRUwsQ0FBQztBQUVEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxVQUFVLHFCQUFxQixDQUFDLG1CQUErQyxFQUFFLGFBQXFCLEVBQUUsUUFBa0I7SUFDdEgsSUFBQSxtQ0FBTSxFQUFFLHVDQUFRLEVBQUUsMkRBQWtCLENBQXlCO0lBQ3JFLElBQU0sbUJBQW1CLEdBQUcscUJBQXFCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUVuRixPQUFPO1FBQ0wsR0FBRyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxtQkFBbUIsQ0FBQztRQUNwRCxHQUFHLEVBQUUsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQztLQUMvRCxDQUFDO0FBRUosQ0FBQztBQUNELFNBQVMsTUFBTSxDQUFDLGtCQUFrQixFQUFFLFFBQWtCLEVBQUUsbUJBQTJCO0lBQ2pGLE9BQU8sVUFBUyxLQUFLO1FBRW5CLElBQUksa0JBQWtCLElBQUksa0JBQWtCLENBQUMsR0FBRyxFQUFFO1lBQ2hELGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLGtCQUFnRCxFQUFFLGVBQXVCO0lBQ3ZGLE9BQU87UUFDTCxPQUFPLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDcEgsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxNQUFXLEVBQUUsWUFBb0IsRUFBRSxhQUFxQjtJQUM1RixJQUFNLGVBQWUsR0FBRyxTQUFPLFlBQWMsQ0FBQztJQUU5QyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsZUFBZSxDQUFDLEVBQUU7UUFDakUsT0FBTyxDQUFDLElBQUksQ0FBQyxnQkFBYSxlQUFlLHFEQUErQyxhQUFhLGdCQUFhLENBQUMsQ0FBQztLQUNySDtJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRTtRQUM3QyxZQUFZLEVBQUUsSUFBSTtRQUNsQixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQztJQUVILE9BQU8sZUFBZSxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wZXJ0eURlY29yYXRvckludGVyZmFjZSB9IGZyb20gJy4vcHJvcGVydHktZGVjb3JhdG9yLmludGVyZmFjZSc7XG5cbi8qKlxuICogRnVuw6fDo28gdXRpbGl6YWRhIHBlbGEgZsOhYnJpY2EgZGUgZGVjb3JhZG9yZXMgcGFyYSB2YWxpZGFyIHVtYSBwcm9wcmllZGFkZSBkZSB1bWEgY2xhc3NlIGR1cmFudGVcbiAqIG8gY2ljbG8gZGUgdmlkYSBkbyBBbmd1bGFyLlxuICpcbiAqIEBwYXJhbSBkZWNvcmF0b3JQcm9wZXJ0aWVzIHByb3ByaWVkYWRlcyBkYSBpbnRlcmZhY2UgUG9Qcm9wZXJ0eURlY29yYXRvckludGVyZmFjZS5cbiAqIEBwYXJhbSBsaWZlY3ljbGVOYW1lIGNsaWNvIGRlIHZpZGEgcXVlIHNlIGRlc2VqYSBleGVjdXRhciBjb20gYSB2YWxpZGHDp8Ojby5cbiAqIEBwYXJhbSBjYWxsYmFjayBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHBhcmEgdmFsaWRhZGFyIGEgcHJvcHJpZWRhZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnR5T25MaWZlQ3ljbGUoXG4gIGRlY29yYXRvclByb3BlcnRpZXM6IFByb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlLFxuICBsaWZlY3ljbGVOYW1lOiBzdHJpbmcsXG4gIGNhbGxiYWNrOiBGdW5jdGlvbikge1xuXG4gIGNvbnN0IHsgdGFyZ2V0LCBwcm9wZXJ0eSB9ID0gZGVjb3JhdG9yUHJvcGVydGllcztcbiAgY29uc3QgZW1wdHlGdW5jdGlvbiA9ICgpID0+IHsgfTtcbiAgY29uc3QgbGlmZWN5Y2xlRnVuY3Rpb25DbG9uZTogRnVuY3Rpb24gfCBudWxsID0gdGFyZ2V0W2xpZmVjeWNsZU5hbWVdIHx8IGVtcHR5RnVuY3Rpb247XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbGlmZWN5Y2xlTmFtZSwge1xuICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgcHJvcGVydHksIHRhcmdldCk7XG4gICAgICBsaWZlY3ljbGVGdW5jdGlvbkNsb25lLmNhbGwodGhpcyk7XG4gICAgfVxuICB9KTtcblxufVxuXG4vKipcbiAqIEZ1bsOnw6NvIHV0aWxpemFkYSBwZWxhIGbDoWJyaWNhIGRlIGRlY29yYWRvcmVzIHBhcmEgYWx0ZXJhci9tYW5pcHVsYXIgbyB2YWxvciBkZSB1bWEgcHJvcHJpZWRhZGUuXG4gKlxuICogPiBFc3RlIGRlY29yYXRvciBpcsOhIGNyaWFyIG9zIG3DqXRvZG9zIGdldCBlIHNldCBpbnRlcm5hbWVudGUuIFBvcnRhbnRvLFxuICogw6kgaW1wb3J0YW50ZSAqKm7Do28qKiBjcmlhciBub21lcyBwcml2YWRvcyBwYXJhIGFzIHByb3ByaWVkYWRlcyB1dGlsaXphbmRvXG4gKiBgJCRfX25vbWVEYVByb3ByaWVkYWRlYCBhbyB1dGlsaXphciBlc3RlIGRlY29yYXRvciwgcG9pcyBlbGEgc2Vyw6Egc29icmVzY3JpdGEgcGVsYSBwcm9wcmllZGFkZSBwcml2YWRhXG4gKiBjcmlhZGEgcGVsbyBkZWNvcmF0b3IuXG4gKlxuICogQHBhcmFtIGRlY29yYXRvclByb3BlcnRpZXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBQb1Byb3BlcnR5RGVjb3JhdG9ySW50ZXJmYWNlLlxuICogQHBhcmFtIGRlY29yYXRvck5hbWUgbm9tZSBkbyBkZWNvcmF0b3JcbiAqIEBwYXJhbSBjYWxsYmFjayBmdW7Dp8OjbyBxdWUgc2Vyw6EgZXhlY3V0YWRhIHBhcmEgYWx0ZXJhciBvIHZhbG9yIGRhIHByb3ByaWVkYWRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VWYWx1ZUJ5Q2FsbGJhY2soZGVjb3JhdG9yUHJvcGVydGllczogUHJvcGVydHlEZWNvcmF0b3JJbnRlcmZhY2UsIGRlY29yYXRvck5hbWU6IHN0cmluZywgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gIGNvbnN0IHsgdGFyZ2V0LCBwcm9wZXJ0eSwgb3JpZ2luYWxEZXNjcmlwdG9yIH0gPSBkZWNvcmF0b3JQcm9wZXJ0aWVzO1xuICBjb25zdCBwcml2YXRlUHJvcGVydHlOYW1lID0gY3JlYXRlUHJpdmF0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlY29yYXRvck5hbWUpO1xuXG4gIHJldHVybiB7XG4gICAgZ2V0OiBnZXR0ZXIob3JpZ2luYWxEZXNjcmlwdG9yLCBwcml2YXRlUHJvcGVydHlOYW1lKSxcbiAgICBzZXQ6IHNldHRlcihvcmlnaW5hbERlc2NyaXB0b3IsIGNhbGxiYWNrLCBwcml2YXRlUHJvcGVydHlOYW1lKVxuICB9O1xuXG59XG5mdW5jdGlvbiBzZXR0ZXIob3JpZ2luYWxEZXNjcmlwdG9yLCBjYWxsYmFjazogRnVuY3Rpb24sIHByaXZhdGVQcm9wZXJ0eU5hbWU6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpOiB2b2lkIHtcblxuICAgIGlmIChvcmlnaW5hbERlc2NyaXB0b3IgJiYgb3JpZ2luYWxEZXNjcmlwdG9yLnNldCkge1xuICAgICAgb3JpZ2luYWxEZXNjcmlwdG9yLnNldC5iaW5kKHRoaXMpKGNhbGxiYWNrKHZhbHVlKSk7XG4gICAgfVxuXG4gICAgdGhpc1twcml2YXRlUHJvcGVydHlOYW1lXSA9IGNhbGxiYWNrKHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0dGVyKG9yaWdpbmFsRGVzY3JpcHRvcjogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8YW55PiwgcHJpdmF0ZVByb3BOYW1lOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBvcmlnaW5hbERlc2NyaXB0b3IgJiYgb3JpZ2luYWxEZXNjcmlwdG9yLmdldCA/IG9yaWdpbmFsRGVzY3JpcHRvci5nZXQuYmluZCh0aGlzKSgpIDogdGhpc1twcml2YXRlUHJvcE5hbWVdO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJpdmF0ZVByb3BlcnR5KHRhcmdldDogYW55LCBwcm9wZXJ0eU5hbWU6IHN0cmluZywgZGVjb3JhdG9yTmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IHByaXZhdGVQcm9wTmFtZSA9IGAkJF9fJHtwcm9wZXJ0eU5hbWV9YDtcblxuICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJpdmF0ZVByb3BOYW1lKSkge1xuICAgIGNvbnNvbGUud2FybihgVGhlIHByb3AgXCIke3ByaXZhdGVQcm9wTmFtZX1cIiBpcyBhbHJlYWR5IGV4aXN0LCBpdCB3aWxsIGJlIG92ZXJyaWRlZCBieSAke2RlY29yYXRvck5hbWV9IGRlY29yYXRvci5gKTtcbiAgfVxuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByaXZhdGVQcm9wTmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZVxuICB9KTtcblxuICByZXR1cm4gcHJpdmF0ZVByb3BOYW1lO1xufVxuIl19