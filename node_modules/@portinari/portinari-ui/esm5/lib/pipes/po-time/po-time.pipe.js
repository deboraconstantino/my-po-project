import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isTypeof } from '../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API da Portinari.
 */
var PoTimePipe = /** @class */ (function () {
    function PoTimePipe() {
    }
    PoTimePipe.prototype.transform = function (time, format) {
        var hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            var amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            var miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            var formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    };
    PoTimePipe.prototype.addDotMiliseconds = function (miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    };
    PoTimePipe.prototype.formatValue = function (time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            var hour = time.substring(0, 2);
            var minutes = time.substring(3, 5);
            var seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace("." + formatMiliseconds, miliseconds);
            return format;
        }
        else {
            return time;
        }
    };
    PoTimePipe.prototype.getFormatMiliseconds = function (amountOfF) {
        var formatMiliseconds = '';
        for (var i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    };
    PoTimePipe = tslib_1.__decorate([
        Pipe({
            name: 'po_time'
        })
    ], PoTimePipe);
    return PoTimePipe;
}());
export { PoTimePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGltZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvcG8tdGltZS9wby10aW1lLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU1Qzs7Ozs7O0dBTUc7QUFJSDtJQUFBO0lBb0RBLENBQUM7SUFsREMsOEJBQVMsR0FBVCxVQUFVLElBQVksRUFBRSxNQUFlO1FBRXJDLElBQU0sU0FBUyxHQUFHLG9FQUFvRSxDQUFDO1FBRXZGLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBRXBELElBQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpGLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDeEYsSUFBTSxpQkFBaUIsR0FBVyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFdkUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxzQ0FBaUIsR0FBekIsVUFBMEIsV0FBbUIsRUFBRSxTQUFpQjtRQUM5RCxJQUFJLFdBQVcsSUFBSSxTQUFTLEVBQUU7WUFDNUIsV0FBVyxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUM7U0FDakM7UUFDRCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRU8sZ0NBQVcsR0FBbkIsVUFBb0IsSUFBWSxFQUFFLE1BQWMsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtRQUM5RixJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7WUFDbEIsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFckMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBSSxpQkFBbUIsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUU5RCxPQUFPLE1BQU0sQ0FBQztTQUNmO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVPLHlDQUFvQixHQUE1QixVQUE2QixTQUFpQjtRQUM1QyxJQUFJLGlCQUFpQixHQUFXLEVBQUUsQ0FBQztRQUVuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLGlCQUFpQixJQUFJLEdBQUcsQ0FBQztTQUMxQjtRQUVELE9BQU8saUJBQWlCLENBQUM7SUFDM0IsQ0FBQztJQWxEVSxVQUFVO1FBSHRCLElBQUksQ0FBQztZQUNKLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUM7T0FDVyxVQUFVLENBb0R0QjtJQUFELGlCQUFDO0NBQUEsQUFwREQsSUFvREM7U0FwRFksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBQaXBlIHJlc3BvbnPDoXZlbCBwb3IgYXByZXNlbnRhciB1bSBob3LDoXJpbyBiYXNlYWRvIG5vIGZvcm1hdG8gZGUgZW50cmFkYSBkZWZpbmlkbyBuYSBBUEkgZGEgUG9ydGluYXJpLlxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdwb190aW1lJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RpbWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgdHJhbnNmb3JtKHRpbWU6IHN0cmluZywgZm9ybWF0Pzogc3RyaW5nKTogc3RyaW5nIHtcblxuICAgIGNvbnN0IGhvdXJSZWdleCA9IC9eKChbMC0xXVswLTldKXwoMlswLTNdKSk6WzAtNV1bMC05XTpbMC01XVswLTldW1xcLl0/KFswLTldezEsNn0pPyQvZztcblxuICAgIGlmIChpc1R5cGVvZih0aW1lLCAnc3RyaW5nJykgJiYgaG91clJlZ2V4LnRlc3QodGltZSkpIHtcblxuICAgICAgY29uc3QgYW1vdW50T2ZGID0gZm9ybWF0ID8gZm9ybWF0Lmxhc3RJbmRleE9mKCdmJykgLSBmb3JtYXQuaW5kZXhPZignZicpICsgMSA6IDA7XG5cbiAgICAgIGNvbnN0IG1pbGlzZWNvbmRzID0gdGhpcy5hZGREb3RNaWxpc2Vjb25kcyh0aW1lLnN1YnN0cmluZyg5LCA5ICsgYW1vdW50T2ZGKSwgYW1vdW50T2ZGKTtcbiAgICAgIGNvbnN0IGZvcm1hdE1pbGlzZWNvbmRzOiBzdHJpbmcgPSB0aGlzLmdldEZvcm1hdE1pbGlzZWNvbmRzKGFtb3VudE9mRik7XG5cbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdFZhbHVlKHRpbWUsIGZvcm1hdCwgZm9ybWF0TWlsaXNlY29uZHMsIG1pbGlzZWNvbmRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGFkZERvdE1pbGlzZWNvbmRzKG1pbGlzZWNvbmRzOiBzdHJpbmcsIGFtb3VudE9mRjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAobWlsaXNlY29uZHMgJiYgYW1vdW50T2ZGKSB7XG4gICAgICBtaWxpc2Vjb25kcyA9ICcuJyArIG1pbGlzZWNvbmRzO1xuICAgIH1cbiAgICByZXR1cm4gbWlsaXNlY29uZHM7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdFZhbHVlKHRpbWU6IHN0cmluZywgZm9ybWF0OiBzdHJpbmcsIGZvcm1hdE1pbGlzZWNvbmRzOiBzdHJpbmcsIG1pbGlzZWNvbmRzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0aW1lICYmIGZvcm1hdCkge1xuICAgICAgY29uc3QgaG91ciA9IHRpbWUuc3Vic3RyaW5nKDAsIDIpO1xuICAgICAgY29uc3QgbWludXRlcyA9IHRpbWUuc3Vic3RyaW5nKDMsIDUpO1xuICAgICAgY29uc3Qgc2Vjb25kcyA9IHRpbWUuc3Vic3RyaW5nKDYsIDgpO1xuXG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnSEgnLCBob3VyKTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCdtbScsIG1pbnV0ZXMpO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ3NzJywgc2Vjb25kcyk7XG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShgLiR7Zm9ybWF0TWlsaXNlY29uZHN9YCwgbWlsaXNlY29uZHMpO1xuXG4gICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGltZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEZvcm1hdE1pbGlzZWNvbmRzKGFtb3VudE9mRjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBsZXQgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZyA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbW91bnRPZkY7IGkrKykge1xuICAgICAgZm9ybWF0TWlsaXNlY29uZHMgKz0gJ2YnO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXRNaWxpc2Vjb25kcztcbiAgfVxuXG59XG4iXX0=