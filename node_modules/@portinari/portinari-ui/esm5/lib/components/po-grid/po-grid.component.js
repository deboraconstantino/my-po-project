import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, Renderer2, ViewChild } from '@angular/core';
/**
 * @description
 *
 * Componente grid.
 *
 * Ações / atalhos:
 *
 * - ARROW-UP: Navega para celula superior / Na ultima linha adiciona uma linha em branco no grid;
 * - ARROW-DOWN: Navega para celula inferior;
 * - ARROW-RIGHT: Navega para celula direita;
 * - ARROW-LEFT: Navega para celula esquerda;
 * - TAB: Navega para próxima celula;
 * - SHIFT+TAB: Navega para celula anterior;
 * - CTRL+DEL: Remove linha;
 * - DEL/BACKSPACE: Limpa celula;
 * - ENTER: Edita linha com valor atual/Confirma edição da celula;
 * - DOUBLE-CLICK: Edita linha com valor atual;
 * - ESC: Cancela edição da celula / Cancela inserção de linhas em branco;
 * - A..Z/0..9: Inicia edição com valor em branco.
 *
 * @example
 *
 * <example name="po-grid-basic" title="Portinari Grid Basic">
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.html"> </file>
 *  <file name="sample-po-grid-basic/sample-po-grid-basic.component.ts"> </file>
 * </example>
 */
var PoGridComponent = /** @class */ (function () {
    function PoGridComponent(changeDetectorRef, elRef, renderer) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.elRef = elRef;
        this.lastCell = '0-0';
        this.lastRow = 0;
        this.lastColumn = 0;
        this.currencyCell = '0-0';
        this.currencyRow = 0;
        this.currencyColumn = 0;
        this.logger = false;
        this.width = '100%';
        this.widporeeze = 0;
        this.widthActions = 0;
        this._columns = [];
        /**
         * @description
         *
         * Ações disparadas quando uma linha do grid é manipulada.
         */
        this.rowActions = {};
        /**
         * Lista com os dados que serão exibidos no grid.
         */
        this.data = [];
        this.debounceResize();
        this.resizeListener = renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    }
    Object.defineProperty(PoGridComponent.prototype, "columns", {
        get: function () {
            return this._columns.filter(function (column) { return column.freeze !== true && column.action !== true; });
        },
        /**
         * Colunas exibidas no grid.
         */
        set: function (value) {
            this._columns = tslib_1.__spread(value);
            this._columns.forEach(function (column) {
                column.label = column.label || column.property;
                if (column.freeze === true) {
                    column.cssWidth = (column.width || 100) + "px";
                }
                else {
                    column.cssWidth = column.width ? column.width + "px" : '100%';
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    PoGridComponent.prototype.ngOnDestroy = function () {
        if (this.resizeListener) {
            this.resizeListener();
        }
    };
    PoGridComponent.prototype.debounceResize = function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            var widthTableWrapper = _this.tableWrapper.nativeElement.offsetWidth;
            _this.width = widthTableWrapper - (_this.widporeeze + 8) - _this.widthActions + "px";
        }, 100);
    };
    Object.defineProperty(PoGridComponent.prototype, "freezeColumns", {
        get: function () {
            var freezeColumns = this._columns.filter(function (column) { return column.freeze === true; });
            this.widporeeze = freezeColumns.reduce(function (prev, current) { return prev + (current.width || 100); }, 0);
            return freezeColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoGridComponent.prototype, "actionColumns", {
        get: function () {
            var actionsColumns = this._columns.filter(function (column) { return column.action === true; });
            this.widthActions = actionsColumns.length > 0 ? 56 : 0;
            return actionsColumns;
        },
        enumerable: true,
        configurable: true
    });
    PoGridComponent.prototype.cancelRow = function (event, row) {
        var _this = this;
        var el = event.path.find(function (element) { return element.id; });
        if (!el) {
            return;
        }
        var _a = tslib_1.__read((el.id).split('-'), 1), x = _a[0];
        if (this.isEmptyRow(x)) {
            if (!this.removeRow(event, row)) {
                return;
            }
            this.currencyObj = Object.assign({}, this.data[this.currencyRow - 1]);
        }
        else {
            this.data[+x - 1] = Object.assign({}, this.currencyObj);
            setTimeout(function () { return _this.selectCell(_this.currencyRow, _this.currencyColumn); });
        }
    };
    PoGridComponent.prototype.removeRow = function (event, row) {
        if (this.rowActions.beforeRemove && !this.rowActions.beforeRemove(Object.assign({}, row))) {
            return false;
        }
        var index = this.data.indexOf(row);
        this.data.splice(index, 1);
        this.changeDetectorRef.detectChanges();
        if ((this.data.length === 0) || (index === this.data.length)) {
            this.selectCell(this.currencyRow - 1, this.currencyColumn);
        }
        else {
            this.selectCell(this.currencyRow, this.currencyColumn);
        }
        return true;
    };
    PoGridComponent.prototype.tableKeydown = function (event, direction) {
        var _a = tslib_1.__read(event.target.id.split('-'), 2), row = _a[0], col = _a[1];
        row = +row;
        col = +col;
        var prow = +row;
        var pcol = +col;
        // event.preventDefault();
        // event.stopPropagation();
        // debugger;
        if (direction === 'down') {
            if (row <= this.data.length) {
                prow++;
            }
            if (row === this.data.length) {
                if (row === 0 || !this.isEmptyRow(row)) {
                    if (this.saveRow(row)) {
                        if (!this.insertRow()) {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
                else {
                    prow--;
                }
            }
        }
        else if ((direction === 'up') && (row > 0)) {
            prow--;
        }
        else if ((direction === 'left') && (col > 0)) {
            pcol--;
        }
        else if ((direction === 'right') && (col < this._columns.length - 1)) {
            pcol++;
        }
        else if (direction === 'next') {
            if (col < this._columns.length - 1) {
                pcol++;
                event.preventDefault();
            }
            else if (row < this.data.length) {
                pcol = 0;
                prow++;
                event.preventDefault();
            }
        }
        else if (direction === 'prior') {
            if (col > 0) {
                pcol--;
                event.preventDefault();
            }
            else if (row > 0) {
                pcol = this._columns.length - 1;
                prow--;
                event.preventDefault();
            }
        }
        if (this.currencyCell === prow + "-" + pcol) {
            // console.log('vazou');
            return;
        }
        // debugger;
        if (prow !== this.currencyRow && row > 0 && this.data.length >= row) {
            if (!this.isEmptyRow(row)) {
                if (!this.saveRow(row)) {
                    return;
                }
            }
            else {
                if (!this.removeRow(event, row)) {
                    return;
                }
            }
        }
        if (this.currencyRow !== prow) {
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('mudou de linha');
        }
        this.lastCell = event.target.id;
        this.lastRow = row;
        this.lastColumn = col;
        this.selectCell(prow, pcol);
    };
    PoGridComponent.prototype.tableClick = function (event) {
        var el = event.path.find(function (element) { return element.id; });
        if (!el) {
            this.selectCell(this.currencyRow, this.currencyColumn);
            return;
        }
        if (this.currencyCell === el.id) {
            return;
        }
        var _a = tslib_1.__read((el.id).split('-'), 2), row = _a[0], col = _a[1];
        var prow = +row;
        var pcol = +col;
        if (prow !== this.currencyRow) {
            if (this.currencyRow > 0) {
                if (!this.isEmptyRow(this.currencyRow)) {
                    if (!this.saveRow(this.currencyRow)) {
                        this.selectCell(this.currencyRow, this.currencyColumn);
                        return;
                    }
                }
                else {
                    if (!this.removeRow(event, row)) {
                        return;
                    }
                }
            }
            this.currencyObj = Object.assign({}, this.data[prow - 1]);
            // console.log('>>>>>>> ', prow - 1);
        }
        this.lastCell = this.currencyCell;
        this.lastRow = this.currencyRow;
        this.lastColumn = this.currencyColumn;
        this.currencyCell = el.id;
        this.currencyRow = prow;
        this.currencyColumn = pcol;
    };
    PoGridComponent.prototype.saveRow = function (row) {
        // console.log(this.data[row - 1]);
        var _this = this;
        var obj = this.data[row - 1];
        if (!Object.keys(obj).some(function (prop) { return obj[prop] !== _this.currencyObj[prop]; })) {
            // console.log('tudo igual');
            return true;
        }
        if (this.rowActions.beforeSave && !this.rowActions.beforeSave(obj, this.currencyObj)) {
            return false;
        }
        var requireds = [];
        this.columns.forEach(function (column) {
            if (column.required === true && !obj[column.property]) {
                requireds.push(column.property);
            }
        });
        return requireds.length === 0;
    };
    PoGridComponent.prototype.insertRow = function () {
        var obj = {};
        if (this.rowActions.beforeInsert && !this.rowActions.beforeInsert(obj)) {
            return false;
        }
        // this.currencyObj = Object.assign({}, obj);
        this.data.push(obj);
        this.changeDetectorRef.detectChanges();
        return true;
    };
    PoGridComponent.prototype.isEmptyRow = function (row) {
        var obj = this.data[row - 1];
        if (!obj) { // title
            return false;
        }
        var filled = Object.keys(obj).some(function (property) { return obj[property]; });
        return !filled;
    };
    PoGridComponent.prototype.selectCell = function (row, col) {
        var nextCell = this.elRef.nativeElement.querySelector("[id='" + row + "-" + col + "']");
        if (nextCell) {
            this.currencyCell = row + "-" + col;
            this.currencyRow = row;
            this.currencyColumn = col;
            nextCell.focus();
        }
    };
    PoGridComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        ViewChild('table', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoGridComponent.prototype, "tableElement", void 0);
    tslib_1.__decorate([
        ViewChild('wrapper', { static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoGridComponent.prototype, "tableWrapper", void 0);
    tslib_1.__decorate([
        Input('p-row-actions'),
        tslib_1.__metadata("design:type", Object)
    ], PoGridComponent.prototype, "rowActions", void 0);
    tslib_1.__decorate([
        Input('p-columns'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoGridComponent.prototype, "columns", null);
    tslib_1.__decorate([
        Input('p-data'),
        tslib_1.__metadata("design:type", Array)
    ], PoGridComponent.prototype, "data", void 0);
    PoGridComponent = tslib_1.__decorate([
        Component({
            selector: 'po-grid',
            template: "<div class=\"po-grid-wrapper po-grid-row-wrapper\" #wrapper>\n\n  <div *ngIf=\"logger\">\n    lastCell: {{ lastCell }} | currencyCell: {{ currencyCell }} <br>\n    lastRow: {{ lastRow }} | currencyRow: {{ currencyRow }} <br>\n    lastColumn: {{ lastColumn }} | currencyColumn: {{ currencyColumn }} <br>\n    <hr>\n    currencyObj: {{ currencyObj | json }}\n    <hr>\n  </div>\n\n  <div class=\"po-grid\">\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\"\n        #table\n        (keydown.arrowup)=\"tableKeydown($event, 'up')\"\n        (keydown.arrowdown)=\"tableKeydown($event, 'down')\"\n        (keydown.arrowleft)=\"tableKeydown($event, 'left')\"\n        (keydown.arrowright)=\"tableKeydown($event, 'right')\"\n        (keydown.tab)=\"tableKeydown($event, 'next')\"\n        (keydown.shift.tab)=\"tableKeydown($event, 'prior')\"\n        (click)=\"tableClick($event)\"\n        (contextmenu)=\"tableClick($event)\"\n        (dblclick)=\"tableClick($event)\">\n\n        <div class=\"po-grid-cell po-grid-cell-freeze\" *ngIf=\"freezeColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divFreezeColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-normal\"\n          [style.width]=\"width\" [style.max-width]=\"width\" [style.min-width]=\"width\">\n          <ng-container *ngTemplateOutlet=\"divColumns\"></ng-container>\n        </div>\n\n        <div class=\"po-grid-cell po-grid-cell-action\" *ngIf=\"actionColumns.length > 0\">\n          <ng-container *ngTemplateOutlet=\"divActionColumns\"></ng-container>\n        </div>\n\n      </div>\n    </div>\n  </div>\n\n  <!-- <div class=\"po-grid-footer-wrapper\">\n    <div class=\"po-grid-footer\">\n      <div class=\"links\"><a href=\"#\">RODAP\u00C9</a></div>\n    </div>\n  </div> -->\n\n</div>\n\n<!-- Coluna com as colunas congeladas -->\n<ng-template #divFreezeColumns>\n  <div class=\"po-grid po-grid-freeze\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head *ngFor=\"let column of freezeColumns; index as i\" class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          p-position=\"{{ '0-' + i }}\"\n          [p-width]=\"column.width\"\n          [p-align]=\"column.align\"\n          [p-title]=\"column.label\">\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <po-grid-cell *ngFor=\"let column of freezeColumns; index as i\" class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          p-freeze=\"true\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ (j + 1) + '-' + i }}\"\n          [p-width]=\"column.width\"\n          [(p-value)]=\"row[column.property]\">\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas congeladas -->\n\n<!-- Coluna com as colunas nornais -->\n<ng-template #divColumns>\n  <div class=\"po-grid po-grid-normal\">\n    <div class=\"po-grid-header-group\">\n      <div class=\"po-grid-row\">\n        <po-grid-head *ngFor=\"let column of columns; index as i\" class=\"po-grid-title\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          p-position=\"{{ '0-' + (i + freezeColumns.length) }}\"\n          [p-title]=\"column.label\"\n          [p-width]=\"column.width\">\n        </po-grid-head>\n      </div>\n    </div>\n\n    <div class=\"po-grid-body\">\n      <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n        (keydown.control.delete)=\"removeRow($event, row)\"\n        (keydown.esc)=\"cancelRow($event, row)\">\n        <po-grid-cell *ngFor=\"let column of columns; index as i\" class=\"po-grid-cell\"\n          [style.width]=\"column.cssWidth\" [style.max-width]=\"column.cssWidth\" [style.min-width]=\"column.cssWidth\"\n          [p-align]=\"column.align\"\n          [p-readonly]=\"column.readonly\"\n          [p-required]=\"column.required\"\n          p-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length) }}\"\n          [(p-value)]=\"row[column.property]\"\n          [p-width]=\"column.width\">\n        </po-grid-cell>\n      </div>\n    </div>\n  </div>\n</ng-template>\n<!-- FIM: Coluna com as colunas nornais -->\n\n<!-- Coluna com as colunas de a\u00E7\u00E3o -->\n<ng-template #divActionColumns>\n    <div class=\"po-grid po-grid-actions\">\n      <div class=\"po-grid-header-group\">\n        <div class=\"po-grid-row\">\n          <po-grid-head *ngFor=\"let column of actionColumns; index as i\" class=\"po-grid-title\"\n            p-position=\"{{ '0-' + (i + freezeColumns.length + columns.length) }}\"\n            [p-title]=\"column.label\"\n            [p-align]=\"column.align\">\n          </po-grid-head>\n        </div>\n      </div>\n\n      <div class=\"po-grid-body\">\n        <div class=\"po-grid-row\" *ngFor=\"let row of data; index as j\"\n          (keydown.control.delete)=\"removeRow($event, row)\"\n          (keydown.esc)=\"cancelRow($event, row)\">\n          <po-grid-cell-action *ngFor=\"let column of actionColumns; index as i\" class=\"po-grid-cell\"\n            p-position=\"{{ (j + 1) + '-' + (i + freezeColumns.length + columns.length) }}\"\n            [p-value]=\"row[column.property]\">\n          </po-grid-cell-action>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n  <!-- FIM: Coluna com as colunas de a\u00E7\u00E3o -->\n"
        }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef,
            ElementRef,
            Renderer2])
    ], PoGridComponent);
    return PoGridComponent;
}());
export { PoGridComponent };
//# sourceMappingURL=data:application/json;base64,