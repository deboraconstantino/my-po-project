import * as tslib_1 from "tslib";
import { Directive, TemplateRef } from '@angular/core';
/**
 * @usedBy PoSlideComponent
 *
 * @description
 *
 * Esta diretiva permite a customização de um slide.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item do slide corrente.
 *  - Índice: `index` determina o índice do slide corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-slide
 *   [p-slides]="[{ id: 1, name: 'Register', email: 'register@portinari.com' }]">
 *
 *   <ng-template p-slide-content-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="item.id"></po-info>
 *       <po-info class="po-md-6" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-slide>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-slide
 *    [p-slides]="[{ id: 1, name: 'Register', email: 'register@portinari.com' }]">
 *
 *    <div *p-slide-content-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-slide>
 * ...
 *
 * ```
 */
var PoSlideContentTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoSlideContentTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoSlideContentTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    PoSlideContentTemplateDirective = tslib_1.__decorate([
        Directive({
            selector: '[p-slide-content-template]'
        }),
        tslib_1.__metadata("design:paramtypes", [TemplateRef])
    ], PoSlideContentTemplateDirective);
    return PoSlideContentTemplateDirective;
}());
export { PoSlideContentTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtY29udGVudC10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXNsaWRlL2RpcmVjdGl2ZXMvcG8tc2xpZGUtY29udGVudC10ZW1wbGF0ZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0EwQ0c7QUFJSDtJQUVFLHNFQUFzRTtJQUN0RSx5Q0FBbUIsV0FBNkI7UUFBN0IsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0lBQUksQ0FBQzs7Z0JBQXJCLFdBQVc7O0lBSGhDLCtCQUErQjtRQUgzQyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsNEJBQTRCO1NBQ3ZDLENBQUM7aURBSWdDLFdBQVc7T0FIaEMsK0JBQStCLENBSTNDO0lBQUQsc0NBQUM7Q0FBQSxBQUpELElBSUM7U0FKWSwrQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQHVzZWRCeSBQb1NsaWRlQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXN0YSBkaXJldGl2YSBwZXJtaXRlIGEgY3VzdG9taXphw6fDo28gZGUgdW0gc2xpZGUuXG4gKlxuICogRGV2ZS1zZSB1dGlsaXphciBjb21vIHBhcsOibWV0cm8gYSByZWZlcsOqbmNpYSBkbyBpdGVtIGUvb3Ugw61uZGljZSwgc2VuZG8gcG9yIHBhZHLDo28gbyBpdGVtLlxuICogIC0gSXRlbTogYGl0ZW1gIGRldGVybWluYSBvIGl0ZW0gZG8gc2xpZGUgY29ycmVudGUuXG4gKiAgLSDDjW5kaWNlOiBgaW5kZXhgIGRldGVybWluYSBvIMOtbmRpY2UgZG8gc2xpZGUgY29ycmVudGUuXG4gKlxuICogRXN0YSBkaXJldGl2YSBwb2RlIHNlciB1c2FkYSBkZSBkdWFzIGZvcm1hczogZXhwbMOtY2l0YSBvdSAqc3ludGF4IHN1Z2FyKi4gVmVqYSBhIHNlZ3VpciBhbWJvcywgcmVzcGVjdGl2YW1lbnRlOlxuICpcbiAqIGBgYFxuICogLi4uXG4gKiA8cG8tc2xpZGVcbiAqICAgW3Atc2xpZGVzXT1cIlt7IGlkOiAxLCBuYW1lOiAnUmVnaXN0ZXInLCBlbWFpbDogJ3JlZ2lzdGVyQHBvcnRpbmFyaS5jb20nIH1dXCI+XG4gKlxuICogICA8bmctdGVtcGxhdGUgcC1zbGlkZS1jb250ZW50LXRlbXBsYXRlIGxldC1pdGVtIGxldC1jb2RlPVwiaW5kZXhcIj5cbiAqICAgICA8ZGl2IGNsYXNzPVwicG8tcm93XCI+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTZcIiBwLWxhYmVsPVwiQ29kZVwiIFtwLXZhbHVlXT1cIml0ZW0uaWRcIj48L3BvLWluZm8+XG4gKiAgICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTZcIiBwLWxhYmVsPVwiRW1haWxcIiBbcC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC9wby1pbmZvPlxuICogICAgIDwvZGl2PlxuICogICA8L25nLXRlbXBsYXRlPlxuICpcbiAqIDwvcG8tc2xpZGU+XG4gKlxuICogLi4uXG4gKiBgYGBcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLXNsaWRlXG4gKiAgICBbcC1zbGlkZXNdPVwiW3sgaWQ6IDEsIG5hbWU6ICdSZWdpc3RlcicsIGVtYWlsOiAncmVnaXN0ZXJAcG9ydGluYXJpLmNvbScgfV1cIj5cbiAqXG4gKiAgICA8ZGl2ICpwLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGU9XCJsZXQgaXRlbSwgbGV0IGk9aW5kZXhcIiBjbGFzcz1cInBvLXJvd1wiPlxuICogICAgICA8cG8taW5mbyBjbGFzcz1cInBvLW1kLTEyXCIgcC1sYWJlbD1cIkVtYWlsXCIgW3AtdmFsdWVdPVwiaXRlbS5lbWFpbFwiPjwvcG8taW5mbz5cbiAqICAgIDwvZGl2PlxuICogPC9wby1zbGlkZT5cbiAqIC4uLlxuICpcbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcC1zbGlkZS1jb250ZW50LXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgUG9TbGlkZUNvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSB7XG5cbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cbn1cbiJdfQ==