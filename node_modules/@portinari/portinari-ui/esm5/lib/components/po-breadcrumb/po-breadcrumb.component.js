import * as tslib_1 from "tslib";
import { AfterViewInit, Component, DoCheck, ElementRef, IterableDiffers, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { PoBreadcrumbBaseComponent } from './po-breadcrumb-base.component';
/**
 * @docsExtends PoBreadcrumbBaseComponent
 *
 * @example
 *
 * <example name="po-breadcrumb-basic" title="Portinari Breadcrumb Basic">
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.html"> </file>
 *  <file name="sample-po-breadcrumb-basic/sample-po-breadcrumb-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-breadcrumb-labs" title="Portinari Breadcrumb Labs">
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.html"> </file>
 *  <file name="sample-po-breadcrumb-labs/sample-po-breadcrumb-labs.component.ts"> </file>
 * </example>
 */
var PoBreadcrumbComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoBreadcrumbComponent, _super);
    function PoBreadcrumbComponent(differs, element, renderer) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.renderer = renderer;
        _this.showDropdown = false;
        _this.showDropdownToggle = false;
        _this._breadcrumbItemsLenght = 0;
        _this.calculatedElement = false;
        _this.hiddenWithoutResize = false;
        _this.initialized = false;
        _this.wasClickedonDropdown = function (event) {
            var clickedOutIconDropdown = _this.checkClickOutElement(event, _this.dropdownIcon);
            if (clickedOutIconDropdown) {
                _this.showDropdown = false;
                _this.removeClickoutListener();
            }
        };
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    PoBreadcrumbComponent.prototype.ngAfterViewInit = function () {
        this.initialized = true;
        this.initializeResizeListener();
    };
    PoBreadcrumbComponent.prototype.ngDoCheck = function () {
        var breadcrumbWidth = this.breadcrumbElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se vis√≠vel,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if (breadcrumbWidth && !this.calculatedElement && this.initialized) {
            this.initBreadcrumbSize();
        }
        if (this.hiddenWithoutResize) {
            this.debounceResize();
            this.hiddenWithoutResize = false;
        }
        this.checkChangeOnItems();
    };
    PoBreadcrumbComponent.prototype.ngOnDestroy = function () {
        this.removeClickoutListener();
        this.removeResizeListener();
    };
    PoBreadcrumbComponent.prototype.toggleDropdown = function () {
        this.showDropdown = !this.showDropdown;
        this.initializeClickoutListener();
    };
    PoBreadcrumbComponent.prototype.checkClickOutElement = function (event, element) {
        return element && !element.nativeElement.contains(event.target);
    };
    PoBreadcrumbComponent.prototype.checkChangeOnItems = function () {
        if (this.differ) {
            var changes = this.differ.diff(this.items);
            if (changes) {
                this.calcBreadcrumbItemsWidth();
                this.calculatedElement = false;
            }
        }
    };
    PoBreadcrumbComponent.prototype.calcBreadcrumb = function () {
        var breadcrumbFavorite = this.getBreadcrumbFavoriteWidth();
        var breadcrumb = this.getBreadcrumbWidth(breadcrumbFavorite);
        if (breadcrumb <= this._breadcrumbItemsLenght) {
            this.enableBreadcrumbResponsive();
        }
        else {
            this.disableBreadcrumbResponsive();
        }
    };
    PoBreadcrumbComponent.prototype.getBreadcrumbFavoriteWidth = function () {
        return this.favoriteService ? this.element.nativeElement
            .querySelector('.po-breadcrumb-favorite').offsetWidth + 20 : 0;
    };
    PoBreadcrumbComponent.prototype.getBreadcrumbWidth = function (breadcrumbFavorite) {
        return this.element.nativeElement.querySelector('.po-breadcrumb').offsetWidth - breadcrumbFavorite;
    };
    PoBreadcrumbComponent.prototype.calcBreadcrumbItemsWidth = function () {
        var breadcrumbItem = this.element.nativeElement
            .querySelectorAll('.po-breadcrumb-item, .po-breadcrumb-item-unclickable');
        this._breadcrumbItemsLenght = Array.from(breadcrumbItem)
            .map(function (breadcrumb) { return breadcrumb['offsetWidth']; })
            .reduce(function (a, b) { return a + b; }, 16);
    };
    PoBreadcrumbComponent.prototype.enableBreadcrumbResponsive = function () {
        this.showDropdownToggle = true;
        this.itemsView = this.items.slice(-2);
        this.dropdownItems = this.items.slice(0, -2).reverse();
    };
    PoBreadcrumbComponent.prototype.disableBreadcrumbResponsive = function () {
        this.showDropdownToggle = false;
        this.itemsView = [].concat(this.items);
        this.showDropdown = false;
    };
    PoBreadcrumbComponent.prototype.debounceResize = function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            if (_this.calculatedElement && !_this.hiddenWithoutResize && _this.breadcrumbElement.nativeElement.offsetWidth === 0) {
                _this.hiddenWithoutResize = true;
            }
            else {
                _this.calcBreadcrumb();
            }
        }, 50);
    };
    PoBreadcrumbComponent.prototype.initBreadcrumbSize = function () {
        this.calcBreadcrumbItemsWidth();
        this.calcBreadcrumb();
        this.calculatedElement = true;
    };
    PoBreadcrumbComponent.prototype.initializeClickoutListener = function () {
        this.clickoutListener = this.renderer.listen('document', 'click', this.wasClickedonDropdown);
    };
    PoBreadcrumbComponent.prototype.initializeResizeListener = function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            _this.debounceResize();
        });
    };
    PoBreadcrumbComponent.prototype.removeClickoutListener = function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
    };
    PoBreadcrumbComponent.prototype.removeResizeListener = function () {
        this.resizeListener();
    };
    PoBreadcrumbComponent.ctorParameters = function () { return [
        { type: IterableDiffers },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        ViewChild('breadcrumb', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoBreadcrumbComponent.prototype, "breadcrumbElement", void 0);
    tslib_1.__decorate([
        ViewChild('dropdownIcon', { read: ElementRef, static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoBreadcrumbComponent.prototype, "dropdownIcon", void 0);
    PoBreadcrumbComponent = tslib_1.__decorate([
        Component({
            selector: 'po-breadcrumb',
            template: "<div class=\"po-breadcrumb\" #breadcrumb>\n\n  <ul class=\"po-breadcrumb-items\">\n\n    <li #dropdownIcon\n      *ngIf=\"showDropdownToggle\"\n      class=\"po-breadcrumb-item po-clickable\"\n      (click)=\"toggleDropdown()\">\n\n      <span class=\"po-breadcrumb-icon-more po-icon po-icon-more\"></span>\n      <div class=\"po-breadcrumb-arrow\"></div>\n    </li>\n\n    <div *ngFor=\"let item of itemsView, let itemIndex = index;\">\n      <po-breadcrumb-item\n        [p-action]=\"item.action\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n        [p-item-active]=\"itemIndex === (itemsView.length - 1)\">\n      </po-breadcrumb-item>\n    </div>\n\n  </ul>\n\n  <po-breadcrumb-favorite *ngIf=\"favoriteService\"\n    [p-favorite-service]=\"favoriteService\"\n    [p-item-active]=\"items[items.length - 1]\"\n    [p-params-service]=\"paramsService\">\n  </po-breadcrumb-favorite>\n\n  <po-breadcrumb-dropdown *ngIf=\"showDropdown\"\n    [p-items]=\"dropdownItems\">\n  </po-breadcrumb-dropdown>\n\n</div>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [IterableDiffers, ElementRef, Renderer2])
    ], PoBreadcrumbComponent);
    return PoBreadcrumbComponent;
}(PoBreadcrumbBaseComponent));
export { PoBreadcrumbComponent };
//# sourceMappingURL=data:application/json;base64,