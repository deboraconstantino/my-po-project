import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
var PoBreadcrumbBaseComponent = /** @class */ (function () {
    function PoBreadcrumbBaseComponent() {
        this.itemsView = [];
        this._items = [];
    }
    Object.defineProperty(PoBreadcrumbBaseComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        /**
         * @description
         *
         * Lista de itens do _breadcrumb_.
         *
         * **Exemplo:**
         * ```
         * { label: 'Po Portal', link: 'portal' }
         * ```
         */
        set: function (items) {
            this._items = items;
            this.itemsView = [].concat(items);
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input('p-favorite-service'),
        tslib_1.__metadata("design:type", String)
    ], PoBreadcrumbBaseComponent.prototype, "favoriteService", void 0);
    tslib_1.__decorate([
        Input('p-items'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoBreadcrumbBaseComponent.prototype, "items", null);
    tslib_1.__decorate([
        Input('p-params-service'),
        tslib_1.__metadata("design:type", Object)
    ], PoBreadcrumbBaseComponent.prototype, "paramsService", void 0);
    return PoBreadcrumbBaseComponent;
}());
export { PoBreadcrumbBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSXRDOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBQ0g7SUFBQTtRQUVFLGNBQVMsR0FBNEIsRUFBRSxDQUFDO1FBQ2hDLFdBQU0sR0FBNEIsRUFBRSxDQUFDO0lBaUcvQyxDQUFDO0lBdEJtQixzQkFBSSw0Q0FBSzthQUszQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO1FBakJEOzs7Ozs7Ozs7V0FTRzthQUNlLFVBQVUsS0FBOEI7WUFDeEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDcEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLENBQUM7OztPQUFBO0lBZjRCO1FBQTVCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQzs7c0VBQTBCO0lBWXBDO1FBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7MENBQWtCLEtBQUs7aURBQUwsS0FBSzswREFHdkM7SUFhMEI7UUFBMUIsS0FBSyxDQUFDLGtCQUFrQixDQUFDOztvRUFBd0I7SUFNcEQsZ0NBQUM7Q0FBQSxBQXBHRCxJQW9HQztTQXBHWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0JyZWFkY3J1bWJJdGVtIH0gZnJvbSAnLi9wby1icmVhZGNydW1iLWl0ZW0uaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgZ2VyYSB1bWEgZXN0cnV0dXJhIGRlIG5hdmVnYcOnw6NvIHF1ZSBhcHJlc2VudGEgYW8gdXN1w6FyaW8gYSBsb2NhbGl6YcOnw6NvXG4gKiBkYSBVUkwgYXR1YWwsIGV4aWJpbmRvIGFzIGFudGVjZXNzb3JhcyBjb25mb3JtZSDDqSByZWFsaXphZG8gYSBuYXZlZ2HDp8OjbyBuYSBhcGxpY2HDp8Ojby5cbiAqXG4gKiBRdWFuZG8gbsOjbyBob3V2ZXIgZXNwYcOnYW1lbnRvIHN1ZmljaWVudGUgcGFyYSBleGliaS1sw6FzLCBvIGNvbXBvbmVudGUgc2UgZW5jYXJyZWdhIHRhbWLDqW1cbiAqIGRlIGFncnVwYXIgYXMgVVJMcyBhbnRlY2Vzc29yYXMsIGdlcmFuZG8gYXNzaW0gdW0gw61jb25lIHF1ZSBwZXJtaXRlIGEgdmlzdWFsaXphw6fDo28gZW0gY2FzY2F0YS5cbiAqXG4gKiBDYXNvIHVtIGVuZGVyZcOnbyBzZWphIGVzcGVjaWZpY2FkbyBuYSBwcm9wcmllZGFkZSBgcC1mYXZvcml0ZS1zZXJ2aWNlYCwgbyBjb21wb25lbnRlIHBlcm1pdGUgYW8gdXN1w6FyaW9cbiAqIGZhdm9yaXRhciBhIFVSTC5cbiAqXG4gKiBIYXZlbmRvIG5lY2Vzc2lkYWRlIGRlIGluY2x1aXIgcGFyw6JtZXRyb3MgbmEgcmVxdWlzacOnw6NvIGRvIHNlcnZpw6dvLFxuICogbyBjb21wb25lbnRlIGRpc3DDtWUgZGEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgIHF1ZSByZWNlYmUgdW0gb2JqZXRvIGNvbnRlbmRvIGFzIGluZm9ybWHDp8O1ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJCYXNlQ29tcG9uZW50IHtcblxuICBpdGVtc1ZpZXc6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+ID0gW107XG4gIHByaXZhdGUgX2l0ZW1zOiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPiA9IFtdO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFBlcm1pdGUgZGVmaW5pciB1bWEgVVJMIG5vIGNvbXBvbmVudGUgYHBvLWJyZWFkY3J1bWJgIHBhcmEgZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhci5cbiAgICogPiBQYXJhIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGUsIG8gw7psdGltbyBgUG9CcmVhZGNydW1iSXRlbWAgZGEgbGlzdGEgZGUgaXRlbXMgZGEgcHJvcHJpZWRhZGUgYHAtaXRlbXNgIGRldmUgdGVyIHVtIGxpbmsgaW5mb3JtYWRvLlxuICAgKlxuICAgKiA+IEEgQVBJIGRldmUgZXN0YXIgcHJlcGFyYWRhIHBhcmEgcmV0b3JuYXIgdW0gb2JqZXRvIG5vIGZvcm1hdG8gYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YC5cbiAgICpcbiAgICogQW8gaW5pY2lhciwgbyBgcG8tYnJlYWRjcnVtYmAgZmF6IHVtIEdFVCBuYSBVUkwgZGVmaW5pZGEgbmEgcHJvcHJpZWRhZGUgYHAtZmF2b3JpdGUtc2VydmljZWAgZSBkZXZlIHJldG9ybmFyIGEgcHJvcHJpZWRhZGVcbiAgICogYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YCBkbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkZWZpbmlkbyBuYSBsaXN0YSBkZSBpdGVucyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXG4gICAqXG4gICAqIEFvIGNsaWNhciBlbSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyIG8gYHBvLWJyZWFkY3J1bWJgIGZheiB1bSBQT1NUIGNvbSBvIGxpbmsgZSBhIHByb3ByaWVkYWRlIGB7IGlzRmF2b3JpdGU6IGJvb2xlYW4gfWBcbiAgICogZGVmaW5pZG9zIG5vIMO6bHRpbW8gaXRlbSBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXG4gICAqXG4gICAqID4gQ2FzbyBhbGd1bSBwYXLDom1ldHJvIHNlamEgZGVmaW5pZG8gbmEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgLCBvIG1lc21vIHNlcsOhIGVudmlhZG8gcGFyYSBhIEFQSSBlIHJldG9ybmFyw6FcbiAgICogYXDDs3MgZmF6ZXIgdW0gR0VUIG91IFBPU1QuXG4gICAqXG4gICAqIEV4ZW1wbG8gZGUgVVJMIGNvbnRlbmRvIG8gc2VydmnDp28gZGUgZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhcjpcbiAgICpcbiAgICogYGBgXG4gICAqIGh0dHBzOi8vcG9ydGluYXJpLmlvL3NhbXBsZS9hcGkvZmF2b3JpdGVcbiAgICogYGBgXG4gICAqXG4gICAqIEFvIGZhemVyIG8gR0VUIG8gYHBvLWJyZWFkY3J1bWJgIGNvbmNhdGVuYSBvIGxpbmsgY29tIGEgVVJMIGRlIHNlcnZpw6dvLiBFeGVtcGxvOlxuICAgKlxuICAgKiBgYGBcbiAgICogR0VUIGh0dHA6Ly88ZG9tYWluPi9hcGkvZmF2b3JpdGU/dXJsPS9leGFtcGxlXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogR0VUIGh0dHA6Ly9wby5wb3J0aW5hcmkuY29tLmJyL3NhbXBsZS9hcGkvZmF2b3JpdGU/dXJsPS9leGFtcGxlXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogUE9TVFxuICAgKiBwYXlsb2FkOiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogJy9leGFtcGxlJyB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBDYXNvIHBvc3N1YSBwYXLDom1ldHJvcyBkZWZpbmlkb3MgbmEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgOlxuICAgKlxuICAgKiBgYGBcbiAgICogUE9TVFxuICAgKiBwYXlsb2FkOiB7IGlzRmF2b3JpdGU6IHRydWUsIHVybDogXCIvZXhhbXBsZVwiLCBwYXJhbXM6IFwieyBpZDogMTQsIHVzZXI6ICdkZXYucG9ydGluYXJpJyB9XCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogRXhlbXBsb3MgZGUgcmV0b3JubzpcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiIH1cbiAgICogYGBgXG4gICAqXG4gICAqIGBgYFxuICAgKiB7IGlzRmF2b3JpdGU6IGZhbHNlLCB1cmw6IFwiL2V4YW1wbGVcIiwgcGFyYW1zOiBcInsgaWQ6IDE0LCB1c2VyOiAnZGV2LnBvcnRpbmFyaScgfVwiIH1cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtZmF2b3JpdGUtc2VydmljZScpIGZhdm9yaXRlU2VydmljZT86IHN0cmluZztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIExpc3RhIGRlIGl0ZW5zIGRvIF9icmVhZGNydW1iXy5cbiAgICpcbiAgICogKipFeGVtcGxvOioqXG4gICAqIGBgYFxuICAgKiB7IGxhYmVsOiAnUG8gUG9ydGFsJywgbGluazogJ3BvcnRhbCcgfVxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1pdGVtcycpIHNldCBpdGVtcyhpdGVtczogQXJyYXk8UG9CcmVhZGNydW1iSXRlbT4pIHtcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xuICAgIHRoaXMuaXRlbXNWaWV3ID0gW10uY29uY2F0KGl0ZW1zKTtcbiAgfVxuXG4gIGdldCBpdGVtcygpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlbXM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIHBvc3NpYmlsaXRhIG8gZW52aW8gZGUgcGFyw6JtZXRyb3MgYWRpY2lvbmFpcyDDoCByZXF1aXNpw6fDo28uXG4gICAqL1xuICBASW5wdXQoJ3AtcGFyYW1zLXNlcnZpY2UnKSBwYXJhbXNTZXJ2aWNlPzogb2JqZWN0O1xuXG4gIHByb3RlY3RlZCBjbGlja291dExpc3RlbmVyOiAoKSA9PiB2b2lkO1xuXG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxufVxuIl19