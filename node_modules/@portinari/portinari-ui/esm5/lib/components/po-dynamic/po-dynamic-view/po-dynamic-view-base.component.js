import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { convertToBoolean, isTypeof } from '../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../po-dynamic.util';
/**
 *
 * @description
 *
 * Componente para listar dados dinamicamente a partir de uma lista de objetos.
 *
 * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.
 *
 */
var PoDynamicViewBaseComponent = /** @class */ (function () {
    function PoDynamicViewBaseComponent(currencyPipe, datePipe, decimalPipe, timePipe, titleCasePipe, dynamicViewService) {
        this.currencyPipe = currencyPipe;
        this.datePipe = datePipe;
        this.decimalPipe = decimalPipe;
        this.timePipe = timePipe;
        this.titleCasePipe = titleCasePipe;
        this.dynamicViewService = dynamicViewService;
        this._fields = [];
        this._showAllValue = false;
        this._value = {};
        this.visibleFields = [];
    }
    Object.defineProperty(PoDynamicViewBaseComponent.prototype, "fields", {
        get: function () {
            return this._fields;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de objetos que implementam a interface `PoDynamicView`.
         *
         * > Ex: `[ { property: 'age' } ]`
         *
         * Regras de tipagem e formatação dos valores exibidos:
         *
         * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe "'BRL', 'symbol', '1.2-2'"
         * como formato padrão.
         * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.
         * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.
         * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.
         * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.
         *
         * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.
         *
         * @default `[]`
         */
        set: function (fields) {
            this._fields = Array.isArray(fields) ? tslib_1.__spread(fields) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDynamicViewBaseComponent.prototype, "showAllValue", {
        get: function () {
            return this._showAllValue;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.
         *
         * @default `false`
         */
        set: function (value) {
            this._showAllValue = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDynamicViewBaseComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * @description
         *
         * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*
         * dos objetos contidos na propridade `p-fields`.
         *
         * > Ex: `{ age: '35' }`
         */
        set: function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    // retorna os fields com os valores recuperados do objeto value.
    PoDynamicViewBaseComponent.prototype.getConfiguredFields = function () {
        var _this = this;
        var newFields = [];
        this.fields.forEach(function (field) {
            if (isVisibleField(field)) {
                newFields.push(_this.createField(field));
            }
        });
        return newFields;
    };
    // retorna fields ligado ao value mais os atributos do value que não possuiam fields.
    PoDynamicViewBaseComponent.prototype.getMergedFields = function () {
        var _this = this;
        var mergedFields = tslib_1.__spread(this.getConfiguredFields());
        this.getValueFields().forEach(function (valueField) {
            var fieldIndex = mergedFields.findIndex(function (field) { return field.property === valueField.property; });
            var property = valueField.property;
            if (fieldIndex === -1) {
                mergedFields.push(_this.createField({ property: property }));
            }
        });
        return mergedFields;
    };
    // retorna o objeto value como fields.
    PoDynamicViewBaseComponent.prototype.getValueFields = function () {
        var _this = this;
        return Object.keys(this.value).map(function (property) {
            return _this.createField({ property: property });
        });
    };
    PoDynamicViewBaseComponent.prototype.createField = function (field) {
        var property = field.property;
        var value = this.transformValue(field.type, this.value[property], field.format);
        var classesGridColumns = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return tslib_1.__assign({ property: property,
            value: value, label: this.titleCasePipe.transform(property), cssClass: classesGridColumns }, field);
    };
    PoDynamicViewBaseComponent.prototype.transformValue = function (type, value, format) {
        var transformedValue = value;
        switch (type) {
            case 'currency':
                transformedValue = this.currencyPipe.transform(value, format || 'BRL', 'symbol', '1.2-2');
                break;
            case 'date':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy');
                break;
            case 'dateTime':
                transformedValue = this.datePipe.transform(value, format || 'dd/MM/yyyy HH:mm:ss');
                break;
            case 'number':
                transformedValue = this.decimalPipe.transform(value, format);
                break;
            case 'time':
                transformedValue = this.timePipe.transform(value, format || 'HH:mm:ss.ffffff');
                break;
        }
        return transformedValue;
    };
    tslib_1.__decorate([
        Input('p-fields'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoDynamicViewBaseComponent.prototype, "fields", null);
    tslib_1.__decorate([
        Input('p-show-all-value'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDynamicViewBaseComponent.prototype, "showAllValue", null);
    tslib_1.__decorate([
        Input('p-load'),
        tslib_1.__metadata("design:type", Object)
    ], PoDynamicViewBaseComponent.prototype, "load", void 0);
    tslib_1.__decorate([
        Input('p-value'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoDynamicViewBaseComponent.prototype, "value", null);
    return PoDynamicViewBaseComponent;
}());
export { PoDynamicViewBaseComponent };
//# sourceMappingURL=data:application/json;base64,