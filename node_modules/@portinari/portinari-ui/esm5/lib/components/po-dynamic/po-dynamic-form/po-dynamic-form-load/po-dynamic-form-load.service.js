import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
var PoDynamicFormLoadService = /** @class */ (function (_super) {
    tslib_1.__extends(PoDynamicFormLoadService, _super);
    function PoDynamicFormLoadService(http) {
        return _super.call(this, http) || this;
    }
    PoDynamicFormLoadService.prototype.createAndUpdateFieldsForm = function (loadedFields, fields) {
        if (loadedFields === void 0) { loadedFields = []; }
        if (fields === void 0) { fields = []; }
        return tslib_1.__spread(loadedFields).reduce(function (updatedFields, field) {
            var index = updatedFields.findIndex(function (updatedField) { return updatedField.property === field.property; });
            var hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = tslib_1.__assign({}, fields[index], field);
            }
            else {
                updatedFields.push(field);
            }
            return updatedFields;
        }, tslib_1.__spread(fields));
    };
    PoDynamicFormLoadService.prototype.executeLoad = function (load, value) {
        var _this = this;
        return this.execute(load, value)
            .pipe(map(function (loadedFormdData) { return _this.setFormDefaultIfEmpty(loadedFormdData); }));
    };
    PoDynamicFormLoadService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoDynamicFormLoadService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpClient])
    ], PoDynamicFormLoadService);
    return PoDynamicFormLoadService;
}(PoDynamicFormOperation));
export { PoDynamicFormLoadService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLWxvYWQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLWxvYWQvcG8tZHluYW1pYy1mb3JtLWxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBR2hHO0lBQThDLG9EQUFzQjtJQUVsRSxrQ0FBWSxJQUFnQjtlQUMxQixrQkFBTSxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsNERBQXlCLEdBQXpCLFVBQTBCLFlBQTRDLEVBQUUsTUFBc0M7UUFBcEYsNkJBQUEsRUFBQSxpQkFBNEM7UUFBRSx1QkFBQSxFQUFBLFdBQXNDO1FBQzVHLE9BQU8saUJBQUssWUFBWSxFQUFHLE1BQU0sQ0FBQyxVQUFDLGFBQWEsRUFBRSxLQUFLO1lBQ3JELElBQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsVUFBQSxZQUFZLElBQUksT0FBQSxZQUFZLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxRQUFRLEVBQXhDLENBQXdDLENBQUMsQ0FBQztZQUNoRyxJQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDO1lBRS9CLElBQUksV0FBVyxFQUFFO2dCQUNmLGFBQWEsQ0FBQyxLQUFLLENBQUMsd0JBQVEsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFLLEtBQUssQ0FBRSxDQUFDO2FBQ3ZEO2lCQUFNO2dCQUNMLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0I7WUFFRCxPQUFPLGFBQWEsQ0FBQztRQUN2QixDQUFDLG1CQUFPLE1BQU0sRUFBRyxDQUFDO0lBQ3BCLENBQUM7SUFFRCw4Q0FBVyxHQUFYLFVBQVksSUFBdUIsRUFBRSxLQUFVO1FBQS9DLGlCQUtDO1FBSkMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUM7YUFDN0IsSUFBSSxDQUNILEdBQUcsQ0FBQyxVQUFBLGVBQWUsSUFBSSxPQUFBLEtBQUksQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLENBQUMsRUFBM0MsQ0FBMkMsQ0FDbkUsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBeEJpQixVQUFVOztJQUZqQix3QkFBd0I7UUFEcEMsVUFBVSxFQUFFO2lEQUdPLFVBQVU7T0FGakIsd0JBQXdCLENBNEJwQztJQUFELCtCQUFDO0NBQUEsQUE1QkQsQ0FBOEMsc0JBQXNCLEdBNEJuRTtTQTVCWSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1maWVsZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybU9wZXJhdGlvbiB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1vcGVyYXRpb24vcG8tZHluYW1pYy1mb3JtLW9wZXJhdGlvbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0R5bmFtaWNGb3JtTG9hZFNlcnZpY2UgZXh0ZW5kcyBQb0R5bmFtaWNGb3JtT3BlcmF0aW9uIHtcblxuICBjb25zdHJ1Y3RvcihodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoaHR0cCk7XG4gIH1cblxuICBjcmVhdGVBbmRVcGRhdGVGaWVsZHNGb3JtKGxvYWRlZEZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiA9IFtdLCBmaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4gPSBbXSkge1xuICAgIHJldHVybiBbIC4uLmxvYWRlZEZpZWxkcyBdLnJlZHVjZSgodXBkYXRlZEZpZWxkcywgZmllbGQpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdXBkYXRlZEZpZWxkcy5maW5kSW5kZXgodXBkYXRlZEZpZWxkID0+IHVwZGF0ZWRGaWVsZC5wcm9wZXJ0eSA9PT0gZmllbGQucHJvcGVydHkpO1xuICAgICAgY29uc3QgaGFzUHJvcGVydHkgPSBpbmRleCA+PSAwO1xuXG4gICAgICBpZiAoaGFzUHJvcGVydHkpIHtcbiAgICAgICAgdXBkYXRlZEZpZWxkc1tpbmRleF0gPSB7IC4uLmZpZWxkc1tpbmRleF0sIC4uLmZpZWxkIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cGRhdGVkRmllbGRzLnB1c2goZmllbGQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXBkYXRlZEZpZWxkcztcbiAgICB9LCBbIC4uLmZpZWxkcyBdKTtcbiAgfVxuXG4gIGV4ZWN1dGVMb2FkKGxvYWQ6IEZ1bmN0aW9uIHwgc3RyaW5nLCB2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShsb2FkLCB2YWx1ZSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAobG9hZGVkRm9ybWREYXRhID0+IHRoaXMuc2V0Rm9ybURlZmF1bHRJZkVtcHR5KGxvYWRlZEZvcm1kRGF0YSlcbiAgICAgICkpO1xuICB9XG5cbn1cbiJdfQ==