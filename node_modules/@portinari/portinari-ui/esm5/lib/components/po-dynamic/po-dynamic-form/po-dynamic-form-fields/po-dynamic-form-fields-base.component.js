import * as tslib_1 from "tslib";
import { Input, EventEmitter, Output } from '@angular/core';
import { isTypeof } from '../../../../utils/util';
import { getGridColumnsClasses, isVisibleField } from '../../po-dynamic.util';
import { PoDynamicFieldType } from '../../po-dynamic-field-type.enum';
var PoDynamicFormFieldsBaseComponent = /** @class */ (function () {
    function PoDynamicFormFieldsBaseComponent(titleCasePipe) {
        this.titleCasePipe = titleCasePipe;
        this._value = {};
        this.visibleFields = [];
        this.fieldsChange = new EventEmitter();
        this.formValidate = new EventEmitter();
    }
    Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "fields", {
        get: function () {
            return this._fields;
        },
        // array de objetos que implementam a interface PoDynamicFormField, que serão exibidos no componente.
        set: function (value) {
            this._fields = Array.isArray(value) ? tslib_1.__spread(value) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDynamicFormFieldsBaseComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        // valor que será utilizado para iniciar valor no componente.
        set: function (value) {
            this._value = value && isTypeof(value, 'object') ? value : {};
        },
        enumerable: true,
        configurable: true
    });
    PoDynamicFormFieldsBaseComponent.prototype.compareTo = function (value, compareTo) {
        return value === compareTo;
    };
    // retorna um array com os objetos configurados e visiveis.
    PoDynamicFormFieldsBaseComponent.prototype.getVisibleFields = function () {
        var _this = this;
        var visibleFields = [];
        this.fields.forEach(function (field) {
            if (_this.existsProperty(visibleFields, field.property)) {
                _this.printError("\"po-dynamic-form\" property \"" + field.property + "\" est\u00E1 duplicado. Interface: PoDynamicFormField.");
                return;
            }
            if (!field['property']) {
                _this.printError('"po-dynamic-form" É obrigatório ser especificado um property.');
                return;
            }
            if (isVisibleField(field)) {
                visibleFields.push(_this.createField(field));
            }
        });
        return visibleFields;
    };
    // converte um array em string para um array de objetos que contem label e value.
    PoDynamicFormFieldsBaseComponent.prototype.convertOptions = function (options) {
        var everyOptionString = options.every(function (option) { return typeof option === 'string'; });
        if (everyOptionString) {
            return options.map(function (value) { return ({ label: value, value: value }); });
        }
        return options;
    };
    // cria um novo objeto com as classes de grid system, com control (tipo do componente) e label default.
    PoDynamicFormFieldsBaseComponent.prototype.createField = function (field) {
        var control = this.getComponentControl(field);
        var options = !!field.options ? this.convertOptions(field.options) : undefined;
        var focus = this.hasFocus(field);
        var componentClass = getGridColumnsClasses(field.gridSmColumns, field.gridMdColumns, field.gridLgColumns, field.gridXlColumns, field.gridColumns);
        return tslib_1.__assign({ label: this.titleCasePipe.transform(field.property) }, field, { componentClass: componentClass,
            control: control,
            focus: focus,
            options: options });
    };
    PoDynamicFormFieldsBaseComponent.prototype.existsProperty = function (fields, property) {
        return fields.some(function (field) {
            return field.property === property;
        });
    };
    // recupera o componente de acordo com algumas regras do field.
    PoDynamicFormFieldsBaseComponent.prototype.getComponentControl = function (field) {
        if (field === void 0) { field = {}; }
        var type = field && field.type ? field.type.toLocaleLowerCase() : 'string';
        if (this.isNumberType(field, type)) {
            return 'number';
        }
        else if (this.isCurrencyType(field, type)) {
            return 'decimal';
        }
        else if (this.isSelect(field)) {
            return 'select';
        }
        else if (this.isRadioGroup(field)) {
            return 'radioGroup';
        }
        else if (this.isCheckboxGroup(field)) {
            return 'checkboxGroup';
        }
        else if (this.isMultiselect(field)) {
            return 'multiselect';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Boolean)) {
            return 'switch';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Date) || this.compareTo(type, PoDynamicFieldType.DateTime)) {
            return 'datepicker';
        }
        else if (this.compareTo(type, PoDynamicFieldType.Time)) {
            field.mask = field.mask || '99:99';
            return 'input';
        }
        else if (this.isCombo(field)) {
            return 'combo';
        }
        else if (this.isLookup(field)) {
            return 'lookup';
        }
        else if (this.isTextarea(field)) {
            return 'textarea';
        }
        else if (this.isPassword(field)) {
            return 'password';
        }
        return 'input';
    };
    PoDynamicFormFieldsBaseComponent.prototype.hasFocus = function (field) {
        return !!this.autoFocus && this.autoFocus === field.property;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isCheckboxGroup = function (field) {
        var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
        return !optionsService && optionsMulti && !!options && options.length <= 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isCombo = function (field) {
        var optionsService = field.optionsService;
        return !!optionsService && isTypeof(optionsService, 'string');
    };
    PoDynamicFormFieldsBaseComponent.prototype.isCurrencyType = function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, PoDynamicFieldType.Currency) && (!mask && !pattern);
    };
    PoDynamicFormFieldsBaseComponent.prototype.isLookup = function (field) {
        var searchService = field.searchService;
        return !!searchService && isTypeof(searchService, 'string');
    };
    PoDynamicFormFieldsBaseComponent.prototype.isMultiselect = function (field) {
        var optionsService = field.optionsService, optionsMulti = field.optionsMulti, options = field.options;
        return !optionsService && optionsMulti && !!options && options.length > 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isNumberType = function (field, type) {
        var mask = field.mask, pattern = field.pattern;
        return this.compareTo(type, PoDynamicFieldType.Number) && (!mask && !pattern);
    };
    PoDynamicFormFieldsBaseComponent.prototype.isPassword = function (field) {
        var secret = field.secret;
        return secret;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isRadioGroup = function (field) {
        var optionsMulti = field.optionsMulti, options = field.options;
        return !optionsMulti && !!options && options.length <= 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isSelect = function (field) {
        var optionsMulti = field.optionsMulti, options = field.options;
        return !optionsMulti && !!options && options.length > 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.isTextarea = function (field) {
        var rows = field.rows;
        return rows && rows >= 3;
    };
    PoDynamicFormFieldsBaseComponent.prototype.printError = function (error) {
        console.error(error);
    };
    tslib_1.__decorate([
        Input('p-auto-focus'),
        tslib_1.__metadata("design:type", String)
    ], PoDynamicFormFieldsBaseComponent.prototype, "autoFocus", void 0);
    tslib_1.__decorate([
        Input('p-fields'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoDynamicFormFieldsBaseComponent.prototype, "fields", null);
    tslib_1.__decorate([
        Output('p-fieldsChange'),
        tslib_1.__metadata("design:type", Object)
    ], PoDynamicFormFieldsBaseComponent.prototype, "fieldsChange", void 0);
    tslib_1.__decorate([
        Input('p-value'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoDynamicFormFieldsBaseComponent.prototype, "value", null);
    tslib_1.__decorate([
        Input('p-disabled-form'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoDynamicFormFieldsBaseComponent.prototype, "disabledForm", void 0);
    tslib_1.__decorate([
        Input('p-validate'),
        tslib_1.__metadata("design:type", Object)
    ], PoDynamicFormFieldsBaseComponent.prototype, "validate", void 0);
    tslib_1.__decorate([
        Output('p-form-validate'),
        tslib_1.__metadata("design:type", Object)
    ], PoDynamicFormFieldsBaseComponent.prototype, "formValidate", void 0);
    return PoDynamicFormFieldsBaseComponent;
}());
export { PoDynamicFormFieldsBaseComponent };
//# sourceMappingURL=data:application/json;base64,