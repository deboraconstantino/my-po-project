import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { PoDynamicFormOperation } from '../po-dynamic-form-operation/po-dynamic-form-operation';
var PoDynamicFormValidationService = /** @class */ (function (_super) {
    tslib_1.__extends(PoDynamicFormValidationService, _super);
    function PoDynamicFormValidationService(http) {
        return _super.call(this, http) || this;
    }
    PoDynamicFormValidationService.prototype.sendFieldChange = function (field, value) {
        var _this = this;
        var changedValue = { property: field.property, value: value };
        return this.execute(field.validate, changedValue).pipe(map(function (validateFields) { return _this.setFieldDefaultIfEmpty(validateFields); }));
    };
    PoDynamicFormValidationService.prototype.sendFormChange = function (validate, field, value) {
        var _this = this;
        var changedValue = { property: field.property, value: value };
        return this.execute(validate, changedValue).pipe(map(function (validateFields) { return _this.setFormDefaultIfEmpty(validateFields); }));
    };
    PoDynamicFormValidationService.prototype.updateFieldsForm = function (validatedFields, fields) {
        if (validatedFields === void 0) { validatedFields = []; }
        if (fields === void 0) { fields = []; }
        return tslib_1.__spread(validatedFields).reduce(function (updatedFields, validatedField) {
            var index = updatedFields.findIndex(function (field) { return field.property === validatedField.property; });
            var hasProperty = index >= 0;
            if (hasProperty) {
                updatedFields[index] = tslib_1.__assign({}, fields[index], validatedField);
            }
            return updatedFields;
        }, tslib_1.__spread(fields));
    };
    PoDynamicFormValidationService.prototype.setFieldDefaultIfEmpty = function (validateFields) {
        return validateFields || {
            field: {}
        };
    };
    PoDynamicFormValidationService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoDynamicFormValidationService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpClient])
    ], PoDynamicFormValidationService);
    return PoDynamicFormValidationService;
}(PoDynamicFormOperation));
export { PoDynamicFormValidationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZHluYW1pYy9wby1keW5hbWljLWZvcm0vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24vcG8tZHluYW1pYy1mb3JtLXZhbGlkYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBSWhHO0lBQW9ELDBEQUFzQjtJQUV4RSx3Q0FBWSxJQUFnQjtlQUMxQixrQkFBTSxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsd0RBQWUsR0FBZixVQUFnQixLQUF5QixFQUFFLEtBQVU7UUFBckQsaUJBS0M7UUFKQyxJQUFNLFlBQVksR0FBOEIsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO1FBRXBGLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FDcEQsR0FBRyxDQUFDLFVBQUEsY0FBYyxJQUFJLE9BQUEsS0FBSSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxFQUEzQyxDQUEyQyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsdURBQWMsR0FBZCxVQUFlLFFBQTJCLEVBQUUsS0FBeUIsRUFBRSxLQUFVO1FBQWpGLGlCQUlDO1FBSEMsSUFBTSxZQUFZLEdBQThCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxPQUFBLEVBQUUsQ0FBQztRQUVwRixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQSxjQUFjLElBQUksT0FBQSxLQUFJLENBQUMscUJBQXFCLENBQUMsY0FBYyxDQUFDLEVBQTFDLENBQTBDLENBQUMsQ0FBQyxDQUFDO0lBQ3RILENBQUM7SUFFRCx5REFBZ0IsR0FBaEIsVUFBaUIsZUFBK0MsRUFBRSxNQUFzQztRQUF2RixnQ0FBQSxFQUFBLG9CQUErQztRQUFFLHVCQUFBLEVBQUEsV0FBc0M7UUFDdEcsT0FBTyxpQkFBSyxlQUFlLEVBQUcsTUFBTSxDQUFDLFVBQUMsYUFBYSxFQUFFLGNBQWM7WUFDakUsSUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssQ0FBQyxRQUFRLEtBQUssY0FBYyxDQUFDLFFBQVEsRUFBMUMsQ0FBMEMsQ0FBQyxDQUFDO1lBQzNGLElBQU0sV0FBVyxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7WUFFL0IsSUFBSSxXQUFXLEVBQUU7Z0JBQ2YsYUFBYSxDQUFDLEtBQUssQ0FBQyx3QkFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUssY0FBYyxDQUFFLENBQUM7YUFDaEU7WUFFRCxPQUFPLGFBQWEsQ0FBQztRQUN2QixDQUFDLG1CQUFPLE1BQU0sRUFBRyxDQUFDO0lBQ3BCLENBQUM7SUFFTywrREFBc0IsR0FBOUIsVUFBK0IsY0FBbUI7UUFDaEQsT0FBTyxjQUFjLElBQUk7WUFDdkIsS0FBSyxFQUFFLEVBQUU7U0FDVixDQUFDO0lBQ0osQ0FBQzs7Z0JBbENpQixVQUFVOztJQUZqQiw4QkFBOEI7UUFEMUMsVUFBVSxFQUFFO2lEQUdPLFVBQVU7T0FGakIsOEJBQThCLENBc0MxQztJQUFELHFDQUFDO0NBQUEsQUF0Q0QsQ0FBb0Qsc0JBQXNCLEdBc0N6RTtTQXRDWSw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1GaWVsZCB9IGZyb20gJy4uL3BvLWR5bmFtaWMtZm9ybS1maWVsZC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkIH0gZnJvbSAnLi9wby1keW5hbWljLWZvcm0tZmllbGQtY2hhbmdlZC5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0R5bmFtaWNGb3JtT3BlcmF0aW9uIH0gZnJvbSAnLi4vcG8tZHluYW1pYy1mb3JtLW9wZXJhdGlvbi9wby1keW5hbWljLWZvcm0tb3BlcmF0aW9uJztcclxuaW1wb3J0IHsgUG9EeW5hbWljRm9ybVZhbGlkYXRpb24gfSBmcm9tICcuL3BvLWR5bmFtaWMtZm9ybS12YWxpZGF0aW9uLmludGVyZmFjZSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQb0R5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UgZXh0ZW5kcyBQb0R5bmFtaWNGb3JtT3BlcmF0aW9uIHtcclxuXHJcbiAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCkge1xyXG4gICAgc3VwZXIoaHR0cCk7XHJcbiAgfVxyXG5cclxuICBzZW5kRmllbGRDaGFuZ2UoZmllbGQ6IFBvRHluYW1pY0Zvcm1GaWVsZCwgdmFsdWU6IGFueSkge1xyXG4gICAgY29uc3QgY2hhbmdlZFZhbHVlOiBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkID0geyBwcm9wZXJ0eTogZmllbGQucHJvcGVydHksIHZhbHVlIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZShmaWVsZC52YWxpZGF0ZSwgY2hhbmdlZFZhbHVlKS5waXBlKFxyXG4gICAgICBtYXAodmFsaWRhdGVGaWVsZHMgPT4gdGhpcy5zZXRGaWVsZERlZmF1bHRJZkVtcHR5KHZhbGlkYXRlRmllbGRzKSkpO1xyXG4gIH1cclxuXHJcbiAgc2VuZEZvcm1DaGFuZ2UodmFsaWRhdGU6IEZ1bmN0aW9uIHwgc3RyaW5nLCBmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkLCB2YWx1ZTogYW55KTogT2JzZXJ2YWJsZTxQb0R5bmFtaWNGb3JtVmFsaWRhdGlvbj4ge1xyXG4gICAgY29uc3QgY2hhbmdlZFZhbHVlOiBQb0R5bmFtaWNGb3JtRmllbGRDaGFuZ2VkID0geyBwcm9wZXJ0eTogZmllbGQucHJvcGVydHksIHZhbHVlIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZSh2YWxpZGF0ZSwgY2hhbmdlZFZhbHVlKS5waXBlKG1hcCh2YWxpZGF0ZUZpZWxkcyA9PiB0aGlzLnNldEZvcm1EZWZhdWx0SWZFbXB0eSh2YWxpZGF0ZUZpZWxkcykpKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUZpZWxkc0Zvcm0odmFsaWRhdGVkRmllbGRzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW10sIGZpZWxkczogQXJyYXk8UG9EeW5hbWljRm9ybUZpZWxkPiA9IFtdKSB7XHJcbiAgICByZXR1cm4gWyAuLi52YWxpZGF0ZWRGaWVsZHMgXS5yZWR1Y2UoKHVwZGF0ZWRGaWVsZHMsIHZhbGlkYXRlZEZpZWxkKSA9PiB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdXBkYXRlZEZpZWxkcy5maW5kSW5kZXgoZmllbGQgPT4gZmllbGQucHJvcGVydHkgPT09IHZhbGlkYXRlZEZpZWxkLnByb3BlcnR5KTtcclxuICAgICAgY29uc3QgaGFzUHJvcGVydHkgPSBpbmRleCA+PSAwO1xyXG5cclxuICAgICAgaWYgKGhhc1Byb3BlcnR5KSB7XHJcbiAgICAgICAgdXBkYXRlZEZpZWxkc1tpbmRleF0gPSB7IC4uLmZpZWxkc1tpbmRleF0sIC4uLnZhbGlkYXRlZEZpZWxkIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB1cGRhdGVkRmllbGRzO1xyXG4gICAgfSwgWyAuLi5maWVsZHMgXSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHNldEZpZWxkRGVmYXVsdElmRW1wdHkodmFsaWRhdGVGaWVsZHM6IGFueSk6IGFueSB7XHJcbiAgICByZXR1cm4gdmFsaWRhdGVGaWVsZHMgfHwge1xyXG4gICAgICBmaWVsZDoge31cclxuICAgIH07XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=