import * as tslib_1 from "tslib";
import { AfterViewInit, Component, ElementRef, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { PoControlPositionService } from './../../services/po-control-position/po-control-position.service';
import { PoPopoverBaseComponent } from './po-popover-base.component';
/**
 *
 * @docsExtends PoPopoverBaseComponent
 *
 * @example
 *
 * <example name="po-popover-basic" title="Portinari Popover Basic">
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.html"> </file>
 *   <file name="sample-po-popover-basic/sample-po-popover-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-labs" title="Portinari Popover Labs">
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.html"> </file>
 *   <file name="sample-po-popover-labs/sample-po-popover-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-popover-credit-card" title="Portinari Popover - Credit Card">
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.html"> </file>
 *   <file name="sample-po-popover-credit-card/sample-po-popover-credit-card.component.ts"> </file>
 * </example>
 */
var PoPopoverComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoPopoverComponent, _super);
    function PoPopoverComponent(renderer, poControlPosition) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.poControlPosition = poControlPosition;
        _this.arrowDirection = 'left';
        return _this;
    }
    PoPopoverComponent.prototype.ngAfterViewInit = function () {
        this.initEventListenerFunction();
        this.setElementsControlPosition();
        this.setRendererListenInit();
    };
    PoPopoverComponent.prototype.ngOnDestroy = function () {
        this.removeListeners();
    };
    PoPopoverComponent.prototype.close = function () {
        this.isHidden = true;
    };
    PoPopoverComponent.prototype.debounceResize = function () {
        var _this = this;
        clearTimeout(this.timeoutResize);
        this.timeoutResize = setTimeout(function () {
            _this.setPopoverPosition();
        }, 200);
    };
    PoPopoverComponent.prototype.open = function () {
        var _this = this;
        this.addScrollEventListener();
        this.isHidden = false;
        this.setOpacity(0);
        setTimeout(function () {
            _this.setElementsControlPosition();
            _this.setPopoverPosition();
            _this.setOpacity(1);
        });
    };
    PoPopoverComponent.prototype.setOpacity = function (value) {
        this.popoverElement.nativeElement.style.opacity = value;
    };
    PoPopoverComponent.prototype.setPopoverPosition = function () {
        this.poControlPosition.adjustPosition(this.position);
        this.arrowDirection = this.poControlPosition.getArrowDirection();
    };
    PoPopoverComponent.prototype.setRendererListenInit = function () {
        var _this = this;
        this.resizeListener = this.renderer.listen('window', 'resize', function (event) {
            if (!_this.isHidden) {
                _this.debounceResize();
            }
        });
        if (this.trigger === 'hover') {
            this.mouseEnterListener = this.renderer.listen(this.target.nativeElement, 'mouseenter', function (event) {
                _this.open();
            });
            this.mouseLeaveListener = this.renderer.listen(this.target.nativeElement, 'mouseleave', function (event) {
                _this.close();
            });
        }
        else {
            this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
                _this.togglePopup(event);
            });
        }
    };
    PoPopoverComponent.prototype.togglePopup = function (event) {
        if (!this.isHidden && !this.popoverElement.nativeElement.contains(event.target) &&
            !this.target.nativeElement.contains(event.target)) {
            this.close();
        }
        else if (this.target.nativeElement.contains(event.target)) {
            this.popoverElement.nativeElement.hidden ? this.open() : this.close();
        }
    };
    PoPopoverComponent.prototype.addScrollEventListener = function () {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    };
    PoPopoverComponent.prototype.initEventListenerFunction = function () {
        var _this = this;
        this.eventListenerFunction = function () {
            _this.setPopoverPosition();
        };
    };
    PoPopoverComponent.prototype.removeListeners = function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.mouseEnterListener) {
            this.mouseEnterListener();
        }
        if (this.mouseLeaveListener) {
            this.mouseLeaveListener();
        }
        this.resizeListener();
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    };
    PoPopoverComponent.prototype.setElementsControlPosition = function () {
        var popoverOffset = 8;
        this.poControlPosition.setElements(this.popoverElement.nativeElement, popoverOffset, this.target);
    };
    PoPopoverComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: PoControlPositionService }
    ]; };
    tslib_1.__decorate([
        ViewChild('popoverElement', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoPopoverComponent.prototype, "popoverElement", void 0);
    PoPopoverComponent = tslib_1.__decorate([
        Component({
            selector: 'po-popover',
            template: "<div [hidden]=\"isHidden\" class=\"po-popover\" #popoverElement>\n\n  <div *ngIf=\"!hideArrow\" class=\"po-popover-arrow po-arrow-{{ arrowDirection }}\"></div>\n\n  <div class=\"po-popover-content\">\n    <span *ngIf=\"title\" class=\"po-popover-title\">{{ title }}</span>\n    <ng-content></ng-content>\n  </div>\n</div>\n",
            providers: [PoControlPositionService]
        }),
        tslib_1.__metadata("design:paramtypes", [Renderer2, PoControlPositionService])
    ], PoPopoverComponent);
    return PoPopoverComponent;
}(PoPopoverBaseComponent));
export { PoPopoverComponent };
//# sourceMappingURL=data:application/json;base64,