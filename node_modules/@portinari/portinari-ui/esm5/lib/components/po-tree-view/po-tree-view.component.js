import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component } from '@angular/core';
import { PoTreeViewBaseComponent } from './po-tree-view-base.component';
import { PoTreeViewService } from './services/po-tree-view.service';
/**
 * @docsExtends PoTreeViewBaseComponent
 *
 * @example
 *
 * <example name="po-tree-view-basic" title="Portinari Tree View Basic">
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.html"> </file>
 *  <file name="sample-po-tree-view-basic/sample-po-tree-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-labs" title="Portinari Tree View Labs">
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.html"> </file>
 *  <file name="sample-po-tree-view-labs/sample-po-tree-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-folder-structure" title="Portinari Tree View - Folder Structure">
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.html"> </file>
 *  <file name="sample-po-tree-view-folder-structure/sample-po-tree-view-folder-structure.component.ts"> </file>
 * </example>
 *
 * <example name="po-tree-view-supermarket" title="Portinari Tree View - Supermarket">
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.html"> </file>
 *  <file name="sample-po-tree-view-supermarket/sample-po-tree-view-supermarket.component.ts"> </file>
 * </example>
 */
var PoTreeViewComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoTreeViewComponent, _super);
    function PoTreeViewComponent(treeViewService) {
        var _this = _super.call(this) || this;
        _this.treeViewService = treeViewService;
        return _this;
    }
    Object.defineProperty(PoTreeViewComponent.prototype, "hasItems", {
        get: function () {
            return !!(this.items && this.items.length);
        },
        enumerable: true,
        configurable: true
    });
    PoTreeViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.treeViewService.onExpand().subscribe(function (treeViewItem) {
            _this.emitExpanded(treeViewItem);
        });
        this.treeViewService.onSelect().subscribe(function (treeViewItem) {
            _this.emitSelected(treeViewItem);
        });
    };
    PoTreeViewComponent.prototype.trackByFunction = function (index) {
        return index;
    };
    PoTreeViewComponent.ctorParameters = function () { return [
        { type: PoTreeViewService }
    ]; };
    PoTreeViewComponent = tslib_1.__decorate([
        Component({
            selector: 'po-tree-view',
            template: "<po-container *ngIf=\"hasItems\" p-no-padding p-no-shadow>\n  <ul class=\"po-tree-view\">\n    <po-tree-view-item *ngFor=\"let item of items; trackBy: trackByFunction\"\n      [p-item]=\"item\"\n      [p-selectable]=\"selectable\">\n    </po-tree-view-item>\n  </ul>\n</po-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [PoTreeViewService]
        }),
        tslib_1.__metadata("design:paramtypes", [PoTreeViewService])
    ], PoTreeViewComponent);
    return PoTreeViewComponent;
}(PoTreeViewBaseComponent));
export { PoTreeViewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdHJlZS12aWV3L3BvLXRyZWUtdmlldy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFM0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFeEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFcEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQU9IO0lBQXlDLCtDQUF1QjtJQU05RCw2QkFBb0IsZUFBa0M7UUFBdEQsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLHFCQUFlLEdBQWYsZUFBZSxDQUFtQjs7SUFFdEQsQ0FBQztJQU5ELHNCQUFJLHlDQUFRO2FBQVo7WUFDRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxDQUFDOzs7T0FBQTtJQU1ELHNDQUFRLEdBQVI7UUFBQSxpQkFRQztRQVBDLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUMsWUFBNEI7WUFDckUsS0FBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUMsWUFBNEI7WUFDckUsS0FBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCw2Q0FBZSxHQUFmLFVBQWdCLEtBQWE7UUFDM0IsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDOztnQkFoQm9DLGlCQUFpQjs7SUFOM0MsbUJBQW1CO1FBTi9CLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxjQUFjO1lBQ3hCLHlTQUE0QztZQUM1QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtZQUMvQyxTQUFTLEVBQUUsQ0FBRSxpQkFBaUIsQ0FBRTtTQUNqQyxDQUFDO2lEQU9xQyxpQkFBaUI7T0FOM0MsbUJBQW1CLENBdUIvQjtJQUFELDBCQUFDO0NBQUEsQUF2QkQsQ0FBeUMsdUJBQXVCLEdBdUIvRDtTQXZCWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9UcmVlVmlld0Jhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLXRyZWUtdmlldy1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1RyZWVWaWV3SXRlbSB9IGZyb20gJy4vcG8tdHJlZS12aWV3LWl0ZW0vcG8tdHJlZS12aWV3LWl0ZW0uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvVHJlZVZpZXdTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9wby10cmVlLXZpZXcuc2VydmljZSc7XG5cbi8qKlxuICogQGRvY3NFeHRlbmRzIFBvVHJlZVZpZXdCYXNlQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tdHJlZS12aWV3LWJhc2ljXCIgdGl0bGU9XCJQb3J0aW5hcmkgVHJlZSBWaWV3IEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctYmFzaWMvc2FtcGxlLXBvLXRyZWUtdmlldy1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctYmFzaWMvc2FtcGxlLXBvLXRyZWUtdmlldy1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10cmVlLXZpZXctbGFic1wiIHRpdGxlPVwiUG9ydGluYXJpIFRyZWUgVmlldyBMYWJzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby10cmVlLXZpZXctbGFicy9zYW1wbGUtcG8tdHJlZS12aWV3LWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LWxhYnMvc2FtcGxlLXBvLXRyZWUtdmlldy1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLXRyZWUtdmlldy1mb2xkZXItc3RydWN0dXJlXCIgdGl0bGU9XCJQb3J0aW5hcmkgVHJlZSBWaWV3IC0gRm9sZGVyIFN0cnVjdHVyZVwiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LWZvbGRlci1zdHJ1Y3R1cmUvc2FtcGxlLXBvLXRyZWUtdmlldy1mb2xkZXItc3RydWN0dXJlLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXRyZWUtdmlldy1mb2xkZXItc3RydWN0dXJlL3NhbXBsZS1wby10cmVlLXZpZXctZm9sZGVyLXN0cnVjdHVyZS5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby10cmVlLXZpZXctc3VwZXJtYXJrZXRcIiB0aXRsZT1cIlBvcnRpbmFyaSBUcmVlIFZpZXcgLSBTdXBlcm1hcmtldFwiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LXN1cGVybWFya2V0L3NhbXBsZS1wby10cmVlLXZpZXctc3VwZXJtYXJrZXQuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tdHJlZS12aWV3LXN1cGVybWFya2V0L3NhbXBsZS1wby10cmVlLXZpZXctc3VwZXJtYXJrZXQuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdHJlZS12aWV3JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRyZWUtdmlldy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBwcm92aWRlcnM6IFsgUG9UcmVlVmlld1NlcnZpY2UgXVxufSlcbmV4cG9ydCBjbGFzcyBQb1RyZWVWaWV3Q29tcG9uZW50IGV4dGVuZHMgUG9UcmVlVmlld0Jhc2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGdldCBoYXNJdGVtcygpIHtcbiAgICByZXR1cm4gISEodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCk7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyZWVWaWV3U2VydmljZTogUG9UcmVlVmlld1NlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy50cmVlVmlld1NlcnZpY2Uub25FeHBhbmQoKS5zdWJzY3JpYmUoKHRyZWVWaWV3SXRlbTogUG9UcmVlVmlld0l0ZW0pID0+IHtcbiAgICAgIHRoaXMuZW1pdEV4cGFuZGVkKHRyZWVWaWV3SXRlbSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLnRyZWVWaWV3U2VydmljZS5vblNlbGVjdCgpLnN1YnNjcmliZSgodHJlZVZpZXdJdGVtOiBQb1RyZWVWaWV3SXRlbSkgPT4ge1xuICAgICAgdGhpcy5lbWl0U2VsZWN0ZWQodHJlZVZpZXdJdGVtKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRyYWNrQnlGdW5jdGlvbihpbmRleDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG59XG4iXX0=