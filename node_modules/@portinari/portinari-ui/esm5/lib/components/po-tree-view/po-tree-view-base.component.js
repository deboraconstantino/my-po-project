import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
var poTreeViewMaxLevel = 4;
/**
 * @description
 *
 * O componente fornece um modelo de visualização em árvore, possibilitando a visualização das informações de maneira
 * hierárquica, desta forma sendo possível utilizar até 4 níveis.
 *
 * Nele é possível navegar entre os itens através da tecla *tab*, permitindo expandir ou colapsar o item em foco
 * por meio das teclas *enter* e *space*.
 *
 * Além da navegação, o componente possibilita também a seleção dos itens do primeiro ao último nível, tanto de forma parcial como completa.
 *
 * O componente também possui eventos disparados ao marcar/desmarcar e expandir/colapsar os itens.
 */
var PoTreeViewBaseComponent = /** @class */ (function () {
    function PoTreeViewBaseComponent() {
        this._items = [];
        this._selectable = false;
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao colapsar um item.
         *
         * > Como parâmetro o componente envia o item colapsado.
         */
        this.collapsed = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao expandir um item.
         *
         * > Como parâmetro o componente envia o item expandido.
         */
        this.expanded = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao selecionar um item.
         *
         * > Como parâmetro o componente envia o item selecionado.
         */
        this.selected = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será disparada ao desfazer a seleção de um item.
         *
         * > Como parâmetro o componente envia o item que foi desmarcado.
         */
        this.unselected = new EventEmitter();
    }
    Object.defineProperty(PoTreeViewBaseComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        /**
         * Lista de itens do tipo `PoTreeViewItem` que será renderizada pelo componente.
         */
        set: function (value) {
            this._items = Array.isArray(value) ? this.getItemsByMaxLevel(value) : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTreeViewBaseComponent.prototype, "selectable", {
        get: function () {
            return this._selectable;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita uma caixa de seleção para selecionar e/ou desmarcar um item da lista.
         *
         * @default false
         */
        set: function (value) {
            this._selectable = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoTreeViewBaseComponent.prototype.emitExpanded = function (treeViewItem) {
        var event = treeViewItem.expanded ? 'expanded' : 'collapsed';
        this[event].emit(tslib_1.__assign({}, treeViewItem));
    };
    PoTreeViewBaseComponent.prototype.emitSelected = function (treeViewItem) {
        var event = treeViewItem.selected ? 'selected' : 'unselected';
        this.updateItemsOnSelect(treeViewItem);
        this[event].emit(tslib_1.__assign({}, treeViewItem));
    };
    PoTreeViewBaseComponent.prototype.addChildItemInParent = function (childItem, parentItem) {
        if (!parentItem.subItems) {
            parentItem.subItems = [];
        }
        parentItem.subItems.push(childItem);
    };
    // caso houver parentItem:
    //  - expande o parentItem caso o filho estiver expandido;
    //  - adiciona o childItem no parentItem;
    //  - marca o parentItem caso conter subItems marcodos ou nulos;
    // Se não conter parentItem, adiciona o childItem no items.
    PoTreeViewBaseComponent.prototype.addItem = function (items, childItem, parentItem) {
        if (parentItem) {
            this.expandParentItem(childItem, parentItem);
            this.addChildItemInParent(childItem, parentItem);
            this.selectItemBySubItems(parentItem);
            items.push(parentItem);
        }
        else {
            items.push(childItem);
        }
    };
    PoTreeViewBaseComponent.prototype.selectAllItems = function (items, isSelected) {
        var _this = this;
        items.forEach(function (item) {
            if (item.subItems) {
                _this.selectAllItems(item.subItems, isSelected);
            }
            item.selected = isSelected;
        });
    };
    PoTreeViewBaseComponent.prototype.selectItemBySubItems = function (item) {
        item.selected = this.everyItemSelected(item.subItems);
    };
    // retornará:
    //  - true: se todos os items estiverem marcados;
    //  - null: se no minimo um item esteja marcado ou nullo (indeterminate)
    //  - false: caso não corresponda em nenhuma das opções acima, no caso, nenhum marcado ou nulo;
    PoTreeViewBaseComponent.prototype.everyItemSelected = function (items) {
        if (items === void 0) { items = []; }
        var itemsLength = items.length;
        var lengthCheckedItems = items.filter(function (item) { return item.selected; }).length;
        if (itemsLength && itemsLength === lengthCheckedItems) {
            return true;
        }
        var hasIndeterminateItems = items.filter(function (item) { return item.selected || item.selected === null; }).length;
        if (hasIndeterminateItems) {
            return null;
        }
        return false;
    };
    // expande o item pai caso o filho estiver expandido.
    PoTreeViewBaseComponent.prototype.expandParentItem = function (childItem, parentItem) {
        if (childItem.expanded) {
            parentItem.expanded = true;
        }
    };
    PoTreeViewBaseComponent.prototype.getItemsByMaxLevel = function (items, level, parentItem, newItems) {
        var _this = this;
        if (items === void 0) { items = []; }
        if (level === void 0) { level = 0; }
        if (newItems === void 0) { newItems = []; }
        items.forEach(function (item) {
            var subItems = item.subItems, currentItem = tslib_1.__rest(item, ["subItems"]);
            if (level === poTreeViewMaxLevel) {
                return;
            }
            if (Array.isArray(subItems)) {
                // caso um item pai iniciar selecionado, deve selecionar os filhos.
                if (currentItem.selected) {
                    _this.selectAllItems(subItems, currentItem.selected);
                }
                _this.getItemsByMaxLevel(subItems, ++level, currentItem);
                --level;
            }
            _this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    };
    PoTreeViewBaseComponent.prototype.getItemsWithParentSelected = function (items, parentItem, newItems) {
        var _this = this;
        if (items === void 0) { items = []; }
        if (newItems === void 0) { newItems = []; }
        items.forEach(function (item) {
            var subItems = item.subItems, currentItem = tslib_1.__rest(item, ["subItems"]);
            if (Array.isArray(subItems)) {
                _this.getItemsWithParentSelected(subItems, currentItem);
            }
            _this.addItem(newItems, currentItem, parentItem);
        });
        return newItems;
    };
    PoTreeViewBaseComponent.prototype.updateItemsOnSelect = function (selectedItem) {
        if (selectedItem.subItems) {
            this.selectAllItems(selectedItem.subItems, selectedItem.selected);
        }
        this._items = this.getItemsWithParentSelected(this.items);
    };
    tslib_1.__decorate([
        Input('p-items'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoTreeViewBaseComponent.prototype, "items", null);
    tslib_1.__decorate([
        Input('p-selectable'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoTreeViewBaseComponent.prototype, "selectable", null);
    tslib_1.__decorate([
        Output('p-collapsed'),
        tslib_1.__metadata("design:type", Object)
    ], PoTreeViewBaseComponent.prototype, "collapsed", void 0);
    tslib_1.__decorate([
        Output('p-expanded'),
        tslib_1.__metadata("design:type", Object)
    ], PoTreeViewBaseComponent.prototype, "expanded", void 0);
    tslib_1.__decorate([
        Output('p-selected'),
        tslib_1.__metadata("design:type", Object)
    ], PoTreeViewBaseComponent.prototype, "selected", void 0);
    tslib_1.__decorate([
        Output('p-unselected'),
        tslib_1.__metadata("design:type", Object)
    ], PoTreeViewBaseComponent.prototype, "unselected", void 0);
    return PoTreeViewBaseComponent;
}());
export { PoTreeViewBaseComponent };
//# sourceMappingURL=data:application/json;base64,