import * as tslib_1 from "tslib";
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgModule } from '@angular/core';
import { PoContainerModule } from '../po-container/po-container.module';
import { PoFieldModule } from '../po-field/po-field.module';
import { PoTreeViewComponent } from './po-tree-view.component';
import { PoTreeViewItemComponent } from './po-tree-view-item/po-tree-view-item.component';
import { PoTreeViewItemHeaderComponent } from './po-tree-view-item-header/po-tree-view-item-header.component';
/**
 * @description
 *
 * Módulo do componente `po-tree-view`.
 *
 * > Para o correto funcionamento do componente `po-tree-view`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@portinari/portinari-ui';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var PoTreeViewModule = /** @class */ (function () {
    function PoTreeViewModule() {
    }
    PoTreeViewModule = tslib_1.__decorate([
        NgModule({
            declarations: [
                PoTreeViewComponent,
                PoTreeViewItemComponent,
                PoTreeViewItemHeaderComponent
            ],
            exports: [
                PoTreeViewComponent
            ],
            imports: [
                CommonModule,
                FormsModule,
                PoContainerModule,
                PoFieldModule
            ]
        })
    ], PoTreeViewModule);
    return PoTreeViewModule;
}());
export { PoTreeViewModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tdHJlZS12aWV3L3BvLXRyZWUtdmlldy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFNUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDMUYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sK0RBQStELENBQUM7QUFFOUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThCRztBQWlCSDtJQUFBO0lBQWdDLENBQUM7SUFBcEIsZ0JBQWdCO1FBaEI1QixRQUFRLENBQUM7WUFDUixZQUFZLEVBQUU7Z0JBQ1osbUJBQW1CO2dCQUNuQix1QkFBdUI7Z0JBQ3ZCLDZCQUE2QjthQUM5QjtZQUNELE9BQU8sRUFBRTtnQkFDUCxtQkFBbUI7YUFDcEI7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsWUFBWTtnQkFDWixXQUFXO2dCQUNYLGlCQUFpQjtnQkFDakIsYUFBYTthQUNkO1NBQ0YsQ0FBQztPQUNXLGdCQUFnQixDQUFJO0lBQUQsdUJBQUM7Q0FBQSxBQUFqQyxJQUFpQztTQUFwQixnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0NvbnRhaW5lck1vZHVsZSB9IGZyb20gJy4uL3BvLWNvbnRhaW5lci9wby1jb250YWluZXIubW9kdWxlJztcbmltcG9ydCB7IFBvRmllbGRNb2R1bGUgfSBmcm9tICcuLi9wby1maWVsZC9wby1maWVsZC5tb2R1bGUnO1xuXG5pbXBvcnQgeyBQb1RyZWVWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9wby10cmVlLXZpZXcuY29tcG9uZW50JztcbmltcG9ydCB7IFBvVHJlZVZpZXdJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9wby10cmVlLXZpZXctaXRlbS9wby10cmVlLXZpZXctaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9UcmVlVmlld0l0ZW1IZWFkZXJDb21wb25lbnQgfSBmcm9tICcuL3BvLXRyZWUtdmlldy1pdGVtLWhlYWRlci9wby10cmVlLXZpZXctaXRlbS1oZWFkZXIuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBNw7NkdWxvIGRvIGNvbXBvbmVudGUgYHBvLXRyZWUtdmlld2AuXG4gKlxuICogPiBQYXJhIG8gY29ycmV0byBmdW5jaW9uYW1lbnRvIGRvIGNvbXBvbmVudGUgYHBvLXRyZWUtdmlld2AsIGRldmUgc2VyIGltcG9ydGFkbyBvIG3Ds2R1bG8gYEJyb3dzZXJBbmltYXRpb25zTW9kdWxlYCBub1xuICogPiBtw7NkdWxvIHByaW5jaXBhbCBkYSBzdWEgYXBsaWNhw6fDo28uXG4gKlxuICogTcOzZHVsbyBkYSBhcGxpY2HDp8OjbzpcbiAqIGBgYFxuICogaW1wb3J0IHsgQnJvd3NlckFuaW1hdGlvbnNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xuICogaW1wb3J0IHsgUG9Nb2R1bGUgfSBmcm9tICdAcG9ydGluYXJpL3BvcnRpbmFyaS11aSc7XG4gKiAuLi5cbiAqXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgQnJvd3Nlck1vZHVsZSxcbiAqICAgICBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSxcbiAqICAgICAuLi5cbiAqICAgICBQb01vZHVsZVxuICogICBdLFxuICogICBkZWNsYXJhdGlvbnM6IFtcbiAqICAgICBBcHBDb21wb25lbnQsXG4gKiAgICAgLi4uXG4gKiAgIF0sXG4gKiAgIHByb3ZpZGVyczogW10sXG4gKiAgIGJvb3RzdHJhcDogW0FwcENvbXBvbmVudF1cbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHsgfVxuICogYGBgXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFBvVHJlZVZpZXdDb21wb25lbnQsXG4gICAgUG9UcmVlVmlld0l0ZW1Db21wb25lbnQsXG4gICAgUG9UcmVlVmlld0l0ZW1IZWFkZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFBvVHJlZVZpZXdDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZSxcbiAgICBQb0NvbnRhaW5lck1vZHVsZSxcbiAgICBQb0ZpZWxkTW9kdWxlXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUG9UcmVlVmlld01vZHVsZSB7IH1cbiJdfQ==