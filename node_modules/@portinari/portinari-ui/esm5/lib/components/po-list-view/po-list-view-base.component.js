import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, poLocaleDefault, convertToBoolean } from '../../utils/util';
export var poListViewLiteralsDefault = {
    en: {
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    },
    es: {
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    },
    pt: {
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    },
    ru: {
        hideDetails: 'Скрыть детали',
        loadMoreData: 'Загрузить больше результатов',
        noData: 'Данные не найдены',
        selectAll: 'Выбрать все',
        showDetails: 'Посмотреть детали'
    }
};
/**
 * @description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
 * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 */
var PoListViewBaseComponent = /** @class */ (function () {
    function PoListViewBaseComponent() {
        this.selectAll = false;
        this.showHeader = false;
        /**
         * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
         *
         * > Caso nenhuma ação for definida o mesmo não ficará visível.
         */
        this.showMore = new EventEmitter();
        /**
         * Ação que será executada ao clicar no título.
         *
         * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
         */
        this.titleAction = new EventEmitter();
    }
    Object.defineProperty(PoListViewBaseComponent.prototype, "actions", {
        get: function () {
            return this._actions;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista de ações que serão exibidas no componente.
         */
        set: function (value) {
            this._actions = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura do `po-list-view` em *pixels*.
         */
        set: function (height) {
            this._height = height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "hideSelectAll", {
        get: function () {
            return this._hideSelectAll;
        },
        /**
         * @description
         *
         * Esconde o *checkbox* para seleção de todos os itens.
         *
         * @default `false`
         */
        set: function (hideSelectAll) {
            this._hideSelectAll = convertToBoolean(hideSelectAll);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        /** Lista de itens que serão exibidos no componente. */
        set: function (value) {
            this._items = Array.isArray(value) ? value : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poListViewLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-list-view`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    hideDetail: 'Ocultar detalhes completamente',
         *    loadMoreData: 'Mais dados',
         *    showDetail: 'Mostrar mais detalhes',
         *    selectAll: 'Selecionar todos os itens'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoListViewLiterals = {
         *    showDetail: 'Mostrar mais detalhes'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-list-view
         *   [p-literals]="customLiterals">
         * </po-list-view>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poListViewLiteralsDefault[poLocaleDefault], poListViewLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poListViewLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "select", {
        get: function () {
            return this._select;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
         * item está selecionado, por exemplo:
         *
         * ```
         *  item.$selected
         *
         *  // ou
         *
         *  item['$selected']
         * ```
         *
         * @default `false`
         */
        set: function (select) {
            this._select = convertToBoolean(select);
            this.showMainHeader();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoListViewBaseComponent.prototype, "showMoreDisabled", {
        get: function () {
            return this._showMoreDisabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o botão `Carregar Mais Resultados` será desabilitado.
         */
        set: function (value) {
            this._showMoreDisabled = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoListViewBaseComponent.prototype.onClickAction = function (listViewAction, item) {
        var cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    };
    PoListViewBaseComponent.prototype.onShowMore = function () {
        this.showMore.emit();
    };
    PoListViewBaseComponent.prototype.runTitleAction = function (listItem) {
        var itemWithPublicProperties = this.deleteInternalAttrs(listItem);
        this.titleAction.emit(itemWithPublicProperties);
    };
    PoListViewBaseComponent.prototype.selectAllListItems = function () {
        var _this = this;
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(function (item) {
                item.$selected = _this.selectAll;
            });
        }
    };
    PoListViewBaseComponent.prototype.selectListItem = function (row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    };
    PoListViewBaseComponent.prototype.deleteInternalAttrs = function (item) {
        var itemCopy = item ? tslib_1.__assign({}, item) : undefined;
        for (var key in itemCopy) {
            if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                delete itemCopy[key];
            }
        }
        return itemCopy;
    };
    PoListViewBaseComponent.prototype.checkIfItemsAreSelected = function (items) {
        var someCheckedOrIndeterminate = function (item) { return item.$selected || item.$selected === null; };
        var everyChecked = function (item) { return item.$selected; };
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    };
    PoListViewBaseComponent.prototype.showMainHeader = function () {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    };
    tslib_1.__decorate([
        Input('p-actions'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoListViewBaseComponent.prototype, "actions", null);
    tslib_1.__decorate([
        Input('p-height'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], PoListViewBaseComponent.prototype, "height", null);
    tslib_1.__decorate([
        Input('p-hide-select-all'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoListViewBaseComponent.prototype, "hideSelectAll", null);
    tslib_1.__decorate([
        Input('p-items'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoListViewBaseComponent.prototype, "items", null);
    tslib_1.__decorate([
        Input('p-literals'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoListViewBaseComponent.prototype, "literals", null);
    tslib_1.__decorate([
        Input('p-property-link'),
        tslib_1.__metadata("design:type", String)
    ], PoListViewBaseComponent.prototype, "propertyLink", void 0);
    tslib_1.__decorate([
        Input('p-property-title'),
        tslib_1.__metadata("design:type", String)
    ], PoListViewBaseComponent.prototype, "propertyTitle", void 0);
    tslib_1.__decorate([
        Input('p-select'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoListViewBaseComponent.prototype, "select", null);
    tslib_1.__decorate([
        Input('p-show-more-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoListViewBaseComponent.prototype, "showMoreDisabled", null);
    tslib_1.__decorate([
        Output('p-show-more'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoListViewBaseComponent.prototype, "showMore", void 0);
    tslib_1.__decorate([
        Output('p-title-action'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoListViewBaseComponent.prototype, "titleAction", void 0);
    return PoListViewBaseComponent;
}());
export { PoListViewBaseComponent };
//# sourceMappingURL=data:application/json;base64,