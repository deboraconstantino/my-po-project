import * as tslib_1 from "tslib";
import { Directive, TemplateRef, Input } from '@angular/core';
/**
 * @usedBy PoListViewComponent
 *
 * @description
 *
 * Esta diretiva permite que sejam apresentadas informações adicionais de cada item, construindo um
 * botão `Exibir detalhes` abaixo do conteúdo principal do item.
 *
 * Deve-se utilizar como parâmetro a referência do item e/ou índice, sendo por padrão o item.
 *  - Item: `item` determina o item da linha corrente.
 *  - Índice: `index` determina o índice da linha corrente.
 *
 * Esta diretiva pode ser usada de duas formas: explícita ou *syntax sugar*. Veja a seguir ambos, respectivamente:
 *
 * ```
 * ...
 * <po-list-view
 *   p-property-title="name"
 *   [p-items]="items">
 *
 *   <ng-template p-list-view-detail-template let-item let-code="index">
 *     <div class="po-row">
 *       <po-info class="po-md-6" p-label="Code" [p-value]="code"></po-info>
 *       <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *     </div>
 *   </ng-template>
 *
 * </po-list-view>
 *
 * ...
 * ```
 *
 * ```
 * ...
 * <po-list-view
 *    p-property-title="name"
 *    [p-items]="items">
 *    <div *p-list-view-detail-template="let item, let i=index" class="po-row">
 *      <po-info class="po-md-12" p-label="Email" [p-value]="item.email"></po-info>
 *    </div>
 * </po-list-view>
 * ...
 *
 * ```
 */
var PoListViewDetailTemplateDirective = /** @class */ (function () {
    // Necessário manter templateRef para o funcionamento do row template.
    function PoListViewDetailTemplateDirective(templateRef) {
        this.templateRef = templateRef;
    }
    PoListViewDetailTemplateDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    tslib_1.__decorate([
        Input('p-show-detail'),
        tslib_1.__metadata("design:type", Function)
    ], PoListViewDetailTemplateDirective.prototype, "showDetail", void 0);
    PoListViewDetailTemplateDirective = tslib_1.__decorate([
        Directive({
            selector: '[p-list-view-detail-template]'
        }),
        tslib_1.__metadata("design:paramtypes", [TemplateRef])
    ], PoListViewDetailTemplateDirective);
    return PoListViewDetailTemplateDirective;
}());
export { PoListViewDetailTemplateDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWxpc3Qtdmlldy9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBNENHO0FBSUg7SUFhRSxzRUFBc0U7SUFDdEUsMkNBQW1CLFdBQTZCO1FBQTdCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUFJLENBQUM7O2dCQUFyQixXQUFXOztJQUhuQjtRQUF2QixLQUFLLENBQUMsZUFBZSxDQUFDOzt5RUFBK0I7SUFYM0MsaUNBQWlDO1FBSDdDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSwrQkFBK0I7U0FDMUMsQ0FBQztpREFlZ0MsV0FBVztPQWRoQyxpQ0FBaUMsQ0FnQjdDO0lBQUQsd0NBQUM7Q0FBQSxBQWhCRCxJQWdCQztTQWhCWSxpQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEB1c2VkQnkgUG9MaXN0Vmlld0NvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGEgZGlyZXRpdmEgcGVybWl0ZSBxdWUgc2VqYW0gYXByZXNlbnRhZGFzIGluZm9ybWHDp8O1ZXMgYWRpY2lvbmFpcyBkZSBjYWRhIGl0ZW0sIGNvbnN0cnVpbmRvIHVtXG4gKiBib3TDo28gYEV4aWJpciBkZXRhbGhlc2AgYWJhaXhvIGRvIGNvbnRlw7pkbyBwcmluY2lwYWwgZG8gaXRlbS5cbiAqXG4gKiBEZXZlLXNlIHV0aWxpemFyIGNvbW8gcGFyw6JtZXRybyBhIHJlZmVyw6puY2lhIGRvIGl0ZW0gZS9vdSDDrW5kaWNlLCBzZW5kbyBwb3IgcGFkcsOjbyBvIGl0ZW0uXG4gKiAgLSBJdGVtOiBgaXRlbWAgZGV0ZXJtaW5hIG8gaXRlbSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqICAtIMONbmRpY2U6IGBpbmRleGAgZGV0ZXJtaW5hIG8gw61uZGljZSBkYSBsaW5oYSBjb3JyZW50ZS5cbiAqXG4gKiBFc3RhIGRpcmV0aXZhIHBvZGUgc2VyIHVzYWRhIGRlIGR1YXMgZm9ybWFzOiBleHBsw61jaXRhIG91ICpzeW50YXggc3VnYXIqLiBWZWphIGEgc2VndWlyIGFtYm9zLCByZXNwZWN0aXZhbWVudGU6XG4gKlxuICogYGBgXG4gKiAuLi5cbiAqIDxwby1saXN0LXZpZXdcbiAqICAgcC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICBbcC1pdGVtc109XCJpdGVtc1wiPlxuICpcbiAqICAgPG5nLXRlbXBsYXRlIHAtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZSBsZXQtaXRlbSBsZXQtY29kZT1cImluZGV4XCI+XG4gKiAgICAgPGRpdiBjbGFzcz1cInBvLXJvd1wiPlxuICogICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC02XCIgcC1sYWJlbD1cIkNvZGVcIiBbcC12YWx1ZV09XCJjb2RlXCI+PC9wby1pbmZvPlxuICogICAgICAgPHBvLWluZm8gY2xhc3M9XCJwby1tZC0xMlwiIHAtbGFiZWw9XCJFbWFpbFwiIFtwLXZhbHVlXT1cIml0ZW0uZW1haWxcIj48L3BvLWluZm8+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvbmctdGVtcGxhdGU+XG4gKlxuICogPC9wby1saXN0LXZpZXc+XG4gKlxuICogLi4uXG4gKiBgYGBcbiAqXG4gKiBgYGBcbiAqIC4uLlxuICogPHBvLWxpc3Qtdmlld1xuICogICAgcC1wcm9wZXJ0eS10aXRsZT1cIm5hbWVcIlxuICogICAgW3AtaXRlbXNdPVwiaXRlbXNcIj5cbiAqICAgIDxkaXYgKnAtbGlzdC12aWV3LWRldGFpbC10ZW1wbGF0ZT1cImxldCBpdGVtLCBsZXQgaT1pbmRleFwiIGNsYXNzPVwicG8tcm93XCI+XG4gKiAgICAgIDxwby1pbmZvIGNsYXNzPVwicG8tbWQtMTJcIiBwLWxhYmVsPVwiRW1haWxcIiBbcC12YWx1ZV09XCJpdGVtLmVtYWlsXCI+PC9wby1pbmZvPlxuICogICAgPC9kaXY+XG4gKiA8L3BvLWxpc3Qtdmlldz5cbiAqIC4uLlxuICpcbiAqIGBgYFxuICovXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlXSdcbn0pXG5leHBvcnQgY2xhc3MgUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlIHtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBxdWUgZGV2ZSByZXRvcm5hciB1bSB2YWxvciBkbyB0aXBvIGBib29sZWFuYCwgcXVlIHNlcsOhIHV0aWxpemFkbyBjb21vIGEgdmFsaWRhw6fDo28gcGFyYSBxdWUgbyBkZXRhbGhlIGRlIGl0ZW1cbiAgICogZGEgbGlzdGEgaW5pY2llIGFiZXJ0byBvdSBmZWNoYWRvLlxuICAgKlxuICAgKi9cbiAgQElucHV0KCdwLXNob3ctZGV0YWlsJykgc2hvd0RldGFpbDogKGl0ZW0pID0+IGJvb2xlYW47XG5cbiAgLy8gTmVjZXNzw6FyaW8gbWFudGVyIHRlbXBsYXRlUmVmIHBhcmEgbyBmdW5jaW9uYW1lbnRvIGRvIHJvdyB0ZW1wbGF0ZS5cbiAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7IH1cblxufVxuIl19