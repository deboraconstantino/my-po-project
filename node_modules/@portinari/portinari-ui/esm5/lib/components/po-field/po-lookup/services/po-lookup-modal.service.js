import * as tslib_1 from "tslib";
import { Injectable, EventEmitter } from '@angular/core';
import { PoComponentInjectorService } from '../../../../services/po-component-injector/po-component-injector.service';
import { PoLookupModalComponent } from '../po-lookup-modal/po-lookup-modal.component';
/**
 * @docsPrivate
 *
 * Serviço responsável por controlar a abertura do componente Po Lookup Modal.
 */
var PoLookupModalService = /** @class */ (function () {
    function PoLookupModalService(poComponentInjector) {
        this.poComponentInjector = poComponentInjector;
        this.componentRef = null;
        this.selectValueEvent = new EventEmitter();
    }
    /**
     * Método responsável por abrir a modal de busca das informações.
     *
     * @param service {PoLookupFilter} Serviço responsável por realizar a busca no serviço dos dados.
     * @param columns {Array<PoLookupColumn>} Definição das colunas na modal de busca.
     * @param filterParams {any} Valor que será repassado aos métodos do serviço para auxiliar no filtro dos dados.
     * @param title {string} Definição do título da modal.
     * @param literals {PoLookupLiterals} Literais utilizadas no componente.
     */
    PoLookupModalService.prototype.openModal = function (params) {
        var _this = this;
        var service = params.service, columns = params.columns, filterParams = params.filterParams, title = params.title, literals = params.literals;
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoLookupModalComponent);
        this.componentRef.instance.title = title;
        this.componentRef.instance.columns = columns;
        this.componentRef.instance.filterService = service;
        this.componentRef.instance.filterParams = filterParams;
        this.componentRef.instance.literals = literals;
        this.componentRef.instance.model.subscribe(function ($event) {
            _this.selectValue($event);
        });
        this.componentRef.changeDetectorRef.detectChanges();
        this.componentRef.instance.openModal();
    };
    // Este metodo é chamado quando é selecionado um item na lookup modal.
    PoLookupModalService.prototype.selectValue = function (value) {
        if (value) {
            this.selectValueEvent.emit(value);
        }
        this.componentRef.destroy();
    };
    PoLookupModalService.ctorParameters = function () { return [
        { type: PoComponentInjectorService }
    ]; };
    PoLookupModalService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [PoComponentInjectorService])
    ], PoLookupModalService);
    return PoLookupModalService;
}());
export { PoLookupModalService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9zZXJ2aWNlcy9wby1sb29rdXAtbW9kYWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBFQUEwRSxDQUFDO0FBSXRILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBRXRGOzs7O0dBSUc7QUFFSDtJQU1FLDhCQUFvQixtQkFBK0M7UUFBL0Msd0JBQW1CLEdBQW5CLG1CQUFtQixDQUE0QjtRQUozRCxpQkFBWSxHQUFzQixJQUFJLENBQUM7UUFFL0MscUJBQWdCLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7SUFFUSxDQUFDO0lBRXZFOzs7Ozs7OztPQVFHO0lBQ0gsd0NBQVMsR0FBVCxVQUFVLE1BTVQ7UUFORCxpQkFxQkM7UUFkUyxJQUFBLHdCQUFPLEVBQUUsd0JBQU8sRUFBRSxrQ0FBWSxFQUFFLG9CQUFLLEVBQUUsMEJBQVEsQ0FBWTtRQUVuRSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyw0QkFBNEIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQ2xHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUM3QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDO1FBQ25ELElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMvQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQUEsTUFBTTtZQUMvQyxLQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUV6QyxDQUFDO0lBRUQsc0VBQXNFO0lBQ3RFLDBDQUFXLEdBQVgsVUFBWSxLQUFLO1FBQ2YsSUFBSSxLQUFLLEVBQUU7WUFDVCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDOztnQkF4Q3dDLDBCQUEwQjs7SUFOeEQsb0JBQW9CO1FBRGhDLFVBQVUsRUFBRTtpREFPOEIsMEJBQTBCO09BTnhELG9CQUFvQixDQStDaEM7SUFBRCwyQkFBQztDQUFBLEFBL0NELElBK0NDO1NBL0NZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2VydmljZXMvcG8tY29tcG9uZW50LWluamVjdG9yL3BvLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7IFBvTG9va3VwQ29sdW1uIH0gZnJvbSAnLi4vLi4vLi4vLi4vY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvaW50ZXJmYWNlcy9wby1sb29rdXAtY29sdW1uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tbG9va3VwL2ludGVyZmFjZXMvcG8tbG9va3VwLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBMaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tbG9va3VwLWxpdGVyYWxzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cE1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vcG8tbG9va3VwLW1vZGFsL3BvLWxvb2t1cC1tb2RhbC5jb21wb25lbnQnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgY29udHJvbGFyIGEgYWJlcnR1cmEgZG8gY29tcG9uZW50ZSBQbyBMb29rdXAgTW9kYWwuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0xvb2t1cE1vZGFsU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gbnVsbDtcblxuICBzZWxlY3RWYWx1ZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcG9Db21wb25lbnRJbmplY3RvcjogUG9Db21wb25lbnRJbmplY3RvclNlcnZpY2UpIHt9XG5cbiAgLyoqXG4gICAqIE3DqXRvZG8gcmVzcG9uc8OhdmVsIHBvciBhYnJpciBhIG1vZGFsIGRlIGJ1c2NhIGRhcyBpbmZvcm1hw6fDtWVzLlxuICAgKlxuICAgKiBAcGFyYW0gc2VydmljZSB7UG9Mb29rdXBGaWx0ZXJ9IFNlcnZpw6dvIHJlc3BvbnPDoXZlbCBwb3IgcmVhbGl6YXIgYSBidXNjYSBubyBzZXJ2acOnbyBkb3MgZGFkb3MuXG4gICAqIEBwYXJhbSBjb2x1bW5zIHtBcnJheTxQb0xvb2t1cENvbHVtbj59IERlZmluacOnw6NvIGRhcyBjb2x1bmFzIG5hIG1vZGFsIGRlIGJ1c2NhLlxuICAgKiBAcGFyYW0gZmlsdGVyUGFyYW1zIHthbnl9IFZhbG9yIHF1ZSBzZXLDoSByZXBhc3NhZG8gYW9zIG3DqXRvZG9zIGRvIHNlcnZpw6dvIHBhcmEgYXV4aWxpYXIgbm8gZmlsdHJvIGRvcyBkYWRvcy5cbiAgICogQHBhcmFtIHRpdGxlIHtzdHJpbmd9IERlZmluacOnw6NvIGRvIHTDrXR1bG8gZGEgbW9kYWwuXG4gICAqIEBwYXJhbSBsaXRlcmFscyB7UG9Mb29rdXBMaXRlcmFsc30gTGl0ZXJhaXMgdXRpbGl6YWRhcyBubyBjb21wb25lbnRlLlxuICAgKi9cbiAgb3Blbk1vZGFsKHBhcmFtczoge1xuICAgIHNlcnZpY2U6IFBvTG9va3VwRmlsdGVyLFxuICAgIGNvbHVtbnM6IEFycmF5PFBvTG9va3VwQ29sdW1uPixcbiAgICBmaWx0ZXJQYXJhbXM6IGFueSxcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIGxpdGVyYWxzOiBQb0xvb2t1cExpdGVyYWxzXG4gIH0pOiB2b2lkIHtcbiAgICBjb25zdCB7IHNlcnZpY2UsIGNvbHVtbnMsIGZpbHRlclBhcmFtcywgdGl0bGUsIGxpdGVyYWxzIH0gPSBwYXJhbXM7XG5cbiAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMucG9Db21wb25lbnRJbmplY3Rvci5jcmVhdGVDb21wb25lbnRJbkFwcGxpY2F0aW9uKFBvTG9va3VwTW9kYWxDb21wb25lbnQpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLnRpdGxlID0gdGl0bGU7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuY29sdW1ucyA9IGNvbHVtbnM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZmlsdGVyU2VydmljZSA9IHNlcnZpY2U7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZmlsdGVyUGFyYW1zID0gZmlsdGVyUGFyYW1zO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmxpdGVyYWxzID0gbGl0ZXJhbHM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UubW9kZWwuc3Vic2NyaWJlKCRldmVudCA9PiB7XG4gICAgICB0aGlzLnNlbGVjdFZhbHVlKCRldmVudCk7XG4gICAgfSk7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLm9wZW5Nb2RhbCgpO1xuXG4gIH1cblxuICAvLyBFc3RlIG1ldG9kbyDDqSBjaGFtYWRvIHF1YW5kbyDDqSBzZWxlY2lvbmFkbyB1bSBpdGVtIG5hIGxvb2t1cCBtb2RhbC5cbiAgc2VsZWN0VmFsdWUodmFsdWUpIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHRoaXMuc2VsZWN0VmFsdWVFdmVudC5lbWl0KHZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy5jb21wb25lbnRSZWYuZGVzdHJveSgpO1xuICB9XG59XG4iXX0=