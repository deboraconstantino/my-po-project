import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoLookupBaseComponent } from './po-lookup-base.component';
import { PoLookupFilterService } from './services/po-lookup-filter.service';
import { PoLookupModalService } from './services/po-lookup-modal.service';
/**
 * @docsExtends PoLookupBaseComponent
 *
 * @description
 *
 * Quando existe muitos dados o po-lookup por padrão traz apenas 10 itens na tabela e os demais são carregados por demanda através do
 * botão 'Carregar mais resultados'. Para que funcione corretamente, é importante que o serviço siga o
 * [Guia de implementação das APIs TOTVS](http://tdn.totvs.com/pages/releaseview.action?pageId=271660444).
 *
 * Importante:
 *
 * - Caso o po-lookup contenha o [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então será necessário informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * ```
 * <po-lookup
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-lookup>
 * ```
 *
 * @example
 *
 * <example name="po-lookup-basic" title="Portinari Lookup Basic">
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.html"> </file>
 *  <file name="sample-po-lookup-basic/sample-po-lookup-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-labs" title="Portinari Lookup Labs">
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.html"> </file>
 *  <file name="sample-po-lookup-labs/sample-po-lookup-labs.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero" title="Portinari Lookup - Hero">
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.html"> </file>
 *  <file name="sample-po-lookup-hero/sample-po-lookup-hero.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-hero-reactive-form" title="Portinari Lookup - Hero Reactive Form">
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.html"> </file>
 *  <file name="sample-po-lookup-hero-reactive-form/sample-po-lookup-hero-reactive-form.component.ts"> </file>
 *  <file name="sample-po-lookup.service.ts"> </file>
 * </example>
 *
 * <example name="po-lookup-sw-films" title="Portinari Lookup - Star Wars films">
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.html"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.component.ts"> </file>
 *  <file name="sample-po-lookup-sw-films/sample-po-lookup-sw-films.service.ts"> </file>
 * </example>
 */
var PoLookupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoLookupComponent, _super);
    function PoLookupComponent(poLookupFilterService, poLookupModalService) {
        var _this = _super.call(this, poLookupFilterService) || this;
        _this.poLookupModalService = poLookupModalService;
        return _this;
    }
    PoLookupComponent_1 = PoLookupComponent;
    Object.defineProperty(PoLookupComponent.prototype, "autocomplete", {
        get: function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    PoLookupComponent.prototype.ngAfterViewInit = function () {
        if (this.autoFocus) {
            this.focus();
        }
    };
    PoLookupComponent.prototype.ngOnDestroy = function () {
        if (this.modalSubscription) {
            this.modalSubscription.unsubscribe();
        }
    };
    PoLookupComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoLookupComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoLookupComponent, { static: true }) lookup: PoLookupComponent;
     *
     * focusLookup() {
     *   this.lookup.focus();
     * }
     * ```
     */
    PoLookupComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.inputEl.nativeElement.focus();
        }
    };
    PoLookupComponent.prototype.openLookup = function () {
        var _this = this;
        if (this.isAllowedOpenModal()) {
            var _a = this, service = _a.service, columns = _a.columns, filterParams = _a.filterParams, literals = _a.literals;
            this.poLookupModalService.openModal({ service: service, columns: columns, filterParams: filterParams, title: this.label, literals: literals });
            if (!this.modalSubscription) {
                this.modalSubscription = this.poLookupModalService.selectValueEvent.subscribe(function (element) {
                    _this.selectModel(element);
                });
            }
        }
    };
    PoLookupComponent.prototype.setViewValue = function (value, object) {
        if (this.fieldFormat) {
            this.setInputValueWipoieldFormat(object);
        }
        else {
            this.inputEl.nativeElement.value = this.valueToModel || this.valueToModel === 0 ? value : '';
        }
    };
    PoLookupComponent.prototype.getViewValue = function () {
        return this.inputEl.nativeElement.value;
    };
    PoLookupComponent.prototype.searchEvent = function () {
        var value = this.getViewValue();
        if (this.oldValue !== value) {
            this.searchById(value);
        }
    };
    PoLookupComponent.prototype.isAllowedOpenModal = function () {
        if (!this.service) {
            console.warn('No service informed');
        }
        return !!(this.service && !this.disabled);
    };
    PoLookupComponent.prototype.setInputValueWipoieldFormat = function (objectSelected) {
        var isEmpty = Object.keys(objectSelected).length === 0;
        var fieldFormated = this.fieldFormat(objectSelected);
        this.oldValue = isEmpty ? '' : fieldFormated;
        this.inputEl.nativeElement.value = isEmpty ? '' : fieldFormated;
    };
    var PoLookupComponent_1;
    PoLookupComponent.ctorParameters = function () { return [
        { type: PoLookupFilterService },
        { type: PoLookupModalService }
    ]; };
    tslib_1.__decorate([
        ViewChild('inp', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoLookupComponent.prototype, "inputEl", void 0);
    PoLookupComponent = PoLookupComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'po-lookup',
            template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <input #inp\n      class=\"po-input po-input-icon-right\"\n      type=\"text\"\n      [autocomplete]=\"autocomplete\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (blur)=\"searchEvent()\">\n\n    <div class=\"po-field-icon-container-right\">\n      <span #iconLookup\n        class=\"po-icon po-field-icon po-icon-search\"\n        tabindex=\"-1\"\n        [class.po-field-icon]=\"!disabled\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        (click)=\"openLookup()\"\n        (focus)=\"inp.focus()\">\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n",
            providers: [
                PoLookupFilterService,
                PoLookupModalService,
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return PoLookupComponent_1; }),
                    multi: true,
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return PoLookupComponent_1; }),
                    multi: true,
                }
            ]
        }),
        tslib_1.__metadata("design:paramtypes", [PoLookupFilterService, PoLookupModalService])
    ], PoLookupComponent);
    return PoLookupComponent;
}(PoLookupBaseComponent));
export { PoLookupComponent };
//# sourceMappingURL=data:application/json;base64,