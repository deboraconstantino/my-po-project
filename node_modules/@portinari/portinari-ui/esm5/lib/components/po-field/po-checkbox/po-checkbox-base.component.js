import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, uuid } from './../../../utils/util';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto
 * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.
 *
 * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado e desabilitado, como também uma ação que será disparada quando
 * ocorrer mudanças do valor.
 *
 * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado.
 */
var PoCheckboxBaseComponent = /** @class */ (function () {
    function PoCheckboxBaseComponent() {
        this.id = uuid();
        this._disabled = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Evento disparado quando o valor do *checkbox* for alterado. */
        this.change = new EventEmitter();
    }
    Object.defineProperty(PoCheckboxBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o estado do *checkbox* como desabilitado.
         *
         * @default `false`
         */
        set: function (value) {
            this._disabled = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    PoCheckboxBaseComponent.prototype.changeValue = function () {
        if (this.propagateChange) {
            this.propagateChange(this.checkboxValue);
        }
        this.change.emit(this.checkboxValue);
    };
    PoCheckboxBaseComponent.prototype.checkOption = function (value) {
        if (!this.disabled) {
            this.changeModelValue(!value);
            this.changeValue();
        }
    };
    PoCheckboxBaseComponent.prototype.registerOnChange = function (fn) {
        this.propagateChange = fn;
    };
    PoCheckboxBaseComponent.prototype.registerOnTouched = function (fn) { };
    PoCheckboxBaseComponent.prototype.writeValue = function (value) {
        if (value !== this.checkboxValue) {
            this.changeModelValue(value);
        }
    };
    tslib_1.__decorate([
        Input('name'),
        tslib_1.__metadata("design:type", String)
    ], PoCheckboxBaseComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input('p-auto-focus'), InputBoolean(),
        tslib_1.__metadata("design:type", Boolean)
    ], PoCheckboxBaseComponent.prototype, "autoFocus", void 0);
    tslib_1.__decorate([
        Input('p-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoCheckboxBaseComponent.prototype, "disabled", null);
    tslib_1.__decorate([
        Input('p-label'),
        tslib_1.__metadata("design:type", String)
    ], PoCheckboxBaseComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Output('p-change'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoCheckboxBaseComponent.prototype, "change", void 0);
    return PoCheckboxBaseComponent;
}());
export { PoCheckboxBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hlY2tib3gtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWNoZWNrYm94L3BvLWNoZWNrYm94LWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQy9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVuRDs7Ozs7Ozs7OztHQVVHO0FBQ0g7SUFBQTtRQUdFLE9BQUUsR0FBRyxJQUFJLEVBQUUsQ0FBQztRQUdKLGNBQVMsR0FBYSxLQUFLLENBQUM7UUFLcEM7Ozs7Ozs7Ozs7V0FVRztRQUNvQyxjQUFTLEdBQVksS0FBSyxDQUFDO1FBc0JsRSxrRUFBa0U7UUFDOUMsV0FBTSxHQUF1QixJQUFJLFlBQVksRUFBTyxDQUFDO0lBOEIzRSxDQUFDO0lBMUNzQixzQkFBSSw2Q0FBUTthQUlqQztZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUN4QixDQUFDO1FBZkQ7Ozs7Ozs7O1dBUUc7YUFDa0IsVUFBYSxLQUFjO1lBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0MsQ0FBQzs7O09BQUE7SUFZRCw2Q0FBVyxHQUFYO1FBQ0UsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCw2Q0FBVyxHQUFYLFVBQVksS0FBcUI7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BCO0lBQ0gsQ0FBQztJQUVELGtEQUFnQixHQUFoQixVQUFpQixFQUFPO1FBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxtREFBaUIsR0FBakIsVUFBa0IsRUFBTyxJQUFVLENBQUM7SUFFcEMsNENBQVUsR0FBVixVQUFXLEtBQVU7UUFDbkIsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNoQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDO0lBL0RjO1FBQWQsS0FBSyxDQUFDLE1BQU0sQ0FBQzs7eURBQWM7SUFhVztRQUF0QyxLQUFLLENBQUMsY0FBYyxDQUFDLEVBQUUsWUFBWSxFQUFFOzs4REFBNEI7SUFXN0M7UUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7OzJEQUVuQjtJQU9pQjtRQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzswREFBZ0I7SUFHYjtRQUFuQixNQUFNLENBQUMsVUFBVSxDQUFDOzBDQUFVLFlBQVk7MkRBQWdDO0lBOEIzRSw4QkFBQztDQUFBLEFBM0VELElBMkVDO1NBM0VxQix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuLCB1dWlkIH0gZnJvbSAnLi8uLi8uLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IElucHV0Qm9vbGVhbiB9IGZyb20gJy4uLy4uLy4uL2RlY29yYXRvcnMnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tY2hlY2tib3hgIGV4aWJlIHVtYSBjYWl4YSBkZSBvcMOnw6NvIGNvbSB1bSB0ZXh0byBhbyBsYWRvLCBuYSBxdWFsIMOpIHBvc3PDrXZlbCBtYXJjYXIgZSBkZXNtYXJjYXIgYXRyYXbDqXMgdGFudG9cbiAqIG5vICpjbGljayogZG8gKm1vdXNlKiBxdWFudG8gcG9yIG1laW8gZGEgdGVjbGEgKnNwYWNlKiBxdWFuZG8gZXN0aXZlciBjb20gZm9jby5cbiAqXG4gKiBDYWRhIG9ww6fDo28gcG9kZXLDoSByZWNlYmVyIHVtIGVzdGFkbyBkZSBtYXJjYWRvLCBkZXNtYXJjYWRvLCBpbmRldGVybWluYWRvIGUgZGVzYWJpbGl0YWRvLCBjb21vIHRhbWLDqW0gdW1hIGHDp8OjbyBxdWUgc2Vyw6EgZGlzcGFyYWRhIHF1YW5kb1xuICogb2NvcnJlciBtdWRhbsOnYXMgZG8gdmFsb3IuXG4gKlxuICogPiBPICptb2RlbCogZGVzdGUgY29tcG9uZW50ZSBhY2VpdGFyw6EgdmFsb3JlcyBpZ3VhbCDDoCBgdHJ1ZWAsIGBmYWxzZWAgb3UgYG51bGxgIHBhcmEgcXVhbmRvIGZvciBpbmRldGVybWluYWRvLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9DaGVja2JveEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgY2hlY2tib3hWYWx1ZTogYm9vbGVhbiB8IG51bGw7XG4gIGlkID0gdXVpZCgpO1xuICBwcm9wYWdhdGVDaGFuZ2U6IGFueTtcblxuICBwcml2YXRlIF9kaXNhYmxlZD86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKiogRGVmaW5lIG8gbm9tZSBkbyAqY2hlY2tib3gqLiAqL1xuICBASW5wdXQoJ25hbWUnKSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXBsaWNhIGZvY28gbm8gZWxlbWVudG8gYW8gc2VyIGluaWNpYWRvLlxuICAgKlxuICAgKiA+IENhc28gbWFpcyBkZSB1bSBlbGVtZW50byBzZWphIGNvbmZpZ3VyYWRvIGNvbSBlc3NhIHByb3ByaWVkYWRlLCBhcGVuYXMgbyDDumx0aW1vIGVsZW1lbnRvIGRlY2xhcmFkbyBjb20gZWxhIHRlcsOhIG8gZm9jby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWF1dG8tZm9jdXMnKSBASW5wdXRCb29sZWFuKCkgYXV0b0ZvY3VzOiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIG8gZXN0YWRvIGRvICpjaGVja2JveCogY29tbyBkZXNhYmlsaXRhZG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1kaXNhYmxlZCcpIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgLyoqIFRleHRvIGRlIGV4aWJpw6fDo28gZG8gKmNoZWNrYm94Ki4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIEV2ZW50byBkaXNwYXJhZG8gcXVhbmRvIG8gdmFsb3IgZG8gKmNoZWNrYm94KiBmb3IgYWx0ZXJhZG8uICovXG4gIEBPdXRwdXQoJ3AtY2hhbmdlJykgY2hhbmdlPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjaGFuZ2VWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9wYWdhdGVDaGFuZ2UpIHtcbiAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHRoaXMuY2hlY2tib3hWYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGFuZ2UuZW1pdCh0aGlzLmNoZWNrYm94VmFsdWUpO1xuICB9XG5cbiAgY2hlY2tPcHRpb24odmFsdWU6IGJvb2xlYW4gfCBudWxsKSB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmNoYW5nZU1vZGVsVmFsdWUoIXZhbHVlKTtcbiAgICAgIHRoaXMuY2hhbmdlVmFsdWUoKTtcbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQgeyB9XG5cbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KSB7XG4gICAgaWYgKHZhbHVlICE9PSB0aGlzLmNoZWNrYm94VmFsdWUpIHtcbiAgICAgIHRoaXMuY2hhbmdlTW9kZWxWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNoYW5nZU1vZGVsVmFsdWUodmFsdWU6IGJvb2xlYW4gfCBudWxsKTtcbn1cbiJdfQ==