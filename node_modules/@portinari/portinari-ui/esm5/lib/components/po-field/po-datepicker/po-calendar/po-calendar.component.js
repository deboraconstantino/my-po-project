import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isMobile, setYearFrom0To100, validateDateRange } from '../../../../utils/util';
import { PoCalendarLangService } from './po-calendar.lang.service';
import { PoCalendarService } from './po-calendar.service';
var poCalendarLocaleDefault = 'pt';
var poCalendarLocales = ['pt', 'en', 'es'];
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente de calendário de uso interno
 */
var PoCalendarComponent = /** @class */ (function () {
    function PoCalendarComponent(poCalendarService, poCalendarLangService) {
        this.poCalendarService = poCalendarService;
        this.poCalendarLangService = poCalendarLangService;
        this.dayVisible = false;
        this.displayMonths = Array();
        this.displayWeedDays = Array();
        this.monthVisible = false;
        this.overlayInvisible = true;
        this.visible = false;
        this.yearVisible = false;
        this.isMobile = isMobile;
        this.today = new Date();
        this.selectedDateChange = new EventEmitter();
        this.submit = new EventEmitter();
    }
    Object.defineProperty(PoCalendarComponent.prototype, "dateEnd", {
        get: function () {
            return this._dateEnd;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data máxima possível de ser selecionada no calendário.
         */
        set: function (val) {
            if (val && val instanceof Date) {
                var year = val.getFullYear();
                var month = val.getMonth();
                var day = val.getDate();
                var date = new Date(year, month, day, 23, 59, 59);
                setYearFrom0To100(date, year);
                this._dateEnd = date;
            }
            else {
                this._dateEnd = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        /**
         * @optional
         *
         * @description
         *
         * Idioma do calendário.
         *
         * Valores válidos:
         *  - `pt`
         *  - `en`
         *  - `es`
         */
        set: function (locale) {
            this._locale = poCalendarLocales.includes(locale) ? locale : poCalendarLocaleDefault;
            this.initializeLanguage();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "selectedDate", {
        get: function () {
            return this._selectedDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data selecionada no calendário.
         */
        set: function (selectedDate) {
            this._selectedDate = selectedDate && selectedDate instanceof Date ? selectedDate : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoCalendarComponent.prototype, "dateStart", {
        get: function () {
            return this._dateStart;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data mínima possível de ser selecionada no calendário.
         */
        set: function (val) {
            if (val && val instanceof Date) {
                var year = val.getFullYear();
                var month = val.getMonth();
                var day = val.getDate();
                var date = new Date(year, month, day, 0, 0, 0);
                setYearFrom0To100(date, year);
                this._dateStart = date;
            }
            else {
                this._dateStart = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    PoCalendarComponent.prototype.close = function () {
        this.overlayInvisible = true;
        this.visible = false;
    };
    // Obtém um array de todos os anos desta década
    PoCalendarComponent.prototype.getArrayDecade = function (year) {
        this.displayDecade = Array();
        if (year % 10 !== 0) {
            while (year % 10 !== 0) {
                year--;
            }
        }
        this.updateDecade(year);
    };
    PoCalendarComponent.prototype.getBackgroundColor = function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-background-selected' : 'po-calendar-box-background';
    };
    PoCalendarComponent.prototype.getDayBackgroundColor = function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-background-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-background-today';
        }
        else if (date) {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-background';
            }
            else {
                return 'po-calendar-box-background-disabled';
            }
        }
        else {
            return '';
        }
    };
    PoCalendarComponent.prototype.getDayForegroundColor = function (date) {
        if (this.equalsDate(date, this.selectedDate)) {
            return 'po-calendar-box-foreground-selected';
        }
        else if (this.equalsDate(date, this.today)) {
            return 'po-calendar-box-foreground-today';
        }
        else {
            if (validateDateRange(date, this.dateStart, this.dateEnd)) {
                return 'po-calendar-box-foreground';
            }
            else {
                return 'po-calendar-box-foreground-disabled';
            }
        }
    };
    PoCalendarComponent.prototype.getForegroundColor = function (displayValue, propertyValue) {
        return (displayValue === propertyValue) ? 'po-calendar-box-foreground-selected' : 'po-calendar-box-foreground';
    };
    PoCalendarComponent.prototype.getWordMonth = function () {
        return this.poCalendarLangService.getWordMonth();
    };
    PoCalendarComponent.prototype.getWordYear = function () {
        return this.poCalendarLangService.getWordYear();
    };
    PoCalendarComponent.prototype.init = function () {
        this.selectedDate ? this.updateDate(this.selectedDate) : this.updateDate(this.today);
        this.initializeLanguage();
        this.selectDay();
        if (this.isMobile()) {
            this.overlayInvisible = false;
        }
        this.visible = true;
    };
    PoCalendarComponent.prototype.initializeLanguage = function () {
        this.poCalendarLangService.setLanguage(this.locale);
        this.displayWeedDays = this.poCalendarLangService.getArrayWeekDays();
        this.displayMonths = this.poCalendarLangService.getArrayMonths();
    };
    PoCalendarComponent.prototype.onNextMonth = function () {
        if (this.displayMonthNumber < 11) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber + 1);
        }
        else {
            this.updateDisplay(this.displayYear + 1, 0);
        }
    };
    PoCalendarComponent.prototype.onPrevMonth = function () {
        if (this.displayMonthNumber > 0) {
            this.updateDisplay(this.displayYear, this.displayMonthNumber - 1);
        }
        else {
            this.updateDisplay(this.displayYear - 1, 11);
        }
    };
    // Ao selecionar uma data
    PoCalendarComponent.prototype.onSelectDate = function (date) {
        if (validateDateRange(date, this.dateStart, this.dateEnd)) {
            this.selectedDate = date;
            this.selectedDateChange.emit(date);
            this.submit.emit(date);
        }
    };
    // Ao selecionar um mês
    PoCalendarComponent.prototype.onSelectMonth = function (year, month) {
        this.selectDay();
        this.updateDisplay(year, month);
    };
    // Ao selecionar um ano
    PoCalendarComponent.prototype.onSelectYear = function (year, month) {
        // Se veio da tela de seleção de mês
        this.lastDisplay === 'month' ? this.selectMonth() : this.selectDay();
        this.currentYear = year;
        this.updateDisplay(year, month);
    };
    PoCalendarComponent.prototype.selectDay = function () {
        this.dayVisible = true;
        this.monthVisible = false;
        this.yearVisible = false;
        this.lastDisplay = 'day';
    };
    PoCalendarComponent.prototype.selectMonth = function () {
        this.dayVisible = false;
        this.monthVisible = true;
        this.yearVisible = false;
        this.lastDisplay = 'month';
    };
    PoCalendarComponent.prototype.selectYear = function () {
        this.dayVisible = false;
        this.monthVisible = false;
        this.yearVisible = true;
    };
    PoCalendarComponent.prototype.setMobileVisualization = function () {
        return this.isMobile() ? 'po-calendar po-calendar-mobile' : 'po-calendar';
    };
    PoCalendarComponent.prototype.updateYear = function (value) {
        this.updateDisplay(this.displayYear + value, this.displayMonthNumber);
    };
    PoCalendarComponent.prototype.addAllYearsInDecade = function (year) {
        var i;
        for (i = year; i < year + 10; i++) {
            this.displayDecade.push(i);
        }
    };
    PoCalendarComponent.prototype.equalsDate = function (date1, date2) {
        try {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }
        catch (error) {
            return false;
        }
    };
    PoCalendarComponent.prototype.updateDate = function (date) {
        this.currentMonthNumber = date.getMonth();
        this.currentYear = date.getFullYear();
        this.updateDisplay(this.currentYear, this.currentMonthNumber);
    };
    PoCalendarComponent.prototype.updateDecade = function (year) {
        this.addAllYearsInDecade(year);
        this.displayStartDecade = year;
        this.displayFinalDecade = year + 9;
    };
    PoCalendarComponent.prototype.updateDisplay = function (year, month) {
        var calendarArray = this.poCalendarService.monthDays(year, month);
        this.displayDays = [].concat.apply([], calendarArray);
        this.displayMonthNumber = month;
        this.displayMonth = this.displayMonths[month];
        this.displayYear = year;
        this.getArrayDecade(year);
    };
    PoCalendarComponent.ctorParameters = function () { return [
        { type: PoCalendarService },
        { type: PoCalendarLangService }
    ]; };
    tslib_1.__decorate([
        ViewChild('days', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoCalendarComponent.prototype, "elDays", void 0);
    tslib_1.__decorate([
        ViewChild('months', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoCalendarComponent.prototype, "elMonths", void 0);
    tslib_1.__decorate([
        ViewChild('years', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoCalendarComponent.prototype, "elYears", void 0);
    tslib_1.__decorate([
        Input('p-date-end'),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], PoCalendarComponent.prototype, "dateEnd", null);
    tslib_1.__decorate([
        Input('p-locale'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoCalendarComponent.prototype, "locale", null);
    tslib_1.__decorate([
        Input('p-selected-date'),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], PoCalendarComponent.prototype, "selectedDate", null);
    tslib_1.__decorate([
        Input('p-date-start'),
        tslib_1.__metadata("design:type", Date),
        tslib_1.__metadata("design:paramtypes", [Date])
    ], PoCalendarComponent.prototype, "dateStart", null);
    tslib_1.__decorate([
        Output('p-selected-dateChange'),
        tslib_1.__metadata("design:type", Object)
    ], PoCalendarComponent.prototype, "selectedDateChange", void 0);
    tslib_1.__decorate([
        Output('p-submit'),
        tslib_1.__metadata("design:type", Object)
    ], PoCalendarComponent.prototype, "submit", void 0);
    PoCalendarComponent = tslib_1.__decorate([
        Component({
            selector: 'po-calendar',
            template: "<div class=\"po-calendar-overlay\" [class.po-invisible]=\"overlayInvisible\"></div>\n<div *ngIf=\"visible\" [ngClass]=\"setMobileVisualization()\">\n  <div *ngIf=\"dayVisible\" #days>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"onPrevMonth()\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable po-mr-1\" (click)=\"selectMonth()\">{{ displayMonth }}</span>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"onNextMonth()\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\" *ngFor=\"let day of displayWeedDays\">\n            {{ day.toLowerCase() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-day\">\n        <div *ngFor=\"let day of displayDays\" class=\"po-calendar-day po-calendar-box-background\" (click)=\"onSelectDate(day)\"\n          [ngClass]=\"getDayBackgroundColor(day)\">\n          <span *ngIf=\"day != 0\" [ngClass]=\"getDayForegroundColor(day)\">\n            {{ day.getDate() }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"monthVisible\" #months>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-1)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\" attr-calendar>\n        <span class=\"po-clickable\" (click)=\"selectYear()\">{{ displayYear }}</span>\n      </div>\n      <span (click)=\"updateYear(1)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordMonth() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-month\">\n        <div *ngFor=\"let month of displayMonths; let i = index;\" class=\"po-calendar-month\"\n        (click)=\"onSelectMonth(displayYear, i)\"\n        [ngClass]=\"getBackgroundColor(i, displayMonthNumber)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(i, displayMonthNumber)\">\n            {{ month }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"yearVisible\" #years>\n    <div class=\"po-calendar-nav\">\n      <span (click)=\"updateYear(-10)\" class=\"po-calendar-nav-left po-icon po-icon-arrow-left\"></span>\n      <div class=\"po-calendar-nav-title\">\n        {{ displayStartDecade }} - {{ displayFinalDecade }}\n      </div>\n      <span (click)=\"updateYear(10)\" class=\"po-calendar-nav-right po-icon po-icon-arrow-right\"></span>\n    </div>\n    <div class=\"po-calendar-content\">\n      <div class=\"po-calendar-labels\">\n        <div class=\"po-calendar-label\">\n          {{ getWordYear() }}\n        </div>\n      </div>\n      <div class=\"po-calendar-content-list-year\">\n        <div *ngFor=\"let year of displayDecade; let i = index;\" class=\"po-calendar-year\"\n        (click)=\"onSelectYear(year, displayMonthNumber)\"\n        [ngClass]=\"getBackgroundColor(year, currentYear)\" attr-calendar>\n          <span [ngClass]=\"getForegroundColor(year, currentYear)\">\n            {{ year }}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
            providers: [PoCalendarService, PoCalendarLangService]
        }),
        tslib_1.__metadata("design:paramtypes", [PoCalendarService,
            PoCalendarLangService])
    ], PoCalendarComponent);
    return PoCalendarComponent;
}());
export { PoCalendarComponent };
//# sourceMappingURL=data:application/json;base64,