import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var PoCalendarLangService = /** @class */ (function () {
    function PoCalendarLangService() {
        this.months = [
            {
                pt: 'Janeiro',
                en: 'January',
                es: 'Enero'
            },
            {
                pt: 'Fevereiro',
                en: 'February',
                es: 'Febrero'
            },
            {
                pt: 'Março',
                en: 'March',
                es: 'Marzo'
            },
            {
                pt: 'Abril',
                en: 'April',
                es: 'Abril'
            },
            {
                pt: 'Maio',
                en: 'May',
                es: 'Mayo'
            },
            {
                pt: 'Junho',
                en: 'June',
                es: 'Junio'
            },
            {
                pt: 'Julho',
                en: 'July',
                es: 'Julio'
            },
            {
                pt: 'Agosto',
                en: 'August',
                es: 'Agosto'
            },
            {
                pt: 'Setembro',
                en: 'September',
                es: 'Setiembre'
            },
            {
                pt: 'Outubro',
                en: 'October',
                es: 'Octubre'
            },
            {
                pt: 'Novembro',
                en: 'November',
                es: 'Noviembre'
            },
            {
                pt: 'Dezembro',
                en: 'December',
                es: 'Diciembre'
            }
        ];
        this.shortWeekDays = [
            {
                pt: 'Dom',
                en: 'Sun',
                es: 'Dom'
            },
            {
                pt: 'Seg',
                en: 'Mon',
                es: 'Lun'
            },
            {
                pt: 'Ter',
                en: 'Tue',
                es: 'Mar'
            },
            {
                pt: 'Qua',
                en: 'Wed',
                es: 'Mié'
            },
            {
                pt: 'Qui',
                en: 'Thu',
                es: 'Jue'
            },
            {
                pt: 'Sex',
                en: 'Fri',
                es: 'Vie'
            },
            {
                pt: 'Sáb',
                en: 'Sat',
                es: 'Sáb'
            }
        ];
        this.wordMonth = {
            pt: 'Mês',
            en: 'Month',
            es: 'Mes'
        };
        this.wordYear = {
            pt: 'Ano',
            en: 'Year',
            es: 'Año'
        };
        this.lang = 'pt';
    }
    PoCalendarLangService.prototype.setLanguage = function (lang) {
        if (lang && lang.length >= 2) {
            lang = lang.toLowerCase().slice(0, 2);
            this.lang = (lang === 'pt' || lang === 'en' || lang === 'es') ? lang : 'pt';
        }
    };
    PoCalendarLangService.prototype.getWordMonth = function () {
        return this.wordMonth[this.lang];
    };
    PoCalendarLangService.prototype.getWordYear = function () {
        return this.wordYear[this.lang];
    };
    PoCalendarLangService.prototype.getMonth = function (month) {
        return this.months[month][this.lang];
    };
    PoCalendarLangService.prototype.getArrayMonths = function () {
        var arrMonths = Array();
        for (var i = 0; i < this.months.length; i++) {
            arrMonths.push(this.months[i][this.lang]);
        }
        return arrMonths;
    };
    PoCalendarLangService.prototype.getWeedDays = function (day) {
        return this.shortWeekDays[day][this.lang];
    };
    PoCalendarLangService.prototype.getArrayWeekDays = function () {
        var arrWeekDays = Array();
        for (var i = 0; i < this.shortWeekDays.length; i++) {
            arrWeekDays.push(this.shortWeekDays[i][this.lang]);
        }
        return arrWeekDays;
    };
    PoCalendarLangService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [])
    ], PoCalendarLangService);
    return PoCalendarLangService;
}());
export { PoCalendarLangService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIubGFuZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1maWVsZC9wby1kYXRlcGlja2VyL3BvLWNhbGVuZGFyL3BvLWNhbGVuZGFyLmxhbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQztJQXFIRTtRQW5IQSxXQUFNLEdBQUc7WUFDUDtnQkFDRSxFQUFFLEVBQUUsU0FBUztnQkFDYixFQUFFLEVBQUUsU0FBUztnQkFDYixFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLFdBQVc7Z0JBQ2YsRUFBRSxFQUFFLFVBQVU7Z0JBQ2QsRUFBRSxFQUFFLFNBQVM7YUFDZDtZQUNEO2dCQUNFLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxPQUFPO2FBQ1o7WUFDRDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE1BQU07Z0JBQ1YsRUFBRSxFQUFFLEtBQUs7Z0JBQ1QsRUFBRSxFQUFFLE1BQU07YUFDWDtZQUNEO2dCQUNFLEVBQUUsRUFBRSxPQUFPO2dCQUNYLEVBQUUsRUFBRSxNQUFNO2dCQUNWLEVBQUUsRUFBRSxPQUFPO2FBQ1o7WUFDRDtnQkFDRSxFQUFFLEVBQUUsT0FBTztnQkFDWCxFQUFFLEVBQUUsTUFBTTtnQkFDVixFQUFFLEVBQUUsT0FBTzthQUNaO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLFFBQVE7Z0JBQ1osRUFBRSxFQUFFLFFBQVE7Z0JBQ1osRUFBRSxFQUFFLFFBQVE7YUFDYjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxVQUFVO2dCQUNkLEVBQUUs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LElBQUksQ0FBQyxDQUFDLENBQUM7U0FDM0M7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsMkNBQVcsR0FBWCxVQUFZLEdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsZ0RBQWdCLEdBQWhCO1FBQ0UsSUFBTSxXQUFXLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xELFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUE1SlUscUJBQXFCO1FBRGpDLFVBQVUsRUFBRTs7T0FDQSxxQkFBcUIsQ0E2SmpDO0lBQUQsNEJBQUM7Q0FBQSxBQTdKRCxJQTZKQztTQTdKWSxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyTGFuZ1NlcnZpY2Uge1xuXG4gIG1vbnRocyA9IFtcbiAgICB7XG4gICAgICBwdDogJ0phbmVpcm8nLFxuICAgICAgZW46ICdKYW51YXJ5JyxcbiAgICAgIGVzOiAnRW5lcm8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0ZldmVyZWlybycsXG4gICAgICBlbjogJ0ZlYnJ1YXJ5JyxcbiAgICAgIGVzOiAnRmVicmVybydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnTWFyw6dvJyxcbiAgICAgIGVuOiAnTWFyY2gnLFxuICAgICAgZXM6ICdNYXJ6bydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnQWJyaWwnLFxuICAgICAgZW46ICdBcHJpbCcsXG4gICAgICBlczogJ0FicmlsJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdNYWlvJyxcbiAgICAgIGVuOiAnTWF5JyxcbiAgICAgIGVzOiAnTWF5bydcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnSnVuaG8nLFxuICAgICAgZW46ICdKdW5lJyxcbiAgICAgIGVzOiAnSnVuaW8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0p1bGhvJyxcbiAgICAgIGVuOiAnSnVseScsXG4gICAgICBlczogJ0p1bGlvJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdBZ29zdG8nLFxuICAgICAgZW46ICdBdWd1c3QnLFxuICAgICAgZXM6ICdBZ29zdG8nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1NldGVtYnJvJyxcbiAgICAgIGVuOiAnU2VwdGVtYmVyJyxcbiAgICAgIGVzOiAnU2V0aWVtYnJlJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdPdXR1YnJvJyxcbiAgICAgIGVuOiAnT2N0b2JlcicsXG4gICAgICBlczogJ09jdHVicmUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ05vdmVtYnJvJyxcbiAgICAgIGVuOiAnTm92ZW1iZXInLFxuICAgICAgZXM6ICdOb3ZpZW1icmUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ0RlemVtYnJvJyxcbiAgICAgIGVuOiAnRGVjZW1iZXInLFxuICAgICAgZXM6ICdEaWNpZW1icmUnXG4gICAgfVxuICBdO1xuXG4gIHNob3J0V2Vla0RheXMgPSBbXG4gICAge1xuICAgICAgcHQ6ICdEb20nLFxuICAgICAgZW46ICdTdW4nLFxuICAgICAgZXM6ICdEb20nXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1NlZycsXG4gICAgICBlbjogJ01vbicsXG4gICAgICBlczogJ0x1bidcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnVGVyJyxcbiAgICAgIGVuOiAnVHVlJyxcbiAgICAgIGVzOiAnTWFyJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdRdWEnLFxuICAgICAgZW46ICdXZWQnLFxuICAgICAgZXM6ICdNacOpJ1xuICAgIH0sXG4gICAge1xuICAgICAgcHQ6ICdRdWknLFxuICAgICAgZW46ICdUaHUnLFxuICAgICAgZXM6ICdKdWUnXG4gICAgfSxcbiAgICB7XG4gICAgICBwdDogJ1NleCcsXG4gICAgICBlbjogJ0ZyaScsXG4gICAgICBlczogJ1ZpZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHB0OiAnU8OhYicsXG4gICAgICBlbjogJ1NhdCcsXG4gICAgICBlczogJ1PDoWInXG4gICAgfVxuICBdO1xuXG4gIHdvcmRNb250aCA9IHtcbiAgICBwdDogJ03DqnMnLFxuICAgIGVuOiAnTW9udGgnLFxuICAgIGVzOiAnTWVzJ1xuICB9O1xuXG4gIHdvcmRZZWFyID0ge1xuICAgIHB0OiAnQW5vJyxcbiAgICBlbjogJ1llYXInLFxuICAgIGVzOiAnQcOxbydcbiAgfTtcblxuICBsYW5nID0gJ3B0JztcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIHNldExhbmd1YWdlKGxhbmc6IHN0cmluZykge1xuICAgIGlmIChsYW5nICYmIGxhbmcubGVuZ3RoID49IDIpIHtcbiAgICAgIGxhbmcgPSBsYW5nLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCwgMik7XG4gICAgICB0aGlzLmxhbmcgPSAobGFuZyA9PT0gJ3B0JyB8fCBsYW5nID09PSAnZW4nIHx8IGxhbmcgPT09ICdlcycpID8gbGFuZyA6ICdwdCc7XG4gICAgfVxuICB9XG5cbiAgZ2V0V29yZE1vbnRoKCkge1xuICAgIHJldHVybiB0aGlzLndvcmRNb250aFt0aGlzLmxhbmddO1xuICB9XG5cbiAgZ2V0V29yZFllYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMud29yZFllYXJbdGhpcy5sYW5nXTtcbiAgfVxuXG4gIGdldE1vbnRoKG1vbnRoOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5tb250aHNbbW9udGhdW3RoaXMubGFuZ107XG4gIH1cblxuICBnZXRBcnJheU1vbnRocygpIHtcbiAgICBjb25zdCBhcnJNb250aHMgPSBBcnJheSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5tb250aHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyck1vbnRocy5wdXNoKHRoaXMubW9udGhzW2ldW3RoaXMubGFuZ10pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyTW9udGhzO1xuICB9XG5cbiAgZ2V0V2VlZERheXMoZGF5OiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5zaG9ydFdlZWtEYXlzW2RheV1bdGhpcy5sYW5nXTtcbiAgfVxuXG4gIGdldEFycmF5V2Vla0RheXMoKSB7XG4gICAgY29uc3QgYXJyV2Vla0RheXMgPSBBcnJheSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaG9ydFdlZWtEYXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnJXZWVrRGF5cy5wdXNoKHRoaXMuc2hvcnRXZWVrRGF5c1tpXVt0aGlzLmxhbmddKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycldlZWtEYXlzO1xuICB9XG59XG4iXX0=