import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertDateToISODate, convertDateToISOExtended, convertIsoToDate, convertToBoolean, formatYear, getShortBrowserLanguage, isTypeof, setYearFrom0To100, validateDateRange } from '../../../utils/util';
import { dateFailed, requiredFailed } from './../validators';
import { InputBoolean } from '../../../decorators';
import { PoMask } from '../po-input/po-mask';
import { PoDatepickerIsoFormat } from './enums/po-datepicker-iso-format.enum';
var poDatepickerFormatDefault = 'dd/mm/yyyy';
/**
 * @description
 *
 * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.
 *
 * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,
 * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).
 *
 * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar
 * use a propriedade `p-locale`.
 *
 * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o
 * Date padrão do Javascript.
 *
 * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,
 * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:
 *
 * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;
 *
 * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;
 *
 * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;
 *
 * **Importante:**
 *
 * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)
 * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).
 * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.
 * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro
 * do próprio Angular (`[ngModelOptions]="{standalone: true}"`).
 *
 * Exemplo:
 *
 * ```
 * <po-datepicker
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}"
 * </po-datepicker>
 * ```
 *
 * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.
 */
var PoDatepickerBaseComponent = /** @class */ (function () {
    function PoDatepickerBaseComponent() {
        this._format = poDatepickerFormatDefault;
        this._noAutocomplete = false;
        this._placeholder = '';
        this.firstStart = true;
        this.hour = 'T00:00:01-00:00';
        this.isExtendedISO = false;
        this.onChangeModel = null;
        this.onTouchedModel = null;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Desabilita o campo. */
        this.disabled = false;
        /** Torna o elemento somente leitura. */
        this.readonly = false;
        /** Faz com que o campo seja obrigatório. */
        this.required = false;
        /** Habilita ação para limpar o campo. */
        this.clean = false;
        /**
         * Mensagem apresentada quando a data for inválida ou fora do período.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.
         */
        this.errorPattern = '';
        /** Evento disparado ao sair do campo. */
        this.onblur = new EventEmitter();
        /** Evento disparado ao alterar valor do campo. */
        this.onchange = new EventEmitter();
    }
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "noAutocomplete", {
        get: function () {
            return this._noAutocomplete;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * @default `false`
         */
        set: function (value) {
            this._noAutocomplete = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         */
        set: function (placeholder) {
            this._placeholder = isTypeof(placeholder, 'string') ? placeholder : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "setDisabled", {
        set: function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "setReadonly", {
        set: function (readonly) {
            this.readonly = readonly === '' ? true : convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "setRequired", {
        set: function (required) {
            this.required = required === '' ? true : convertToBoolean(required);
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "oldfocus", {
        /**
         * @optional
         *
         * @deprecated 2.0.0
         * @description
         *
         * **Deprecated**
         *
         * > Esta propriedade está depreciada e será excluída na versão 2.0.0, utilize a propriedade `p-auto-focus`.
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * @default `false`
         */
        set: function (focus) {
            this.autoFocus = focus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "setClean", {
        set: function (clean) {
            this.clean = clean === '' ? true : convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "minDate", {
        get: function () {
            return this._minDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma data mínima para o `po-datepicker`.
         */
        set: function (value) {
            if (value instanceof Date) {
                var year = value.getFullYear();
                var date = new Date(year, value.getMonth(), value.getDate(), 0, 0, 0);
                setYearFrom0To100(date, year);
                this._minDate = date;
            }
            else {
                this._minDate = convertIsoToDate(value, true, false);
            }
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "maxDate", {
        get: function () {
            return this._maxDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define uma data máxima para o `po-datepicker`.
         */
        set: function (value) {
            if (value instanceof Date) {
                var year = value.getFullYear();
                var date = new Date(year, value.getMonth(), value.getDate(), 23, 59, 59);
                setYearFrom0To100(date, year);
                this._maxDate = date;
            }
            else {
                this._maxDate = convertIsoToDate(value, false, true);
            }
            this.validateModel(convertDateToISOExtended(this.date, this.hour));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "format", {
        get: function () {
            return this._format;
        },
        /**
         * @optional
         *
         * @description
         *
         * Formato de exibição da data.
         *
         * Valores válidos:
         *  - `dd/mm/yyyy`
         *  - `mm/dd/yyyy`
         *  - `yyyy/mm/dd`
         *
         * @default `dd/mm/yyyy`
         */
        set: function (value) {
            if (value) {
                value = value.toLowerCase();
                if (value.match(/dd/) && value.match(/mm/) && value.match(/yyyy/)) {
                    this._format = value;
                    this.objMask = this.buildMask();
                    this.refreshValue(this.date);
                    return;
                }
            }
            this._format = poDatepickerFormatDefault;
            this.objMask = this.buildMask();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "isoFormat", {
        get: function () {
            return this._isoFormat;
        },
        /**
         * @optional
         *
         * @description
         *
         * Padrão de formatação para saída do *model*, independentemente do formato de entrada.
         *
         * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.
         */
        set: function (value) {
            if (Object.values(PoDatepickerIsoFormat).includes(value)) {
                this._isoFormat = value;
                this.isExtendedISO = value === PoDatepickerIsoFormat.Extended;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerBaseComponent.prototype, "locale", {
        get: function () {
            return this._locale || getShortBrowserLanguage();
        },
        set: function (value) {
            if (value) {
                this._locale = value.length >= 2 ? value : 'pt';
            }
            else {
                this._locale = getShortBrowserLanguage();
            }
        },
        enumerable: true,
        configurable: true
    });
    PoDatepickerBaseComponent.prototype.ngOnInit = function () {
        // Classe de máscara
        this.objMask = this.buildMask();
    };
    // Converte um objeto string em Date
    PoDatepickerBaseComponent.prototype.getDateFromString = function (dateString) {
        var day = parseInt(dateString.substring(this.format.indexOf('d'), this.format.indexOf('d') + 2), 10);
        var month = parseInt(dateString.substring(this.format.indexOf('m'), this.format.indexOf('m') + 2), 10) - 1;
        var year = parseInt(dateString.substring(this.format.indexOf('y'), this.format.indexOf('y') + 4), 10);
        var date = new Date(year, month, day);
        setYearFrom0To100(date, year);
        return (date.getFullYear() === year && date.getMonth() === month && date.getDate() === day) ? date : null;
    };
    // Formata a data.
    PoDatepickerBaseComponent.prototype.formatToDate = function (value) {
        var dateFormatted = this.format;
        dateFormatted = dateFormatted.replace('dd', ('0' + value.getDate()).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (value.getMonth() + 1)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', formatYear(value.getFullYear()));
        return dateFormatted;
    };
    // Método responsável por controlar o modelo.
    PoDatepickerBaseComponent.prototype.controlModel = function (date) {
        this.date = date;
        if (date && this.isExtendedISO) {
            this.callOnChange(convertDateToISOExtended(this.date, this.hour));
        }
        else if (date && !this.isExtendedISO) {
            this.callOnChange(convertDateToISODate(this.date));
        }
        else {
            date === undefined ? this.callOnChange('') : this.callOnChange('Data inválida');
        }
    };
    // Executa a função onChange
    PoDatepickerBaseComponent.prototype.callOnChange = function (value, retry) {
        var _this = this;
        if (retry === void 0) { retry = true; }
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
        else if (retry) {
            setTimeout(function () { return _this.callOnChange(value, false); });
        }
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    PoDatepickerBaseComponent.prototype.registerOnChange = function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    PoDatepickerBaseComponent.prototype.registerOnTouched = function (func) {
        this.onTouchedModel = func;
    };
    PoDatepickerBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoDatepickerBaseComponent.prototype.validateModel = function (model) {
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    PoDatepickerBaseComponent.prototype.buildMask = function () {
        var mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    };
    PoDatepickerBaseComponent.prototype.validate = function (c) {
        // Verifica se já possui algum error pattern padrão.
        this.errorPattern = this.errorPattern !== 'Data inválida' && this.errorPattern !== 'Data fora do período' ? this.errorPattern : '';
        if (dateFailed(c.value)) {
            this.errorPattern = this.errorPattern || 'Data inválida';
            return { date: {
                    valid: false,
                } };
        }
        if (requiredFailed(this.required, this.disabled, c.value)) {
            return { required: {
                    valid: false,
                } };
        }
        if ((this.date && !validateDateRange(this.date, this._minDate, this._maxDate))) {
            this.errorPattern = this.errorPattern || 'Data fora do período';
            return { date: {
                    valid: false,
                } };
        }
        return null;
    };
    tslib_1.__decorate([
        Input('p-auto-focus'), InputBoolean(),
        tslib_1.__metadata("design:type", Boolean)
    ], PoDatepickerBaseComponent.prototype, "autoFocus", void 0);
    tslib_1.__decorate([
        Input('name'),
        tslib_1.__metadata("design:type", String)
    ], PoDatepickerBaseComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input('p-no-autocomplete'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDatepickerBaseComponent.prototype, "noAutocomplete", null);
    tslib_1.__decorate([
        Input('p-placeholder'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDatepickerBaseComponent.prototype, "placeholder", null);
    tslib_1.__decorate([
        Input('p-optional'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoDatepickerBaseComponent.prototype, "optional", void 0);
    tslib_1.__decorate([
        Input('p-disabled'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDatepickerBaseComponent.prototype, "setDisabled", null);
    tslib_1.__decorate([
        Input('p-readonly'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDatepickerBaseComponent.prototype, "setReadonly", null);
    tslib_1.__decorate([
        Input('p-required'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDatepickerBaseComponent.prototype, "setRequired", null);
    tslib_1.__decorate([
        Input('p-focus'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDatepickerBaseComponent.prototype, "oldfocus", null);
    tslib_1.__decorate([
        Input('p-clean'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDatepickerBaseComponent.prototype, "setClean", null);
    tslib_1.__decorate([
        Input('p-error-pattern'),
        tslib_1.__metadata("design:type", String)
    ], PoDatepickerBaseComponent.prototype, "errorPattern", void 0);
    tslib_1.__decorate([
        Input('p-min-date'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoDatepickerBaseComponent.prototype, "minDate", null);
    tslib_1.__decorate([
        Input('p-max-date'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoDatepickerBaseComponent.prototype, "maxDate", null);
    tslib_1.__decorate([
        Input('p-format'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDatepickerBaseComponent.prototype, "format", null);
    tslib_1.__decorate([
        Input('p-iso-format'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDatepickerBaseComponent.prototype, "isoFormat", null);
    tslib_1.__decorate([
        Input('p-locale'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDatepickerBaseComponent.prototype, "locale", null);
    tslib_1.__decorate([
        Output('p-blur'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoDatepickerBaseComponent.prototype, "onblur", void 0);
    tslib_1.__decorate([
        Output('p-change'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoDatepickerBaseComponent.prototype, "onchange", void 0);
    return PoDatepickerBaseComponent;
}());
export { PoDatepickerBaseComponent };
//# sourceMappingURL=data:application/json;base64,