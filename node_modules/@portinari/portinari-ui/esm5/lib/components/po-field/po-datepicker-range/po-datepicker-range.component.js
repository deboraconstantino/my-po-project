import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoDatepickerRangeBaseComponent } from './po-datepicker-range-base.component';
import { PoDateService } from './../../../services/po-date/po-date.service';
import { PoMask } from '../po-input/po-mask';
var arrowLeftKey = 37;
var arrowRightKey = 39;
var backspaceKey = 8;
var poDatepickerRangeDateLengthDefault = 10;
/**
 * @docsExtends PoDatepickerRangeBaseComponent
 *
 * @example
 *
 * <example name="po-datepicker-range-basic" title="Portinari Datepicker Range Basic">
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-labs" title="Portinari Datepicker Range Labs">
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations" title="Portinari Datepicker Range - Vacations Suggestion">
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.html"> </file>
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations-reactive-form" title="Portinari Datepicker Range - Vacations Reactive Form">
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.html">
 *  </file>
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.ts">
 *  </file>
 * </example>
 */
var PoDatepickerRangeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoDatepickerRangeComponent, _super);
    function PoDatepickerRangeComponent(poDateService, poDatepickerRangeElement) {
        var _this = _super.call(this, poDateService) || this;
        _this.poDatepickerRangeElement = poDatepickerRangeElement;
        return _this;
    }
    PoDatepickerRangeComponent_1 = PoDatepickerRangeComponent;
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "autocomplete", {
        get: function () {
            return this.noAutocomplete ? 'off' : 'on';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "enableCleaner", {
        get: function () {
            return (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "endDateInputName", {
        get: function () {
            return 'end-date';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "endDateInputValue", {
        get: function () {
            return this.endDateInput.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "getErrorMessage", {
        get: function () {
            return (this.errorMessage !== '' && this.hasInvalidClass()) ? this.errorMessage : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "isDateRangeInputUncompleted", {
        get: function () {
            return this.endDateInputValue.length < poDatepickerRangeDateLengthDefault
                && this.startDateInputValue.length < poDatepickerRangeDateLengthDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "isDirtyDateRangeInput", {
        get: function () {
            return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "startDateInputName", {
        get: function () {
            return 'start-date';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeComponent.prototype, "startDateInputValue", {
        get: function () {
            return this.startDateInput.nativeElement.value;
        },
        enumerable: true,
        configurable: true
    });
    PoDatepickerRangeComponent.getKeyCode = function (event) {
        return event.keyCode || event.which;
    };
    PoDatepickerRangeComponent.getTargetElement = function (event) {
        return event.target || event.srcElement;
    };
    PoDatepickerRangeComponent.isValidKey = function (keyCode) {
        var isNumericKey = keyCode >= 48 && keyCode <= 57;
        var isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
        return isNumericKey || isNumericNumpadKey;
    };
    PoDatepickerRangeComponent.prototype.ngAfterViewInit = function () {
        if (this.autoFocus) {
            this.focus();
        }
    };
    PoDatepickerRangeComponent.prototype.ngOnInit = function () {
        // Classe de máscara
        this.poMaskObject = this.buildMask();
    };
    PoDatepickerRangeComponent.prototype.clear = function () {
        this.resetDateRangeInputValidation();
        this.dateRange = { start: '', end: '' };
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerRangeComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
     *
     * focusDatepickerRange() {
     *   this.datepickerRange.focus();
     * }
     * ```
     */
    PoDatepickerRangeComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.startDateInput.nativeElement.focus();
        }
    };
    PoDatepickerRangeComponent.prototype.onBlur = function () {
        this.removeFocusFromDatePickerRangeField();
    };
    PoDatepickerRangeComponent.prototype.onFocus = function () {
        this.applyFocusOnDatePickerRangeField();
    };
    PoDatepickerRangeComponent.prototype.onKeydown = function (event) {
        if (this.readonly) {
            return;
        }
        if (this.isSetFocusOnBackspace(event)) {
            event.preventDefault();
            this.setFocusOnBackspace();
        }
        else {
            this.poMaskObject.keydown(event);
        }
    };
    PoDatepickerRangeComponent.prototype.onKeyup = function (event) {
        if (this.readonly) {
            return;
        }
        var isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.setFocus(event);
        this.poMaskObject.keyup(event);
        this.updateModelByScreen(isStartDateTargetEvent);
    };
    PoDatepickerRangeComponent.prototype.resetDateRangeInputValidation = function () {
        this.isStartDateRangeInputValid = true;
        this.isDateRangeInputFormatValid = true;
    };
    PoDatepickerRangeComponent.prototype.updateScreenByModel = function (model) {
        var _this = this;
        var dateRange = { start: model.start, end: model.end };
        var isStartDateValid = this.poDateService.isDateRangeValid(dateRange.end, dateRange.start);
        var isDateValid = function (date) { return !_this.dateFormatFailed(date) && isStartDateValid; };
        var endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
        var startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
        this.endDateInput.nativeElement.value = endDateFormated;
        this.startDateInput.nativeElement.value = startDateFormated;
    };
    PoDatepickerRangeComponent.prototype.applyFocusOnDatePickerRangeField = function () {
        this.dateRangeField.nativeElement.classList.add('po-datepicker-range-field-focused');
    };
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    PoDatepickerRangeComponent.prototype.buildMask = function () {
        var mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    };
    PoDatepickerRangeComponent.prototype.formatDate = function (format, day, month, year) {
        if (day === void 0) { day = ''; }
        if (month === void 0) { month = ''; }
        if (year === void 0) { year = ''; }
        var dateFormatted = format;
        day = day && day.includes('T') ? day.slice(0, 2) : day;
        dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + (month)).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(year));
        return dateFormatted;
    };
    PoDatepickerRangeComponent.prototype.formatScreenToModel = function (value) {
        if (value === void 0) { value = ''; }
        var _a = tslib_1.__read(value.split('/'), 3), day = _a[0], month = _a[1], year = _a[2];
        return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
    };
    PoDatepickerRangeComponent.prototype.formatModelToScreen = function (value) {
        if (value === void 0) { value = ''; }
        var _a = tslib_1.__read(value.split('-'), 3), year = _a[0], month = _a[1], day = _a[2];
        return value ? this.formatDate(this.format, day, month, year) : '';
    };
    PoDatepickerRangeComponent.prototype.getDateRangeFormatValidation = function (startDate, endDate, isStartDateTargetEvent) {
        this.setDateRangeInputValidation(startDate, endDate);
        return {
            isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid,
            dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
        };
    };
    PoDatepickerRangeComponent.prototype.getValidatedModel = function (startDate, endDate, isStartDateTargetEvent) {
        var dateRangeModel = { start: '', end: '' };
        dateRangeModel.end = (isStartDateTargetEvent || this.isStartDateRangeInputValid)
            && !this.dateFormatFailed(endDate) ? endDate : '';
        dateRangeModel.start = (!isStartDateTargetEvent || this.isStartDateRangeInputValid)
            && !this.dateFormatFailed(startDate) ? startDate : '';
        return dateRangeModel;
    };
    PoDatepickerRangeComponent.prototype.hasInvalidClass = function () {
        return (this.poDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
            this.poDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
    };
    PoDatepickerRangeComponent.prototype.isEqualBeforeValue = function (startDate, endDate) {
        return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
    };
    PoDatepickerRangeComponent.prototype.isSetFocusOnBackspace = function (event) {
        return event.target.name === this.endDateInputName &&
            this.endDateInput.nativeElement.selectionStart === 0 && this.endDateInput.nativeElement.selectionEnd === 0 &&
            event.keyCode === backspaceKey;
    };
    PoDatepickerRangeComponent.prototype.removeFocusFromDatePickerRangeField = function () {
        this.dateRangeField.nativeElement.classList.remove('po-datepicker-range-field-focused');
    };
    PoDatepickerRangeComponent.prototype.setDateRangeInputValidation = function (startDate, endDate) {
        this.isStartDateRangeInputValid = this.poDateService.isDateRangeValid(endDate, startDate);
        this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
    };
    PoDatepickerRangeComponent.prototype.setFocus = function (event) {
        var inputElement = PoDatepickerRangeComponent_1.getTargetElement(event);
        var keyCode = PoDatepickerRangeComponent_1.getKeyCode(event);
        var inputName = inputElement['name'];
        this.setFocusOnArrowLeft(keyCode, inputName);
        this.setFocusOnArrowRight(keyCode, inputName, inputElement);
        this.setFocusOnStartDateCompleted(keyCode, inputName);
    };
    PoDatepickerRangeComponent.prototype.setFocusAndPosition = function (position, inputElement, selectionRange) {
        var _this = this;
        this.focusOnElement(inputElement);
        setTimeout(function () {
            inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
            _this.poMaskObject.initialPosition = position;
            _this.poMaskObject.finalPosition = position;
        });
    };
    PoDatepickerRangeComponent.prototype.focusOnElement = function (inputElement) {
        inputElement.nativeElement.focus();
    };
    PoDatepickerRangeComponent.prototype.setFocusOnArrowLeft = function (keyCode, inputName) {
        var isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
        if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
            var inputLength = this.startDateInput.nativeElement.value.length;
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        }
    };
    PoDatepickerRangeComponent.prototype.setFocusOnArrowRight = function (keyCode, inputName, inputElement) {
        var isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
        if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    };
    PoDatepickerRangeComponent.prototype.setFocusOnBackspace = function () {
        var inputLength = this.startDateInput.nativeElement.value.length;
        this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
        this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
    };
    PoDatepickerRangeComponent.prototype.setFocusOnStartDateCompleted = function (keyCode, inputName) {
        var isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === poDatepickerRangeDateLengthDefault;
        var isNewDateCompleted = this.startDateInputValue.length === poDatepickerRangeDateLengthDefault && isLastKeyPressed;
        var isValidKey = PoDatepickerRangeComponent_1.isValidKey(keyCode);
        if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    };
    PoDatepickerRangeComponent.prototype.updateModelByScreen = function (isStartDateTargetEvent) {
        var endDateFormatted = this.formatScreenToModel(this.endDateInputValue);
        var startDateFormatted = this.formatScreenToModel(this.startDateInputValue);
        if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
            this.updateModel(this.dateRange);
            return;
        }
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        var dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit(tslib_1.__assign({}, this.dateRange));
        }
        if (!dateFormatValidation.isValid) {
            this.dateRange = tslib_1.__assign({}, dateFormatValidation.dateRangeModel);
            this.updateModel(dateFormatValidation.dateRangeModel);
        }
    };
    var PoDatepickerRangeComponent_1;
    PoDatepickerRangeComponent.ctorParameters = function () { return [
        { type: PoDateService },
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        ViewChild('dateRangeField', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoDatepickerRangeComponent.prototype, "dateRangeField", void 0);
    tslib_1.__decorate([
        ViewChild('endDateInput', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoDatepickerRangeComponent.prototype, "endDateInput", void 0);
    tslib_1.__decorate([
        ViewChild('startDateInput', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoDatepickerRangeComponent.prototype, "startDateInput", void 0);
    PoDatepickerRangeComponent = PoDatepickerRangeComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'po-datepicker-range',
            template: "<po-field-container\n  [p-help]=\"help\"\n  [p-label]=\"label\"\n  [p-optional]=\"!required && optional\">\n\n  <div\n    #dateRangeField\n    class=\"po-datepicker-range-field po-input\"\n    [class.po-datepicker-range-field-disabled]=\"disabled\">\n\n    <div class=\"po-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\">\n    </div>\n\n    <div class=\"po-datepicker-range-separator\">-</div>\n\n    <div class=\"po-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur()\"\n        (focus)=\"onFocus()\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\">\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-clean *ngIf=\"enableCleaner\" (p-change-event)=\"clear()\"></po-clean>\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <span\n        class=\"po-icon po-field-icon po-icon-calendar\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\">\n      </span>\n    </div>\n\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorMessage\"></po-field-container-bottom>\n</po-field-container>\n",
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return PoDatepickerRangeComponent_1; }),
                    multi: true,
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return PoDatepickerRangeComponent_1; }),
                    multi: true,
                }
            ]
        }),
        tslib_1.__metadata("design:paramtypes", [PoDateService, ElementRef])
    ], PoDatepickerRangeComponent);
    return PoDatepickerRangeComponent;
}(PoDatepickerRangeBaseComponent));
export { PoDatepickerRangeComponent };
//# sourceMappingURL=data:application/json;base64,