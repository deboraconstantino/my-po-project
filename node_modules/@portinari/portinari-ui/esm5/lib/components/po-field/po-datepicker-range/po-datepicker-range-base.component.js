import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { browserLanguage, convertToBoolean, poLocaleDefault } from './../../../utils/util';
import { requiredFailed } from '../validators';
import { InputBoolean } from '../../../decorators';
export var poDatepickerRangeLiteralsDefault = {
    en: {
        invalidFormat: 'Date in invalid format',
        startDateGreaterThanEndDate: 'Start date greater than end date',
    },
    es: {
        invalidFormat: 'Fecha en formato no válido',
        startDateGreaterThanEndDate: 'Fecha de inicio mayor que fecha final',
    },
    pt: {
        invalidFormat: 'Data no formato inválido',
        startDateGreaterThanEndDate: 'Data inicial maior que data final',
    },
    ru: {
        invalidFormat: 'Дата в неверном формате',
        startDateGreaterThanEndDate: 'Дата начала больше даты окончания',
    }
};
/**
 * @description
 *
 * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas
 * a data inicial ou a data final.
 *
 * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface
 * `PoDatepickerRange`, contendo as seguintes propriedades:
 * ```
 * { "start": '2017-11-28', "end": '2017-11-30' }
 * ```
 *
 * <a id="accepted-formats"></a>
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * new Date(2017, 10, 28);
 * ```
 *
 * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum
 * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.
 *
 * Importante:
 *
 * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;
 * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;
 * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do
 * `[(ngModel)]`, no entanto sem a validação do formulário;
 * - Para a validação do formulário, utilize o `[(ngModel)]`.
 */
var PoDatepickerRangeBaseComponent = /** @class */ (function () {
    function PoDatepickerRangeBaseComponent(poDateService) {
        this.poDateService = poDateService;
        this.errorMessage = '';
        this._clean = false;
        this._noAutocomplete = false;
        this._readonly = false;
        this._required = false;
        this.dateRange = { start: '', end: '' };
        this.format = 'dd/mm/yyyy';
        this.isDateRangeInputFormatValid = true;
        this.isStartDateRangeInputValid = true;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do campo.
         */
        this.onChange = new EventEmitter();
    }
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "isDateRangeInputValid", {
        get: function () {
            return this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "clean", {
        get: function () {
            return this._clean;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita ação para limpar o campo.
         *
         * @default `false`
         */
        set: function (clean) {
            this._clean = convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Desabilita o campo.
         *
         * @default `false`
         */
        set: function (value) {
            this._disabled = convertToBoolean(value);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "endDate", {
        get: function () {
            return this._endDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data final.
         */
        set: function (date) {
            this._endDate = this.convertPatternDateFormat(date);
            this.dateRange.end = this.endDate;
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poDatepickerRangeLiteralsDefault[browserLanguage()];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-datepicker-range`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format',
         *    startDateGreaterThanEndDate: 'End date less than start date'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoDatepickerRangeLiterals = {
         *    invalidFormat: 'Date in inconsistent format'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-datepicker-range
         *   [p-literals]="customLiterals">
         * </po-datepicker-range>
         * ```
         *
         * > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
         */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poDatepickerRangeLiteralsDefault[poLocaleDefault], poDatepickerRangeLiteralsDefault[browserLanguage()], value);
            }
            else {
                this._literals = poDatepickerRangeLiteralsDefault[browserLanguage()];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "noAutocomplete", {
        get: function () {
            return this._noAutocomplete;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * @default `false`
         */
        set: function (value) {
            this._noAutocomplete = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: function (value) {
            this._readonly = convertToBoolean(value);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: function (required) {
            this._required = convertToBoolean(required);
            this.validateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDatepickerRangeBaseComponent.prototype, "startDate", {
        get: function () {
            return this._startDate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Data inicial.
         */
        set: function (date) {
            this._startDate = this.convertPatternDateFormat(date);
            this.dateRange.start = this.startDate;
            this.updateScreenByModel(this.dateRange);
            this.updateModel(this.dateRange);
        },
        enumerable: true,
        configurable: true
    });
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    PoDatepickerRangeBaseComponent.prototype.registerOnChange = function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    PoDatepickerRangeBaseComponent.prototype.registerOnTouched = function (func) {
        this.onTouchedModel = func;
    };
    PoDatepickerRangeBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoDatepickerRangeBaseComponent.prototype.validate = function (control) {
        var value = control.value || {};
        var startDate = value.start ? this.convertPatternDateFormat(value.start) : '';
        var endDate = value.end ? this.convertPatternDateFormat(value.end) : '';
        if (this.requiredDateRangeFailed(startDate, endDate)) {
            this.errorMessage = '';
            return { required: {
                    valid: false,
                } };
        }
        if (this.dateRangeObjectFailed(control.value) || this.dateRangeFormatFailed(startDate, endDate)) {
            this.errorMessage = this.literals.invalidFormat;
            return { date: {
                    valid: false,
                } };
        }
        if (this.dateRangeFailed(startDate, endDate)) {
            this.errorMessage = this.literals.startDateGreaterThanEndDate;
            return { date: {
                    valid: false,
                } };
        }
        return null;
    };
    PoDatepickerRangeBaseComponent.prototype.writeValue = function (dateRange) {
        this.resetDateRangeInputValidation();
        if (!dateRange || this.dateRangeObjectFailed(dateRange)) {
            this.dateRange = { start: '', end: '' };
        }
        if (!dateRange) {
            this.validateModel(this.dateRange);
        }
        if (this.dateRangeObjectFailed(dateRange)) {
            this.updateModel(dateRange);
        }
        if (this.isDateRangeObject(dateRange)) {
            this.dateRange = {
                start: this.convertPatternDateFormat(dateRange.start),
                end: this.convertPatternDateFormat(dateRange.end)
            };
            this.updateModel(this.dateRange);
        }
        this.updateScreenByModel(this.dateRange);
    };
    PoDatepickerRangeBaseComponent.prototype.dateFormatFailed = function (value) {
        return value && !this.poDateService.isValidIso(value);
    };
    // Executa a função onChange
    PoDatepickerRangeBaseComponent.prototype.updateModel = function (value) {
        var model = typeof (value) === 'object' ? tslib_1.__assign({}, value) : value;
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(model);
        }
    };
    PoDatepickerRangeBaseComponent.prototype.validateModel = function (value) {
        var model = tslib_1.__assign({}, value);
        if (this.validatorChange) {
            this.validatorChange(model);
        }
    };
    PoDatepickerRangeBaseComponent.prototype.convertPatternDateFormat = function (value) {
        if (value instanceof Date) {
            return this.poDateService.convertDateToISO(value);
        }
        return value;
    };
    PoDatepickerRangeBaseComponent.prototype.dateRangeFailed = function (startDate, endDate) {
        return !this.poDateService.isDateRangeValid(endDate, startDate) || !this.isStartDateRangeInputValid;
    };
    PoDatepickerRangeBaseComponent.prototype.dateRangeFormatFailed = function (startDate, endDate) {
        return this.dateFormatFailed(endDate) || this.dateFormatFailed(startDate) || !this.isDateRangeInputFormatValid;
    };
    PoDatepickerRangeBaseComponent.prototype.dateRangeObjectFailed = function (value) {
        return value && !this.isDateRangeObject(value);
    };
    PoDatepickerRangeBaseComponent.prototype.isDateRangeObject = function (value) {
        return value && value.hasOwnProperty('start') && value.hasOwnProperty('end');
    };
    PoDatepickerRangeBaseComponent.prototype.requiredDateRangeFailed = function (startDate, endDate) {
        return this.isDateRangeInputValid &&
            requiredFailed(this.required, this.disabled, startDate) &&
            requiredFailed(this.required, this.disabled, endDate);
    };
    tslib_1.__decorate([
        Input('p-auto-focus'), InputBoolean(),
        tslib_1.__metadata("design:type", Boolean)
    ], PoDatepickerRangeBaseComponent.prototype, "autoFocus", void 0);
    tslib_1.__decorate([
        Input('p-clean'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDatepickerRangeBaseComponent.prototype, "clean", null);
    tslib_1.__decorate([
        Input('p-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDatepickerRangeBaseComponent.prototype, "disabled", null);
    tslib_1.__decorate([
        Input('p-end-date'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoDatepickerRangeBaseComponent.prototype, "endDate", null);
    tslib_1.__decorate([
        Input('p-help'),
        tslib_1.__metadata("design:type", String)
    ], PoDatepickerRangeBaseComponent.prototype, "help", void 0);
    tslib_1.__decorate([
        Input('p-label'),
        tslib_1.__metadata("design:type", String)
    ], PoDatepickerRangeBaseComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input('p-literals'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoDatepickerRangeBaseComponent.prototype, "literals", null);
    tslib_1.__decorate([
        Input('p-no-autocomplete'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDatepickerRangeBaseComponent.prototype, "noAutocomplete", null);
    tslib_1.__decorate([
        Input('p-optional'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoDatepickerRangeBaseComponent.prototype, "optional", void 0);
    tslib_1.__decorate([
        Input('p-readonly'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDatepickerRangeBaseComponent.prototype, "readonly", null);
    tslib_1.__decorate([
        Input('p-required'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDatepickerRangeBaseComponent.prototype, "required", null);
    tslib_1.__decorate([
        Input('p-start-date'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoDatepickerRangeBaseComponent.prototype, "startDate", null);
    tslib_1.__decorate([
        Output('p-change'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoDatepickerRangeBaseComponent.prototype, "onChange", void 0);
    return PoDatepickerRangeBaseComponent;
}());
export { PoDatepickerRangeBaseComponent };
//# sourceMappingURL=data:application/json;base64,