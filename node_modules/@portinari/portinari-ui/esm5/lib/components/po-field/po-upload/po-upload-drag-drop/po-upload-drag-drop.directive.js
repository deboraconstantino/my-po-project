import * as tslib_1 from "tslib";
import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { PoI18nPipe } from '../../../../services/po-i18n/po-i18n.pipe';
import { PoNotificationService } from '../../../../services/po-notification/po-notification.service';
var PoUploadDragDropDirective = /** @class */ (function () {
    function PoUploadDragDropDirective(i18nPipe, notification) {
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.dragLeave = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.fileChange = new EventEmitter();
    }
    PoUploadDragDropDirective.prototype.onDragLeave = function (event) {
        var _this = this;
        event.preventDefault();
        event.stopPropagation();
        this.timeout = setTimeout(function () { return _this.dragLeave.emit(); }, 30);
    };
    PoUploadDragDropDirective.prototype.onDragOver = function (event) {
        event.preventDefault();
        event.stopPropagation();
        clearTimeout(this.timeout);
        if (!this.disabled) {
            this.dragOver.emit();
        }
    };
    PoUploadDragDropDirective.prototype.onDrop = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.getFilesFromDataTransferItems(event);
        this.dragLeave.emit();
    };
    PoUploadDragDropDirective.prototype.getFilesFromDataTransferItems = function (event) {
        var _this = this;
        if (!this.disabled) {
            this.invalidFileType = 0;
            if (this.directoryCompatible) {
                this.getOnlyDirectories(event.dataTransfer.items).then(function () {
                    _this.sendFiles(event, _this.files);
                });
            }
            else {
                var files = this.getOnlyFiles(event.dataTransfer.files);
                this.sendFiles(event, files);
            }
        }
    };
    // analisa as entradas recursivamente
    PoUploadDragDropDirective.prototype.getFilesFromEntry = function (entry) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!entry.isFile) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.readFile(entry)];
                    case 1:
                        file = _a.sent();
                        return [2 /*return*/, [file]];
                    case 2:
                        if (!entry.isDirectory) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.readDirectory(entry)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    PoUploadDragDropDirective.prototype.getOnlyDirectories = function (dataTransferItems) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1, _a, e_2, _b, entries, dataTransferItems_1, dataTransferItems_1_1, item, entries_1, entries_1_1, entry, newFiles, e_2_1;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        entries = [];
                        try {
                            // lista todas as entradas antes de analisÃ¡-las
                            for (dataTransferItems_1 = tslib_1.__values(dataTransferItems), dataTransferItems_1_1 = dataTransferItems_1.next(); !dataTransferItems_1_1.done; dataTransferItems_1_1 = dataTransferItems_1.next()) {
                                item = dataTransferItems_1_1.value;
                                entries.push(item.webkitGetAsEntry());
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (dataTransferItems_1_1 && !dataTransferItems_1_1.done && (_a = dataTransferItems_1.return)) _a.call(dataTransferItems_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        this.files = [];
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 7, 8, 9]);
                        entries_1 = tslib_1.__values(entries), entries_1_1 = entries_1.next();
                        _c.label = 2;
                    case 2:
                        if (!!entries_1_1.done) return [3 /*break*/, 6];
                        entry = entries_1_1.value;
                        if (!entry.isFile) return [3 /*break*/, 3];
                        this.invalidFileType++;
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.getFilesFromEntry(entry)];
                    case 4:
                        newFiles = _c.sent();
                        this.files = this.files.concat(newFiles);
                        _c.label = 5;
                    case 5:
                        entries_1_1 = entries_1.next();
                        return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_2_1 = _c.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (entries_1_1 && !entries_1_1.done && (_b = entries_1.return)) _b.call(entries_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    // return only files. If it is a directory, invalidFileType counts.
    PoUploadDragDropDirective.prototype.getOnlyFiles = function (fileList) {
        var _this = this;
        return Array.from(fileList).reduce(function (newFiles, file) {
            if (file.type) {
                return newFiles.concat(file);
            }
            else {
                _this.invalidFileType++;
            }
            return newFiles;
        }, []);
    };
    PoUploadDragDropDirective.prototype.readFile = function (entry) {
        return new Promise(function (resolve) {
            entry.file(function (file) {
                resolve(file);
            });
        });
    };
    PoUploadDragDropDirective.prototype.readDirectory = function (entry) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var dirReader, files, newFiles;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        dirReader = entry.createReader();
                        files = [];
                        return [4 /*yield*/, this.readDirectoryEntries(dirReader)];
                    case 1:
                        newFiles = _a.sent();
                        files = files.concat(newFiles);
                        return [2 /*return*/, files];
                }
            });
        });
    };
    PoUploadDragDropDirective.prototype.readDirectoryEntries = function (dirReader) {
        var _this = this;
        return new Promise(function (resolve) {
            dirReader.readEntries(function (entries) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var e_3, _a, files, entries_2, entries_2_1, entry, itemFiles, e_3_1;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            files = [];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 6, 7, 8]);
                            entries_2 = tslib_1.__values(entries), entries_2_1 = entries_2.next();
                            _b.label = 2;
                        case 2:
                            if (!!entries_2_1.done) return [3 /*break*/, 5];
                            entry = entries_2_1.value;
                            return [4 /*yield*/, this.getFilesFromEntry(entry)];
                        case 3:
                            itemFiles = _b.sent();
                            files = files.concat(itemFiles);
                            _b.label = 4;
                        case 4:
                            entries_2_1 = entries_2.next();
                            return [3 /*break*/, 2];
                        case 5: return [3 /*break*/, 8];
                        case 6:
                            e_3_1 = _b.sent();
                            e_3 = { error: e_3_1 };
                            return [3 /*break*/, 8];
                        case 7:
                            try {
                                if (entries_2_1 && !entries_2_1.done && (_a = entries_2.return)) _a.call(entries_2);
                            }
                            finally { if (e_3) throw e_3.error; }
                            return [7 /*endfinally*/];
                        case 8:
                            resolve(files);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    };
    PoUploadDragDropDirective.prototype.sendFeedback = function (invalidFiles) {
        if (invalidFiles) {
            this.setPipeArguments('invalidFileType', invalidFiles);
        }
    };
    PoUploadDragDropDirective.prototype.sendFiles = function (event, files) {
        if (this.areaElement.contains(event.target)) {
            if (files.length > 0) {
                this.fileChange.emit(files);
            }
            this.sendFeedback(this.invalidFileType);
        }
        else {
            var invalidDropAreaArg = this.directoryCompatible ? this.literals.folders : this.literals.files;
            this.setPipeArguments('invalidDropArea', invalidDropAreaArg);
        }
    };
    // mÃ©todo responsÃ¡vel por setar os argumentos do i18nPipe.
    PoUploadDragDropDirective.prototype.setPipeArguments = function (literalAttributes, args) {
        var pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], args);
        this.notification.information(pipeArguments);
    };
    PoUploadDragDropDirective.ctorParameters = function () { return [
        { type: PoI18nPipe },
        { type: PoNotificationService }
    ]; };
    tslib_1.__decorate([
        Input('p-area-element'),
        tslib_1.__metadata("design:type", HTMLElement)
    ], PoUploadDragDropDirective.prototype, "areaElement", void 0);
    tslib_1.__decorate([
        Input('p-directory-compatible'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoUploadDragDropDirective.prototype, "directoryCompatible", void 0);
    tslib_1.__decorate([
        Input('p-disabled'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoUploadDragDropDirective.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input('p-literals'),
        tslib_1.__metadata("design:type", Object)
    ], PoUploadDragDropDirective.prototype, "literals", void 0);
    tslib_1.__decorate([
        Output('p-drag-leave'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoUploadDragDropDirective.prototype, "dragLeave", void 0);
    tslib_1.__decorate([
        Output('p-drag-over'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoUploadDragDropDirective.prototype, "dragOver", void 0);
    tslib_1.__decorate([
        Output('p-file-change'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoUploadDragDropDirective.prototype, "fileChange", void 0);
    tslib_1.__decorate([
        HostListener('document:dragleave', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PoUploadDragDropDirective.prototype, "onDragLeave", null);
    tslib_1.__decorate([
        HostListener('document:dragover', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PoUploadDragDropDirective.prototype, "onDragOver", null);
    tslib_1.__decorate([
        HostListener('document:drop', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PoUploadDragDropDirective.prototype, "onDrop", null);
    PoUploadDragDropDirective = tslib_1.__decorate([
        Directive({
            selector: '[p-upload-drag-drop]',
            providers: [PoI18nPipe]
        }),
        tslib_1.__metadata("design:paramtypes", [PoI18nPipe, PoNotificationService])
    ], PoUploadDragDropDirective);
    return PoUploadDragDropDirective;
}());
export { PoUploadDragDropDirective };
//# sourceMappingURL=data:application/json;base64,