import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * O componente `po-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
 *
 * > No navegador Internet Explorer não é possível alterar a cor do texto.
 */
var PoRichTextBaseComponent = /** @class */ (function () {
    function PoRichTextBaseComponent() {
        this.invalid = false;
        this.onChangeModel = null;
        // tslint:disable-next-line
        this.onTouched = null;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @description
         *
         * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
         */
        this.errorMessage = '';
        /** Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado. */
        this.change = new EventEmitter();
        /** Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado. */
        this.changeModel = new EventEmitter();
    }
    Object.defineProperty(PoRichTextBaseComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a altura da área de edição de texto.
         *
         * > Altura mínima do componente é `94` e a altura máxima é `262`.
         */
        set: function (height) {
            this._height = height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextBaseComponent.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         *
         * @default ''
         */
        set: function (value) {
            this._placeholder = value || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextBaseComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente leitura.
         *
         * @default `false`
         */
        set: function (value) {
            this._readonly = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoRichTextBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: function (value) {
            this._required = convertToBoolean(value);
            this.validateModel(this.value);
        },
        enumerable: true,
        configurable: true
    });
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    PoRichTextBaseComponent.prototype.registerOnChange = function (func) {
        this.onChangeModel = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    PoRichTextBaseComponent.prototype.registerOnTouched = function (func) {
        this.onTouched = func;
    };
    PoRichTextBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoRichTextBaseComponent.prototype.validate = function (abstractControl) {
        if (requiredFailed(this.required, false, abstractControl.value)) {
            return { required: {
                    valid: false,
                } };
        }
    };
    PoRichTextBaseComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    // Executa a função onChange
    PoRichTextBaseComponent.prototype.updateModel = function (value) {
        // Quando o rich-text não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
    };
    PoRichTextBaseComponent.prototype.validateModel = function (value) {
        if (this.validatorChange) {
            this.validatorChange(value);
        }
    };
    tslib_1.__decorate([
        Input('p-auto-focus'), InputBoolean(),
        tslib_1.__metadata("design:type", Boolean)
    ], PoRichTextBaseComponent.prototype, "autoFocus", void 0);
    tslib_1.__decorate([
        Input('p-error-message'),
        tslib_1.__metadata("design:type", String)
    ], PoRichTextBaseComponent.prototype, "errorMessage", void 0);
    tslib_1.__decorate([
        Input('p-height'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], PoRichTextBaseComponent.prototype, "height", null);
    tslib_1.__decorate([
        Input('p-help'),
        tslib_1.__metadata("design:type", String)
    ], PoRichTextBaseComponent.prototype, "help", void 0);
    tslib_1.__decorate([
        Input('p-label'),
        tslib_1.__metadata("design:type", String)
    ], PoRichTextBaseComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input('name'),
        tslib_1.__metadata("design:type", String)
    ], PoRichTextBaseComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input('p-optional'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoRichTextBaseComponent.prototype, "optional", void 0);
    tslib_1.__decorate([
        Input('p-placeholder'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoRichTextBaseComponent.prototype, "placeholder", null);
    tslib_1.__decorate([
        Input('p-readonly'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoRichTextBaseComponent.prototype, "readonly", null);
    tslib_1.__decorate([
        Input('p-required'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoRichTextBaseComponent.prototype, "required", null);
    tslib_1.__decorate([
        Output('p-change'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoRichTextBaseComponent.prototype, "change", void 0);
    tslib_1.__decorate([
        Output('p-change-model'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoRichTextBaseComponent.prototype, "changeModel", void 0);
    return PoRichTextBaseComponent;
}());
export { PoRichTextBaseComponent };
//# sourceMappingURL=data:application/json;base64,