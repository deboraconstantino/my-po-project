import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, removeDuplicatedOptions, removeUndefinedAndNullOptions } from '../../../utils/util';
import { InputBoolean } from '../../../decorators';
import { requiredFailed } from '../validators';
/**
 * @description
 *
 * O componente po-select exibe uma lista de valores e permite que o usuário selecione um desses valores.
 * Os valores listados podem ser fixos ou dinâmicos de acordo com a necessidade do desenvolvedor, dando mais flexibilidade ao componente.
 * O po-select não permite que o usuário informe um valor diferente dos valores listados, isso garante a consistência da informação.
 * O po-select não permite que sejam passados valores duplicados, undefined e null para as opções, excluindo-os da lista.
 *
 * > Ao passar um valor para o _model_ que não está na lista de opções, o mesmo será definido como `undefined`.
 *
 * Também existe a possibilidade de utilizar um _template_ para a exibição dos itens da lista,
 * veja mais em **[p-select-option-template](/documentation/po-select-option-template)**.
 */
var PoSelectBaseComponent = /** @class */ (function () {
    function PoSelectBaseComponent(element, changeDetector) {
        this.element = element;
        this._disabled = false;
        this._readonly = false;
        this._required = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         * > Caso mais de um elemento seja configurado com essa propriedade,
         * o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /** Deve ser informada uma função que será disparada quando houver alterações no ngModel. */
        this.change = new EventEmitter();
        // Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.
        this.ngModelChange = new EventEmitter();
        this.readyToValidation = false;
        this.element = element;
        this.changeDetector = changeDetector;
    }
    Object.defineProperty(PoSelectBaseComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        /**
         * Nesta propriedade deve ser definido uma coleção de objetos que implementam a interface PoSelectOption.
         * Caso esta lista estiver vazia, o model será undefined.
         */
        set: function (options) {
            this._options = options;
            removeDuplicatedOptions(this._options);
            removeUndefinedAndNullOptions(this._options);
            this.onUpdateOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSelectBaseComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será desabilitado.
         *
         * @default `false`
         */
        set: function (disabled) {
            this._disabled = convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSelectBaseComponent.prototype, "readonly", {
        get: function () {
            return this._readonly;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será somente para leitura.
         *
         * @default `false`
         */
        set: function (value) {
            this._readonly = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoSelectBaseComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * @default `false`
         */
        set: function (required) {
            this._required = convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    PoSelectBaseComponent.prototype.callModelChange = function (value) {
        // Caso o componente estiver dentro de um form, terá acesso ao método onModelChange.
        return (this.onModelChange) ? this.onModelChange(value) : this.ngModelChange.emit(value);
    };
    PoSelectBaseComponent.prototype.onChange = function (value) {
        this.change.emit(value);
    };
    PoSelectBaseComponent.prototype.validate = function (abstractControl) {
        if (requiredFailed(this._required, this._disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false,
                }
            };
        }
        return null;
    };
    PoSelectBaseComponent.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    PoSelectBaseComponent.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    PoSelectBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.onValidatorChange = fn;
    };
    PoSelectBaseComponent.prototype.validateModel = function () {
        if (this.onValidatorChange) {
            this.onValidatorChange();
        }
    };
    tslib_1.__decorate([
        Input('p-auto-focus'), InputBoolean(),
        tslib_1.__metadata("design:type", Boolean)
    ], PoSelectBaseComponent.prototype, "autoFocus", void 0);
    tslib_1.__decorate([
        Input('p-label'),
        tslib_1.__metadata("design:type", String)
    ], PoSelectBaseComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input('name'),
        tslib_1.__metadata("design:type", String)
    ], PoSelectBaseComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input('p-help'),
        tslib_1.__metadata("design:type", String)
    ], PoSelectBaseComponent.prototype, "help", void 0);
    tslib_1.__decorate([
        Input('p-placeholder'),
        tslib_1.__metadata("design:type", String)
    ], PoSelectBaseComponent.prototype, "placeholder", void 0);
    tslib_1.__decorate([
        Input('p-optional'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoSelectBaseComponent.prototype, "optional", void 0);
    tslib_1.__decorate([
        Input('p-options'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoSelectBaseComponent.prototype, "options", null);
    tslib_1.__decorate([
        Output('p-change'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoSelectBaseComponent.prototype, "change", void 0);
    tslib_1.__decorate([
        Output('ngModelChange'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoSelectBaseComponent.prototype, "ngModelChange", void 0);
    tslib_1.__decorate([
        Input('p-disabled'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoSelectBaseComponent.prototype, "disabled", null);
    tslib_1.__decorate([
        Input('p-readonly'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoSelectBaseComponent.prototype, "readonly", null);
    tslib_1.__decorate([
        Input('p-required'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoSelectBaseComponent.prototype, "required", null);
    return PoSelectBaseComponent;
}());
export { PoSelectBaseComponent };
//# sourceMappingURL=data:application/json;base64,