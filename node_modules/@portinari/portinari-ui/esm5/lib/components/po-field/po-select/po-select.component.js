import * as tslib_1 from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, ContentChild, Component, DoCheck, ElementRef, forwardRef, HostListener, IterableDiffers, Renderer2, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { isMobile, removeDuplicatedOptions, removeUndefinedAndNullOptions, validValue } from '../../../utils/util';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoSelectBaseComponent } from './po-select-base.component';
import { PoSelectOptionTemplateDirective } from './po-select-option-template/po-select-option-template.directive';
var poSelectContentOffset = 8;
var poSelectContentPositionDefault = 'bottom';
/**
 * @docsExtends PoSelectBaseComponent
 *
 * @example
 *
 * <example name="po-select-basic" title="Portinari Select Basic">
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.html"> </file>
 *   <file name="sample-po-select-basic/sample-po-select-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-labs" title="Portinari Select Labs">
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.html"> </file>
 *   <file name="sample-po-select-labs/sample-po-select-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-select-customer-registration" title="Portinari Select - Customer registration">
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.html"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.component.ts"> </file>
 *   <file name="sample-po-select-customer-registration/sample-po-select-customer-registration.service.ts"> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.e2e-spec.ts'> </file>
 *   <file name='sample-po-select-customer-registration/sample-po-select-customer-registration.component.po.ts'> </file>
 * </example>
 */
var PoSelectComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoSelectComponent, _super);
    function PoSelectComponent(element, changeDetector, differs, renderer, controlPosition) {
        var _this = _super.call(this, element, changeDetector) || this;
        _this.renderer = renderer;
        _this.controlPosition = controlPosition;
        _this.isMobile = isMobile();
        _this.open = false;
        _this.selectIcon = 'po-icon-arrow-down';
        _this.onScroll = function () {
            _this.controlPosition.adjustPosition(poSelectContentPositionDefault);
        };
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    PoSelectComponent_1 = PoSelectComponent;
    Object.defineProperty(PoSelectComponent.prototype, "isInvisibleSelectNative", {
        get: function () {
            return this.readonly && this.isMobile;
        },
        enumerable: true,
        configurable: true
    });
    PoSelectComponent.prototype.onKeydown = function ($event) {
        var charCode = $event.which || $event.keyCode;
        // Tratamentos para quando o readonly for ativado.
        if (this.readonly) {
            // deve matar o evento do teclado devido a alterar o valor do model mesmo com os options fechados
            if (charCode !== PoKeyCodeEnum.tab) {
                this.disableDefaultEventAndToggleButton();
                $event.preventDefault();
            }
            return;
        }
        // Seleciona os itens com as teclas "up" e "down"
        if ((!this.open || $event.altKey) && (charCode === PoKeyCodeEnum.arrowDown || charCode === PoKeyCodeEnum.arrowUp)) {
            this.disableDefaultEventAndToggleButton();
        }
        // Abre o po-select com as teclas "enter" e "espaço"
        if (charCode === PoKeyCodeEnum.enter || charCode === PoKeyCodeEnum.space) {
            this.disableDefaultEventAndToggleButton();
        }
        // Fecha o po-select com a tecla "tab"
        if (this.open && charCode === PoKeyCodeEnum.tab) {
            $event.preventDefault();
            this.toggleButton();
        }
    };
    PoSelectComponent.prototype.ngAfterViewInit = function () {
        if (this.autoFocus) {
            this.focus();
        }
    };
    PoSelectComponent.prototype.ngDoCheck = function () {
        var change = this.differ.diff(this.options);
        if (change) {
            removeDuplicatedOptions(this.options);
            removeUndefinedAndNullOptions(this.options);
        }
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoSelectComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoSelectComponent, { static: true }) select: PoSelectComponent;
     *
     * focusSelect() {
     *   this.select.focus();
     * }
     * ```
     */
    PoSelectComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.selectElement.nativeElement.focus();
        }
    };
    PoSelectComponent.prototype.hideDropDown = function () {
        this.selectIcon = 'po-icon-arrow-down';
        this.selector('.po-select-container').classList.remove('po-select-show');
        this.open = false;
        this.changeDetector.markForCheck();
        this.selectElement.nativeElement.focus();
        this.removeListeners();
    };
    PoSelectComponent.prototype.isEqual = function (value, inputValue) {
        if ((value || value === 0) && inputValue) {
            return value.toString() === inputValue.toString();
        }
        if ((value === null && inputValue !== null) ||
            (value === undefined && inputValue !== undefined)) {
            value = "" + value; // Transformando em string
        }
        return value === inputValue;
    };
    PoSelectComponent.prototype.onOptionClick = function (option) {
        this.updateModel(option);
        this.toggleButton();
    };
    // Altera o valor ao selecionar um item.
    PoSelectComponent.prototype.onSelectChange = function (value) {
        if (value && this.options && this.options.length) {
            var optionFound = this.findOptionValue(value);
            if (optionFound) {
                this.updateModel(optionFound);
                this.setScrollPosition(optionFound.value);
            }
        }
    };
    PoSelectComponent.prototype.onUpdateOptions = function () {
        if (this.modelValue) {
            this.onSelectChange(this.modelValue);
        }
    };
    PoSelectComponent.prototype.scrollValue = function (index, clientHeight) {
        var heightScrollValue = (index) * this.getSelectItemHeight();
        return this.scrollPosition = heightScrollValue > clientHeight ? heightScrollValue : 0;
    };
    PoSelectComponent.prototype.selector = function (query) {
        return this.element.nativeElement.querySelector(query);
    };
    PoSelectComponent.prototype.toggleButton = function () {
        this.open ? this.hideDropDown() : this.showDropdown();
    };
    // Atualiza valores
    PoSelectComponent.prototype.updateModel = function (option) {
        if (this.selectedValue !== option.value) {
            this.selectedValue = option.value;
            this.selectElement.nativeElement.value = option.value;
            this.callModelChange(option.value);
            this.displayValue = option.label;
            this.onChange(option.value);
        }
    };
    // Esconde Content do Select quando for clicado fora
    PoSelectComponent.prototype.wasClickedOnToggle = function (event) {
        if (!this.selectButtonElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target)) {
            this.hideDropDown();
        }
    };
    // Recebe as alterações do model
    PoSelectComponent.prototype.writeValue = function (value) {
        var optionFound = this.findOptionValue(value);
        if (optionFound) {
            this.selectElement.nativeElement.value = optionFound.value;
            this.selectedValue = optionFound.value;
            this.displayValue = (optionFound.label);
            this.setScrollPosition(optionFound.value);
        }
        else if (validValue(this.selectedValue)) {
            this.selectElement.nativeElement.value = undefined;
            this.callModelChange(undefined);
            this.selectedValue = undefined;
            this.displayValue = undefined;
        }
        this.modelValue = value;
        this.changeDetector.detectChanges();
    };
    // Método necessário para bloquear o evento default do select nativo.
    // Ao utilizar event.preventDefault(), nos navegadores Firefox e IE o mesmo não cancela o evento.
    PoSelectComponent.prototype.disableDefaultEventAndToggleButton = function () {
        var _this = this;
        this.selectElement.nativeElement.style.display = 'none';
        setTimeout(function () {
            _this.selectElement.nativeElement.style.display = 'block';
            _this.toggleButton();
        });
    };
    PoSelectComponent.prototype.findOptionValue = function (value) {
        var _this = this;
        return this.options.find(function (option) { return _this.isEqual(option.value, value); });
    };
    PoSelectComponent.prototype.getSelectItemHeight = function () {
        var selectItem = this.selector('div.po-select-item');
        return selectItem && selectItem.clientHeight;
    };
    PoSelectComponent.prototype.initializeListeners = function () {
        var _this = this;
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
            _this.hideDropDown();
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    PoSelectComponent.prototype.removeListeners = function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        this.eventResizeListener();
        window.removeEventListener('scroll', this.onScroll, true);
    };
    PoSelectComponent.prototype.setPositionDropdown = function () {
        this.controlPosition.setElements(this.contentList.nativeElement, poSelectContentOffset, this.selectButtonElement, ['top', 'bottom'], true);
        this.controlPosition.adjustPosition(poSelectContentPositionDefault);
    };
    PoSelectComponent.prototype.setScrollPosition = function (value) {
        var ulDropdpwn = this.element.nativeElement.querySelector('ul.po-select-content');
        if (value && this.options && this.options.length) {
            var optionFound = this.findOptionValue(value);
            if (optionFound) {
                var index = this.options.indexOf(optionFound);
                ulDropdpwn.scrollTop = this.scrollValue(index, ulDropdpwn.clientHeight);
            }
        }
    };
    PoSelectComponent.prototype.showDropdown = function () {
        if (!this.readonly) {
            this.selectElement.nativeElement.focus();
            this.selectIcon = 'po-icon-arrow-up';
            this.selector('.po-select-container').classList.add('po-select-show');
            this.open = true;
            this.changeDetector.markForCheck();
            this.setPositionDropdown();
            this.initializeListeners();
            if (this.options && this.options.length) {
                this.setScrollPosition(this.selectedValue);
            }
        }
    };
    var PoSelectComponent_1;
    PoSelectComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: IterableDiffers },
        { type: Renderer2 },
        { type: PoControlPositionService }
    ]; };
    tslib_1.__decorate([
        ContentChild(PoSelectOptionTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", PoSelectOptionTemplateDirective)
    ], PoSelectComponent.prototype, "selectOptionTemplate", void 0);
    tslib_1.__decorate([
        ViewChild('contentList', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoSelectComponent.prototype, "contentList", void 0);
    tslib_1.__decorate([
        ViewChild('icon', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoSelectComponent.prototype, "iconElement", void 0);
    tslib_1.__decorate([
        ViewChild('select', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoSelectComponent.prototype, "selectElement", void 0);
    tslib_1.__decorate([
        ViewChild('selectButton', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoSelectComponent.prototype, "selectButtonElement", void 0);
    tslib_1.__decorate([
        HostListener('keydown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], PoSelectComponent.prototype, "onKeydown", null);
    PoSelectComponent = PoSelectComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'po-select',
            template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <select #select\n    class=\"po-select\"\n    [attr.name]=\"name\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{'po-select-mobile' : isMobile, 'po-invisible': isInvisibleSelectNative}\"\n    [required]=\"required\"\n    (change)=\"onSelectChange($event.target.value)\">\n    <option *ngIf=\"isMobile\" disabled hidden selected></option>\n    <option *ngFor=\"let option of options\"\n      [disabled]=\"readonly\"\n      [value]=\"option.value\"\n      (click)=\"onOptionClick(option)\">\n        {{option?.label}}\n    </option>\n  </select>\n\n  <div class=\"po-select-container\">\n    <div #selectButton\n      class=\"po-select-button\"\n      [ngClass]=\"{'po-select-button-disabled' : disabled, 'po-select-button-readonly' : readonly}\"\n      (click)=\"toggleButton()\">\n\n      <span>{{displayValue || placeholder}}</span>\n\n      <div class=\"po-field-icon-container-right\">\n        <span #icon\n          class=\"po-icon {{selectIcon}} po-field-icon\"\n          [ngClass]=\"{'po-field-icon-disabled' : disabled, 'po-field-icon-readonly' : readonly}\"></span>\n      </div>\n    </div>\n\n    <ul #contentList\n      class=\"po-select-content\"\n      [ngClass]=\"{'po-invisible': isMobile}\">\n\n      <li *ngFor=\"let option of options\"\n        [class.po-select-item-selected]=\"selectedValue == option.value\"\n        [value]=\"option.value\"\n        (click)=\"onOptionClick(option)\">\n        <div class=\"po-select-item\">\n\n          <ng-container *ngIf=\"selectOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n          <ng-template #defaultOptionTemplate>\n            <span>{{option?.label}}</span>\n          </ng-template>\n\n          <ng-template #optionTemplate\n            [ngTemplateOutlet]=\"selectOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{$implicit: option}\">\n          </ng-template>\n\n        </div>\n      </li>\n    </ul>\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return PoSelectComponent_1; }),
                    multi: true,
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return PoSelectComponent_1; }),
                    multi: true,
                },
                PoControlPositionService
            ]
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            ChangeDetectorRef,
            IterableDiffers,
            Renderer2,
            PoControlPositionService])
    ], PoSelectComponent);
    return PoSelectComponent;
}(PoSelectBaseComponent));
export { PoSelectComponent };
//# sourceMappingURL=data:application/json;base64,