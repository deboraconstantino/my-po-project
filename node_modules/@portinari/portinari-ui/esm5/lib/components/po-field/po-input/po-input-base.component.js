import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed, maxlengpoailed, minlengpoailed, patternFailed } from './../validators';
import { InputBoolean } from '../../../decorators';
import { PoMask } from './po-mask';
/**
 * @description
 *
 * Este é um componente baseado em input, com várias propriedades do input nativo e outras
 * propriedades extras como: máscara, pattern, mensagem de erro e etc.
 * Você deve informar a variável que contém o valor como [(ngModel)]="variavel", para que o
 * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).
 * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.
 *
 * Importante:
 *
 * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.
 * Então você precisa informar o atributo name ou o atributo [ngModelOptions]="{standalone: true}".
 * Exemplo: [(ngModel)]="pessoa.nome" [ngModelOptions]="{standalone: true}"
 */
var PoInputBaseComponent = /** @class */ (function () {
    function PoInputBaseComponent() {
        this._noAutocomplete = false;
        this._placeholder = '';
        this.passedWriteValue = false;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @description
         *
         * Se verdadeiro, desabilita o campo.
         *
         * @default `false`
         */
        this.disabled = false;
        /** Indica que o campo será somente leitura. */
        this.readonly = false;
        /**
         * @description
         *
         * Indica que o campo será obrigatório.
         *
         * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.
         *
         * @default `false`
         */
        this.required = false;
        /** Se verdadeiro, o campo receberá um botão para ser limpo. */
        this.clean = false;
        /**
         * @description
         *
         * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.
         *
         * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.
         */
        this.errorPattern = '';
        /**
         * @description
         *
         * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.
         * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico
         * através da propriedade p-pattern.
         * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,
         * mesmo quando desabilitado.
         */
        this.mask = '';
        /**
         * @description
         *
         * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).
         *
         * @default `false`
         */
        this.maskFormatModel = false;
        /** Evento disparado ao sair do campo. */
        this.blur = new EventEmitter();
        /** Evento disparado ao entrar do campo. */
        this.enter = new EventEmitter();
        /** Evento disparado ao alterar valor e deixar o campo. */
        this.change = new EventEmitter();
        /** Evento disparado ao alterar valor do model. */
        this.changeModel = new EventEmitter();
        this.onChangePropagate = null;
        this.onTouched = null;
    }
    Object.defineProperty(PoInputBaseComponent.prototype, "noAutocomplete", {
        get: function () {
            return this._noAutocomplete;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a propriedade nativa `autocomplete` do campo como `off`.
         *
         * @default `false`
         */
        set: function (value) {
            this._noAutocomplete = convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        /**
         * @optional
         *
         * @description
         *
         * Mensagem que aparecerá enquanto o campo não estiver preenchido.
         *
         * @default ''
         */
        set: function (value) {
            this._placeholder = value || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setDisabled", {
        set: function (disabled) {
            this.disabled = disabled === '' ? true : convertToBoolean(disabled);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setReadonly", {
        set: function (readonly) {
            this.readonly = readonly === '' ? true : convertToBoolean(readonly);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setRequired", {
        set: function (required) {
            this.required = required === '' ? true : convertToBoolean(required);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "oldfocus", {
        /**
         * @optional
         *
         * @deprecated 2.0.0
         * @description
         *
         * **Deprecated**
         *
         * > Esta propriedade está depreciada e será excluída na versão 2.0.0, utilize a propriedade `p-auto-focus`.
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * @default `false`
         */
        set: function (focus) {
            this.autoFocus = focus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setClean", {
        set: function (clean) {
            this.clean = clean === '' ? true : convertToBoolean(clean);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setPattern", {
        set: function (pattern) {
            this.pattern = pattern;
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "maxlength", {
        get: function () {
            return this._maxlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade máxima de caracteres que o campo aceita.
         */
        set: function (value) {
            if (!isNaN(parseInt(value, 10))) {
                this._maxlength = parseInt(value, 10);
                this.validateModel();
            }
            else if (!value) {
                this._maxlength = undefined;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "minlength", {
        get: function () {
            return this._minlength;
        },
        /**
         * @optional
         *
         * @description
         *
         * Indica a quantidade mínima de caracteres que o campo aceita.
         */
        set: function (value) {
            if (!isNaN(parseInt(value, 10))) {
                this._minlength = parseInt(value, 10);
                this.validateModel();
            }
            else if (!value) {
                this._minlength = undefined;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setMask", {
        set: function (mask) {
            this.mask = mask;
            // Atualiza Máscara do Campo
            this.objMask = new PoMask(this.mask, this.maskFormatModel);
            this.validateModel();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoInputBaseComponent.prototype, "setMaskFormatModel", {
        set: function (maskFormatModel) {
            this.maskFormatModel = maskFormatModel === '' ? true : convertToBoolean(maskFormatModel);
            if (this.objMask instanceof PoMask) {
                this.objMask.formatModel = this.maskFormatModel;
                this.validateModel();
            }
        },
        enumerable: true,
        configurable: true
    });
    PoInputBaseComponent.prototype.callOnChange = function (value) {
        this.updateModel(value);
        this.controlChangeModelEmitter(value);
    };
    PoInputBaseComponent.prototype.callUpdateModelWithTimeout = function (value) {
        var _this = this;
        setTimeout(function () { return _this.updateModel(value); });
    };
    PoInputBaseComponent.prototype.controlChangeModelEmitter = function (value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    PoInputBaseComponent.prototype.registerOnChange = function (func) {
        this.onChangePropagate = func;
    };
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    PoInputBaseComponent.prototype.registerOnTouched = function (func) {
        this.onTouched = func;
    };
    PoInputBaseComponent.prototype.registerOnValidatorChange = function (fn) {
        this.validatorChange = fn;
    };
    PoInputBaseComponent.prototype.updateModel = function (value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
    };
    PoInputBaseComponent.prototype.validate = function (c) {
        if (requiredFailed(this.required, this.disabled, this.getScreenValue())) {
            return { required: {
                    valid: false,
                } };
        }
        if (maxlengpoailed(this.maxlength, this.getScreenValue())) {
            return { maxlength: {
                    valid: false,
                } };
        }
        if (minlengpoailed(this.minlength, this.getScreenValue())) {
            return { minlength: {
                    valid: false,
                } };
        }
        if (patternFailed(this.pattern, c.value)) {
            this.validatePatternOnWriteValue(c.value);
            return { pattern: {
                    valid: false,
                } };
        }
        return this.extraValidation(c);
    };
    // Função implementada do ControlValueAccessor
    PoInputBaseComponent.prototype.writeValue = function (value) {
        this.writeValueModel(value);
    };
    PoInputBaseComponent.prototype.validateModel = function () {
        if (this.validatorChange) {
            this.validatorChange();
        }
    };
    // utilizado para validar o pattern na inicializacao, fazendo dessa forma o campo fica sujo (dirty).
    PoInputBaseComponent.prototype.validatePatternOnWriteValue = function (value) {
        var _this = this;
        if (value && this.passedWriteValue) {
            setTimeout(function () {
                _this.updateModel(value);
            });
            this.passedWriteValue = false;
        }
    };
    tslib_1.__decorate([
        Input('p-auto-focus'), InputBoolean(),
        tslib_1.__metadata("design:type", Boolean)
    ], PoInputBaseComponent.prototype, "autoFocus", void 0);
    tslib_1.__decorate([
        Input('p-icon'),
        tslib_1.__metadata("design:type", String)
    ], PoInputBaseComponent.prototype, "icon", void 0);
    tslib_1.__decorate([
        Input('p-label'),
        tslib_1.__metadata("design:type", String)
    ], PoInputBaseComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input('p-help'),
        tslib_1.__metadata("design:type", String)
    ], PoInputBaseComponent.prototype, "help", void 0);
    tslib_1.__decorate([
        Input('name'),
        tslib_1.__metadata("design:type", String)
    ], PoInputBaseComponent.prototype, "name", void 0);
    tslib_1.__decorate([
        Input('p-no-autocomplete'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoInputBaseComponent.prototype, "noAutocomplete", null);
    tslib_1.__decorate([
        Input('p-placeholder'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoInputBaseComponent.prototype, "placeholder", null);
    tslib_1.__decorate([
        Input('p-disabled'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoInputBaseComponent.prototype, "setDisabled", null);
    tslib_1.__decorate([
        Input('p-readonly'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoInputBaseComponent.prototype, "setReadonly", null);
    tslib_1.__decorate([
        Input('p-required'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoInputBaseComponent.prototype, "setRequired", null);
    tslib_1.__decorate([
        Input('p-focus'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoInputBaseComponent.prototype, "oldfocus", null);
    tslib_1.__decorate([
        Input('p-clean'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoInputBaseComponent.prototype, "setClean", null);
    tslib_1.__decorate([
        Input('p-pattern'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoInputBaseComponent.prototype, "setPattern", null);
    tslib_1.__decorate([
        Input('p-error-pattern'),
        tslib_1.__metadata("design:type", String)
    ], PoInputBaseComponent.prototype, "errorPattern", void 0);
    tslib_1.__decorate([
        Input('p-maxlength'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], PoInputBaseComponent.prototype, "maxlength", null);
    tslib_1.__decorate([
        Input('p-minlength'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], PoInputBaseComponent.prototype, "minlength", null);
    tslib_1.__decorate([
        Input('p-mask'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoInputBaseComponent.prototype, "setMask", null);
    tslib_1.__decorate([
        Input('p-mask-format-model'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoInputBaseComponent.prototype, "setMaskFormatModel", null);
    tslib_1.__decorate([
        Input('p-optional'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoInputBaseComponent.prototype, "optional", void 0);
    tslib_1.__decorate([
        Output('p-blur'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoInputBaseComponent.prototype, "blur", void 0);
    tslib_1.__decorate([
        Output('p-enter'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoInputBaseComponent.prototype, "enter", void 0);
    tslib_1.__decorate([
        Output('p-change'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoInputBaseComponent.prototype, "change", void 0);
    tslib_1.__decorate([
        Output('p-change-model'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoInputBaseComponent.prototype, "changeModel", void 0);
    return PoInputBaseComponent;
}());
export { PoInputBaseComponent };
//# sourceMappingURL=data:application/json;base64,