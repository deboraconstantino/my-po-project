import * as tslib_1 from "tslib";
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { validateObjectType } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-combo.
 */
var PoComboFilterService = /** @class */ (function () {
    function PoComboFilterService(http) {
        this.http = http;
        this.fieldLabel = 'label';
        this.fieldValue = 'value';
    }
    Object.defineProperty(PoComboFilterService.prototype, "url", {
        get: function () { return this._url; },
        enumerable: true,
        configurable: true
    });
    PoComboFilterService.prototype.getFilteredData = function (param, filterParams) {
        var _this = this;
        var value = param.value;
        var filterParamsValidated = validateObjectType(filterParams);
        var params = tslib_1.__assign({}, filterParamsValidated, { filter: value });
        return this.http.get("" + this.url, { responseType: 'json', params: params })
            .pipe(map(function (response) { return _this.parseToArrayComboOption(response.items); }));
    };
    PoComboFilterService.prototype.getObjectByValue = function (value, filterParams) {
        var _this = this;
        var filterParamsValidated = validateObjectType(filterParams);
        return this.http.get(this.url + "/" + value, { params: filterParamsValidated }).pipe(map(function (item) { return _this.parseToComboOption(item); }));
    };
    PoComboFilterService.prototype.configProperties = function (url, fieldLabel, fieldValue) {
        this._url = url;
        this.fieldLabel = fieldLabel;
        this.fieldValue = fieldValue;
    };
    PoComboFilterService.prototype.parseToArrayComboOption = function (items) {
        var _this = this;
        if (items && items.length > 0) {
            return items.map(function (item) {
                return _this.parseToComboOption(item);
            });
        }
        return [];
    };
    PoComboFilterService.prototype.parseToComboOption = function (item) {
        if (item && item[this.fieldValue]) {
            var label = item[this.fieldLabel];
            var value = item[this.fieldValue];
            return { label: label, value: value };
        }
    };
    PoComboFilterService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    PoComboFilterService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpClient])
    ], PoComboFilterService);
    return PoComboFilterService;
}());
export { PoComboFilterService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY29tYm8tZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWNvbWJvL3BvLWNvbWJvLWZpbHRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzlELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXpEOzs7Ozs7R0FNRztBQUVIO0lBU0UsOEJBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFMcEMsZUFBVSxHQUFXLE9BQU8sQ0FBQztRQUM3QixlQUFVLEdBQVcsT0FBTyxDQUFDO0lBSVcsQ0FBQztJQUZ6QyxzQkFBSSxxQ0FBRzthQUFQLGNBQW9CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7OztPQUFBO0lBSXZDLDhDQUFlLEdBQWYsVUFBZ0IsS0FBVSxFQUFFLFlBQWtCO1FBQTlDLGlCQVFDO1FBUEMsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUMxQixJQUFNLHFCQUFxQixHQUFHLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRS9ELElBQU0sTUFBTSx3QkFBUSxxQkFBcUIsSUFBRSxNQUFNLEVBQUUsS0FBSyxHQUFFLENBQUM7UUFFM0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFHLElBQUksQ0FBQyxHQUFLLEVBQUUsRUFBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsQ0FBQzthQUN4RSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQUMsUUFBb0IsSUFBSyxPQUFBLEtBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQTVDLENBQTRDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCwrQ0FBZ0IsR0FBaEIsVUFBaUIsS0FBc0IsRUFBRSxZQUFrQjtRQUEzRCxpQkFJQztRQUhDLElBQU0scUJBQXFCLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFL0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsR0FBRyxTQUFJLEtBQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDLENBQUM7SUFDbkksQ0FBQztJQUVELCtDQUFnQixHQUFoQixVQUFpQixHQUFXLEVBQUUsVUFBa0IsRUFBRSxVQUFrQjtRQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNoQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUMvQixDQUFDO0lBRU8sc0RBQXVCLEdBQS9CLFVBQWdDLEtBQWlCO1FBQWpELGlCQVVDO1FBVEMsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFFN0IsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSTtnQkFDbkIsT0FBTyxLQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7U0FFSjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVPLGlEQUFrQixHQUExQixVQUEyQixJQUFTO1FBQ2xDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFFakMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNwQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRXBDLE9BQU8sRUFBRSxLQUFLLE9BQUEsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQzs7Z0JBNUN5QixVQUFVOztJQVR6QixvQkFBb0I7UUFEaEMsVUFBVSxFQUFFO2lEQVVlLFVBQVU7T0FUekIsb0JBQW9CLENBdURoQztJQUFELDJCQUFDO0NBQUEsQUF2REQsSUF1REM7U0F2RFksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBQb0NvbWJvRmlsdGVyIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWNvbWJvLWZpbHRlci5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Db21ib09wdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1jb21iby1vcHRpb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUmVzcG9uc2UgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcmVzcG9uc2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IHZhbGlkYXRlT2JqZWN0VHlwZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNlcnZpw6dvIHBhZHLDo28gdXRpbGl6YWRvIHBhcmEgZmlsdHJhciBvcyBkYWRvcyBkbyBjb21wb25lbnRlIHBvLWNvbWJvLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9Db21ib0ZpbHRlclNlcnZpY2UgaW1wbGVtZW50cyBQb0NvbWJvRmlsdGVyIHtcblxuICBwcml2YXRlIF91cmw6IHN0cmluZztcblxuICBmaWVsZExhYmVsOiBzdHJpbmcgPSAnbGFiZWwnO1xuICBmaWVsZFZhbHVlOiBzdHJpbmcgPSAndmFsdWUnO1xuXG4gIGdldCB1cmwoKTogc3RyaW5nIHsgcmV0dXJuIHRoaXMuX3VybDsgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XG5cbiAgZ2V0RmlsdGVyZWREYXRhKHBhcmFtOiBhbnksIGZpbHRlclBhcmFtcz86IGFueSk6IE9ic2VydmFibGU8QXJyYXk8UG9Db21ib09wdGlvbj4+IHtcbiAgICBjb25zdCB2YWx1ZSA9IHBhcmFtLnZhbHVlO1xuICAgIGNvbnN0IGZpbHRlclBhcmFtc1ZhbGlkYXRlZCA9IHZhbGlkYXRlT2JqZWN0VHlwZShmaWx0ZXJQYXJhbXMpO1xuXG4gICAgY29uc3QgcGFyYW1zID0geyAuLi5maWx0ZXJQYXJhbXNWYWxpZGF0ZWQsIGZpbHRlcjogdmFsdWUgfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3RoaXMudXJsfWAsIHtyZXNwb25zZVR5cGU6ICdqc29uJywgcGFyYW1zOiBwYXJhbXN9KVxuICAgICAgLnBpcGUobWFwKChyZXNwb25zZTogUG9SZXNwb25zZSkgPT4gdGhpcy5wYXJzZVRvQXJyYXlDb21ib09wdGlvbihyZXNwb25zZS5pdGVtcykpKTtcbiAgfVxuXG4gIGdldE9iamVjdEJ5VmFsdWUodmFsdWU6IHN0cmluZyB8IG51bWJlciwgZmlsdGVyUGFyYW1zPzogYW55KTogT2JzZXJ2YWJsZTxQb0NvbWJvT3B0aW9uPiB7XG4gICAgY29uc3QgZmlsdGVyUGFyYW1zVmFsaWRhdGVkID0gdmFsaWRhdGVPYmplY3RUeXBlKGZpbHRlclBhcmFtcyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHt0aGlzLnVybH0vJHt2YWx1ZX1gLCB7IHBhcmFtczogZmlsdGVyUGFyYW1zVmFsaWRhdGVkIH0pLnBpcGUobWFwKGl0ZW0gPT4gdGhpcy5wYXJzZVRvQ29tYm9PcHRpb24oaXRlbSkpKTtcbiAgfVxuXG4gIGNvbmZpZ1Byb3BlcnRpZXModXJsOiBzdHJpbmcsIGZpZWxkTGFiZWw6IHN0cmluZywgZmllbGRWYWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdXJsID0gdXJsO1xuICAgIHRoaXMuZmllbGRMYWJlbCA9IGZpZWxkTGFiZWw7XG4gICAgdGhpcy5maWVsZFZhbHVlID0gZmllbGRWYWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VUb0FycmF5Q29tYm9PcHRpb24oaXRlbXM6IEFycmF5PGFueT4pOiBBcnJheTxQb0NvbWJvT3B0aW9uPiB7XG4gICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcblxuICAgICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUb0NvbWJvT3B0aW9uKGl0ZW0pO1xuICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwcml2YXRlIHBhcnNlVG9Db21ib09wdGlvbihpdGVtOiBhbnkpOiBQb0NvbWJvT3B0aW9uIHtcbiAgICBpZiAoaXRlbSAmJiBpdGVtW3RoaXMuZmllbGRWYWx1ZV0pIHtcblxuICAgICAgY29uc3QgbGFiZWwgPSBpdGVtW3RoaXMuZmllbGRMYWJlbF07XG4gICAgICBjb25zdCB2YWx1ZSA9IGl0ZW1bdGhpcy5maWVsZFZhbHVlXTtcblxuICAgICAgcmV0dXJuIHsgbGFiZWwsIHZhbHVlIH07XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==