import * as tslib_1 from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, ContentChild, ElementRef, forwardRef, IterableDiffers, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { fromEvent } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, map, tap } from 'rxjs/operators';
import { PoControlPositionService } from '../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoComboBaseComponent } from './po-combo-base.component';
import { PoComboFilterMode } from './po-combo-filter-mode.enum';
import { PoComboFilterService } from './po-combo-filter.service';
import { PoComboOptionTemplateDirective } from './po-combo-option-template/po-combo-option-template.directive';
var poComboContainerOffset = 8;
var poComboContainerPositionDefault = 'bottom';
/**
 * @docsExtends PoComboBaseComponent
 *
 * @description
 * Utilizando po-combo com serviço, é possivel digitar um valor no campo de entrada e pressionar a tecla 'tab' para que o componente
 * faça uma requisição à URL informada passando o valor digitado no campo. Se encontrado o valor, então o mesmo será selecionado, caso
 * não seja encontrado, então a lista de itens voltará para o estado inicial.
 *
 * @example
 *
 * <example name="po-combo-basic" title="Portinari Combo Basic">
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.html"> </file>
 *   <file name="sample-po-combo-basic/sample-po-combo-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-labs" title="Portinari Combo Labs">
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.html"> </file>
 *   <file name="sample-po-combo-labs/sample-po-combo-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-scheduling" title="Portinari Combo - Scheduling">
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.html"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.component.ts"> </file>
 *   <file name="sample-po-combo-scheduling/sample-po-combo-scheduling.service.ts"> </file>
 * </example>
 *
 * <example name="po-combo-transfer" title="Portinari Combo - Banking Transfer">
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.html"> </file>
 *   <file name="sample-po-combo-transfer/sample-po-combo-transfer.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes" title="Portinari Combo - Heroes">
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.html"> </file>
 *   <file name="sample-po-combo-heroes/sample-po-combo-heroes.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-heroes-reactive-form" title="Portinari Combo - Heroes Reactive Form">
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.html"> </file>
 *   <file name="sample-po-combo-heroes-reactive-form/sample-po-combo-heroes-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-combo-hotels" title="Portinari Combo - Booking Hotel">
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.html"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.component.ts"> </file>
 *   <file name="sample-po-combo-hotels/sample-po-combo-hotels.service.ts"> </file>
 * </example>
 */
var PoComboComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoComboComponent, _super);
    function PoComboComponent(element, differs, defaultService, renderer, changeDetector, controlPosition, sanitized) {
        var _this = _super.call(this) || this;
        _this.element = element;
        _this.differs = differs;
        _this.defaultService = defaultService;
        _this.renderer = renderer;
        _this.changeDetector = changeDetector;
        _this.controlPosition = controlPosition;
        _this.sanitized = sanitized;
        _this._isServerSearching = false;
        _this.comboIcon = 'po-icon-arrow-down';
        _this.comboOpen = false;
        _this.isProcessingGetObjectByValue = false;
        _this.scrollTop = 0;
        _this.shouldMarkLetters = true;
        _this.onScroll = function () {
            _this.adjustContainerPosition();
        };
        _this.differ = differs.find([]).create(null);
        return _this;
    }
    PoComboComponent_1 = PoComboComponent;
    Object.defineProperty(PoComboComponent.prototype, "isServerSearching", {
        get: function () {
            return this._isServerSearching;
        },
        set: function (value) {
            if (value) {
                this._isServerSearching = value;
                this.changeDetector.detectChanges();
                this.setContainerPosition();
                this.initializeListeners();
            }
            else {
                this._isServerSearching = value;
                this.removeListeners();
            }
        },
        enumerable: true,
        configurable: true
    });
    PoComboComponent.prototype.ngAfterViewInit = function () {
        if (this.autoFocus) {
            this.focus();
        }
    };
    PoComboComponent.prototype.ngOnDestroy = function () {
        this.removeListeners();
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
    };
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoComboComponent } from '@portinari/portinari-ui';
     *
     * ...
     *
     * @ViewChild(PoComboComponent, { static: true }) combo: PoComboComponent;
     *
     * focusCombo() {
     *   this.combo.focus();
     * }
     * ```
     */
    PoComboComponent.prototype.focus = function () {
        if (!this.disabled) {
            this.inputElement.nativeElement.focus();
        }
    };
    PoComboComponent.prototype.onKeyDown = function (event) {
        var key = event.keyCode;
        var inputValue = event.target.value;
        // busca um registro quando acionar o tab
        if (this.service && key === PoKeyCodeEnum.tab && inputValue) {
            this.controlComboVisibility(false);
            return this.getObjectByValue(inputValue);
        }
        // Teclas "up" e "down"
        if (key === PoKeyCodeEnum.arrowUp || key === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            if (this.comboOpen) {
                if (key === PoKeyCodeEnum.arrowUp) {
                    this.selectPreviousOption();
                }
                else {
                    this.selectNextOption();
                }
            }
            this.controlComboVisibility(true);
            this.isFiltering = this.changeOnEnter ? this.isFiltering : false;
            this.shouldMarkLetters = this.changeOnEnter ? this.shouldMarkLetters : false;
            return;
        }
        // Teclas "tab" ou "esc"
        if (key === PoKeyCodeEnum.tab || key === PoKeyCodeEnum.esc) {
            if (key === PoKeyCodeEnum.esc && this.comboOpen) {
                event.preventDefault();
                event.stopPropagation();
            }
            this.controlComboVisibility(false);
            this.verifyValidOption();
            if (!this.service) {
                // caso for changeOnEnter e nao ter selectedValue deve limpar o selectedView para reinicia-lo.
                this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
                this.updateComboList();
            }
            return;
        }
        // Tecla "enter"
        if (key === PoKeyCodeEnum.enter && this.selectedView && this.comboOpen) {
            var isUpdateModel = (this.selectedView.value !== this.selectedValue) || (inputValue !== this.selectedView.label);
            this.controlComboVisibility(false);
            this.updateSelectedValue(this.selectedView, isUpdateModel);
            this.isFiltering = false;
            this.updateComboList();
            return;
        }
        if (key === PoKeyCodeEnum.enter) {
            this.controlComboVisibility(true);
        }
    };
    PoComboComponent.prototype.onKeyUp = function (event) {
        var key = event.keyCode || event.which;
        var inputValue = event.target.value;
        var isValidKey = (key !== PoKeyCodeEnum.arrowUp && key !== PoKeyCodeEnum.arrowDown && key !== PoKeyCodeEnum.enter);
        if (isValidKey) {
            if (inputValue) {
                if (!this.service && this.previousSearchValue !== inputValue) {
                    this.shouldMarkLetters = true;
                    this.isFiltering = true;
                    this.searchForLabel(inputValue, this.comboOptionsList, this.filterMode);
                }
            }
            else {
                // quando apagar rapido o campo e conter serviço, valor, não disparava o keyup observable
                // necessario este tratamento para retornar a lista 'default'.
                var useDefaultOptionsService = this.service && this.selectedValue && this.selectedOption.label === this.previousSearchValue;
                this.updateSelectedValue(null);
                if (!this.service) {
                    this.updateComboList();
                }
                else if (useDefaultOptionsService) {
                    this.updateComboList(tslib_1.__spread(this.cacheOptions));
                }
                this.isFiltering = false;
            }
            // caso o valor pesquisado for diferente do anterior deve abrir o combo
            if (this.previousSearchValue !== inputValue) {
                this.changeDetector.detectChanges();
                this.controlComboVisibility(true);
            }
        }
        this.previousSearchValue = inputValue;
    };
    PoComboComponent.prototype.initInputObservable = function () {
        var _this = this;
        if (this.service) {
            var keyupObservable = fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(filter(function (e) { return _this.isValidCharacterToSearch(e.keyCode); }), map(function (e) { return e.currentTarget.value; }), distinctUntilChanged(), tap(function () {
                _this.shouldMarkLetters = false;
            }), debounceTime(this.debounceTime));
            this.keyupSubscribe = keyupObservable.subscribe(function (value) {
                if (value.length >= _this.filterMinlength || !value) {
                    _this.controlApplyFilter(value);
                }
            });
        }
    };
    PoComboComponent.prototype.controlApplyFilter = function (value) {
        if (!this.isProcessingGetObjectByValue && (!this.selectedOption || value !== this.selectedOption.label)) {
            this.applyFilter(value);
        }
    };
    PoComboComponent.prototype.applyFilter = function (value) {
        var _this = this;
        this.controlComboVisibility(false);
        this.isServerSearching = true;
        var param = { property: this.fieldLabel, value: value };
        this.filterSubscription = this.service.getFilteredData(param, this.filterParams)
            .subscribe(function (items) { return _this.setOptionsByApplyFilter(value, items); });
    };
    PoComboComponent.prototype.setOptionsByApplyFilter = function (value, items) {
        this.shouldMarkLetters = true;
        this.isServerSearching = false;
        this.options = items;
        this.searchForLabel(value, items, this.filterMode);
        this.changeDetector.detectChanges();
        this.controlComboVisibility(true);
        if (this.isFirstFilter) {
            this.isFirstFilter = !this.isFirstFilter;
            this.cacheOptions = this.comboOptionsList;
        }
    };
    PoComboComponent.prototype.getObjectByValue = function (value) {
        var _this = this;
        if (!this.selectedValue) {
            this.isProcessingGetObjectByValue = true;
            this.getSubscription = this.service.getObjectByValue(value, this.filterParams)
                .subscribe(function (item) { return _this.updateOptionByFilteredValue(item); });
        }
    };
    PoComboComponent.prototype.updateOptionByFilteredValue = function (item) {
        var _this = this;
        if (item) {
            this.options = [item];
            this.onOptionClick(item);
        }
        else {
            this.updateSelectedValue(null);
        }
        setTimeout(function () { _this.isProcessingGetObjectByValue = false; }, this.debounceTime);
    };
    PoComboComponent.prototype.selectPreviousOption = function () {
        var currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions, true);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            var visibleOption = this.visibleOptions[this.visibleOptions.length - 1];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    PoComboComponent.prototype.selectNextOption = function () {
        var currentViewValue = this.selectedView && this.selectedView.value;
        if (currentViewValue) {
            var nextOption = this.getNextOption(currentViewValue, this.visibleOptions);
            this.updateSelectedValue(nextOption, nextOption && nextOption.value !== currentViewValue && !this.changeOnEnter);
        }
        else if (this.visibleOptions.length) {
            var index = this.changeOnEnter ? 1 : 0;
            var visibleOption = this.visibleOptions[index];
            this.updateSelectedValue(visibleOption, visibleOption.value !== currentViewValue && !this.changeOnEnter);
        }
    };
    PoComboComponent.prototype.toggleComboVisibility = function () {
        if (this.disabled) {
            return;
        }
        if (this.service && !this.disabledInitFilter) {
            this.applyFilterInFirstClick();
        }
        this.controlComboVisibility(!this.comboOpen);
    };
    PoComboComponent.prototype.applyFilterInFirstClick = function () {
        if (this.isFirstFilter && !this.selectedValue) {
            this.applyFilter('');
        }
    };
    PoComboComponent.prototype.controlComboVisibility = function (toOpen) {
        toOpen ? this.open() : this.close();
    };
    PoComboComponent.prototype.onOptionClick = function (option, event) {
        var inputValue = this.getInputValue();
        var isUpdateModel = (option.value !== this.selectedValue) || !!(this.selectedView && inputValue !== this.selectedView.label);
        if (event) {
            event.stopPropagation();
        }
        this.updateSelectedValue(option, isUpdateModel);
        this.controlComboVisibility(false);
        this.updateComboList([tslib_1.__assign({}, this.selectedView)]);
        this.previousSearchValue = this.selectedView.label;
    };
    PoComboComponent.prototype.scrollTo = function (index) {
        var selectedItem = this.element.nativeElement.querySelectorAll('.po-combo-item-selected');
        var scrollTop = !selectedItem.length || (index <= 1) ? 0 : selectedItem[0].offsetTop - 88;
        this.setScrollTop(scrollTop);
    };
    PoComboComponent.prototype.getInputValue = function () {
        return this.inputElement.nativeElement.value;
    };
    PoComboComponent.prototype.setInputValue = function (value) {
        this.inputElement.nativeElement.value = value;
    };
    PoComboComponent.prototype.wasClickedOnToggle = function (event) {
        if (this.comboOpen &&
            !this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            (!this.contentElement || !this.contentElement.nativeElement.contains(event.target))) {
            // Esconde Content do Combo quando for clicado fora
            this.controlComboVisibility(false);
            this.verifyValidOption();
            // caso for changeOnEnter deve limpar o selectedView para reinicia-lo
            this.selectedView = this.changeOnEnter && !this.selectedValue ? undefined : this.selectedView;
            this.updateComboList();
        }
        else {
            if (this.service && !this.getInputValue() && !this.isFirstFilter) {
                this.applyFilter('');
            }
        }
    };
    PoComboComponent.prototype.getLabelFormatted = function (label) {
        var format = label;
        if (this.isFiltering ||
            (this.service && this.getInputValue() && !this.compareObjects(this.cacheOptions, this.visibleOptions) && this.shouldMarkLetters)) {
            var labelInput = this.getInputValue().toString().toLowerCase();
            var labelLowerCase = label.toLowerCase();
            var openTagBold = '<span class="po-font-text-large-bold">';
            var closeTagBold = '</span>';
            var startString = void 0;
            var middleString = void 0;
            var endString = void 0;
            switch (this.filterMode) {
                case PoComboFilterMode.startsWith:
                case PoComboFilterMode.contains:
                    startString = label.substring(0, labelLowerCase.indexOf(labelInput));
                    middleString = label.substring(labelLowerCase.indexOf(labelInput), labelLowerCase.indexOf(labelInput) + labelInput.length);
                    endString = label.substring(labelLowerCase.indexOf(labelInput) + labelInput.length);
                    format = startString + openTagBold + middleString + closeTagBold + endString;
                    break;
                case PoComboFilterMode.endsWith:
                    startString = label.substring(0, labelLowerCase.lastIndexOf(labelInput));
                    middleString = label.substring(labelLowerCase.lastIndexOf(labelInput));
                    format = startString + openTagBold + middleString + closeTagBold;
                    break;
            }
        }
        return this.safeHtml(format);
    };
    PoComboComponent.prototype.safeHtml = function (value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    };
    PoComboComponent.prototype.isValidCharacterToSearch = function (keyCode) {
        return (keyCode !== 9 && // tab
            keyCode !== 13 && // entet
            keyCode !== 16 && // shift
            keyCode !== 17 && // ctrl
            keyCode !== 18 && // alt
            keyCode !== 20 && // capslock
            keyCode !== 27 && // esc
            keyCode !== 37 && // seta
            keyCode !== 38 && // seta
            keyCode !== 39 && // seta
            keyCode !== 40 && // seta
            keyCode !== 93); // windows menu
    };
    PoComboComponent.prototype.searchOnEnter = function (value) {
        if (this.service && !this.selectedView && value.length >= this.filterMinlength) {
            this.controlApplyFilter(value);
        }
    };
    PoComboComponent.prototype.adjustContainerPosition = function () {
        this.controlPosition.adjustPosition(poComboContainerPositionDefault);
    };
    PoComboComponent.prototype.close = function () {
        this.comboOpen = false;
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-down';
        this.removeListeners();
        this.isFiltering = false;
    };
    PoComboComponent.prototype.initializeListeners = function () {
        var _this = this;
        this.removeListeners();
        this.clickoutListener = this.renderer.listen('document', 'click', function (event) {
            _this.wasClickedOnToggle(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', function () {
            // timeout necessario pois a animação do po-menu impacta no ajuste da posição do container.
            setTimeout(function () { return _this.adjustContainerPosition(); }, 250);
        });
        window.addEventListener('scroll', this.onScroll, true);
    };
    PoComboComponent.prototype.open = function () {
        this.comboOpen = true;
        this.changeDetector.detectChanges();
        this.comboIcon = 'po-icon-arrow-up';
        this.initializeListeners();
        this.inputElement.nativeElement.focus();
        this.scrollTo(this.getIndexSelectedView());
        this.setContainerPosition();
    };
    PoComboComponent.prototype.removeListeners = function () {
        if (this.clickoutListener) {
            this.clickoutListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    };
    PoComboComponent.prototype.setContainerPosition = function () {
        this.controlPosition.setElements(this.containerElement.nativeElement, poComboContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    };
    PoComboComponent.prototype.setScrollTop = function (scrollTop) {
        if (this.contentElement) {
            this.contentElement.nativeElement.scrollTop = scrollTop;
        }
    };
    var PoComboComponent_1;
    PoComboComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: IterableDiffers },
        { type: PoComboFilterService },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: PoControlPositionService },
        { type: DomSanitizer }
    ]; };
    tslib_1.__decorate([
        ContentChild(PoComboOptionTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", PoComboOptionTemplateDirective)
    ], PoComboComponent.prototype, "comboOptionTemplate", void 0);
    tslib_1.__decorate([
        ViewChild('containerElement', { read: ElementRef, static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoComboComponent.prototype, "containerElement", void 0);
    tslib_1.__decorate([
        ViewChild('contentElement', { read: ElementRef, static: false }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoComboComponent.prototype, "contentElement", void 0);
    tslib_1.__decorate([
        ViewChild('iconArrow', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoComboComponent.prototype, "iconElement", void 0);
    tslib_1.__decorate([
        ViewChild('inputElement', { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoComboComponent.prototype, "inputElement", void 0);
    PoComboComponent = PoComboComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'po-combo',
            template: "<po-field-container\n  [p-label]=\"label\"\n  [p-help]=\"help\"\n  [p-optional]=\"!required && optional\">\n\n  <div class=\"po-field-container-content\">\n    <div *ngIf=\"icon\" class=\"po-field-icon-container-left\">\n      <span class=\"po-icon po-field-icon {{icon}}\" [class.po-field-icon-disabled]=\"disabled\"></span>\n    </div>\n\n    <input #inputElement\n      class=\"po-input po-combo-input\"\n      [class.po-input-icon-left]=\"icon\"\n      autocomplete=\"off\"\n      type=\"text\"\n      [attr.name]=\"name\"\n      [disabled]=\"disabled\"\n      [placeholder]=\"placeholder\"\n      [required]=\"required\"\n      (click)=\"toggleComboVisibility()\"\n      (keyup)=\"onKeyUp($event)\"\n      (keyup.enter)=\"searchOnEnter($event.target.value)\"\n      (keydown)=\"onKeyDown($event)\">\n\n    <div class=\"po-field-icon-container-right\">\n      <span #iconArrow\n        class=\"po-icon po-field-icon {{ comboIcon }}\"\n        [class.po-field-icon-disabled]=\"disabled\"\n        [class.po-field-icon]=\"!disabled\"\n        (click)=\"toggleComboVisibility()\">\n      </span>\n    </div>\n  </div>\n\n  <div #containerElement class=\"po-combo-container\" [hidden]=\"!comboOpen && !isServerSearching\">\n\n    <ng-container *ngIf=\"isServerSearching; then loadingTemplate; else optionsTemplate\">\n    </ng-container>\n\n  </div>\n\n  <po-field-container-bottom></po-field-container-bottom>\n\n</po-field-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"po-combo-container-loading\">\n    <po-loading></po-loading>\n  </div>\n</ng-template>\n\n<ng-template #optionsTemplate>\n  <ng-container *ngIf=\"visibleOptions.length; then visibleOptionsTemplate ; else noDataTemplate\">\n  </ng-container>\n</ng-template>\n\n<ng-template #visibleOptionsTemplate>\n  <ul #contentElement class=\"po-combo-container-content\">\n    <li *ngFor=\"let option of visibleOptions\"\n      [class.po-combo-item-selected]=\"compareObjects(selectedView, option)\"\n      (click)=\"option?.options ? undefined : onOptionClick(option, $event)\">\n\n      <ng-container *ngIf=\"comboOptionTemplate; then optionTemplate; else defaultOptionTemplate\"></ng-container>\n\n      <ng-template #defaultOptionTemplate>\n        <label *ngIf=\"option?.options; else optionLink\" class=\"po-combo-item-title\">{{ option.label }}</label>\n        <ng-template #optionLink>\n          <a class=\"po-combo-item\">\n            <span [innerHTML]=\"getLabelFormatted(option?.label)\"></span>\n          </a>\n        </ng-template>\n      </ng-template>\n\n      <ng-template #optionTemplate>\n\n        <ng-container *ngIf=\"isOptionGroupList; then optionsGroupTemplate; else defaultOptionsTemplate\"></ng-container>\n\n        <ng-template #optionsGroupTemplate>\n          <ng-template\n            [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n            [ngTemplateOutletContext]=\"{$implicit: option, selected: compareObjects(selectedView, option)}\">\n          </ng-template>\n        </ng-template>\n\n        <ng-template #defaultOptionsTemplate>\n          <a class=\"po-combo-item\">\n            <ng-template\n              [ngTemplateOutlet]=\"comboOptionTemplate?.templateRef\"\n              [ngTemplateOutletContext]=\"{$implicit: option}\">\n            </ng-template>\n          </a>\n        </ng-template>\n\n      </ng-template>\n\n    </li>\n  </ul>\n</ng-template>\n\n<ng-template #noDataTemplate>\n  <div class=\"po-combo-container-no-data\">\n    <div class=\"po-combo-no-data po-text-center\">\n      <span>\n        {{ literals.noData }}\n      </span>\n    </div>\n  </div>\n</ng-template>\n",
            providers: [
                PoComboFilterService,
                PoControlPositionService,
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return PoComboComponent_1; }),
                    multi: true,
                },
                {
                    provide: NG_VALIDATORS,
                    useExisting: forwardRef(function () { return PoComboComponent_1; }),
                    multi: true,
                }
            ]
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            IterableDiffers,
            PoComboFilterService,
            Renderer2,
            ChangeDetectorRef,
            PoControlPositionService,
            DomSanitizer])
    ], PoComboComponent);
    return PoComboComponent;
}(PoComboBaseComponent));
export { PoComboComponent };
//# sourceMappingURL=data:application/json;base64,