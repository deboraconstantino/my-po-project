import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoStepperOrientation } from './enums/po-stepper-orientation.enum';
import { PoStepperStatus } from './enums/po-stepper-status.enum';
var poStepperOrientationDefault = PoStepperOrientation.Horizontal;
/**
 * @description
 *
 * O `po-stepper` permite que um processo seja dividido em passos para que o usuário o realize
 * mais facilmente.
 *
 * Existem duas formas de utilização:
 *
 * 1 - Usando o componente [**po-step**](/documentation/po-step) para renderizar e descrever os passos.
 *
 * 2 - Através da propriedade `p-steps` para descrever os passos do processo, sendo responsabilidade do desenvolvedor o controle
 * de renderização do que será exibido a cada *step* ativo.
 *
 * Através de suas propriedades, é possível definir se sua orientação será horizontal ou vertical,
 * além da possibilidade de aumentar o tamanho dos *steps*.
 *
 * Também é possível navegar entre os *steps* através do teclado utilizando a tecla *tab* e, para ativar o *step* em foco basta
 * pressionar a tecla *enter*. Além disso, é possível ativar a exibição de ícones no lugar de números nos *steps* através da
 * propriedade [`p-step-icons`](/documentation/po-stepper#stepIconsProperty).
 *
 * #### Utilizando os métodos do componente:
 *
 * Para acessar os métodos do componente é necessário ter a referência do mesmo.
 *
 * Por exemplo, utilizando um [**ViewChild**](https://angular.io/api/core/ViewChild):
 *
 * ```
 * @ViewChild(PoStepperComponent) poStepperComponent: PoStepperComponent;
 * ```
 *
 * E para acessar o método:
 *
 * ```
 * poStepperComponent.next();
 * ```
 *
 * #### Boas práticas
 *
 * - Evite `labels` extensos que quebram o layout do `po-stepper`, use `labels` diretos, curtos e intuitivos.
 * - Utilize apenas um `po-stepper` por página.
 */
var PoStepperBaseComponent = /** @class */ (function () {
    function PoStepperBaseComponent() {
        this._orientation = poStepperOrientationDefault;
        this._sequential = true;
        this._step = 1;
        this._steps = [];
        /** Ação que será executada quando o usuário mudar o passo do `po-stepper`. */
        this.onChangeStep = new EventEmitter();
    }
    Object.defineProperty(PoStepperBaseComponent.prototype, "orientation", {
        get: function () {
            return this._orientation;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a orientação de exibição do `po-stepper`.
         *
         * > Veja os valores válidos no *enum* [PoStepperOrientation](documentation/po-stepper#stepperOrientation).
         *
         * @default `PoStepperOrientation.Horizontal`
         */
        set: function (value) {
            this._orientation = Object.values(PoStepperOrientation).includes(value) ? value : poStepperOrientationDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperBaseComponent.prototype, "step", {
        get: function () {
            return this._step;
        },
        /**
         * @optional
         *
         * @description
         *
         * Controla o passo atual do `po-stepper`.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
         *
         * @default `1`
         */
        set: function (step) {
            if (step >= 1 && step <= this.steps.length) {
                this._step = step;
                this._steps[this._step - 1].status = PoStepperStatus.Active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperBaseComponent.prototype, "steps", {
        get: function () {
            return this._steps;
        },
        /**
         * @optional
         *
         * @description
         *
         * Lista dos itens do stepper. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio.
         *
         * > Ao utilizar esta propriedade e também utilizar o componente [**po-step**](/documentation/po-step),
         * o valor desta propriedade será ignorada permanecendo a definição do [**po-step**](/documentation/po-step).
         */
        set: function (steps) {
            this._steps = Array.isArray(steps) ? steps : [];
            this._steps.forEach(function (step) { return step.status = PoStepperStatus.Default; });
            this.step = 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperBaseComponent.prototype, "sequential", {
        get: function () {
            return this._sequential;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define se o `po-stepper` será sequencial ou aleatório.
         *
         * > Ao utilizar o componente [**po-step**](/documentation/po-step), o valor desta propriedade sempre será verdadeiro.
         *
         * @default `true`
         */
        set: function (sequential) {
            this._sequential = convertToBoolean(sequential);
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input('p-orientation'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoStepperBaseComponent.prototype, "orientation", null);
    tslib_1.__decorate([
        Input('p-step'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], PoStepperBaseComponent.prototype, "step", null);
    tslib_1.__decorate([
        Input('p-steps'),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], PoStepperBaseComponent.prototype, "steps", null);
    tslib_1.__decorate([
        Input('p-step-icons'),
        tslib_1.__metadata("design:type", Boolean)
    ], PoStepperBaseComponent.prototype, "stepIcons", void 0);
    tslib_1.__decorate([
        Input('p-step-size'),
        tslib_1.__metadata("design:type", Number)
    ], PoStepperBaseComponent.prototype, "stepSize", void 0);
    tslib_1.__decorate([
        Input('p-sequential'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoStepperBaseComponent.prototype, "sequential", null);
    tslib_1.__decorate([
        Output('p-change-step'),
        tslib_1.__metadata("design:type", Object)
    ], PoStepperBaseComponent.prototype, "onChangeStep", void 0);
    return PoStepperBaseComponent;
}());
export { PoStepperBaseComponent };
//# sourceMappingURL=data:application/json;base64,