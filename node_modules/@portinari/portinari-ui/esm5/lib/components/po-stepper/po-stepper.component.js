import * as tslib_1 from "tslib";
import { AfterContentInit, ChangeDetectorRef, Component, ContentChildren, QueryList } from '@angular/core';
import { Observable, of } from 'rxjs';
import { map, switchMap, take } from 'rxjs/operators';
import { PoStepperStatus } from './enums/po-stepper-status.enum';
import { PoStepComponent } from './po-step/po-step.component';
import { PoStepperBaseComponent } from './po-stepper-base.component';
/**
 * @docsExtends PoStepperBaseComponent
 *
 * @example
 *
 * <example name="po-stepper-basic" title="Portinari Stepper Basic">
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.html"> </file>
 *  <file name="sample-po-stepper-basic/sample-po-stepper-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-labs" title="Portinari Stepper Labs">
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.html"> </file>
 *  <file name="sample-po-stepper-labs/sample-po-stepper-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-stepper-sales" title="Portinari Stepper - Sales">
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.html"> </file>
 *  <file name="sample-po-stepper-sales/sample-po-stepper-sales.component.ts"> </file>
 * </example>
 */
var PoStepperComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoStepperComponent, _super);
    function PoStepperComponent(changeDetector) {
        var _this = _super.call(this) || this;
        _this.changeDetector = changeDetector;
        return _this;
    }
    Object.defineProperty(PoStepperComponent.prototype, "currentStepIndex", {
        get: function () {
            return this.step - 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperComponent.prototype, "stepList", {
        get: function () {
            return this.usePoSteps && this.poSteps || this.steps;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoStepperComponent.prototype, "usePoSteps", {
        get: function () {
            return !!this.poSteps.length;
        },
        enumerable: true,
        configurable: true
    });
    PoStepperComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.activeFirstStep();
        this.poSteps.changes.subscribe(function () {
            _this.controlStepsStatus(0, _this.poSteps.first);
        });
    };
    /**
     * Altera o status do *step* para ativo.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     *
     * @param {number} index Índice do `po-step` que se deseja ativar.
     */
    PoStepperComponent.prototype.active = function (index) {
        if (!this.usePoSteps) {
            return;
        }
        var stepsArray = this.getPoSteps();
        var step = stepsArray[index];
        var isDisabledStep = step.status === PoStepperStatus.Disabled;
        var isErrorStep = step.status === PoStepperStatus.Error;
        if (!isDisabledStep || isErrorStep) {
            this.changeStep(index, step);
        }
    };
    /**
     * Ativa o primeiro *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    PoStepperComponent.prototype.first = function () {
        if (!this.usePoSteps) {
            return;
        }
        var firstStep = this.poSteps.first;
        var firstStepIndex = 0;
        this.changeStep(firstStepIndex, firstStep);
    };
    /**
     * Ativa o próximo *step*.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    PoStepperComponent.prototype.next = function () {
        if (!this.usePoSteps) {
            return;
        }
        var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
        var nextIndex = stepIndex + 1;
        var nextStep = steps[nextIndex];
        this.changeStep(nextIndex, nextStep);
    };
    /**
     * Ativa o *step* anterior.
     *
     * > Este método é valido apenas para as implementações que utilizam o componente [**po-step**](/documentation/po-step).
     */
    PoStepperComponent.prototype.previous = function () {
        if (!this.usePoSteps) {
            return;
        }
        var _a = this.getStepsAndIndex(this.currentActiveStep), steps = _a.steps, stepIndex = _a.stepIndex;
        var previousIndex = stepIndex - 1;
        var previousStep = steps[previousIndex];
        this.changeStep(previousIndex, previousStep);
    };
    PoStepperComponent.prototype.changeStep = function (stepIndex, step) {
        var _this = this;
        var isDifferentStep = (!this.currentActiveStep || step.id !== this.currentActiveStep.id);
        this.allowNextStep(stepIndex).pipe(take(1)).subscribe(function (nextStepAllowed) {
            if (nextStepAllowed) {
                if (_this.usePoSteps && isDifferentStep) {
                    _this.controlStepsStatus(stepIndex, step);
                    _this.onChangeStep.emit(step);
                }
                else if (!_this.usePoSteps && stepIndex !== _this.currentStepIndex) {
                    // if para tratamento do modelo antigo do po-stepper
                    _this.onChangeStep.emit(stepIndex + 1);
                }
            }
        });
    };
    PoStepperComponent.prototype.onStepActive = function (step) {
        this.currentActiveStep = step;
        this.previousActiveStep = this.poSteps.find(function (stepChild) { return stepChild.status === PoStepperStatus.Active && stepChild.id !== step.id; });
        this.setPreviousStepAsDone();
    };
    PoStepperComponent.prototype.trackByFn = function (step) {
        return step.id;
    };
    PoStepperComponent.prototype.activeFirstStep = function () {
        var hasStepActive = this.poSteps.some(function (poStep) { return poStep.status === PoStepperStatus.Active; });
        if (this.usePoSteps && !hasStepActive) {
            this.changeStep(0, this.poSteps.first);
        }
    };
    PoStepperComponent.prototype.allowNextStep = function (nextStepIndex) {
        var _this = this;
        if (!this.sequential) {
            return of(true);
        }
        if (this.usePoSteps) {
            return of(this.isBeforeStep(nextStepIndex))
                .pipe(switchMap(function (result) {
                if (result) {
                    return of(result);
                }
                else {
                    return _this.canActiveNextStep(_this.currentActiveStep);
                }
            }));
        }
        return of(this.steps.slice(this.step, nextStepIndex).every(function (step) { return step.status === PoStepperStatus.Done; }));
    };
    PoStepperComponent.prototype.canActiveNextStep = function (currentActiveStep) {
        var _this = this;
        if (currentActiveStep === void 0) { currentActiveStep = {}; }
        if (!currentActiveStep.canActiveNextStep) {
            return of(true);
        }
        var canActiveNextStep = currentActiveStep.canActiveNextStep(currentActiveStep);
        if (typeof canActiveNextStep === 'boolean') {
            currentActiveStep.status = this.getStepperStatusByCanActive(canActiveNextStep);
            return of(canActiveNextStep);
        }
        else if (canActiveNextStep instanceof Observable) {
            return canActiveNextStep.pipe(map(function (result) {
                currentActiveStep.status = _this.getStepperStatusByCanActive(result);
                return result;
            }));
        }
        else {
            throw new Error("Expected step " + currentActiveStep.label + " canActiveNextStep function to return either a boolean or Observable");
        }
    };
    PoStepperComponent.prototype.controlStepsStatus = function (stepIndex, step) {
        if (this.usePoSteps) {
            this.setStepAsActive(step);
            this.setNextStepAsDefault(step);
            if (this.isBeforeStep(stepIndex)) {
                this.setFinalSteppersAsDisabled(stepIndex);
            }
            this.changeDetector.detectChanges();
        }
    };
    PoStepperComponent.prototype.getStepperStatusByCanActive = function (canActiveNextStep) {
        return canActiveNextStep ? PoStepperStatus.Done : PoStepperStatus.Error;
    };
    PoStepperComponent.prototype.getStepsAndIndex = function (step) {
        if (step === void 0) { step = {}; }
        var steps = this.getPoSteps();
        var stepIndex = steps.findIndex(function (poStep) { return poStep.id === step.id; });
        return { steps: steps, stepIndex: stepIndex };
    };
    PoStepperComponent.prototype.getPoSteps = function () {
        return this.poSteps.toArray();
    };
    PoStepperComponent.prototype.isBeforeStep = function (stepIndex) {
        var _this = this;
        var currentActiveStepIndex = function () { return _this.getPoSteps().findIndex(function (step) { return step.id === _this.currentActiveStep.id; }); };
        return !!this.currentActiveStep && currentActiveStepIndex() >= stepIndex;
    };
    PoStepperComponent.prototype.setFinalSteppersAsDisabled = function (stepIndex) {
        this.getPoSteps()
            .filter(function (step, index) { return step && index >= stepIndex + 2; })
            .forEach(function (step) { return step.status = PoStepperStatus.Disabled; });
    };
    PoStepperComponent.prototype.setStepAsActive = function (step) {
        step.status = PoStepperStatus.Active;
    };
    PoStepperComponent.prototype.setNextStepAsDefault = function (currentStep) {
        var _a = this.getStepsAndIndex(currentStep), steps = _a.steps, stepIndex = _a.stepIndex;
        var nextIndex = stepIndex + 1;
        if (nextIndex < this.poSteps.length) {
            steps[nextIndex].status = PoStepperStatus.Default;
        }
    };
    PoStepperComponent.prototype.setPreviousStepAsDone = function () {
        if (this.previousActiveStep) {
            this.previousActiveStep.status = PoStepperStatus.Done;
        }
    };
    PoStepperComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    tslib_1.__decorate([
        ContentChildren(PoStepComponent),
        tslib_1.__metadata("design:type", QueryList)
    ], PoStepperComponent.prototype, "poSteps", void 0);
    PoStepperComponent = tslib_1.__decorate([
        Component({
            selector: 'po-stepper',
            template: "<div class=\"po-stepper po-stepper-{{ orientation }}\">\n\n  <div class=\"po-stepper-container\">\n    <po-stepper-step *ngFor=\"let step of stepList; let index = index; trackBy: trackByFn\"\n      class=\"po-stepper-step-position\"\n      [p-circle-content]=\"index+1\"\n      [p-label]=\"step.label\"\n      [p-orientation]=\"orientation\"\n      [p-status]=\"step.status\"\n      [p-step-icons]=\"stepIcons\"\n      [p-step-size]=\"stepSize\"\n      (p-activated)=\"onStepActive(step)\"\n      (p-click)=\"changeStep(index, step)\"\n      (p-enter)=\"changeStep(index, step)\">\n    </po-stepper-step>\n  </div>\n\n  <div *ngIf=\"usePoSteps\" class=\"po-stepper-content\">\n    <ng-content></ng-content>\n  </div>\n\n</div>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
    ], PoStepperComponent);
    return PoStepperComponent;
}(PoStepperBaseComponent));
export { PoStepperComponent };
//# sourceMappingURL=data:application/json;base64,