import * as tslib_1 from "tslib";
import { AfterContentInit, Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
var PoStepComponent = /** @class */ (function () {
    function PoStepComponent(elementRef) {
        this.elementRef = elementRef;
        this._status = PoStepperStatus.Disabled;
        // ID do step
        this.id = uuid();
    }
    Object.defineProperty(PoStepComponent.prototype, "status", {
        get: function () {
            return this._status;
        },
        // Estado de exibição do `po-step`.
        set: function (status) {
            this._status = status;
            this.setDisplayOnActiveOrError();
        },
        enumerable: true,
        configurable: true
    });
    PoStepComponent.prototype.ngAfterContentInit = function () {
        this.setDisplayOnActiveOrError();
    };
    PoStepComponent.prototype.setDisplayOnActiveOrError = function () {
        this.elementRef.nativeElement.style.display =
            (this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error) ? '' : 'none';
    };
    PoStepComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    tslib_1.__decorate([
        Input('p-can-active-next-step'),
        tslib_1.__metadata("design:type", Function)
    ], PoStepComponent.prototype, "canActiveNextStep", void 0);
    tslib_1.__decorate([
        Input('p-label'),
        tslib_1.__metadata("design:type", String)
    ], PoStepComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input('p-status'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoStepComponent.prototype, "status", null);
    PoStepComponent = tslib_1.__decorate([
        Component({
            selector: 'po-step',
            template: "<ng-content></ng-content>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef])
    ], PoStepComponent);
    return PoStepComponent;
}());
export { PoStepComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXN0ZXBwZXIvcG8tc3RlcC9wby1zdGVwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRy9FLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFbEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW9DRztBQUtIO0lBNkNFLHlCQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBM0NsQyxZQUFPLEdBQXFCLGVBQWUsQ0FBQyxRQUFRLENBQUM7UUFFN0QsYUFBYTtRQUNiLE9BQUUsR0FBWSxJQUFJLEVBQUUsQ0FBQztJQXdDeUIsQ0FBQztJQVY1QixzQkFBSSxtQ0FBTTthQU03QjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBVEQsbUNBQW1DO2FBQ2hCLFVBQVcsTUFBdUI7WUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7WUFFdEIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7UUFDbkMsQ0FBQzs7O09BQUE7SUFRRCw0Q0FBa0IsR0FBbEI7UUFDRSxJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRVMsbURBQXlCLEdBQW5DO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU87WUFDekMsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3BHLENBQUM7O2dCQVQrQixVQUFVOztJQWhCVDtRQUFoQyxLQUFLLENBQUMsd0JBQXdCLENBQUM7OzhEQUF3RjtJQUd0RztRQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOztrREFBZTtJQUdiO1FBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7OztpREFJakI7SUF2Q1UsZUFBZTtRQUozQixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsU0FBUztZQUNuQix1Q0FBcUM7U0FDdEMsQ0FBQztpREE4Q2dDLFVBQVU7T0E3Qy9CLGVBQWUsQ0F3RDNCO0lBQUQsc0JBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXhEWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyB1dWlkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvU3RlcHBlclN0YXR1cyB9IGZyb20gJy4uL2VudW1zL3BvLXN0ZXBwZXItc3RhdHVzLmVudW0nO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tc3RlcGAgw6kgdXRpbGl6YWRvIHBhcmEgZW52b2x2ZXIgZSByZW5kZXJpemFyIG8gY29udGXDumRvIGRlIHVtIHBhc3NvICgqc3RlcCopIGRvIGBwby1zdGVwcGVyYCwgcG9yIGV4ZW1wbG86XG4gKlxuICogYGBgXG4gKiA8cG8tc3RlcHBlcj5cbiAqXG4gKiAgICA8cG8tc3RlcCBwLWxhYmVsPVwiRW5kZXJlw6dvXCI+XG4gKlxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBlbmRlcmXDp28gLS0+XG4gKlxuICogICAgPC9wby1zdGVwPlxuICpcbiAqICAgIDxwby1zdGVwIHAtbGFiZWw9XCJQYWdhbWVudG9cIj5cbiAqXG4gKiAgICAgICAgPCEtLSBDb250ZcO6ZG8gcmVmZXJlbnRlIGFvIHBhZ2FtZW50byAtLT5cbiAqXG4gKiAgICA8L3BvLXN0ZXA+XG4gKlxuICogIDwvcG8tc3RlcHBlcj5cbiAqIGBgYFxuICpcbiAqIEEgcmVuZGVyaXphw6fDo28gZG8gY29udGXDumRvIGVudm9sdmlkbyBuYSB0ZWxhIGUgbyBjb250cm9sZSBkb3Mgc3RhdHVzIHPDo28gZmVpdG9zIGF1dG9tYXRpY2FtZW50ZS4gTm8gcXVhbCwgbyBwcmltZWlyb1xuICogYHBvLXN0ZXBgIGVuY29udHJhZG8gc2Vyw6EgY29sb2NhZG8gY29tbyBhdGl2bywgbyBwcsOzeGltbyBmaWNhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCogZSBvcyBkZW1haXMgZmljYW1cbiAqIGRlc2FiaWxpdGFkb3MgKCpkaXNhYmxlZCopLlxuICpcbiAqIEFvIGNsaWNhciBubyBgcG8tc3RlcGAgcXVlIGVzdMOhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCosIG8gcXVlIGVzdMOhIGF0aXZvIGZpY2Fyw6EgY29tIG9cbiAqIHN0YXR1cyBkZSBjb25jbHXDrWRvICgqZG9uZSopIGUgbyBwcsOzeGltbyBxdWUgZXN0YXZhIGRlc2FiaWxpdGFkbyBmaWNhcsOhIGNvbSBvIHN0YXR1cyAqZGVmYXVsdCogZSBvIHJlc3RhbnRlIHBlcm1hbmVjZXLDoVxuICogY29tIG8gc3RhdHVzIGRlc2FiaWxpdGFkby5cbiAqXG4gKiA+IEFvIHV0aWxpemFyIG8gYHBvLXN0ZXBgLCBvIGNvbXBvbmVudGUgYHBvLXN0ZXBwZXJgIGZ1bmNpb25hcsOhIGRlIGZvcm1hIHNlcXVlbmNpYWwsIG91IHNlamEsIG7Do28gc2Vyw6EgcG9zc8OtdmVsXG4gKiBwdWxhciBwYXJhIG91dHJvIGBwby1zdGVwYCBxdWUgZXN0ZWphIGNvbSBvIHN0YXR1cyBpZ3VhbCBhIGRlc2FiaWxpdGFkbyAoKmRpc2FibGVkKikuXG4gKlxuICogQWNlc3NlIGEgW2RvY3VtZW50YcOnw6NvIGRvIGBwby1zdGVwcGVyYF0oL2RvY3VtZW50YXRpb24vcG8tc3RlcHBlcikgcGFyYSB0ZXIgbWFpcyBpbmZvcm1hw6fDtWVzIHNvYnJlIG8gc2V1IGZ1bmNpb25hbWVudG9cbiAqIGUgZXhlbXBsb3MgZGUgdXNvLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1zdGVwJyxcbiAgdGVtcGxhdGVVcmw6ICdwby1zdGVwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1N0ZXBDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblxuICBwcml2YXRlIF9zdGF0dXM/OiBQb1N0ZXBwZXJTdGF0dXMgPSBQb1N0ZXBwZXJTdGF0dXMuRGlzYWJsZWQ7XG5cbiAgLy8gSUQgZG8gc3RlcFxuICBpZD86IHN0cmluZyA9IHV1aWQoKTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBjaGFtYWRhIHF1YW5kbyBvIHByw7N4aW1vICpzdGVwKiBmb3IgY2xpY2FkbyBvdSBxdWFuZG8gbyBtw6l0b2RvIGBQb1N0ZXBwZXJDb21wb25lbnQubmV4dCgpYCBmb3IgY2hhbWFkby5cbiAgICogQW8gcmV0b3JuYXIgYHRydWVgIGRlZmluZSBxdWUgZXNzZSAqc3RlcCogZmljYXLDoSBhdGl2byBlIG8gYXR1YWwgY29tbyBjb25jbHXDrWRvICgqZG9uZSopLlxuICAgKiBUYW1iw6ltIGFjZWl0YSBmdW7Dp8O1ZXMgcXVlIHJldG9ybmVtIGBPYnNlcnZhYmxlPGJvb2xlYW4+YC4gQW8gcmV0b3JuYXIgdW0gYE9ic2VydmFibGU8Ym9vbGVhbj5gLFxuICAgKiBnYXJhbnRhIHF1ZSBlc3NlIGBPYnNlcnZhYmxlYCBzZXLDoSBjb21wbGV0YWRvLlxuICAgKlxuICAgKiBBbyBzZXIgZGlzcGFyYWRhLCBhIG1lc21hIHJlY2ViZXLDoSBwb3IgcGFyw6JtZXRybyBvIGBQb1N0ZXBDb21wb25lbnRgIGF0dWFsLlxuICAgKlxuICAgKiBPIGNvbnRleHRvIGRhIGZ1bsOnw6NvIHF1ZSBzZXLDoSBjaGFtYWRhLCBzZXLDoSBvIG1lc21vIHF1ZSBvIGRvIGBQb1N0ZXBDb21wb25lbnRgLCBlbnTDo28gcGFyYSBwb2RlciBhbHRlcmFyXG4gICAqIHBhcmEgbyBjb250ZXh0byBkbyBjb21wb25lbnRlIHF1ZSBvIGVzdMOhIHV0aWxpemFuZG8sIHBvZGUgc2VyIHV0aWxpemFkbyBhIHByb3ByaWVkYWRlIGBiaW5kYCBkbyBKYXZhc2NyaXB0LlxuICAgKiBQb3IgZXhlbXBsbywgcGFyYSBhIGZ1bsOnw6NvIGB2YWxpZGF0ZWA6XG4gICAqXG4gICAqIGBgYFxuICAgKiA8cG8tc3RlcCBwLWxhYmVsPVwiU3RlcCAxXCIgW3AtY2FuLWFjdGl2ZS1uZXh0LXN0ZXBdPVwidmFsaWRhdGUuYmluZCh0aGlzKVwiPlxuICAgKiAuLi5cbiAgICogPC9wby1zdGVwPlxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1jYW4tYWN0aXZlLW5leHQtc3RlcCcpIGNhbkFjdGl2ZU5leHRTdGVwOiAoKGN1cnJlbnRTdGVwKSA9PiBib29sZWFuKSB8ICgoY3VycmVudFN0ZXApID0+IE9ic2VydmFibGU8Ym9vbGVhbj4pO1xuXG4gIC8qKiBUw610dWxvIHF1ZSBzZXLDoSBleGliaWRvIGRlc2NyZXZlbmRvIG8gcGFzc28gKCpzdGVwKikuICovXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XG5cbiAgLy8gRXN0YWRvIGRlIGV4aWJpw6fDo28gZG8gYHBvLXN0ZXBgLlxuICBASW5wdXQoJ3Atc3RhdHVzJykgc2V0IHN0YXR1cyhzdGF0dXM6IFBvU3RlcHBlclN0YXR1cykge1xuICAgIHRoaXMuX3N0YXR1cyA9IHN0YXR1cztcblxuICAgIHRoaXMuc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpO1xuICB9XG5cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7IH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5zZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpIHtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5kaXNwbGF5ID1cbiAgICAgICh0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkFjdGl2ZSB8fCB0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkVycm9yKSA/ICcnIDogJ25vbmUnO1xuICB9XG5cbn1cbiJdfQ==