import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../utils/util';
import { PoProgressStatus } from './enums/po-progress-status.enum';
var poProgressMaxValue = 100;
var poProgressMinValue = 0;
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
var PoProgressBaseComponent = /** @class */ (function () {
    function PoProgressBaseComponent() {
        this._value = 0;
        /**
         * @optional
         *
         * @description
         *
         * Status da barra de progresso que indicará visualmente ao usuário
         * o andamento, por exemplo, se a mesma foi concluída com sucesso.
         *
         * @default `PoProgressStatus.Default`
         */
        this.status = PoProgressStatus.Default;
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
         *
         * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
         *
         * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
         * o ícone de cancelamento não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
         *
         * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
         * `PoProgressStatus.Error`.
         */
        this.retry = new EventEmitter();
    }
    Object.defineProperty(PoProgressBaseComponent.prototype, "indeterminate", {
        get: function () {
            return this._indeterminate;
        },
        /**
         * @optional
         *
         * @description
         *
         * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
         *
         * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
         *
         * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
         *
         * @default `false`
         */
        set: function (indeterminate) {
            this._indeterminate = convertToBoolean(indeterminate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoProgressBaseComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        /**
         * @optional
         *
         * @description
         *
         * Valor que representará o progresso.
         *
         * > Os valores aceitos são números inteiros de `0` à `100`.
         *
         * @default `0`
         */
        set: function (value) {
            var integerValue = convertToInt(value, poProgressMinValue);
            var isProgressRangeValue = this.isProgressRangeValue(integerValue);
            this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
        },
        enumerable: true,
        configurable: true
    });
    PoProgressBaseComponent.prototype.isProgressRangeValue = function (value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    };
    tslib_1.__decorate([
        Input('p-indeterminate'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoProgressBaseComponent.prototype, "indeterminate", null);
    tslib_1.__decorate([
        Input('p-info'),
        tslib_1.__metadata("design:type", String)
    ], PoProgressBaseComponent.prototype, "info", void 0);
    tslib_1.__decorate([
        Input('p-info-icon'),
        tslib_1.__metadata("design:type", String)
    ], PoProgressBaseComponent.prototype, "infoIcon", void 0);
    tslib_1.__decorate([
        Input('p-status'),
        tslib_1.__metadata("design:type", String)
    ], PoProgressBaseComponent.prototype, "status", void 0);
    tslib_1.__decorate([
        Input('p-text'),
        tslib_1.__metadata("design:type", String)
    ], PoProgressBaseComponent.prototype, "text", void 0);
    tslib_1.__decorate([
        Input('p-value'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], PoProgressBaseComponent.prototype, "value", null);
    tslib_1.__decorate([
        Output('p-cancel'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoProgressBaseComponent.prototype, "cancel", void 0);
    tslib_1.__decorate([
        Output('p-retry'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoProgressBaseComponent.prototype, "retry", void 0);
    return PoProgressBaseComponent;
}());
export { PoProgressBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS11aS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXByb2dyZXNzL3BvLXByb2dyZXNzLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRW5FLElBQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQy9CLElBQU0sa0JBQWtCLEdBQUcsQ0FBQyxDQUFDO0FBRTdCOzs7Ozs7R0FNRztBQUNIO0lBQUE7UUFHVSxXQUFNLEdBQVksQ0FBQyxDQUFDO1FBMkM1Qjs7Ozs7Ozs7O1dBU0c7UUFDZ0IsV0FBTSxHQUFxQixnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7UUFpQ3ZFOzs7Ozs7Ozs7OztXQVdHO1FBQ2lCLFdBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVuRTs7Ozs7Ozs7O1dBU0c7UUFDZ0IsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBTW5FLENBQUM7SUFyRzJCLHNCQUFJLGtEQUFhO2FBSTNDO1lBQ0UsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO1FBQzdCLENBQUM7UUFuQkQ7Ozs7Ozs7Ozs7OztXQVlHO2FBQ3VCLFVBQWtCLGFBQXNCO1lBQ2hFLElBQUksQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEQsQ0FBQzs7O09BQUE7SUEwRGlCLHNCQUFJLDBDQUFLO2FBTzNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7UUFwQkQ7Ozs7Ozs7Ozs7V0FVRzthQUNlLFVBQVUsS0FBYTtZQUN2QyxJQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLGtCQUFrQixDQUFDLENBQUM7WUFDN0QsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLENBQUM7WUFFckUsSUFBSSxDQUFDLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQztRQUN6RSxDQUFDOzs7T0FBQTtJQWdDTyxzREFBb0IsR0FBNUIsVUFBNkIsS0FBYTtRQUN4QyxPQUFPLEtBQUssSUFBSSxrQkFBa0IsSUFBSSxLQUFLLElBQUksa0JBQWtCLENBQUM7SUFDcEUsQ0FBQztJQW5HeUI7UUFBekIsS0FBSyxDQUFDLGlCQUFpQixDQUFDOzs7Z0VBRXhCO0lBYWdCO1FBQWhCLEtBQUssQ0FBQyxRQUFRLENBQUM7O3lEQUFlO0lBV1Q7UUFBckIsS0FBSyxDQUFDLGFBQWEsQ0FBQzs7NkRBQW1CO0lBWXJCO1FBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7OzJEQUFxRDtJQVN0RDtRQUFoQixLQUFLLENBQUMsUUFBUSxDQUFDOzt5REFBZTtJQWFiO1FBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7Ozt3REFLaEI7SUFrQm1CO1FBQW5CLE1BQU0sQ0FBQyxVQUFVLENBQUM7MENBQVMsWUFBWTsyREFBMkI7SUFZaEQ7UUFBbEIsTUFBTSxDQUFDLFNBQVMsQ0FBQzswQ0FBUSxZQUFZOzBEQUEyQjtJQU1uRSw4QkFBQztDQUFBLEFBdkhELElBdUhDO1NBdkhZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuLCBjb252ZXJ0VG9JbnQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9Qcm9ncmVzc1N0YXR1cyB9IGZyb20gJy4vZW51bXMvcG8tcHJvZ3Jlc3Mtc3RhdHVzLmVudW0nO1xuXG5jb25zdCBwb1Byb2dyZXNzTWF4VmFsdWUgPSAxMDA7XG5jb25zdCBwb1Byb2dyZXNzTWluVmFsdWUgPSAwO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgZGUgYmFycmEgZGUgcHJvZ3Jlc3NvIHF1ZSBwb3NzaWJpbGl0YSBleGliaXIgdmlzdWFsbWVudGUgbyBwcm9ncmVzc28vY2FycmVnYW1lbnRvIGRlIHVtYSB0YXJlZmEuXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIHBvZGUgc2VyIHV0aWxpemFkbyBubyAqdXBsb2FkKiBkZSBhcnF1aXZvcywgdW1hIGF0dWFsaXphw6fDo28gbm8gc2lzdGVtYSBvdSBvIHByb2Nlc3NhbWVudG8gZGUgdW1hIGltYWdlbS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvUHJvZ3Jlc3NCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9pbmRldGVybWluYXRlPzogYm9vbGVhbjtcbiAgcHJpdmF0ZSBfdmFsdWU/OiBudW1iZXIgPSAwO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEhhYmlsaXRhIG8gbW9kbyBpbmRldGVybWluYWRvIG5hIGJhcnJhIGRlIHByb2dyZXNzbywgcXVlIG1vc3RyYSB1bWEgYW5pbWHDp8OjbyBmaXhhIHNlbSB1bSB2YWxvciBlc3RhYmVsZWNpZG8uXG4gICAqXG4gICAqIEVzdGEgb3DDp8OjbyBwb2RlIHNlciB1dGlsaXphZGEgcXVhbmRvIG7Do28gc291YmVyIHF1YW50byB0ZW1wbyBsZXZhcsOhIHBhcmEgcXVlIHVtIHByb2Nlc3NvIHNlamEgY29uY2x1w61kby5cbiAgICpcbiAgICogPiBDYXNvIGVzdGEgcHJvcHJpZWRhZGUgZSBhIGBwLXZhbHVlYCBzZWphIGhhYmlsaXRhZGEsIGEgcHJvcHJpZWRhZGUgYHAtdmFsdWVgIHNlcsOhIGlnbm9yYWRhLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtaW5kZXRlcm1pbmF0ZScpIHNldCBpbmRldGVybWluYXRlKGluZGV0ZXJtaW5hdGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pbmRldGVybWluYXRlID0gY29udmVydFRvQm9vbGVhbihpbmRldGVybWluYXRlKTtcbiAgfVxuXG4gIGdldCBpbmRldGVybWluYXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pbmRldGVybWluYXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSW5mb3JtYcOnw6NvIGFkaWNpb25hbCBxdWUgYXBhcmVjZXLDoSBhYmFpeG8gZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIGFvIGxhZG8gZGlyZWl0by5cbiAgICovXG4gIEBJbnB1dCgncC1pbmZvJykgaW5mbz86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiDDjWNvbmUgcXVlIGFwYXJlY2Vyw6EgYW8gbGFkbyBkbyB0ZXh0byBkYSBwcm9wcmllZGFkZSBgcC1pbmZvYC5cbiAgICpcbiAgICogRXhlbXBsbzogYHBvLWljb24tb2tgLlxuICAgKi9cbiAgQElucHV0KCdwLWluZm8taWNvbicpIGluZm9JY29uPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFN0YXR1cyBkYSBiYXJyYSBkZSBwcm9ncmVzc28gcXVlIGluZGljYXLDoSB2aXN1YWxtZW50ZSBhbyB1c3XDoXJpb1xuICAgKiBvIGFuZGFtZW50bywgcG9yIGV4ZW1wbG8sIHNlIGEgbWVzbWEgZm9pIGNvbmNsdcOtZGEgY29tIHN1Y2Vzc28uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBQb1Byb2dyZXNzU3RhdHVzLkRlZmF1bHRgXG4gICAqL1xuICBASW5wdXQoJ3Atc3RhdHVzJykgc3RhdHVzOiBQb1Byb2dyZXNzU3RhdHVzID0gUG9Qcm9ncmVzc1N0YXR1cy5EZWZhdWx0O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRleHRvIHByaW5jaXBhbCBxdWUgYXBhcmVjZXLDoSBhYmFpeG8gZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIG5vIGxhZG8gZXNxdWVyZG8uXG4gICAqL1xuICBASW5wdXQoJ3AtdGV4dCcpIHRleHQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVmFsb3IgcXVlIHJlcHJlc2VudGFyw6EgbyBwcm9ncmVzc28uXG4gICAqXG4gICAqID4gT3MgdmFsb3JlcyBhY2VpdG9zIHPDo28gbsO6bWVyb3MgaW50ZWlyb3MgZGUgYDBgIMOgIGAxMDBgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgMGBcbiAgICovXG4gIEBJbnB1dCgncC12YWx1ZScpIHNldCB2YWx1ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgaW50ZWdlclZhbHVlID0gY29udmVydFRvSW50KHZhbHVlLCBwb1Byb2dyZXNzTWluVmFsdWUpO1xuICAgIGNvbnN0IGlzUHJvZ3Jlc3NSYW5nZVZhbHVlID0gdGhpcy5pc1Byb2dyZXNzUmFuZ2VWYWx1ZShpbnRlZ2VyVmFsdWUpO1xuXG4gICAgdGhpcy5fdmFsdWUgPSBpc1Byb2dyZXNzUmFuZ2VWYWx1ZSA/IGludGVnZXJWYWx1ZSA6IHBvUHJvZ3Jlc3NNaW5WYWx1ZTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBFdmVudG8gcXVlIHNlcsOhIGRpc3BhcmFkbyBhbyBjbGljYXIgbm8gw61jb25lIGRlIGNhbmNlbGFtZW50byAoXCJ4XCIpIG5hIHBhcnRlIGluZmVyaW9yIGRhIGJhcnJhIGRlIHByb2dyZXNzby5cbiAgICpcbiAgICogQW8gc2VyIGRpc3BhcmFkbywgYSBmdW7Dp8OjbyByZWNlYmVyw6EgY29tbyBwYXLDom1ldHJvIG8gc3RhdHVzIGF0dWFsIGRhIGJhcnJhIGRlIHByb2dyZXNzby5cbiAgICpcbiAgICogPiBTZSBuZW5odW1hIGZ1bsOnw6NvIGZvciBwYXNzYWRhIHBhcmEgbyBldmVudG8gb3UgYSBiYXJyYSBkZSBwcm9ncmVzc28gZXN0aXZlciBjb20gbyBzdGF0dXMgYFBvUHJvZ3Jlc3NTdGF0dXMuU3VjY2Vzc2AsXG4gICAqIG8gw61jb25lIGRlIGNhbmNlbGFtZW50byBuw6NvIHNlcsOhIGV4aWJpZG8uXG4gICAqL1xuICBAT3V0cHV0KCdwLWNhbmNlbCcpIGNhbmNlbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRXZlbnRvIHF1ZSBzZXLDoSBkaXNwYXJhZG8gYW8gY2xpY2FyIG5vIMOtY29uZSBkZSB0ZW50YXIgbm92YW1lbnRlIG5hIHBhcnRlIGluZmVyaW9yIGRhIGJhcnJhIGRlIHByb2dyZXNzby5cbiAgICpcbiAgICogPiBvIMOtY29uZSBzZXLDoSBleGliaWRvIGFwZW5hcyBzZSBpbmZvcm1hciB1bWEgZnVuw6fDo28gbmVzdGUgZXZlbnRvIGUgbyBzdGF0dXMgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIGZvclxuICAgKiBgUG9Qcm9ncmVzc1N0YXR1cy5FcnJvcmAuXG4gICAqL1xuICBAT3V0cHV0KCdwLXJldHJ5JykgcmV0cnk6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByaXZhdGUgaXNQcm9ncmVzc1JhbmdlVmFsdWUodmFsdWU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2YWx1ZSA+PSBwb1Byb2dyZXNzTWluVmFsdWUgJiYgdmFsdWUgPD0gcG9Qcm9ncmVzc01heFZhbHVlO1xuICB9XG5cbn1cbiJdfQ==