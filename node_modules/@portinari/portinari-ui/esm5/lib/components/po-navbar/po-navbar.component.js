import * as tslib_1 from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, Renderer2, ViewChild } from '@angular/core';
import { animate, AnimationBuilder, AnimationFactory, AnimationPlayer, keyframes, style } from '@angular/animations';
import { PoNavbarBaseComponent } from './po-navbar-base.component';
import { PoNavbarItemsComponent } from './po-navbar-items/po-navbar-items.component';
var poNavbarNavigationWidth = 88;
var poNavbarMenuMedia = 768;
var poNavbarMatchMedia = "(max-width: " + poNavbarMenuMedia + "px)";
var poNavbarTiming = '250ms ease';
/**
 * @docsExtends PoNavbarBaseComponent
 */
var PoNavbarComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoNavbarComponent, _super);
    function PoNavbarComponent(renderer, builder, changeDetector) {
        var _this = _super.call(this) || this;
        _this.renderer = renderer;
        _this.builder = builder;
        _this.changeDetector = changeDetector;
        _this.showItemsNavigation = false;
        _this.offset = 0;
        _this.onMediaQueryChange = function (changed) {
            _this.changeNavbarMenuItems(changed.matches, _this.menuItems, _this.items, _this.literals.navbarLinks);
        };
        _this.windowResizeListener = _this.renderer.listen(window, 'resize', _this.displayItemsNavigation.bind(_this));
        return _this;
    }
    Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableLeft", {
        get: function () {
            return this.offset === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoNavbarComponent.prototype, "navbarItemNavigationDisableRight", {
        get: function () {
            return this.disableRight && this.offset !== 0;
        },
        enumerable: true,
        configurable: true
    });
    PoNavbarComponent.prototype.ngAfterViewInit = function () {
        this.displayItemsNavigation();
        if (this.menu) {
            this.initNavbarMenu();
        }
    };
    PoNavbarComponent.prototype.ngOnDestroy = function () {
        if (this.mediaQuery) {
            this.mediaQuery.removeListener(this.onMediaQueryChange);
        }
    };
    PoNavbarComponent.prototype.navigateItems = function (orientation) {
        orientation === 'left' ? this.navigateLeft() : this.navigateRight();
        this.animate(this.offset);
    };
    PoNavbarComponent.prototype.allNavbarItemsWidth = function () {
        return this.navbarItems.allNavbarItems.reduce(function (previous, current) { return previous + current.nativeElement.offsetWidth; }, 0);
    };
    PoNavbarComponent.prototype.animate = function (offset) {
        var animation = this.buildTransitionAnimation(offset);
        this.player = animation.create(this.navbarItems.navbarItemsContainer.nativeElement);
        this.player.play();
    };
    PoNavbarComponent.prototype.buildTransitionAnimation = function (offset) {
        return this.builder.build([
            animate(poNavbarTiming, keyframes([style({ transform: "translateX(" + -offset + "px)" })]))
        ]);
    };
    PoNavbarComponent.prototype.changeNavbarMenuItems = function (isCollapsedMedia, menuItems, navbarItems, label) {
        if (isCollapsedMedia) {
            var subItems = [{ label: label, subItems: navbarItems }];
            this.menu.menus = tslib_1.__spread(subItems, menuItems);
        }
        else {
            this.menu.menus = menuItems;
        }
    };
    PoNavbarComponent.prototype.calculateLeftNavigation = function () {
        var _this = this;
        var calculatedOffset;
        this.navbarItems.allNavbarItems.some(function (navbarItem) {
            var navbarItemOffset = navbarItem.nativeElement.offsetLeft;
            var navbarItemWidth = navbarItem.nativeElement.offsetWidth;
            if (navbarItemOffset >= _this.offset) {
                calculatedOffset = navbarItemOffset - (_this.navbarItemsWidth() - navbarItemWidth);
                return true;
            }
        });
        return calculatedOffset;
    };
    PoNavbarComponent.prototype.calculateRightNavigation = function (itemBreakPoint) {
        var calculatedOffset;
        this.navbarItems.allNavbarItems.some(function (navbarItem) {
            var offsetLeft = navbarItem.nativeElement.offsetLeft;
            var finalPosition = navbarItem.nativeElement.offsetWidth + offsetLeft;
            if (itemBreakPoint < finalPosition) {
                calculatedOffset = offsetLeft;
                return true;
            }
        });
        return calculatedOffset;
    };
    PoNavbarComponent.prototype.displayItemsNavigation = function () {
        this.showItemsNavigation = this.navbarItemsWidth() < this.allNavbarItemsWidth() + poNavbarNavigationWidth;
        this.changeDetector.detectChanges();
        if (this.offset !== 0) {
            this.setOffsetToZero();
            this.animate(this.offset);
        }
    };
    PoNavbarComponent.prototype.initNavbarMenu = function () {
        this.mediaQuery = window.matchMedia(poNavbarMatchMedia);
        this.menuItems = this.menu.menus;
        if (window.innerWidth < poNavbarMenuMedia) {
            this.changeNavbarMenuItems(true, this.menuItems, this.items, this.literals.navbarLinks);
        }
        this.validateMenuLogo();
        this.mediaQuery.addListener(this.onMediaQueryChange);
    };
    PoNavbarComponent.prototype.navbarItemsWidth = function () {
        return this.navbarItemsElement.nativeElement.offsetWidth;
    };
    PoNavbarComponent.prototype.navigateLeft = function () {
        this.disableRight = false;
        this.offset = this.calculateLeftNavigation();
        if (this.offset < 0) {
            this.setOffsetToZero();
        }
    };
    PoNavbarComponent.prototype.navigateRight = function () {
        var maxAllowedOffset = this.allNavbarItemsWidth() - this.navbarItemsWidth();
        var itemBreakPoint = this.offset + this.navbarItemsWidth();
        this.offset = this.calculateRightNavigation(itemBreakPoint);
        this.validateMaxOffset(maxAllowedOffset);
    };
    PoNavbarComponent.prototype.setOffsetToZero = function () {
        this.offset = 0;
    };
    PoNavbarComponent.prototype.validateMaxOffset = function (maxAllowedOffset) {
        if (this.offset >= maxAllowedOffset) {
            this.offset = maxAllowedOffset;
            this.disableRight = true;
        }
    };
    PoNavbarComponent.prototype.validateMenuLogo = function () {
        if (this.menu.logo && this.logo) {
            this.menu.logo = undefined;
            this.menu.changeDetector.detectChanges();
        }
    };
    PoNavbarComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: AnimationBuilder },
        { type: ChangeDetectorRef }
    ]; };
    tslib_1.__decorate([
        ViewChild(PoNavbarItemsComponent, { read: ElementRef, static: true }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoNavbarComponent.prototype, "navbarItemsElement", void 0);
    tslib_1.__decorate([
        ViewChild(PoNavbarItemsComponent, { static: true }),
        tslib_1.__metadata("design:type", PoNavbarItemsComponent)
    ], PoNavbarComponent.prototype, "navbarItems", void 0);
    PoNavbarComponent = tslib_1.__decorate([
        Component({
            selector: 'po-navbar',
            template: "<header class=\"po-navbar\"\n  [ngClass]=\"{'po-navbar-shadow' : shadow}\">\n\n  <po-navbar-logo\n    class=\"po-navbar-logo\"\n    [ngClass]=\"{'po-navbar-logo-menu' : !!menu, 'po-navbar-no-logo' : !logo }\"\n    [p-logo]=\"logo\">\n  </po-navbar-logo>\n\n  <po-navbar-items\n    class=\"po-navbar-items\"\n    [p-items]=\"items\">\n  </po-navbar-items>\n\n  <po-navbar-item-navigation *ngIf=\"showItemsNavigation\"\n    class=\"po-navbar-item-navigation\"\n    [p-disable-left]=\"navbarItemNavigationDisableLeft\"\n    [p-disable-right]=\"navbarItemNavigationDisableRight\"\n    (p-click)=\"navigateItems($event)\">\n  </po-navbar-item-navigation>\n\n  <po-navbar-actions\n    class=\"po-navbar-actions\"\n    [p-icon-actions]=\"iconActions\">\n  </po-navbar-actions>\n\n</header>\n\n<po-menu *ngIf=\"!menu\"\n  [p-menus]=\"items\">\n</po-menu>"
        }),
        tslib_1.__metadata("design:paramtypes", [Renderer2, AnimationBuilder, ChangeDetectorRef])
    ], PoNavbarComponent);
    return PoNavbarComponent;
}(PoNavbarBaseComponent));
export { PoNavbarComponent };
//# sourceMappingURL=data:application/json;base64,