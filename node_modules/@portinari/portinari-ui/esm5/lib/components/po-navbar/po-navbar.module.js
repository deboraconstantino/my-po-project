import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PoMenuModule } from '../po-menu/po-menu.module';
import { PoNavbarActionsModule } from './po-navbar-actions/po-navbar-actions.module';
import { PoNavbarComponent } from './po-navbar.component';
import { PoNavbarItemsModule } from './po-navbar-items/po-navbar-items.module';
import { PoNavbarLogoComponent } from './po-navbar-logo/po-navbar-logo.component';
import { PoNavbarItemNavigationModule } from './po-navbar-item-navigation/po-navbar-item-navigation.module';
/**
 * @description
 *
 * Módulo do componente `po-navbar`.
 *
 * > Para o correto funcionamento do componente `po-navbar`, deve ser importado o módulo `BrowserAnimationsModule` no
 * > módulo principal da sua aplicação.
 *
 * Módulo da aplicação:
 * ```
 * import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 * import { PoModule } from '@portinari/portinari-ui';
 * ...
 *
 * @NgModule({
 *   imports: [
 *     BrowserModule,
 *     BrowserAnimationsModule,
 *     ...
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent,
 *     ...
 *   ],
 *   providers: [],
 *   bootstrap: [AppComponent]
 * })
 * export class AppModule { }
 * ```
 */
var PoNavbarModule = /** @class */ (function () {
    function PoNavbarModule() {
    }
    PoNavbarModule = tslib_1.__decorate([
        NgModule({
            imports: [
                CommonModule,
                PoNavbarActionsModule,
                PoNavbarItemsModule,
                PoNavbarItemNavigationModule,
                PoMenuModule
            ],
            declarations: [
                PoNavbarComponent,
                PoNavbarLogoComponent
            ],
            exports: [
                PoNavbarComponent
            ]
        })
    ], PoNavbarModule);
    return PoNavbarModule;
}());
export { PoNavbarModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tbmF2YmFyL3BvLW5hdmJhci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUNyRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMvRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw4REFBOEQsQ0FBQztBQUU1Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOEJHO0FBaUJIO0lBQUE7SUFBOEIsQ0FBQztJQUFsQixjQUFjO1FBaEIxQixRQUFRLENBQUM7WUFDUixPQUFPLEVBQUU7Z0JBQ1AsWUFBWTtnQkFDWixxQkFBcUI7Z0JBQ3JCLG1CQUFtQjtnQkFDbkIsNEJBQTRCO2dCQUM1QixZQUFZO2FBQ2I7WUFDRCxZQUFZLEVBQUU7Z0JBQ1osaUJBQWlCO2dCQUNqQixxQkFBcUI7YUFDdEI7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsaUJBQWlCO2FBQ2xCO1NBQ0YsQ0FBQztPQUNXLGNBQWMsQ0FBSTtJQUFELHFCQUFDO0NBQUEsQUFBL0IsSUFBK0I7U0FBbEIsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBQb01lbnVNb2R1bGUgfSBmcm9tICcuLi9wby1tZW51L3BvLW1lbnUubW9kdWxlJztcbmltcG9ydCB7IFBvTmF2YmFyQWN0aW9uc01vZHVsZSB9IGZyb20gJy4vcG8tbmF2YmFyLWFjdGlvbnMvcG8tbmF2YmFyLWFjdGlvbnMubW9kdWxlJztcbmltcG9ydCB7IFBvTmF2YmFyQ29tcG9uZW50IH0gZnJvbSAnLi9wby1uYXZiYXIuY29tcG9uZW50JztcbmltcG9ydCB7IFBvTmF2YmFySXRlbXNNb2R1bGUgfSBmcm9tICcuL3BvLW5hdmJhci1pdGVtcy9wby1uYXZiYXItaXRlbXMubW9kdWxlJztcbmltcG9ydCB7IFBvTmF2YmFyTG9nb0NvbXBvbmVudCB9IGZyb20gJy4vcG8tbmF2YmFyLWxvZ28vcG8tbmF2YmFyLWxvZ28uY29tcG9uZW50JztcbmltcG9ydCB7IFBvTmF2YmFySXRlbU5hdmlnYXRpb25Nb2R1bGUgfSBmcm9tICcuL3BvLW5hdmJhci1pdGVtLW5hdmlnYXRpb24vcG8tbmF2YmFyLWl0ZW0tbmF2aWdhdGlvbi5tb2R1bGUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE3Ds2R1bG8gZG8gY29tcG9uZW50ZSBgcG8tbmF2YmFyYC5cbiAqXG4gKiA+IFBhcmEgbyBjb3JyZXRvIGZ1bmNpb25hbWVudG8gZG8gY29tcG9uZW50ZSBgcG8tbmF2YmFyYCwgZGV2ZSBzZXIgaW1wb3J0YWRvIG8gbcOzZHVsbyBgQnJvd3NlckFuaW1hdGlvbnNNb2R1bGVgIG5vXG4gKiA+IG3Ds2R1bG8gcHJpbmNpcGFsIGRhIHN1YSBhcGxpY2HDp8Ojby5cbiAqXG4gKiBNw7NkdWxvIGRhIGFwbGljYcOnw6NvOlxuICogYGBgXG4gKiBpbXBvcnQgeyBCcm93c2VyQW5pbWF0aW9uc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXIvYW5pbWF0aW9ucyc7XG4gKiBpbXBvcnQgeyBQb01vZHVsZSB9IGZyb20gJ0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpJztcbiAqIC4uLlxuICpcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICBCcm93c2VyTW9kdWxlLFxuICogICAgIEJyb3dzZXJBbmltYXRpb25zTW9kdWxlLFxuICogICAgIC4uLlxuICogICAgIFBvTW9kdWxlXG4gKiAgIF0sXG4gKiAgIGRlY2xhcmF0aW9uczogW1xuICogICAgIEFwcENvbXBvbmVudCxcbiAqICAgICAuLi5cbiAqICAgXSxcbiAqICAgcHJvdmlkZXJzOiBbXSxcbiAqICAgYm9vdHN0cmFwOiBbQXBwQ29tcG9uZW50XVxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUgeyB9XG4gKiBgYGBcbiAqL1xuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBQb05hdmJhckFjdGlvbnNNb2R1bGUsXG4gICAgUG9OYXZiYXJJdGVtc01vZHVsZSxcbiAgICBQb05hdmJhckl0ZW1OYXZpZ2F0aW9uTW9kdWxlLFxuICAgIFBvTWVudU1vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBQb05hdmJhckNvbXBvbmVudCxcbiAgICBQb05hdmJhckxvZ29Db21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFBvTmF2YmFyQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUG9OYXZiYXJNb2R1bGUgeyB9XG4iXX0=