import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { poLocaleDefault } from './../../../utils/util';
import { PoPageDefaultBaseComponent } from '../po-page-default/po-page-default-base.component';
export var poPageListLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
var PoPageListBaseComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoPageListBaseComponent, _super);
    function PoPageListBaseComponent(languageService) {
        var _this = _super.call(this) || this;
        _this.language = languageService.getShortLanguage();
        return _this;
    }
    Object.defineProperty(PoPageListBaseComponent.prototype, "disclaimerGroup", {
        get: function () {
            return this._disclaimerGroup;
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
         */
        set: function (value) {
            if (!value) {
                value = {};
            }
            this._disclaimerGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageListBaseComponent.prototype, "literals", {
        get: function () {
            return this._literals || poPageListLiteralsDefault[this.language];
        },
        /**
         * @optional
         *
         * @description
         *
         * Objeto com as literais usadas no `po-page-list`.
         *
         * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
         *
         * ```
         *  const customLiterals: PoPageListLiterals = {
         *    otherActions: 'Mais ações'
         *  };
         * ```
         *
         * Ou passando apenas as literais que deseja customizar:
         *
         * ```
         *  const customLiterals: PoPageListLiterals = {
         *    otherActions: 'Ações da página'
         *  };
         * ```
         *
         * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
         *
         * ```
         * <po-page-list
         *   [p-literals]="customLiterals">
         * </po-page-list>
         * ```
         *
         * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
         */
        set: function (value) {
            if (value instanceof Object && !(value instanceof Array)) {
                this._literals = tslib_1.__assign({}, poPageListLiteralsDefault[poLocaleDefault], poPageListLiteralsDefault[this.language], value);
            }
            else {
                this._literals = poPageListLiteralsDefault[this.language];
            }
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input('p-breadcrumb'),
        tslib_1.__metadata("design:type", Object)
    ], PoPageListBaseComponent.prototype, "breadcrumb", void 0);
    tslib_1.__decorate([
        Input('p-disclaimer-group'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoPageListBaseComponent.prototype, "disclaimerGroup", null);
    tslib_1.__decorate([
        Input('p-filter'),
        tslib_1.__metadata("design:type", Object)
    ], PoPageListBaseComponent.prototype, "filter", void 0);
    tslib_1.__decorate([
        Input('p-literals'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoPageListBaseComponent.prototype, "literals", null);
    return PoPageListBaseComponent;
}(PoPageDefaultBaseComponent));
export { PoPageListBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1saXN0LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlL3BvLXBhZ2UtbGlzdC9wby1wYWdlLWxpc3QtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBS3hELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBSS9GLE1BQU0sQ0FBQyxJQUFNLHlCQUF5QixHQUFHO0lBQ3ZDLEVBQUUsRUFBdUI7UUFDdkIsWUFBWSxFQUFFLGVBQWU7S0FDOUI7SUFDRCxFQUFFLEVBQXVCO1FBQ3ZCLFlBQVksRUFBRSxnQkFBZ0I7S0FDL0I7SUFDRCxFQUFFLEVBQXVCO1FBQ3ZCLFlBQVksRUFBRSxjQUFjO0tBQzdCO0lBQ0QsRUFBRSxFQUF1QjtRQUN2QixZQUFZLEVBQUUsaUJBQWlCO0tBQ2hDO0NBQ0YsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7R0FZRztBQUNIO0lBQXNELG1EQUEwQjtJQTRGOUUsaUNBQVksZUFBa0M7UUFBOUMsWUFDRSxpQkFBTyxTQUdSO1FBREMsS0FBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7SUFDckQsQ0FBQztJQXhFNEIsc0JBQUksb0RBQWU7YUFRaEQ7WUFDRSxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUMvQixDQUFDO1FBakJEOzs7Ozs7V0FNRzthQUMwQixVQUFvQixLQUF3QjtZQUN2RSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNWLEtBQUssR0FBUyxFQUFFLENBQUM7YUFDbEI7WUFFRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLENBQUM7OztPQUFBO0lBOENvQixzQkFBSSw2Q0FBUTthQVlqQztZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDcEUsQ0FBQztRQS9DRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FnQ0c7YUFDa0IsVUFBYSxLQUF5QjtZQUN6RCxJQUFJLEtBQUssWUFBWSxNQUFNLElBQUksQ0FBQyxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUMsRUFBRTtnQkFDeEQsSUFBSSxDQUFDLFNBQVMsd0JBQ1QseUJBQXlCLENBQUMsZUFBZSxDQUFDLEVBQzFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFDeEMsS0FBSyxDQUNULENBQUM7YUFDSDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsU0FBUyxHQUFHLHlCQUF5QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMzRDtRQUNILENBQUM7OztPQUFBO0lBdkVzQjtRQUF0QixLQUFLLENBQUMsY0FBYyxDQUFDOzsrREFBMkI7SUFTcEI7UUFBNUIsS0FBSyxDQUFDLG9CQUFvQixDQUFDOzs7a0VBTTNCO0lBV2tCO1FBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7OzJEQUFzQjtJQW1DbkI7UUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7OzJEQVVuQjtJQVlILDhCQUFDO0NBQUEsQUFsR0QsQ0FBc0QsMEJBQTBCLEdBa0cvRTtTQWxHcUIsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgcG9Mb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi8uLi8uLi8uLi91dGlscy91dGlsJztcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcblxuaW1wb3J0IHsgUG9CcmVhZGNydW1iIH0gZnJvbSAnLi4vLi4vcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0Rpc2NsYWltZXJHcm91cCB9IGZyb20gJy4uLy4uL3BvLWRpc2NsYWltZXItZ3JvdXAvcG8tZGlzY2xhaW1lci1ncm91cC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlRGVmYXVsdEJhc2VDb21wb25lbnQgfSBmcm9tICcuLi9wby1wYWdlLWRlZmF1bHQvcG8tcGFnZS1kZWZhdWx0LWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBvUGFnZUZpbHRlciB9IGZyb20gJy4vLi4vcG8tcGFnZS1maWx0ZXIuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZUxpc3RMaXRlcmFscyB9IGZyb20gJy4vcG8tcGFnZS1saXN0LWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjb25zdCBwb1BhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0ID0ge1xuICBlbjogPFBvUGFnZUxpc3RMaXRlcmFscz4ge1xuICAgIG90aGVyQWN0aW9uczogJ090aGVyIGFjdGlvbnMnXG4gIH0sXG4gIGVzOiA8UG9QYWdlTGlzdExpdGVyYWxzPiB7XG4gICAgb3RoZXJBY3Rpb25zOiAnT3RyYXMgYWNjaW9uZXMnXG4gIH0sXG4gIHB0OiA8UG9QYWdlTGlzdExpdGVyYWxzPiB7XG4gICAgb3RoZXJBY3Rpb25zOiAnT3V0cmFzIGHDp8O1ZXMnXG4gIH0sXG4gIHJ1OiA8UG9QYWdlTGlzdExpdGVyYWxzPiB7XG4gICAgb3RoZXJBY3Rpb25zOiAn0JTRgNGD0LPQuNC1INC00LXQudGB0YLQstC40Y8nXG4gIH1cbn07XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1wYWdlLWxpc3RgIMOpIHV0aWxpemFkbyBjb21vIG8gY29udGFpbmVyIHByaW5jaXBhbCBwYXJhIGFzIHRlbGFzIGRlIGxpc3RhZ2VtIGRlIGRhZG9zLFxuICogcG9kZW5kbyBzZXIgYXByZXNlbnRhZG8gY29tbyBsaXN0YSBvdSB0YWJlbGEuXG4gKlxuICogRXN0ZSBjb21wb25lbnRlIHBvc3NpYmlsaXRhIHJlYWxpemFyIGZpbHRybyBkb3MgZGFkb3MsIG5vIHF1YWwgcGVybWl0ZSBxdWUgc2VqYSBhdHJpYnVpZG8gdW1hIGZ1bsOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgbm8gbW9tZW50b1xuICogZGEgZmlsdHJhZ2VtLiBFc3RlIGNvbXBvcnRhbWVudG8gcG9kZSBzZXIgYWNpb25hZG8gdGFudG8gYW8gKmNsaWNrKiBkbyDDrWNvbmUgW3BvLWljb24tc2VhcmNoXSgvZ3VpZGVzL2ljb25zKVxuICogcXVhbnRvIGFvIHByZXNzaW9uYXIgZGEgdGVjbGEgKkVOVEVSKiBxdWFuZG8gbyBmb2NvIGVzdGl2ZXIgbm8gY2FtcG8gZGUgcGVzcXVpc2EuXG4gKlxuICogUGFyYSBmYWNpbGl0YXIgYSBtYW5pcHVsYcOnw6NvIGUgdmlzdWFsaXphw6fDo28gZG9zIGZpbHRyb3MgYXBsaWNhZG9zLCDDqSBwb3Nzw612ZWwgdGFtYsOpbSB1dGlsaXphciBvIGNvbXBvbmVudGVcbiAqIFtgcG8tZGlzY2xhaW1lci1ncm91cGBdKC9kb2N1bWVudGF0aW9uL3BvLWRpc2NsYWltZXItZ3JvdXApLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9QYWdlTGlzdEJhc2VDb21wb25lbnQgZXh0ZW5kcyBQb1BhZ2VEZWZhdWx0QmFzZUNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfZGlzY2xhaW1lckdyb3VwPzogUG9EaXNjbGFpbWVyR3JvdXA7XG4gIHByaXZhdGUgX2xpdGVyYWxzOiBQb1BhZ2VMaXN0TGl0ZXJhbHM7XG5cbiAgcHJvdGVjdGVkIGxhbmd1YWdlOiBzdHJpbmc7XG4gIHByb3RlY3RlZCByZXNpemVMaXN0ZW5lcjogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgUG9CcmVhZGNydW1iYC5cbiAgICovXG4gIEBJbnB1dCgncC1icmVhZGNydW1iJykgYnJlYWRjcnVtYj86IFBvQnJlYWRjcnVtYjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgUG9EaXNjbGFpbWVyR3JvdXBgLlxuICAgKi9cbiAgQElucHV0KCdwLWRpc2NsYWltZXItZ3JvdXAnKSBzZXQgZGlzY2xhaW1lckdyb3VwKHZhbHVlOiBQb0Rpc2NsYWltZXJHcm91cCkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgIHZhbHVlID0gPGFueT4ge307XG4gICAgfVxuXG4gICAgdGhpcy5fZGlzY2xhaW1lckdyb3VwID0gdmFsdWU7XG4gIH1cblxuICBnZXQgZGlzY2xhaW1lckdyb3VwKCk6IFBvRGlzY2xhaW1lckdyb3VwIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzY2xhaW1lckdyb3VwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gcXVlIGltcGxlbWVudGEgYXMgcHJvcHJpZWRhZGVzIGRhIGludGVyZmFjZSBgUG9QYWdlRmlsdGVyYC5cbiAgICovXG4gIEBJbnB1dCgncC1maWx0ZXInKSBmaWx0ZXI6IFBvUGFnZUZpbHRlcjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmpldG8gY29tIGFzIGxpdGVyYWlzIHVzYWRhcyBubyBgcG8tcGFnZS1saXN0YC5cbiAgICpcbiAgICogRXhpc3RlbSBkdWFzIG1hbmVpcmFzIGRlIGN1c3RvbWl6YXIgbyBjb21wb25lbnRlLCBwYXNzYW5kbyB1bSBvYmpldG8gY29tIHRvZGFzIGFzIGxpdGVyYWlzIGRpc3BvbsOtdmVpczpcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9QYWdlTGlzdExpdGVyYWxzID0ge1xuICAgKiAgICBvdGhlckFjdGlvbnM6ICdNYWlzIGHDp8O1ZXMnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogT3UgcGFzc2FuZG8gYXBlbmFzIGFzIGxpdGVyYWlzIHF1ZSBkZXNlamEgY3VzdG9taXphcjpcbiAgICpcbiAgICogYGBgXG4gICAqICBjb25zdCBjdXN0b21MaXRlcmFsczogUG9QYWdlTGlzdExpdGVyYWxzID0ge1xuICAgKiAgICBvdGhlckFjdGlvbnM6ICdBw6fDtWVzIGRhIHDDoWdpbmEnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDxwby1wYWdlLWxpc3RcbiAgICogICBbcC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxuICAgKiA8L3BvLXBhZ2UtbGlzdD5cbiAgICogYGBgXG4gICAqXG4gICAqID4gTyB2YWxvciBwYWRyw6NvIHNlcsOhIHRyYWR1emlkbyBkZSBhY29yZG8gY29tIG8gaWRpb21hIGNvbmZpZ3VyYWRvIG5vIFtgUG9JMThuU2VydmljZWBdKC9kb2N1bWVudGF0aW9uL3BvLWkxOG4pIG91ICpicm93c2VyKi5cbiAgICovXG4gIEBJbnB1dCgncC1saXRlcmFscycpIHNldCBsaXRlcmFscyh2YWx1ZTogUG9QYWdlTGlzdExpdGVyYWxzKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICEodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0ge1xuICAgICAgICAuLi5wb1BhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0W3BvTG9jYWxlRGVmYXVsdF0sXG4gICAgICAgIC4uLnBvUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV0sXG4gICAgICAgIC4uLnZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHBvUGFnZUxpc3RMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XG4gICAgfVxuICB9XG5cbiAgZ2V0IGxpdGVyYWxzKCkge1xuICAgIHJldHVybiB0aGlzLl9saXRlcmFscyB8fCBwb1BhZ2VMaXN0TGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdO1xuICB9XG5cbiAgY29uc3RydWN0b3IobGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcbiAgfVxuXG59XG4iXX0=