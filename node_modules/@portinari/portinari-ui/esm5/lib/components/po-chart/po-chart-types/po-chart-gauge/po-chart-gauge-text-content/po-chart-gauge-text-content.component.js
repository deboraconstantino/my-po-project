import * as tslib_1 from "tslib";
import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { convertNumberToDecimal } from '../../../../../utils/util';
import { poChartGaugeSerieWidth } from '../../po-chart-circular/po-chart-circular.constant';
var PoChartGaugeTextContentComponent = /** @class */ (function () {
    function PoChartGaugeTextContentComponent(changeDetection) {
        this.changeDetection = changeDetection;
    }
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "gaugeWidth", {
        get: function () {
            return this._gaugeWidth;
        },
        set: function (value) {
            this._gaugeWidth = value;
            this.checkTextDescriptionSize();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "serie", {
        get: function () {
            return this._serie;
        },
        set: function (serie) {
            if (serie) {
                this.serieValueConverted = this.convertValueInPercentFormat(serie.value);
                this._serie = tslib_1.__assign({}, serie);
            }
            else {
                this._serie = undefined;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "hasSerieDescription", {
        get: function () {
            return this.serie && this.serie.description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "hasSerieValue", {
        get: function () {
            return this.serie && this.serie.value >= 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoChartGaugeTextContentComponent.prototype, "maxDescriptionWidth", {
        get: function () {
            // Diferença contemplando a largura do path base e padding interno.
            var subtractionArea = (this.gaugeWidth * poChartGaugeSerieWidth * 2) * 2;
            var descriptionWidth = this.gaugeWidth - subtractionArea;
            return { 'max-width': descriptionWidth + "px" };
        },
        enumerable: true,
        configurable: true
    });
    PoChartGaugeTextContentComponent.prototype.ngAfterViewInit = function () {
        this.checkTextDescriptionSize();
    };
    PoChartGaugeTextContentComponent.prototype.checkTextDescriptionSize = function () {
        var _this = this;
        if (this.descriptionElement) {
            // tooltip necessário para contornar comportamento inesperado do tooltip.
            setTimeout(function () {
                _this.tooltip = _this.isEllipsisActive();
            });
            this.changeDetection.detectChanges();
        }
    };
    PoChartGaugeTextContentComponent.prototype.convertValueInPercentFormat = function (value) {
        var decimalValue = String(convertNumberToDecimal(value, 1)).replace('.', ',');
        return decimalValue + "%";
    };
    PoChartGaugeTextContentComponent.prototype.isEllipsisActive = function () {
        var isExceededWidth = this.descriptionElement.nativeElement.offsetWidth < this.descriptionElement.nativeElement.scrollWidth;
        return isExceededWidth ? this.serie.description : undefined;
    };
    PoChartGaugeTextContentComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    tslib_1.__decorate([
        Input('p-gauge-width'),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], PoChartGaugeTextContentComponent.prototype, "gaugeWidth", null);
    tslib_1.__decorate([
        Input('p-serie'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoChartGaugeTextContentComponent.prototype, "serie", null);
    tslib_1.__decorate([
        ViewChild('description', { static: false, read: ElementRef }),
        tslib_1.__metadata("design:type", ElementRef)
    ], PoChartGaugeTextContentComponent.prototype, "descriptionElement", void 0);
    PoChartGaugeTextContentComponent = tslib_1.__decorate([
        Component({
            selector: 'po-chart-gauge-text-content',
            template: "<div *ngIf=\"hasSerieValue\" class=\"po-chart-gauge-text-content\" tabindex=\"0\" [ngStyle]=\"maxDescriptionWidth\">\n  <p class=\"po-chart-gauge-text-value\">{{ serieValueConverted }}</p>\n  <p *ngIf=\"hasSerieDescription\"\n    #description\n    class=\"po-chart-gauge-text-description\"\n    [p-tooltip]=\"tooltip\">{{ serie?.description }}</p>\n</div>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef])
    ], PoChartGaugeTextContentComponent);
    return PoChartGaugeTextContentComponent;
}());
export { PoChartGaugeTextContentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tY2hhcnQvcG8tY2hhcnQtdHlwZXMvcG8tY2hhcnQtZ2F1Z2UvcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50L3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRW5JLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR25FLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBTzVGO0lBaUNFLDBDQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7SUFBRyxDQUFDO0lBekJsQyxzQkFBSSx3REFBVTthQU10QztZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQixDQUFDO2FBUnVCLFVBQWUsS0FBYTtZQUNsRCxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUV6QixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztRQUNsQyxDQUFDOzs7T0FBQTtJQU1pQixzQkFBSSxtREFBSzthQVMzQjtZQUNFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO2FBWGlCLFVBQVUsS0FBd0I7WUFDbEQsSUFBSSxLQUFLLEVBQUU7Z0JBQ1QsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3pFLElBQUksQ0FBQyxNQUFNLHdCQUFRLEtBQUssQ0FBRSxDQUFDO2FBQzVCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQzs7O09BQUE7SUFVRCxzQkFBSSxpRUFBbUI7YUFBdkI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDOUMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwyREFBYTthQUFqQjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDN0MsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxpRUFBbUI7YUFBdkI7WUFDRSxtRUFBbUU7WUFDbkUsSUFBTSxlQUFlLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLHNCQUFzQixHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzRSxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsZUFBZSxDQUFDO1lBRTNELE9BQU8sRUFBRSxXQUFXLEVBQUssZ0JBQWdCLE9BQUksRUFBRSxDQUFDO1FBQ2xELENBQUM7OztPQUFBO0lBRUQsMERBQWUsR0FBZjtRQUNFLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTyxtRUFBd0IsR0FBaEM7UUFBQSxpQkFRQztRQVBDLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQzNCLHlFQUF5RTtZQUN6RSxVQUFVLENBQUM7Z0JBQ1QsS0FBSSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRU8sc0VBQTJCLEdBQW5DLFVBQW9DLEtBQWE7UUFDL0MsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDaEYsT0FBVSxZQUFZLE1BQUcsQ0FBQztJQUM1QixDQUFDO0lBRU8sMkRBQWdCLEdBQXhCO1FBQ0UsSUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFFOUgsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDOUQsQ0FBQzs7Z0JBekNvQyxpQkFBaUI7O0lBekI5QjtRQUF2QixLQUFLLENBQUMsZUFBZSxDQUFDOzs7c0VBSXRCO0lBTWlCO1FBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OztpRUFPaEI7SUFNOEQ7UUFBOUQsU0FBUyxDQUFDLGFBQWEsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDOzBDQUFxQixVQUFVO2dGQUFDO0lBL0JuRixnQ0FBZ0M7UUFMNUMsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLDZCQUE2QjtZQUN2QyxpWEFBMkQ7WUFDM0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07U0FDaEQsQ0FBQztpREFrQ3FDLGlCQUFpQjtPQWpDM0MsZ0NBQWdDLENBNEU1QztJQUFELHVDQUFDO0NBQUEsQUE1RUQsSUE0RUM7U0E1RVksZ0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydE51bWJlclRvRGVjaW1hbCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb0NoYXJ0R2F1Z2VTZXJpZSB9IGZyb20gJy4uL3BvLWNoYXJ0LWdhdWdlLXNlcmllcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcG9DaGFydEdhdWdlU2VyaWVXaWR0aCB9IGZyb20gJy4uLy4uL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbnN0YW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFBvQ2hhcnRHYXVnZVRleHRDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgc2VyaWVWYWx1ZUNvbnZlcnRlZDogc3RyaW5nO1xuICB0b29sdGlwOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfZ2F1Z2VXaWR0aDogbnVtYmVyO1xuICBwcml2YXRlIF9zZXJpZTogUG9DaGFydEdhdWdlU2VyaWU7XG5cbiAgQElucHV0KCdwLWdhdWdlLXdpZHRoJykgc2V0IGdhdWdlV2lkdGgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2dhdWdlV2lkdGggPSB2YWx1ZTtcblxuICAgIHRoaXMuY2hlY2tUZXh0RGVzY3JpcHRpb25TaXplKCk7XG4gIH1cblxuICBnZXQgZ2F1Z2VXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2F1Z2VXaWR0aDtcbiAgfVxuXG4gIEBJbnB1dCgncC1zZXJpZScpIHNldCBzZXJpZShzZXJpZTogUG9DaGFydEdhdWdlU2VyaWUpIHtcbiAgICBpZiAoc2VyaWUpIHtcbiAgICAgIHRoaXMuc2VyaWVWYWx1ZUNvbnZlcnRlZCA9IHRoaXMuY29udmVydFZhbHVlSW5QZXJjZW50Rm9ybWF0KHNlcmllLnZhbHVlKTtcbiAgICAgIHRoaXMuX3NlcmllID0geyAuLi5zZXJpZSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXJpZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBnZXQgc2VyaWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcmllO1xuICB9XG5cbiAgQFZpZXdDaGlsZCgnZGVzY3JpcHRpb24nLCB7IHN0YXRpYzogZmFsc2UsIHJlYWQ6IEVsZW1lbnRSZWYgfSkgZGVzY3JpcHRpb25FbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBnZXQgaGFzU2VyaWVEZXNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJpZSAmJiB0aGlzLnNlcmllLmRlc2NyaXB0aW9uO1xuICB9XG5cbiAgZ2V0IGhhc1NlcmllVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VyaWUgJiYgdGhpcy5zZXJpZS52YWx1ZSA+PSAwO1xuICB9XG5cbiAgZ2V0IG1heERlc2NyaXB0aW9uV2lkdGgoKSB7XG4gICAgLy8gRGlmZXJlbsOnYSBjb250ZW1wbGFuZG8gYSBsYXJndXJhIGRvIHBhdGggYmFzZSBlIHBhZGRpbmcgaW50ZXJuby5cbiAgICBjb25zdCBzdWJ0cmFjdGlvbkFyZWEgPSAodGhpcy5nYXVnZVdpZHRoICogcG9DaGFydEdhdWdlU2VyaWVXaWR0aCAqIDIpICogMjtcbiAgICBjb25zdCBkZXNjcmlwdGlvbldpZHRoID0gdGhpcy5nYXVnZVdpZHRoIC0gc3VidHJhY3Rpb25BcmVhO1xuXG4gICAgcmV0dXJuIHsgJ21heC13aWR0aCc6IGAke2Rlc2NyaXB0aW9uV2lkdGh9cHhgIH07XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5jaGVja1RleHREZXNjcmlwdGlvblNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tUZXh0RGVzY3JpcHRpb25TaXplKCkge1xuICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uRWxlbWVudCkge1xuICAgICAgLy8gdG9vbHRpcCBuZWNlc3PDoXJpbyBwYXJhIGNvbnRvcm5hciBjb21wb3J0YW1lbnRvIGluZXNwZXJhZG8gZG8gdG9vbHRpcC5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLmlzRWxsaXBzaXNBY3RpdmUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rpb24uZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFZhbHVlSW5QZXJjZW50Rm9ybWF0KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRlY2ltYWxWYWx1ZSA9IFN0cmluZyhjb252ZXJ0TnVtYmVyVG9EZWNpbWFsKHZhbHVlLCAxKSkucmVwbGFjZSgnLicsICcsJyk7XG4gICAgcmV0dXJuIGAke2RlY2ltYWxWYWx1ZX0lYDtcbiAgfVxuXG4gIHByaXZhdGUgaXNFbGxpcHNpc0FjdGl2ZSgpIHtcbiAgICBjb25zdCBpc0V4Y2VlZGVkV2lkdGggPSB0aGlzLmRlc2NyaXB0aW9uRWxlbWVudC5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoIDwgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQubmF0aXZlRWxlbWVudC5zY3JvbGxXaWR0aDtcblxuICAgIHJldHVybiBpc0V4Y2VlZGVkV2lkdGggPyB0aGlzLnNlcmllLmRlc2NyaXB0aW9uIDogdW5kZWZpbmVkO1xuICB9XG5cbn1cbiJdfQ==