import * as tslib_1 from "tslib";
import { AfterViewInit, ChangeDetectorRef, Component, ComponentFactoryResolver, ElementRef, NgZone, Renderer2, ViewChild, ViewContainerRef } from '@angular/core';
import { PoChartCircular } from '../po-chart-circular/po-chart-circular';
import { poChartGaugeStartAngle } from '../po-chart-circular/po-chart-circular.constant';
import { PoChartGaugeTextContentComponent } from './po-chart-gauge-text-content/po-chart-gauge-text-content.component';
var PoChartGaugeComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoChartGaugeComponent, _super);
    function PoChartGaugeComponent(changeDetection, componentFactoryResolver, el, ngZone, renderer) {
        var _this = _super.call(this, el, ngZone, renderer) || this;
        _this.changeDetection = changeDetection;
        _this.componentFactoryResolver = componentFactoryResolver;
        _this.chartItemStartAngle = poChartGaugeStartAngle;
        _this._series = [];
        return _this;
    }
    Object.defineProperty(PoChartGaugeComponent.prototype, "series", {
        get: function () {
            return this._series;
        },
        set: function (series) {
            this._series = this.getGaugeSerie(series);
        },
        enumerable: true,
        configurable: true
    });
    PoChartGaugeComponent.prototype.ngAfterViewInit = function () {
        this.drawBasePath();
        this.createComponent();
    };
    PoChartGaugeComponent.prototype.createComponent = function () {
        var factory = this.componentFactoryResolver.resolveComponentFactory(PoChartGaugeTextContentComponent);
        var componentRef = this.svgContainerRef.createComponent(factory);
        var instance = componentRef.instance;
        instance.serie = this.series.length && this.series[0];
        instance.gaugeWidth = this.getGaugeBaseWidth();
        this.resizeListenerSubscription(instance);
    };
    PoChartGaugeComponent.prototype.checkGaugeValueLimits = function (value) {
        if (value <= 0) {
            return 0;
        }
        else if (value >= 100) {
            return 100;
        }
        else {
            return value;
        }
    };
    PoChartGaugeComponent.prototype.drawBasePath = function () {
        var basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
        this.drawPath(basePath, this.chartItemStartAngle, 0);
    };
    PoChartGaugeComponent.prototype.getGaugeBaseWidth = function () {
        var basePath = this.el.nativeElement.querySelector('.po-chart-gauge-base-path');
        if (basePath) {
            return basePath.getBoundingClientRect().width;
        }
    };
    PoChartGaugeComponent.prototype.getGaugeSerie = function (series) {
        if (series === void 0) { series = []; }
        var _a = tslib_1.__read(series, 1), serie = _a[0];
        if (serie && typeof serie === 'object') {
            return [tslib_1.__assign({}, serie, { color: this.colors[0], value: this.checkGaugeValueLimits(serie.value) })];
        }
        return [];
    };
    PoChartGaugeComponent.prototype.resizeListenerSubscription = function (instance) {
        var _this = this;
        this.windowResizeEmitter.subscribe(function () {
            instance.gaugeWidth = _this.getGaugeBaseWidth();
            _this.changeDetection.detectChanges();
        });
    };
    PoChartGaugeComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    tslib_1.__decorate([
        ViewChild('svgContainer', { static: true, read: ViewContainerRef }),
        tslib_1.__metadata("design:type", ViewContainerRef)
    ], PoChartGaugeComponent.prototype, "svgContainerRef", void 0);
    PoChartGaugeComponent = tslib_1.__decorate([
        Component({
            selector: 'po-chart-gauge',
            template: "<div #chartBody class=\"po-chart-body\">\n  <div #svgContainer class=\"po-chart-svg-container\"></div>\n\n  <div #tooltipElement *ngIf=\"!isChartGaugeType\" class=\"po-chart-tooltip po-tooltip po-invisible\">\n    <div class=\"po-tooltip-arrow po-arrow-bottom\"></div>\n    <div class=\"po-tooltip-content\">{{ tooltipText }}</div>\n  </div>\n</div>\n"
        }),
        tslib_1.__metadata("design:paramtypes", [ChangeDetectorRef,
            ComponentFactoryResolver,
            ElementRef,
            NgZone,
            Renderer2])
    ], PoChartGaugeComponent);
    return PoChartGaugeComponent;
}(PoChartCircular));
export { PoChartGaugeComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDTCxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLHdCQUF3QixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFDbEksTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRXpFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHFFQUFxRSxDQUFDO0FBTXZIO0lBQTJDLGlEQUFlO0lBZ0J4RCwrQkFDVSxlQUFrQyxFQUNsQyx3QkFBa0QsRUFDMUQsRUFBYyxFQUNkLE1BQWMsRUFDZCxRQUFtQjtRQUxyQixZQU1JLGtCQUFNLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLFNBQzlCO1FBTlMscUJBQWUsR0FBZixlQUFlLENBQW1CO1FBQ2xDLDhCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFoQjVELHlCQUFtQixHQUFXLHNCQUFzQixDQUFDO1FBRTNDLGFBQU8sR0FBNkIsRUFBRSxDQUFDOztJQW1CakQsQ0FBQztJQWpCRCxzQkFBSSx5Q0FBTTthQUlWO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7YUFORCxVQUFXLE1BQWdDO1lBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxDQUFDOzs7T0FBQTtJQWlCRCwrQ0FBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU8sK0NBQWUsR0FBdkI7UUFDRSxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsdUJBQXVCLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUV4RyxJQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRSxJQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDO1FBRXZDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxRQUFRLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBRS9DLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRU8scURBQXFCLEdBQTdCLFVBQThCLEtBQWE7UUFDekMsSUFBSSxLQUFLLElBQUksQ0FBQyxFQUFFO1lBQ2QsT0FBTyxDQUFDLENBQUM7U0FDVjthQUFNLElBQUksS0FBSyxJQUFJLEdBQUcsRUFBRTtZQUN2QixPQUFPLEdBQUcsQ0FBQztTQUNaO2FBQU07WUFDTCxPQUFPLEtBQUssQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVPLDRDQUFZLEdBQXBCO1FBQ0UsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFFbEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTyxpREFBaUIsR0FBekI7UUFDRSxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsMkJBQTJCLENBQUMsQ0FBQztRQUVsRixJQUFJLFFBQVEsRUFBRTtZQUNaLE9BQU8sUUFBUSxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBSyxDQUFDO1NBQy9DO0lBQ0gsQ0FBQztJQUVPLDZDQUFhLEdBQXJCLFVBQXNCLE1BQXFDO1FBQXJDLHVCQUFBLEVBQUEsV0FBcUM7UUFDbkQsSUFBQSw4QkFBa0IsRUFBaEIsYUFBZ0IsQ0FBQztRQUV6QixJQUFJLEtBQUssSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDdEMsT0FBTyxzQkFDRixLQUFLLElBQ1IsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUM5QyxDQUFDO1NBQ0o7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTywwREFBMEIsR0FBbEMsVUFBbUMsUUFBMEM7UUFBN0UsaUJBTUM7UUFMQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDO1lBQ2pDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsS0FBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDL0MsS0FBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUV2QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O2dCQXJFMEIsaUJBQWlCO2dCQUNSLHdCQUF3QjtnQkFDdEQsVUFBVTtnQkFDTixNQUFNO2dCQUNKLFNBQVM7O0lBUGdEO1FBQXBFLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUFDOzBDQUFrQixnQkFBZ0I7a0VBQUM7SUFkNUYscUJBQXFCO1FBSmpDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxnQkFBZ0I7WUFDMUIsMldBQXNEO1NBQ3ZELENBQUM7aURBa0IyQixpQkFBaUI7WUFDUix3QkFBd0I7WUFDdEQsVUFBVTtZQUNOLE1BQU07WUFDSixTQUFTO09BckJWLHFCQUFxQixDQXdGakM7SUFBRCw0QkFBQztDQUFBLEFBeEZELENBQTJDLGVBQWUsR0F3RnpEO1NBeEZZLHFCQUFxQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgRWxlbWVudFJlZiwgTmdab25lLCBSZW5kZXJlcjIsIFZpZXdDaGlsZCwgVmlld0NvbnRhaW5lclJlZlxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9DaGFydENpcmN1bGFyIH0gZnJvbSAnLi4vcG8tY2hhcnQtY2lyY3VsYXIvcG8tY2hhcnQtY2lyY3VsYXInO1xuaW1wb3J0IHsgUG9DaGFydEdhdWdlU2VyaWUgfSBmcm9tICcuL3BvLWNoYXJ0LWdhdWdlLXNlcmllcy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgcG9DaGFydEdhdWdlU3RhcnRBbmdsZSB9IGZyb20gJy4uL3BvLWNoYXJ0LWNpcmN1bGFyL3BvLWNoYXJ0LWNpcmN1bGFyLmNvbnN0YW50JztcbmltcG9ydCB7IFBvQ2hhcnRHYXVnZVRleHRDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9wby1jaGFydC1nYXVnZS10ZXh0LWNvbnRlbnQvcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWNoYXJ0LWdhdWdlJyxcbiAgdGVtcGxhdGVVcmw6ICcuLi9wby1jaGFydC1keW5hbWljLXR5cGUuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvQ2hhcnRHYXVnZUNvbXBvbmVudCBleHRlbmRzIFBvQ2hhcnRDaXJjdWxhciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIGNoYXJ0SXRlbVN0YXJ0QW5nbGU6IG51bWJlciA9IHBvQ2hhcnRHYXVnZVN0YXJ0QW5nbGU7XG5cbiAgcHJvdGVjdGVkIF9zZXJpZXM6IEFycmF5PFBvQ2hhcnRHYXVnZVNlcmllPiA9IFtdO1xuXG4gIHNldCBzZXJpZXMoc2VyaWVzOiBBcnJheTxQb0NoYXJ0R2F1Z2VTZXJpZT4pIHtcbiAgICB0aGlzLl9zZXJpZXMgPSB0aGlzLmdldEdhdWdlU2VyaWUoc2VyaWVzKTtcbiAgfVxuXG4gIGdldCBzZXJpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcmllcztcbiAgfVxuXG4gIEBWaWV3Q2hpbGQoJ3N2Z0NvbnRhaW5lcicsIHsgc3RhdGljOiB0cnVlLCByZWFkOiBWaWV3Q29udGFpbmVyUmVmIH0pIHN2Z0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBlbDogRWxlbWVudFJlZixcbiAgICBuZ1pvbmU6IE5nWm9uZSxcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyKSB7XG4gICAgICBzdXBlcihlbCwgbmdab25lLCByZW5kZXJlcik7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5kcmF3QmFzZVBhdGgoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbXBvbmVudCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVDb21wb25lbnQoKSB7XG4gICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFBvQ2hhcnRHYXVnZVRleHRDb250ZW50Q29tcG9uZW50KTtcblxuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IHRoaXMuc3ZnQ29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IGNvbXBvbmVudFJlZi5pbnN0YW5jZTtcblxuICAgIGluc3RhbmNlLnNlcmllID0gdGhpcy5zZXJpZXMubGVuZ3RoICYmIHRoaXMuc2VyaWVzWzBdO1xuICAgIGluc3RhbmNlLmdhdWdlV2lkdGggPSB0aGlzLmdldEdhdWdlQmFzZVdpZHRoKCk7XG5cbiAgICB0aGlzLnJlc2l6ZUxpc3RlbmVyU3Vic2NyaXB0aW9uKGluc3RhbmNlKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tHYXVnZVZhbHVlTGltaXRzKHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodmFsdWUgPD0gMCkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA+PSAxMDApIHtcbiAgICAgIHJldHVybiAxMDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGRyYXdCYXNlUGF0aCgpIHtcbiAgICBjb25zdCBiYXNlUGF0aCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucG8tY2hhcnQtZ2F1Z2UtYmFzZS1wYXRoJyk7XG5cbiAgICB0aGlzLmRyYXdQYXRoKGJhc2VQYXRoLCB0aGlzLmNoYXJ0SXRlbVN0YXJ0QW5nbGUsIDApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRHYXVnZUJhc2VXaWR0aCgpIHtcbiAgICBjb25zdCBiYXNlUGF0aCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucG8tY2hhcnQtZ2F1Z2UtYmFzZS1wYXRoJyk7XG5cbiAgICBpZiAoYmFzZVBhdGgpIHtcbiAgICAgIHJldHVybiBiYXNlUGF0aC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEdhdWdlU2VyaWUoc2VyaWVzOiBBcnJheTxQb0NoYXJ0R2F1Z2VTZXJpZT4gPSBbXSkge1xuICAgIGNvbnN0IFsgc2VyaWUgXSA9IHNlcmllcztcblxuICAgIGlmIChzZXJpZSAmJiB0eXBlb2Ygc2VyaWUgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gW3tcbiAgICAgICAgLi4uc2VyaWUsXG4gICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yc1swXSxcbiAgICAgICAgdmFsdWU6IHRoaXMuY2hlY2tHYXVnZVZhbHVlTGltaXRzKHNlcmllLnZhbHVlKVxuICAgICAgfV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNpemVMaXN0ZW5lclN1YnNjcmlwdGlvbihpbnN0YW5jZTogUG9DaGFydEdhdWdlVGV4dENvbnRlbnRDb21wb25lbnQpIHtcbiAgICB0aGlzLndpbmRvd1Jlc2l6ZUVtaXR0ZXIuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGluc3RhbmNlLmdhdWdlV2lkdGggPSB0aGlzLmdldEdhdWdlQmFzZVdpZHRoKCk7XG4gICAgICB0aGlzLmNoYW5nZURldGVjdGlvbi5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=