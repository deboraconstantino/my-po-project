import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoButtonGroupToggle } from './po-button-group-toggle.enum';
var PO_TOGGLE_TYPE_DEFAULT = 'none';
/**
 * @description
 *
 * O componente `po-button-group` é formado por um conjunto de botões distribuídos horizontalmente.
 * Cada botão do grupo é tratado de forma individual, recebendo assim um rótulo, uma ação bem como se deverá estar habilitado ou não.
 *
 * Este componente além de servir como um agrupador de botões para ação, também permite que sejam utilizados
 * para seleções multiplas e únicas.
 *
 * O grupo de botões deve ser utilizado para organizar as ações de maneira uniforme e transmitir a ideia de que os botões fazem
 * parte de um mesmo contexto.
 *
 * #### Boas práticas
 *
 * - Evite usar o `po-button-group` com apenas 1 ação, para isso utilize o `po-button`.
 * - Procure utilizar no máximo 3 ações para cada `po-button-group`.
 *
 * > As recomendações do `po-button` também valem para o `po-button-group`.
 */
var PoButtonGroupBaseComponent = /** @class */ (function () {
    function PoButtonGroupBaseComponent() {
        this._small = false;
        this._toggle = PO_TOGGLE_TYPE_DEFAULT;
        /** Lista de botões. */
        this.buttons = [];
    }
    Object.defineProperty(PoButtonGroupBaseComponent.prototype, "small", {
        get: function () {
            return this._small;
        },
        /**
         * @optional
         *
         * @description
         *
         * Torna o grupo de botões com tamanho minificado.
         *
         * @default `false`
         */
        set: function (value) {
            this._small = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoButtonGroupBaseComponent.prototype, "toggle", {
        get: function () {
            return this._toggle;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define o modo de seleção de botões.
         *
         * > Veja os valores válidos no *enum* `PoMultiselectFilterMode`.
         *
         * @default `none`
         */
        set: function (value) {
            this._toggle = Object.values(PoButtonGroupToggle).includes(value) ? value : PO_TOGGLE_TYPE_DEFAULT;
            this.checkSelecteds(this._toggle);
        },
        enumerable: true,
        configurable: true
    });
    PoButtonGroupBaseComponent.prototype.onButtonClick = function (buttonClicked, buttonIndex) {
        if (this.toggle === PoButtonGroupToggle.Single) {
            this.buttons.forEach(function (button, index) {
                return button.selected = index === buttonIndex ? !buttonClicked.selected : false;
            });
        }
        else if (this.toggle === PoButtonGroupToggle.Multiple) {
            buttonClicked.selected = !buttonClicked.selected;
        }
    };
    PoButtonGroupBaseComponent.prototype.checkSelecteds = function (toggleMode) {
        if (toggleMode === PoButtonGroupToggle.None) {
            this.deselectAllButtons();
        }
        else if (toggleMode === PoButtonGroupToggle.Single) {
            var hasMoreOneSelected = this.buttons.filter(function (button) { return button.selected; }).length > 1;
            if (hasMoreOneSelected) {
                this.deselectAllButtons();
            }
        }
    };
    PoButtonGroupBaseComponent.prototype.deselectAllButtons = function () {
        this.buttons.forEach(function (button) { return button.selected = false; });
    };
    tslib_1.__decorate([
        Input('p-buttons'),
        tslib_1.__metadata("design:type", Array)
    ], PoButtonGroupBaseComponent.prototype, "buttons", void 0);
    tslib_1.__decorate([
        Input('p-small'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoButtonGroupBaseComponent.prototype, "small", null);
    tslib_1.__decorate([
        Input('p-toggle'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoButtonGroupBaseComponent.prototype, "toggle", null);
    return PoButtonGroupBaseComponent;
}());
export { PoButtonGroupBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1idXR0b24tZ3JvdXAvcG8tYnV0dG9uLWdyb3VwLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXBELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRXBFLElBQU0sc0JBQXNCLEdBQUcsTUFBTSxDQUFDO0FBRXRDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FrQkc7QUFDSDtJQUFBO1FBRVUsV0FBTSxHQUFhLEtBQUssQ0FBQztRQUN6QixZQUFPLEdBQVksc0JBQXNCLENBQUM7UUFFbEQsdUJBQXVCO1FBQ0gsWUFBTyxHQUE2QixFQUFFLENBQUM7SUFnRTdELENBQUM7SUFyRG1CLHNCQUFJLDZDQUFLO2FBSTNCO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7UUFmRDs7Ozs7Ozs7V0FRRzthQUNlLFVBQVUsS0FBYztZQUN4QyxJQUFJLENBQUMsTUFBTSxHQUFRLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbkUsQ0FBQzs7O09BQUE7SUFpQmtCLHNCQUFJLDhDQUFNO2FBTTdCO1lBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3RCLENBQUM7UUFuQkQ7Ozs7Ozs7Ozs7V0FVRzthQUNnQixVQUFXLEtBQWE7WUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBUyxNQUFPLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO1lBRTFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLENBQUM7OztPQUFBO0lBTUQsa0RBQWEsR0FBYixVQUFjLGFBQWdDLEVBQUUsV0FBbUI7UUFDakUsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLG1CQUFtQixDQUFDLE1BQU0sRUFBRTtZQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE1BQU0sRUFBRSxLQUFLO2dCQUNqQyxPQUFBLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLO1lBQXpFLENBQXlFLENBQUMsQ0FBQztTQUM5RTthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUU7WUFDdkQsYUFBYSxDQUFDLFFBQVEsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0lBRU8sbURBQWMsR0FBdEIsVUFBdUIsVUFBa0I7UUFDdkMsSUFBSSxVQUFVLEtBQUssbUJBQW1CLENBQUMsSUFBSSxFQUFFO1lBQzNDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1NBQzNCO2FBQU0sSUFBSSxVQUFVLEtBQUssbUJBQW1CLENBQUMsTUFBTSxFQUFFO1lBQ3BELElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxNQUFNLElBQUksT0FBQSxNQUFNLENBQUMsUUFBUSxFQUFmLENBQWUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDckYsSUFBSSxrQkFBa0IsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7YUFDM0I7U0FDRjtJQUNILENBQUM7SUFFTyx1REFBa0IsR0FBMUI7UUFDRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU0sSUFBSSxPQUFBLE1BQU0sQ0FBQyxRQUFRLEdBQUcsS0FBSyxFQUF2QixDQUF1QixDQUFDLENBQUM7SUFDMUQsQ0FBQztJQTlEbUI7UUFBbkIsS0FBSyxDQUFDLFdBQVcsQ0FBQzswQ0FBVSxLQUFLOytEQUF5QjtJQVd6QztRQUFqQixLQUFLLENBQUMsU0FBUyxDQUFDOzs7MkRBRWhCO0lBaUJrQjtRQUFsQixLQUFLLENBQUMsVUFBVSxDQUFDOzs7NERBSWpCO0lBOEJILGlDQUFDO0NBQUEsQUF0RUQsSUFzRUM7U0F0RVksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9CdXR0b25Hcm91cEl0ZW0gfSBmcm9tICcuL3BvLWJ1dHRvbi1ncm91cC1pdGVtLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0J1dHRvbkdyb3VwVG9nZ2xlIH0gZnJvbSAnLi9wby1idXR0b24tZ3JvdXAtdG9nZ2xlLmVudW0nO1xuXG5jb25zdCBQT19UT0dHTEVfVFlQRV9ERUZBVUxUID0gJ25vbmUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tYnV0dG9uLWdyb3VwYCDDqSBmb3JtYWRvIHBvciB1bSBjb25qdW50byBkZSBib3TDtWVzIGRpc3RyaWJ1w61kb3MgaG9yaXpvbnRhbG1lbnRlLlxuICogQ2FkYSBib3TDo28gZG8gZ3J1cG8gw6kgdHJhdGFkbyBkZSBmb3JtYSBpbmRpdmlkdWFsLCByZWNlYmVuZG8gYXNzaW0gdW0gcsOzdHVsbywgdW1hIGHDp8OjbyBiZW0gY29tbyBzZSBkZXZlcsOhIGVzdGFyIGhhYmlsaXRhZG8gb3UgbsOjby5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgYWzDqW0gZGUgc2VydmlyIGNvbW8gdW0gYWdydXBhZG9yIGRlIGJvdMO1ZXMgcGFyYSBhw6fDo28sIHRhbWLDqW0gcGVybWl0ZSBxdWUgc2VqYW0gdXRpbGl6YWRvc1xuICogcGFyYSBzZWxlw6fDtWVzIG11bHRpcGxhcyBlIMO6bmljYXMuXG4gKlxuICogTyBncnVwbyBkZSBib3TDtWVzIGRldmUgc2VyIHV0aWxpemFkbyBwYXJhIG9yZ2FuaXphciBhcyBhw6fDtWVzIGRlIG1hbmVpcmEgdW5pZm9ybWUgZSB0cmFuc21pdGlyIGEgaWRlaWEgZGUgcXVlIG9zIGJvdMO1ZXMgZmF6ZW1cbiAqIHBhcnRlIGRlIHVtIG1lc21vIGNvbnRleHRvLlxuICpcbiAqICMjIyMgQm9hcyBwcsOhdGljYXNcbiAqXG4gKiAtIEV2aXRlIHVzYXIgbyBgcG8tYnV0dG9uLWdyb3VwYCBjb20gYXBlbmFzIDEgYcOnw6NvLCBwYXJhIGlzc28gdXRpbGl6ZSBvIGBwby1idXR0b25gLlxuICogLSBQcm9jdXJlIHV0aWxpemFyIG5vIG3DoXhpbW8gMyBhw6fDtWVzIHBhcmEgY2FkYSBgcG8tYnV0dG9uLWdyb3VwYC5cbiAqXG4gKiA+IEFzIHJlY29tZW5kYcOnw7VlcyBkbyBgcG8tYnV0dG9uYCB0YW1iw6ltIHZhbGVtIHBhcmEgbyBgcG8tYnV0dG9uLWdyb3VwYC5cbiAqL1xuZXhwb3J0IGNsYXNzIFBvQnV0dG9uR3JvdXBCYXNlQ29tcG9uZW50IHtcblxuICBwcml2YXRlIF9zbWFsbD86IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfdG9nZ2xlPzogc3RyaW5nID0gUE9fVE9HR0xFX1RZUEVfREVGQVVMVDtcblxuICAvKiogTGlzdGEgZGUgYm90w7Vlcy4gKi9cbiAgQElucHV0KCdwLWJ1dHRvbnMnKSBidXR0b25zOiBBcnJheTxQb0J1dHRvbkdyb3VwSXRlbT4gPSBbXTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUb3JuYSBvIGdydXBvIGRlIGJvdMO1ZXMgY29tIHRhbWFuaG8gbWluaWZpY2Fkby5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLXNtYWxsJykgc2V0IHNtYWxsKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc21hbGwgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzbWFsbCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc21hbGw7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyBtb2RvIGRlIHNlbGXDp8OjbyBkZSBib3TDtWVzLlxuICAgKlxuICAgKiA+IFZlamEgb3MgdmFsb3JlcyB2w6FsaWRvcyBubyAqZW51bSogYFBvTXVsdGlzZWxlY3RGaWx0ZXJNb2RlYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYG5vbmVgXG4gICAqL1xuICBASW5wdXQoJ3AtdG9nZ2xlJykgc2V0IHRvZ2dsZSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fdG9nZ2xlID0gKDxhbnk+T2JqZWN0KS52YWx1ZXMoUG9CdXR0b25Hcm91cFRvZ2dsZSkuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBQT19UT0dHTEVfVFlQRV9ERUZBVUxUO1xuXG4gICAgdGhpcy5jaGVja1NlbGVjdGVkcyh0aGlzLl90b2dnbGUpO1xuICB9XG5cbiAgZ2V0IHRvZ2dsZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl90b2dnbGU7XG4gIH1cblxuICBvbkJ1dHRvbkNsaWNrKGJ1dHRvbkNsaWNrZWQ6IFBvQnV0dG9uR3JvdXBJdGVtLCBidXR0b25JbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMudG9nZ2xlID09PSBQb0J1dHRvbkdyb3VwVG9nZ2xlLlNpbmdsZSkge1xuICAgICAgdGhpcy5idXR0b25zLmZvckVhY2goKGJ1dHRvbiwgaW5kZXgpID0+XG4gICAgICAgIGJ1dHRvbi5zZWxlY3RlZCA9IGluZGV4ID09PSBidXR0b25JbmRleCA/ICFidXR0b25DbGlja2VkLnNlbGVjdGVkIDogZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAodGhpcy50b2dnbGUgPT09IFBvQnV0dG9uR3JvdXBUb2dnbGUuTXVsdGlwbGUpIHtcbiAgICAgIGJ1dHRvbkNsaWNrZWQuc2VsZWN0ZWQgPSAhYnV0dG9uQ2xpY2tlZC5zZWxlY3RlZDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoZWNrU2VsZWN0ZWRzKHRvZ2dsZU1vZGU6IHN0cmluZykge1xuICAgIGlmICh0b2dnbGVNb2RlID09PSBQb0J1dHRvbkdyb3VwVG9nZ2xlLk5vbmUpIHtcbiAgICAgIHRoaXMuZGVzZWxlY3RBbGxCdXR0b25zKCk7XG4gICAgfSBlbHNlIGlmICh0b2dnbGVNb2RlID09PSBQb0J1dHRvbkdyb3VwVG9nZ2xlLlNpbmdsZSkge1xuICAgICAgY29uc3QgaGFzTW9yZU9uZVNlbGVjdGVkID0gdGhpcy5idXR0b25zLmZpbHRlcihidXR0b24gPT4gYnV0dG9uLnNlbGVjdGVkKS5sZW5ndGggPiAxO1xuICAgICAgaWYgKGhhc01vcmVPbmVTZWxlY3RlZCkge1xuICAgICAgICB0aGlzLmRlc2VsZWN0QWxsQnV0dG9ucygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVzZWxlY3RBbGxCdXR0b25zKCkge1xuICAgIHRoaXMuYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiBidXR0b24uc2VsZWN0ZWQgPSBmYWxzZSk7XG4gIH1cblxufVxuIl19