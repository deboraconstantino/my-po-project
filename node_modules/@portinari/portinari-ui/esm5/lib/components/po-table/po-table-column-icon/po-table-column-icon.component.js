import * as tslib_1 from "tslib";
import { Component, ChangeDetectionStrategy, Input } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir ícones nas colunas.
 */
var PoTableColumnIconComponent = /** @class */ (function () {
    function PoTableColumnIconComponent() {
        this._icons = [];
    }
    Object.defineProperty(PoTableColumnIconComponent.prototype, "icons", {
        get: function () {
            return this._icons;
        },
        /** Lista de colunas com ícones. */
        set: function (icons) {
            this._icons = this.convertToColumnIcon(icons);
        },
        enumerable: true,
        configurable: true
    });
    PoTableColumnIconComponent.prototype.click = function (columnIcon) {
        var isAbleAction = !this.isDisabled(columnIcon);
        if (columnIcon.action && isAbleAction) {
            columnIcon.action(this.row, columnIcon);
        }
        else if (this.column.action && isAbleAction) {
            this.column.action(this.row, columnIcon);
        }
    };
    PoTableColumnIconComponent.prototype.getColor = function (column) {
        var color = typeof column.color === 'function' ? column.color(this.row, column) : column.color;
        if (color) {
            return "po-text-" + color;
        }
    };
    PoTableColumnIconComponent.prototype.getIcon = function (column) {
        return column.icon || column.value;
    };
    PoTableColumnIconComponent.prototype.isClickable = function (columnIcon) {
        return !!(!this.isDisabled(columnIcon) && (columnIcon.action || this.column.action));
    };
    PoTableColumnIconComponent.prototype.isDisabled = function (column) {
        return column.disabled ? column.disabled(this.row) : false;
    };
    PoTableColumnIconComponent.prototype.trackByFunction = function (index) {
        return index;
    };
    PoTableColumnIconComponent.prototype.convertToColumnIcon = function (rowIcons) {
        if (Array.isArray(rowIcons)) {
            return rowIcons.map(function (rowIcon) { return typeof rowIcon === 'string' ? { value: rowIcon } : rowIcon; });
        }
        if (typeof rowIcons === 'string') {
            return [{ value: rowIcons }];
        }
        return [];
    };
    tslib_1.__decorate([
        Input('p-column'),
        tslib_1.__metadata("design:type", Object)
    ], PoTableColumnIconComponent.prototype, "column", void 0);
    tslib_1.__decorate([
        Input('p-icons'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PoTableColumnIconComponent.prototype, "icons", null);
    tslib_1.__decorate([
        Input('p-row'),
        tslib_1.__metadata("design:type", Object)
    ], PoTableColumnIconComponent.prototype, "row", void 0);
    PoTableColumnIconComponent = tslib_1.__decorate([
        Component({
            selector: 'po-table-column-icon',
            template: "<po-table-icon *ngFor=\"let column of icons trackBy: trackByFunction\"\n  [p-clickable]=\"isClickable(column)\"\n  [p-color]=\"getColor(column)\"\n  [p-disabled]=\"isDisabled(column)\"\n  [p-icon]=\"getIcon(column)\"\n  [p-icon-tooltip]=\"column.tooltip\"\n  (p-click)=\"click(column)\">\n</po-table-icon>\n",
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], PoTableColumnIconComponent);
    return PoTableColumnIconComponent;
}());
export { PoTableColumnIconComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdWkvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby10YWJsZS9wby10YWJsZS1jb2x1bW4taWNvbi9wby10YWJsZS1jb2x1bW4taWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSzFFOzs7Ozs7R0FNRztBQU9IO0lBTkE7UUFRVSxXQUFNLEdBQTZCLEVBQUUsQ0FBQztJQWlFaEQsQ0FBQztJQTNEbUIsc0JBQUksNkNBQUs7YUFJM0I7WUFDRSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQztRQVBELG1DQUFtQzthQUNqQixVQUFVLEtBQXdEO1lBQ2xGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hELENBQUM7OztPQUFBO0lBU0QsMENBQUssR0FBTCxVQUFNLFVBQTZCO1FBQ2pDLElBQU0sWUFBWSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVsRCxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksWUFBWSxFQUFFO1lBQ3JDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUN6QzthQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksWUFBWSxFQUFFO1lBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDMUM7SUFFSCxDQUFDO0lBRUQsNkNBQVEsR0FBUixVQUFTLE1BQXlCO1FBQ2hDLElBQU0sS0FBSyxHQUFHLE9BQU8sTUFBTSxDQUFDLEtBQUssS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUVqRyxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sYUFBVyxLQUFPLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRUQsNENBQU8sR0FBUCxVQUFRLE1BQXlCO1FBQy9CLE9BQU8sTUFBTSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxnREFBVyxHQUFYLFVBQVksVUFBNkI7UUFDdkMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRUQsK0NBQVUsR0FBVixVQUFXLE1BQXlCO1FBQ2xDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM3RCxDQUFDO0lBRUQsb0RBQWUsR0FBZixVQUFnQixLQUFLO1FBQ25CLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVPLHdEQUFtQixHQUEzQixVQUE0QixRQUEyRDtRQUVyRixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDM0IsT0FBYyxRQUFTLENBQUMsR0FBRyxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUExRCxDQUEwRCxDQUFDLENBQUM7U0FDcEc7UUFFRCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtZQUNoQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUM5QjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQTVEa0I7UUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7OERBQXVCO0lBR3ZCO1FBQWpCLEtBQUssQ0FBQyxTQUFTLENBQUM7OzsyREFFaEI7SUFPZTtRQUFmLEtBQUssQ0FBQyxPQUFPLENBQUM7OzJEQUFVO0lBakJkLDBCQUEwQjtRQU50QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsc0JBQXNCO1lBQ2hDLCtUQUFvRDtZQUNwRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtTQUNoRCxDQUFDO09BRVcsMEJBQTBCLENBbUV0QztJQUFELGlDQUFDO0NBQUEsQUFuRUQsSUFtRUM7U0FuRVksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9UYWJsZUNvbHVtbiB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tdGFibGUtY29sdW1uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RhYmxlQ29sdW1uSWNvbiB9IGZyb20gJy4vcG8tdGFibGUtY29sdW1uLWljb24uaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHJlc3BvbnPDoXZlbCBwb3IgZXhpYmlyIMOtY29uZXMgbmFzIGNvbHVuYXMuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRhYmxlLWNvbHVtbi1pY29uJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRhYmxlLWNvbHVtbi1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5cbmV4cG9ydCBjbGFzcyBQb1RhYmxlQ29sdW1uSWNvbkNvbXBvbmVudCB7XG5cbiAgcHJpdmF0ZSBfaWNvbnM6IEFycmF5PFBvVGFibGVDb2x1bW5JY29uPiA9IFtdO1xuXG4gIC8qKiBEZWZpbmnDp8OjbyBkYSBjb2x1bmEgcXVlIHV0aWxpemEgb3MgaWNvbmVzLiAqL1xuICBASW5wdXQoJ3AtY29sdW1uJykgY29sdW1uOiBQb1RhYmxlQ29sdW1uO1xuXG4gIC8qKiBMaXN0YSBkZSBjb2x1bmFzIGNvbSDDrWNvbmVzLiAqL1xuICBASW5wdXQoJ3AtaWNvbnMnKSBzZXQgaWNvbnMoaWNvbnM6IEFycmF5PFBvVGFibGVDb2x1bW5JY29uPiB8IEFycmF5PHN0cmluZz4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9pY29ucyA9IHRoaXMuY29udmVydFRvQ29sdW1uSWNvbihpY29ucyk7XG4gIH1cblxuICBnZXQgaWNvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ljb25zO1xuICB9XG5cbiAgLyoqIERhZG9zIGRhIGxpbmhhIGRhIHRhYmVsYS4gKi9cbiAgQElucHV0KCdwLXJvdycpIHJvdzogYW55O1xuXG4gIGNsaWNrKGNvbHVtbkljb246IFBvVGFibGVDb2x1bW5JY29uKTogdm9pZCB7XG4gICAgY29uc3QgaXNBYmxlQWN0aW9uID0gIXRoaXMuaXNEaXNhYmxlZChjb2x1bW5JY29uKTtcblxuICAgIGlmIChjb2x1bW5JY29uLmFjdGlvbiAmJiBpc0FibGVBY3Rpb24pIHtcbiAgICAgIGNvbHVtbkljb24uYWN0aW9uKHRoaXMucm93LCBjb2x1bW5JY29uKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29sdW1uLmFjdGlvbiAmJiBpc0FibGVBY3Rpb24pIHtcbiAgICAgIHRoaXMuY29sdW1uLmFjdGlvbih0aGlzLnJvdywgY29sdW1uSWNvbik7XG4gICAgfVxuXG4gIH1cblxuICBnZXRDb2xvcihjb2x1bW46IFBvVGFibGVDb2x1bW5JY29uKTogc3RyaW5nIHtcbiAgICBjb25zdCBjb2xvciA9IHR5cGVvZiBjb2x1bW4uY29sb3IgPT09ICdmdW5jdGlvbicgPyBjb2x1bW4uY29sb3IodGhpcy5yb3csIGNvbHVtbikgOiBjb2x1bW4uY29sb3I7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHJldHVybiBgcG8tdGV4dC0ke2NvbG9yfWA7XG4gICAgfVxuICB9XG5cbiAgZ2V0SWNvbihjb2x1bW46IFBvVGFibGVDb2x1bW5JY29uKSB7XG4gICAgcmV0dXJuIGNvbHVtbi5pY29uIHx8IGNvbHVtbi52YWx1ZTtcbiAgfVxuXG4gIGlzQ2xpY2thYmxlKGNvbHVtbkljb246IFBvVGFibGVDb2x1bW5JY29uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhKCF0aGlzLmlzRGlzYWJsZWQoY29sdW1uSWNvbikgJiYgKGNvbHVtbkljb24uYWN0aW9uIHx8IHRoaXMuY29sdW1uLmFjdGlvbikpO1xuICB9XG5cbiAgaXNEaXNhYmxlZChjb2x1bW46IFBvVGFibGVDb2x1bW5JY29uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGNvbHVtbi5kaXNhYmxlZCA/IGNvbHVtbi5kaXNhYmxlZCh0aGlzLnJvdykgOiBmYWxzZTtcbiAgfVxuXG4gIHRyYWNrQnlGdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFRvQ29sdW1uSWNvbihyb3dJY29uczogQXJyYXk8UG9UYWJsZUNvbHVtbkljb24+IHwgQXJyYXk8c3RyaW5nPiB8IHN0cmluZyk6IEFycmF5PFBvVGFibGVDb2x1bW5JY29uPiB7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dJY29ucykpIHtcbiAgICAgIHJldHVybiAoPGFueT4gcm93SWNvbnMpLm1hcChyb3dJY29uID0+IHR5cGVvZiByb3dJY29uID09PSAnc3RyaW5nJyA/IHsgdmFsdWU6IHJvd0ljb24gfSA6IHJvd0ljb24pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygcm93SWNvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gW3sgdmFsdWU6IHJvd0ljb25zIH1dO1xuICAgIH1cblxuICAgIHJldHVybiBbXTtcbiAgfVxuXG59XG4iXX0=