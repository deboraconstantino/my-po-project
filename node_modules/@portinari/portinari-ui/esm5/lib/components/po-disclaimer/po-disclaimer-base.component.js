import * as tslib_1 from "tslib";
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
var PO_DISCLAIMER_TYPES = ['default', 'danger'];
var PO_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * @docsPrivate
 *
 * @description
 *
 * O componente po-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no po-multi-select.
 *
 */
var PoDisclaimerBaseComponent = /** @class */ (function () {
    function PoDisclaimerBaseComponent() {
        this._type = 'default';
        this._hideClose = false;
        this.showDisclaimer = true;
        /**
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new EventEmitter();
    }
    Object.defineProperty(PoDisclaimerBaseComponent.prototype, "hideClose", {
        get: function () {
            return this._hideClose;
        },
        /**
         * @description
         *
         * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
         * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
         *
         * @default false
         */
        set: function (value) {
            this._hideClose = value === '' ? true : convertToBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoDisclaimerBaseComponent.prototype, "type", {
        get: function () {
            return this._type;
        },
        /**
         * @description
         *
         * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
         *
         * @default default
         * @optional
         */
        set: function (type) {
            this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
        },
        enumerable: true,
        configurable: true
    });
    PoDisclaimerBaseComponent.prototype.close = function () {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    };
    PoDisclaimerBaseComponent.prototype.getLabel = function () {
        return this.label ? this.label : this.value;
    };
    tslib_1.__decorate([
        Input('p-label'),
        tslib_1.__metadata("design:type", String)
    ], PoDisclaimerBaseComponent.prototype, "label", void 0);
    tslib_1.__decorate([
        Input('p-value'),
        tslib_1.__metadata("design:type", String)
    ], PoDisclaimerBaseComponent.prototype, "value", void 0);
    tslib_1.__decorate([
        Input('p-property'),
        tslib_1.__metadata("design:type", String)
    ], PoDisclaimerBaseComponent.prototype, "property", void 0);
    tslib_1.__decorate([
        Input('p-hide-close'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], PoDisclaimerBaseComponent.prototype, "hideClose", null);
    tslib_1.__decorate([
        Output('p-close-action'),
        tslib_1.__metadata("design:type", EventEmitter)
    ], PoDisclaimerBaseComponent.prototype, "closeAction", void 0);
    tslib_1.__decorate([
        Input('p-type'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoDisclaimerBaseComponent.prototype, "type", null);
    return PoDisclaimerBaseComponent;
}());
export { PoDisclaimerBaseComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tZGlzY2xhaW1lci9wby1kaXNjbGFpbWVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFcEQsSUFBTSxtQkFBbUIsR0FBRyxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNsRCxJQUFNLDBCQUEwQixHQUFHLFNBQVMsQ0FBQztBQUU3Qzs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFBO1FBQ1UsVUFBSyxHQUFXLFNBQVMsQ0FBQztRQUMxQixlQUFVLEdBQWEsS0FBSyxDQUFDO1FBRXJDLG1CQUFjLEdBQUcsSUFBSSxDQUFDO1FBOEJ0Qjs7O1dBR0c7UUFDdUIsZ0JBQVcsR0FBdUIsSUFBSSxZQUFZLEVBQU8sQ0FBQztJQTBCdEYsQ0FBQztJQXRDd0Isc0JBQUksZ0RBQVM7YUFJcEM7WUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDekIsQ0FBQztRQWREOzs7Ozs7O1dBT0c7YUFDb0IsVUFBYyxLQUFjO1lBQ2pELElBQUksQ0FBQyxVQUFVLEdBQVEsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RSxDQUFDOzs7T0FBQTtJQW9CZ0Isc0JBQUksMkNBQUk7YUFJekI7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQWREOzs7Ozs7O1dBT0c7YUFDYyxVQUFTLElBQVk7WUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUM7UUFDdEYsQ0FBQzs7O09BQUE7SUFNRCx5Q0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7UUFDNUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVELDRDQUFRLEdBQVI7UUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDOUMsQ0FBQztJQXJEaUI7UUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7NERBQWdCO0lBR2Y7UUFBakIsS0FBSyxDQUFDLFNBQVMsQ0FBQzs7NERBQWU7SUFHWDtRQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzsrREFBbUI7SUFVaEI7UUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQzs7OzhEQUVyQjtJQVV5QjtRQUF6QixNQUFNLENBQUMsZ0JBQWdCLENBQUM7MENBQWUsWUFBWTtrRUFBZ0M7SUFVbkU7UUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzs7O3lEQUVmO0lBY0gsZ0NBQUM7Q0FBQSxBQWhFRCxJQWdFQztTQWhFWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5jb25zdCBQT19ESVNDTEFJTUVSX1RZUEVTID0gWydkZWZhdWx0JywgJ2RhbmdlciddO1xuY29uc3QgUE9fRElTQ0xBSU1FUl9ERUZBVUxUX1RZUEUgPSAnZGVmYXVsdCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIHBvLWRpc2NsYWltZXIgw6kgcmVzcG9uc8OhdmVsIHBvciByZXByZXNlbnRhciB0YWdzLlxuICogU2V1IHVzbyDDqSByZWNvbWVuZGFkbyBlbSBidXNjYXMgZSBlbSBjYW1wb3Mgb25kZSDDqSBuZWNlc3PDoXJpbyByZXByZXNlbnRhciBvYmpldG9zIHNlbGVjaW9uYWRvcyxcbiAqIGNvbW8gcG9yIGV4ZW1wbG8sIG5vIHBvLW11bHRpLXNlbGVjdC5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBQb0Rpc2NsYWltZXJCYXNlQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBfdHlwZTogc3RyaW5nID0gJ2RlZmF1bHQnO1xuICBwcml2YXRlIF9oaWRlQ2xvc2U/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgc2hvd0Rpc2NsYWltZXIgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBMYWJlbCBxdWUgYXBhcmVjZXLDoSBkZW50cm8gZG8gcG8tZGlzY2xhaW1lci5cbiAgICogUXVhbmRvIG7Do28gZm9yIGRlZmluaWRvIHVtIGxhYmVsIHNlcsOhIGFwcmVzZW50YWRhIGEgcHJvcHJpZWRhZGUgcC12YWx1ZS5cbiAgICovXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKiBWYWxvciBkbyBwby1kaXNjbGFpbWVyLiAqL1xuICBASW5wdXQoJ3AtdmFsdWUnKSB2YWx1ZTogc3RyaW5nO1xuXG4gIC8qKiBOb21lIGRhIHByb3ByaWVkYWRlIHZpbmN1bGFkYSDDoCBlc3RlIHBvLWRpc2NsYWltZXIuICovXG4gIEBJbnB1dCgncC1wcm9wZXJ0eScpIHByb3BlcnR5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRXN0YSBwcm9wcmllZGFkZSBlc2NvbmRlIG8gYm90w6NvIHBhcmEgZmVjaGFtZW50byBkbyBwby1kaXNjbGFpbWVyLCBhbyB1dGlsaXphciBlc3RhIHByb3ByaWVkYWRlXG4gICAqIHNlbSBwYXNzYXIgdmFsb3IgYSBtZXNtYSDDqSBzZXRhZGEgY29tbyBmYWxzZSwgb25kZSBvIGJvdMOjbyBkZSBmZWNoYW1lbnRvIGVzdMOhIHZpc8OtdmVsLlxuICAgKlxuICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgKi9cbiAgQElucHV0KCdwLWhpZGUtY2xvc2UnKSBzZXQgaGlkZUNsb3NlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faGlkZUNsb3NlID0gPGFueT52YWx1ZSA9PT0gJycgPyB0cnVlIDogY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgaGlkZUNsb3NlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9oaWRlQ2xvc2U7XG4gIH1cblxuICAvKipcbiAgICogRXZlbnRvIGRpc3BhcmFkbyBhbyBmZWNoYXIgbyBkaXNjbGFpbWVyLlxuICAgKiBQYXJhIGVzdGUgZXZlbnRvIHNlcsOhIHBhc3NhZG8gY29tbyBwYXLDom1ldHJvIHVtIG9iamV0byBjb20gdmFsdWUsIGxhYmVsIGUgcHJvcGVydHkuXG4gICAqL1xuICBAT3V0cHV0KCdwLWNsb3NlLWFjdGlvbicpIGNsb3NlQWN0aW9uPzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFRpcG8gZG8gcG8tZGlzY2xhaW1lci4gUG9kZSBzZXIgJ2RlZmF1bHQnIG91ICdkYW5nZXInLlxuICAgKlxuICAgKiBAZGVmYXVsdCBkZWZhdWx0XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgQElucHV0KCdwLXR5cGUnKSBzZXQgdHlwZSh0eXBlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90eXBlID0gUE9fRElTQ0xBSU1FUl9UWVBFUy5pbmNsdWRlcyh0eXBlKSA/IHR5cGUgOiBQT19ESVNDTEFJTUVSX0RFRkFVTFRfVFlQRTtcbiAgfVxuXG4gIGdldCB0eXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gIH1cblxuICBjbG9zZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNob3dEaXNjbGFpbWVyID0gZmFsc2U7XG4gICAgdGhpcy5jbG9zZUFjdGlvbi5lbWl0KHt2YWx1ZTogdGhpcy52YWx1ZSwgbGFiZWw6IHRoaXMubGFiZWwsIHByb3BlcnR5OiB0aGlzLnByb3BlcnR5fSk7XG4gIH1cblxuICBnZXRMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbCA/IHRoaXMubGFiZWwgOiB0aGlzLnZhbHVlO1xuICB9XG59XG4iXX0=