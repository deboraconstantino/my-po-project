import * as tslib_1 from "tslib";
import { Input } from '@angular/core';
import { PO_CONTROL_POSITIONS } from './../../services/po-control-position/po-control-position.constants';
var CONTENT_MAX_LENGTH = 140;
var PO_TOOLTIP_POSITION_DEFAULT = 'bottom';
/**
 * @description
 *
 * A diretiva po-tooltip deve ser utilizada para oferecer informações adicionais quando os usuários
 * passam o mouse sobre o elemento alvo ao qual ela está atribuída.
 *
 * O conteúdo é formado por um pequeno texto que deve contribuir para uma tomada de decisão ou
 * orientação do usuário. A ativação dele pode estar em qualquer componente ou tag HTML.
 *
 * Para textos maiores ou no caso de haver a necessidade de utilizar algum outro elemento como
 * conteúdo deve-se utilizar o [**po-popover**](https://portinari.io/documentation/po-popover?view=doc).
 */
var PoTooltipBaseDirective = /** @class */ (function () {
    function PoTooltipBaseDirective() {
        this._tooltip = '';
        this._tooltipPosition = 'bottom';
    }
    Object.defineProperty(PoTooltipBaseDirective.prototype, "tooltip", {
        get: function () {
            return this._tooltip;
        },
        /**
         * @description
         *
         * Habilita e atribui um texto ao po-tooltip, com limitação de 140 caracteres.
         */
        set: function (tooltip) {
            if (tooltip && tooltip.length > CONTENT_MAX_LENGTH) {
                this._tooltip = tooltip.substring(0, CONTENT_MAX_LENGTH);
            }
            else {
                this._tooltip = tooltip;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoTooltipBaseDirective.prototype, "tooltipPosition", {
        get: function () {
            return this._tooltipPosition;
        },
        /**
         * @optional
         *
         * @description
         *
         * Define a posição que o po-tooltip abrirá em relação ao componente alvo. Sugere-se que seja
         * usada a orientação "bottom" (abaixo), porém o mesmo é flexível e será rotacionado
         * automaticamente para se adequar a tela, caso necessário.
         *
         * Posições válidas:
         * - `right`: Posiciona o po-tooltip no lado direito do componente alvo.
         * - `right-bottom`: Posiciona o po-tooltip no lado direito inferior do componente alvo.
         * - `right-top`: Posiciona o po-tooltip no lado direito superior do componente alvo.
         * - `bottom`: Posiciona o po-tooltip abaixo do componente alvo.
         * - `bottom-left`: Posiciona o po-tooltip abaixo e à esquerda do componente alvo.
         * - `bottom-right`: Posiciona o po-tooltip abaixo e à direita do componente alvo.
         * - `left`: Posiciona o po-tooltip no lado esquerdo do componente alvo.
         * - `left-top`: Posiciona o po-tooltip no lado esquerdo superior do componente alvo.
         * - `left-bottom`: Posiciona o po-tooltip no lado esquerdo inferior do componente alvo.
         * - `top`: Posiciona o po-tooltip acima do componente alvo.
         * - `top-right`: Posiciona o po-tooltip acima e à direita do componente alvo.
         * - `top-left`: Posiciona o po-tooltip acima e à esquerda do componente alvo.
         *
         * @default bottom
         */
        set: function (position) {
            this._tooltipPosition = PO_CONTROL_POSITIONS.includes(position) ? position : PO_TOOLTIP_POSITION_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        Input('p-tooltip'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoTooltipBaseDirective.prototype, "tooltip", null);
    tslib_1.__decorate([
        Input('p-tooltip-position'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], PoTooltipBaseDirective.prototype, "tooltipPosition", null);
    return PoTooltipBaseDirective;
}());
export { PoTooltipBaseDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdG9vbHRpcC1iYXNlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvcG8tdG9vbHRpcC9wby10b29sdGlwLWJhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9FQUFvRSxDQUFDO0FBRTFHLElBQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQy9CLElBQU0sMkJBQTJCLEdBQUcsUUFBUSxDQUFDO0FBRTdDOzs7Ozs7Ozs7OztHQVdHO0FBRUg7SUFBQTtRQUVVLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDcEIscUJBQWdCLEdBQVksUUFBUSxDQUFDO0lBa0RqRCxDQUFDO0lBM0NxQixzQkFBSSwyQ0FBTzthQU8vQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDO1FBZEQ7Ozs7V0FJRzthQUNpQixVQUFZLE9BQWU7WUFDN0MsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxrQkFBa0IsRUFBRTtnQkFDakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO2FBQzNEO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO2FBQ3pCO1FBQ0gsQ0FBQzs7O09BQUE7SUE4QjRCLHNCQUFJLG1EQUFlO2FBR2hEO1lBQ0UsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7UUFDL0IsQ0FBQztRQTlCRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBd0JHO2FBQzBCLFVBQW9CLFFBQWdCO1lBQy9ELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUM7UUFDM0csQ0FBQzs7O09BQUE7SUF0Q21CO1FBQW5CLEtBQUssQ0FBQyxXQUFXLENBQUM7Ozt5REFNbEI7SUE4QjRCO1FBQTVCLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQzs7O2lFQUUzQjtJQUtILDZCQUFDO0NBQUEsQUFyREQsSUFxREM7U0FyRFksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUE9fQ09OVFJPTF9QT1NJVElPTlMgfSBmcm9tICcuLy4uLy4uL3NlcnZpY2VzL3BvLWNvbnRyb2wtcG9zaXRpb24vcG8tY29udHJvbC1wb3NpdGlvbi5jb25zdGFudHMnO1xuXG5jb25zdCBDT05URU5UX01BWF9MRU5HVEggPSAxNDA7XG5jb25zdCBQT19UT09MVElQX1BPU0lUSU9OX0RFRkFVTFQgPSAnYm90dG9tJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBIGRpcmV0aXZhIHBvLXRvb2x0aXAgZGV2ZSBzZXIgdXRpbGl6YWRhIHBhcmEgb2ZlcmVjZXIgaW5mb3JtYcOnw7VlcyBhZGljaW9uYWlzIHF1YW5kbyBvcyB1c3XDoXJpb3NcbiAqIHBhc3NhbSBvIG1vdXNlIHNvYnJlIG8gZWxlbWVudG8gYWx2byBhbyBxdWFsIGVsYSBlc3TDoSBhdHJpYnXDrWRhLlxuICpcbiAqIE8gY29udGXDumRvIMOpIGZvcm1hZG8gcG9yIHVtIHBlcXVlbm8gdGV4dG8gcXVlIGRldmUgY29udHJpYnVpciBwYXJhIHVtYSB0b21hZGEgZGUgZGVjaXPDo28gb3VcbiAqIG9yaWVudGHDp8OjbyBkbyB1c3XDoXJpby4gQSBhdGl2YcOnw6NvIGRlbGUgcG9kZSBlc3RhciBlbSBxdWFscXVlciBjb21wb25lbnRlIG91IHRhZyBIVE1MLlxuICpcbiAqIFBhcmEgdGV4dG9zIG1haW9yZXMgb3Ugbm8gY2FzbyBkZSBoYXZlciBhIG5lY2Vzc2lkYWRlIGRlIHV0aWxpemFyIGFsZ3VtIG91dHJvIGVsZW1lbnRvIGNvbW9cbiAqIGNvbnRlw7pkbyBkZXZlLXNlIHV0aWxpemFyIG8gWyoqcG8tcG9wb3ZlcioqXShodHRwczovL3BvcnRpbmFyaS5pby9kb2N1bWVudGF0aW9uL3BvLXBvcG92ZXI/dmlldz1kb2MpLlxuICovXG5cbmV4cG9ydCBjbGFzcyBQb1Rvb2x0aXBCYXNlRGlyZWN0aXZlIHtcblxuICBwcml2YXRlIF90b29sdGlwOiBzdHJpbmcgPSAnJztcbiAgcHJvdGVjdGVkIF90b29sdGlwUG9zaXRpb24/OiBzdHJpbmcgPSAnYm90dG9tJztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEhhYmlsaXRhIGUgYXRyaWJ1aSB1bSB0ZXh0byBhbyBwby10b29sdGlwLCBjb20gbGltaXRhw6fDo28gZGUgMTQwIGNhcmFjdGVyZXMuXG4gICAqL1xuICBASW5wdXQoJ3AtdG9vbHRpcCcpIHNldCB0b29sdGlwKHRvb2x0aXA6IHN0cmluZykge1xuICAgIGlmICh0b29sdGlwICYmIHRvb2x0aXAubGVuZ3RoID4gQ09OVEVOVF9NQVhfTEVOR1RIKSB7XG4gICAgICAgdGhpcy5fdG9vbHRpcCA9IHRvb2x0aXAuc3Vic3RyaW5nKDAsIENPTlRFTlRfTUFYX0xFTkdUSCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3Rvb2x0aXAgPSB0b29sdGlwO1xuICAgIH1cbiAgfVxuICBnZXQgdG9vbHRpcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdG9vbHRpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIHBvc2nDp8OjbyBxdWUgbyBwby10b29sdGlwIGFicmlyw6EgZW0gcmVsYcOnw6NvIGFvIGNvbXBvbmVudGUgYWx2by4gU3VnZXJlLXNlIHF1ZSBzZWphXG4gICAqIHVzYWRhIGEgb3JpZW50YcOnw6NvIFwiYm90dG9tXCIgKGFiYWl4byksIHBvcsOpbSBvIG1lc21vIMOpIGZsZXjDrXZlbCBlIHNlcsOhIHJvdGFjaW9uYWRvXG4gICAqIGF1dG9tYXRpY2FtZW50ZSBwYXJhIHNlIGFkZXF1YXIgYSB0ZWxhLCBjYXNvIG5lY2Vzc8OhcmlvLlxuICAgKlxuICAgKiBQb3Npw6fDtWVzIHbDoWxpZGFzOlxuICAgKiAtIGByaWdodGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBkaXJlaXRvIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgcmlnaHQtYm90dG9tYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGRpcmVpdG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGByaWdodC10b3BgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZGlyZWl0byBzdXBlcmlvciBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGJvdHRvbWA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWJhaXhvIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgYm90dG9tLWxlZnRgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFiYWl4byBlIMOgIGVzcXVlcmRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgYm90dG9tLXJpZ2h0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhYmFpeG8gZSDDoCBkaXJlaXRhIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgbm8gbGFkbyBlc3F1ZXJkbyBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqIC0gYGxlZnQtdG9wYDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBubyBsYWRvIGVzcXVlcmRvIHN1cGVyaW9yIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgbGVmdC1ib3R0b21gOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIG5vIGxhZG8gZXNxdWVyZG8gaW5mZXJpb3IgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGB0b3BgOiBQb3NpY2lvbmEgbyBwby10b29sdGlwIGFjaW1hIGRvIGNvbXBvbmVudGUgYWx2by5cbiAgICogLSBgdG9wLXJpZ2h0YDogUG9zaWNpb25hIG8gcG8tdG9vbHRpcCBhY2ltYSBlIMOgIGRpcmVpdGEgZG8gY29tcG9uZW50ZSBhbHZvLlxuICAgKiAtIGB0b3AtbGVmdGA6IFBvc2ljaW9uYSBvIHBvLXRvb2x0aXAgYWNpbWEgZSDDoCBlc3F1ZXJkYSBkbyBjb21wb25lbnRlIGFsdm8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGJvdHRvbVxuICAgKi9cbiAgQElucHV0KCdwLXRvb2x0aXAtcG9zaXRpb24nKSBzZXQgdG9vbHRpcFBvc2l0aW9uKHBvc2l0aW9uOiBzdHJpbmcpIHtcbiAgICB0aGlzLl90b29sdGlwUG9zaXRpb24gPSBQT19DT05UUk9MX1BPU0lUSU9OUy5pbmNsdWRlcyhwb3NpdGlvbikgPyBwb3NpdGlvbiA6IFBPX1RPT0xUSVBfUE9TSVRJT05fREVGQVVMVDtcbiAgfVxuICBnZXQgdG9vbHRpcFBvc2l0aW9uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3Rvb2x0aXBQb3NpdGlvbjtcbiAgfVxuXG59XG4iXX0=