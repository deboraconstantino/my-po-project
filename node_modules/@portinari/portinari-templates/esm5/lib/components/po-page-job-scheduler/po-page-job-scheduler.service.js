/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addZero, convertDateToISOExtended } from '../../utils/util';
var PoPageJobSchedulerService = /** @class */ (function () {
    function PoPageJobSchedulerService(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-PORTINARI-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.configServiceApi = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        this.endpoint = config.endpoint;
    };
    // Cria um recurso
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.createResource = 
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    function (resource) {
        /** @type {?} */
        var jobScheduler = this.convertToJobScheduler(resource);
        return this.http.post("" + this.endpoint, jobScheduler, { headers: this.headers });
    };
    /**
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.getHeadProcesses = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = { 'X-Portinari-No-Error': 'true' };
        return this.http.head(this.endpoint + "/processes", { headers: headers });
    };
    // Busca parametros pelo processo id
    // Busca parametros pelo processo id
    /**
     * @param {?} processId
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.getParametersByProcess = 
    // Busca parametros pelo processo id
    /**
     * @param {?} processId
     * @return {?}
     */
    function (processId) {
        return this.http.get(this.endpoint + "/processes/" + processId + "/parameters", { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        function (resource) { return resource.items; })));
    };
    // Busca um único recurso
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.getProcess = 
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.endpoint + "/processes/" + id, { headers: this.headers });
    };
    // Busca uma lista de processos
    // Busca uma lista de processos
    /**
     * @param {?=} params
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.getProcesses = 
    // Busca uma lista de processos
    /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (params === void 0) { params = {}; }
        return this.http.get(this.endpoint + "/processes", { params: params });
    };
    // Busca um único recurso
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.getResource = 
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.http.get(this.endpoint + "/" + id, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        function (resource) { return _this.convertToJobSchedulerInternal(resource); })));
    };
    // Atualiza um recurso
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.updateResource = 
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    function (id, resource) {
        /** @type {?} */
        var jobScheduler = this.convertToJobScheduler(resource);
        return this.http.put(this.endpoint + "/" + id, jobScheduler, { headers: this.headers });
    };
    /**
     * @private
     * @param {?} jobSchedulerInternal
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.convertToJobScheduler = /**
     * @private
     * @param {?} jobSchedulerInternal
     * @return {?}
     */
    function (jobSchedulerInternal) {
        /** @type {?} */
        var jobScheduler = tslib_1.__assign({}, jobSchedulerInternal);
        if (jobSchedulerInternal.periodicity) {
            if (jobSchedulerInternal.periodicity === 'single') {
                jobScheduler.recurrent = false;
            }
            else {
                Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));
            }
        }
        if (jobSchedulerInternal.firstExecutionHour) {
            jobScheduler.firstExecution =
                this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);
        }
        if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {
            delete jobScheduler.executionParameter;
        }
        this.removeInvalidKeys(jobScheduler);
        return jobScheduler;
    };
    /**
     * @private
     * @param {?=} jobScheduler
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.convertToJobSchedulerInternal = /**
     * @private
     * @param {?=} jobScheduler
     * @return {?}
     */
    function (jobScheduler) {
        if (jobScheduler === void 0) { jobScheduler = (/** @type {?} */ ({})); }
        /** @type {?} */
        var jobSchedulerInternal = tslib_1.__assign({}, jobScheduler);
        if (jobScheduler.firstExecution) {
            jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);
        }
        Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));
        this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);
        return jobSchedulerInternal;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.convertToPeriodicity = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var newValue = {};
        /** @type {?} */
        var valuePeriodicity = value.periodicity;
        if (valuePeriodicity) {
            newValue[valuePeriodicity] = {};
            if (valuePeriodicity === 'monthly') {
                newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;
            }
            else if (valuePeriodicity === 'weekly') {
                newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;
            }
            newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;
            newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;
        }
        return newValue;
    };
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.convertToPeriodicityInternal = /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = (/** @type {?} */ ({})); }
        if (value.monthly) {
            return {
                periodicity: 'monthly',
                hour: addZero(value.monthly.hour) + ":" + addZero(value.monthly.minute),
                dayOfMonth: value.monthly.day
            };
        }
        else if (value.daily) {
            return {
                periodicity: 'daily',
                hour: addZero(value.daily.hour) + ":" + addZero(value.daily.minute)
            };
        }
        else if (value.weekly) {
            return {
                periodicity: 'weekly',
                hour: addZero(value.weekly.hour) + ":" + addZero(value.weekly.minute),
                daysOfWeek: tslib_1.__spread(value.weekly.daysOfWeek)
            };
        }
        else {
            return {
                periodicity: 'single'
            };
        }
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.getCurrentHour = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var hours = addZero(date.getHours());
        /** @type {?} */
        var minutes = addZero(date.getMinutes());
        return hours + ":" + minutes;
    };
    /**
     * @private
     * @param {?} firstExecutionDate
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.getHourFirstExecution = /**
     * @private
     * @param {?} firstExecutionDate
     * @return {?}
     */
    function (firstExecutionDate) {
        return this.getCurrentHour(new Date(firstExecutionDate));
    };
    /**
     * @private
     * @param {?} value
     * @param {?=} keys
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.removeInvalidKeys = /**
     * @private
     * @param {?} value
     * @param {?=} keys
     * @return {?}
     */
    function (value, keys) {
        /** @type {?} */
        var invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];
        Object.keys(value).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (invalidKeys.includes(key)) {
                delete value[key];
            }
        }));
    };
    /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.replaceHourFirstExecution = /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    function (date, time) {
        /** @type {?} */
        var firstExecutionDate = new Date(date);
        /** @type {?} */
        var timeSplited = time.split(':');
        /** @type {?} */
        var hours = parseInt(timeSplited[0], 10);
        /** @type {?} */
        var minutes = parseInt(timeSplited[1], 10);
        firstExecutionDate.setHours(hours, minutes);
        return convertDateToISOExtended(firstExecutionDate);
    };
    /**
     * @private
     * @param {?} parameter
     * @return {?}
     */
    PoPageJobSchedulerService.prototype.returnValidExecutionParameter = /**
     * @private
     * @param {?} parameter
     * @return {?}
     */
    function (parameter) {
        /** @type {?} */
        var newParameter = tslib_1.__assign({}, parameter);
        for (var key in newParameter) {
            if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {
                delete newParameter[key];
            }
        }
        return newParameter;
    };
    PoPageJobSchedulerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoPageJobSchedulerService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoPageJobSchedulerService;
}());
export { PoPageJobSchedulerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerService.prototype.endpoint;
    /** @type {?} */
    PoPageJobSchedulerService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1qb2Itc2NoZWR1bGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlLWpvYi1zY2hlZHVsZXIvcG8tcGFnZS1qb2Itc2NoZWR1bGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQU1yRTtJQVNFLG1DQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBTjVCLGFBQVEsR0FBRyxHQUFHLENBQUM7UUFFZCxZQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDO1lBQzlDLHlCQUF5QixFQUFFLE1BQU07U0FDbEMsQ0FBQyxDQUFDO0lBRXFDLENBQUM7Ozs7O0lBRXpDLG9EQUFnQjs7OztJQUFoQixVQUFpQixNQUFrQztRQUFsQyx1QkFBQSxFQUFBLFdBQWtDO1FBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNsQyxDQUFDO0lBRUQsa0JBQWtCOzs7Ozs7SUFDbEIsa0RBQWM7Ozs7OztJQUFkLFVBQWUsUUFBUTs7WUFDZixZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQztRQUV6RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUcsSUFBSSxDQUFDLFFBQVUsRUFBRSxZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENB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Y2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBhZGRaZXJvLCBjb252ZXJ0RGF0ZVRvSVNPRXh0ZW5kZWQgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcclxuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnQHBvcnRpbmFyaS9wb3J0aW5hcmktdWknO1xyXG5cclxuaW1wb3J0IHsgUG9Kb2JTY2hlZHVsZXIgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tam9iLXNjaGVkdWxlci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBQb0pvYlNjaGVkdWxlckludGVybmFsIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWpvYi1zY2hlZHVsZXItaW50ZXJuYWwuaW50ZXJmYWNlJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2Uge1xyXG5cclxuICBwcml2YXRlIGVuZHBvaW50ID0gJy8nO1xyXG5cclxuICByZWFkb25seSBoZWFkZXJzOiBIdHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAnWC1QT1JUSU5BUkktU0NSRUVOLUxPQ0snOiAndHJ1ZSdcclxuICB9KTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgY29uZmlnU2VydmljZUFwaShjb25maWc6IHsgZW5kcG9pbnQ/OiBzdHJpbmcgfSA9IHt9KSB7XHJcbiAgICB0aGlzLmVuZHBvaW50ID0gY29uZmlnLmVuZHBvaW50O1xyXG4gIH1cclxuXHJcbiAgLy8gQ3JpYSB1bSByZWN1cnNvXHJcbiAgY3JlYXRlUmVzb3VyY2UocmVzb3VyY2UpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3Qgam9iU2NoZWR1bGVyID0gdGhpcy5jb252ZXJ0VG9Kb2JTY2hlZHVsZXIocmVzb3VyY2UpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChgJHt0aGlzLmVuZHBvaW50fWAsIGpvYlNjaGVkdWxlciwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRIZWFkUHJvY2Vzc2VzKCkge1xyXG4gICAgY29uc3QgaGVhZGVycyA9IHsgJ1gtUG9ydGluYXJpLU5vLUVycm9yJzogJ3RydWUnIH07XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5oZWFkKGAke3RoaXMuZW5kcG9pbnR9L3Byb2Nlc3Nlc2AsIHsgaGVhZGVycyB9KTtcclxuICB9XHJcblxyXG4gIC8vIEJ1c2NhIHBhcmFtZXRyb3MgcGVsbyBwcm9jZXNzbyBpZFxyXG4gIGdldFBhcmFtZXRlcnNCeVByb2Nlc3MocHJvY2Vzc0lkOiBzdHJpbmcgfCBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5lbmRwb2ludH0vcHJvY2Vzc2VzLyR7cHJvY2Vzc0lkfS9wYXJhbWV0ZXJzYCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSlcclxuICAgIC5waXBlKG1hcCgocmVzb3VyY2U6IHsgaXRlbXM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4gfSkgPT4gcmVzb3VyY2UuaXRlbXMpKTtcclxuICB9XHJcblxyXG4gIC8vIEJ1c2NhIHVtIMO6bmljbyByZWN1cnNvXHJcbiAgZ2V0UHJvY2VzcyhpZDogc3RyaW5nIHwgbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3RoaXMuZW5kcG9pbnR9L3Byb2Nlc3Nlcy8ke2lkfWAsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gQnVzY2EgdW1hIGxpc3RhIGRlIHByb2Nlc3Nvc1xyXG4gIGdldFByb2Nlc3NlcyhwYXJhbXM6IHt9ID0ge30pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5lbmRwb2ludH0vcHJvY2Vzc2VzYCwgeyBwYXJhbXMgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBCdXNjYSB1bSDDum5pY28gcmVjdXJzb1xyXG4gIGdldFJlc291cmNlKGlkOiBzdHJpbmcgfCBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5lbmRwb2ludH0vJHtpZH1gLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KVxyXG4gICAgICAucGlwZShtYXAocmVzb3VyY2UgPT4gdGhpcy5jb252ZXJ0VG9Kb2JTY2hlZHVsZXJJbnRlcm5hbChyZXNvdXJjZSkpKTtcclxuICB9XHJcblxyXG4gIC8vIEF0dWFsaXphIHVtIHJlY3Vyc29cclxuICB1cGRhdGVSZXNvdXJjZShpZCwgcmVzb3VyY2UpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3Qgam9iU2NoZWR1bGVyID0gdGhpcy5jb252ZXJ0VG9Kb2JTY2hlZHVsZXIocmVzb3VyY2UpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KGAke3RoaXMuZW5kcG9pbnR9LyR7aWR9YCwgam9iU2NoZWR1bGVyLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydFRvSm9iU2NoZWR1bGVyKGpvYlNjaGVkdWxlckludGVybmFsKTogUG9Kb2JTY2hlZHVsZXIge1xyXG4gICAgY29uc3Qgam9iU2NoZWR1bGVyID0geyAuLi5qb2JTY2hlZHVsZXJJbnRlcm5hbCB9O1xyXG5cclxuICAgIGlmIChqb2JTY2hlZHVsZXJJbnRlcm5hbC5wZXJpb2RpY2l0eSkge1xyXG5cclxuICAgICAgaWYgKGpvYlNjaGVkdWxlckludGVybmFsLnBlcmlvZGljaXR5ID09PSAnc2luZ2xlJykge1xyXG4gICAgICAgIGpvYlNjaGVkdWxlci5yZWN1cnJlbnQgPSBmYWxzZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKGpvYlNjaGVkdWxlciwgdGhpcy5jb252ZXJ0VG9QZXJpb2RpY2l0eShqb2JTY2hlZHVsZXJJbnRlcm5hbCkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlmIChqb2JTY2hlZHVsZXJJbnRlcm5hbC5maXJzdEV4ZWN1dGlvbkhvdXIpIHtcclxuICAgICAgam9iU2NoZWR1bGVyLmZpcnN0RXhlY3V0aW9uID1cclxuICAgICAgICB0aGlzLnJlcGxhY2VIb3VyRmlyc3RFeGVjdXRpb24oam9iU2NoZWR1bGVySW50ZXJuYWwuZmlyc3RFeGVjdXRpb24sIGpvYlNjaGVkdWxlckludGVybmFsLmZpcnN0RXhlY3V0aW9uSG91cik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLnJldHVyblZhbGlkRXhlY3V0aW9uUGFyYW1ldGVyKGpvYlNjaGVkdWxlci5leGVjdXRpb25QYXJhbWV0ZXIpKS5sZW5ndGgpIHtcclxuICAgICAgZGVsZXRlIGpvYlNjaGVkdWxlci5leGVjdXRpb25QYXJhbWV0ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW1vdmVJbnZhbGlkS2V5cyhqb2JTY2hlZHVsZXIpO1xyXG5cclxuICAgIHJldHVybiBqb2JTY2hlZHVsZXI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNvbnZlcnRUb0pvYlNjaGVkdWxlckludGVybmFsKGpvYlNjaGVkdWxlciA9IDxhbnk+IHt9KTogUG9Kb2JTY2hlZHVsZXJJbnRlcm5hbCB7XHJcbiAgICBjb25zdCBqb2JTY2hlZHVsZXJJbnRlcm5hbCA9IHsgLi4uam9iU2NoZWR1bGVyIH07XHJcblxyXG4gICAgaWYgKGpvYlNjaGVkdWxlci5maXJzdEV4ZWN1dGlvbikge1xyXG4gICAgICBqb2JTY2hlZHVsZXJJbnRlcm5hbC5maXJzdEV4ZWN1dGlvbkhvdXIgPSB0aGlzLmdldEhvdXJGaXJzdEV4ZWN1dGlvbihqb2JTY2hlZHVsZXIuZmlyc3RFeGVjdXRpb24pO1xyXG4gICAgfVxyXG5cclxuICAgIE9iamVjdC5hc3NpZ24oam9iU2NoZWR1bGVySW50ZXJuYWwsIHRoaXMuY29udmVydFRvUGVyaW9kaWNpdHlJbnRlcm5hbChqb2JTY2hlZHVsZXIpKTtcclxuXHJcbiAgICB0aGlzLnJlbW92ZUludmFsaWRLZXlzKGpvYlNjaGVkdWxlckludGVybmFsLCBbJ3dlZWtseScsICdtb250aGx5JywgJ2RhaWx5J10pO1xyXG5cclxuICAgIHJldHVybiBqb2JTY2hlZHVsZXJJbnRlcm5hbDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydFRvUGVyaW9kaWNpdHkodmFsdWU6IHsgcGVyaW9kaWNpdHk6IHN0cmluZyAsIGRheU9mTW9udGg/OiBzdHJpbmcsIGRheXNPZldlZWs/OiBudW1iZXIsIGhvdXI/OiBzdHJpbmcgfSkge1xyXG4gICAgY29uc3QgbmV3VmFsdWUgPSB7fTtcclxuICAgIGNvbnN0IHZhbHVlUGVyaW9kaWNpdHkgPSB2YWx1ZS5wZXJpb2RpY2l0eTtcclxuXHJcbiAgICBpZiAodmFsdWVQZXJpb2RpY2l0eSkge1xyXG4gICAgICBuZXdWYWx1ZVt2YWx1ZVBlcmlvZGljaXR5XSA9IHt9O1xyXG5cclxuICAgICAgaWYgKHZhbHVlUGVyaW9kaWNpdHkgPT09ICdtb250aGx5Jykge1xyXG4gICAgICAgIG5ld1ZhbHVlW3ZhbHVlUGVyaW9kaWNpdHldLmRheSA9IHZhbHVlLmRheU9mTW9udGggPyBwYXJzZUludCh2YWx1ZS5kYXlPZk1vbnRoLCAxMCkgOiAwO1xyXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlUGVyaW9kaWNpdHkgPT09ICd3ZWVrbHknKSB7XHJcbiAgICAgICAgbmV3VmFsdWVbdmFsdWVQZXJpb2RpY2l0eV0uZGF5c09mV2VlayA9IHZhbHVlLmRheXNPZldlZWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG5ld1ZhbHVlW3ZhbHVlUGVyaW9kaWNpdHldLmhvdXIgPSB2YWx1ZS5ob3VyID8gcGFyc2VJbnQodmFsdWUuaG91ci5zcGxpdCgnOicpWzBdLCAxMCkgOiAwO1xyXG4gICAgICBuZXdWYWx1ZVt2YWx1ZVBlcmlvZGljaXR5XS5taW51dGUgPSB2YWx1ZS5ob3VyID8gcGFyc2VJbnQodmFsdWUuaG91ci5zcGxpdCgnOicpWzFdLCAxMCkgOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXdWYWx1ZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29udmVydFRvUGVyaW9kaWNpdHlJbnRlcm5hbCh2YWx1ZSA9IDxhbnk+IHt9KSB7XHJcbiAgICBpZiAodmFsdWUubW9udGhseSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHBlcmlvZGljaXR5OiAnbW9udGhseScsXHJcbiAgICAgICAgaG91cjogYCR7YWRkWmVybyh2YWx1ZS5tb250aGx5LmhvdXIpfToke2FkZFplcm8odmFsdWUubW9udGhseS5taW51dGUpfWAsXHJcbiAgICAgICAgZGF5T2ZNb250aDogdmFsdWUubW9udGhseS5kYXlcclxuICAgICAgfTtcclxuICAgIH0gZWxzZSBpZiAodmFsdWUuZGFpbHkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBwZXJpb2RpY2l0eTogJ2RhaWx5JyxcclxuICAgICAgICBob3VyOiBgJHthZGRaZXJvKHZhbHVlLmRhaWx5LmhvdXIpfToke2FkZFplcm8odmFsdWUuZGFpbHkubWludXRlKX1gXHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2UgaWYgKHZhbHVlLndlZWtseSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHBlcmlvZGljaXR5OiAnd2Vla2x5JyxcclxuICAgICAgICBob3VyOiBgJHthZGRaZXJvKHZhbHVlLndlZWtseS5ob3VyKX06JHthZGRaZXJvKHZhbHVlLndlZWtseS5taW51dGUpfWAsXHJcbiAgICAgICAgZGF5c09mV2VlazogWy4uLnZhbHVlLndlZWtseS5kYXlzT2ZXZWVrXVxyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBwZXJpb2RpY2l0eTogJ3NpbmdsZSdcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Q3VycmVudEhvdXIoZGF0ZTogRGF0ZSk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBob3VycyA9IGFkZFplcm8oZGF0ZS5nZXRIb3VycygpKTtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBhZGRaZXJvKGRhdGUuZ2V0TWludXRlcygpKTtcclxuXHJcbiAgICByZXR1cm4gYCR7aG91cnN9OiR7bWludXRlc31gO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRIb3VyRmlyc3RFeGVjdXRpb24oZmlyc3RFeGVjdXRpb25EYXRlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudEhvdXIobmV3IERhdGUoZmlyc3RFeGVjdXRpb25EYXRlKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlbW92ZUludmFsaWRLZXlzKHZhbHVlOiBvYmplY3QsIGtleXM/OiBBcnJheTxzdHJpbmc+KSB7XHJcbiAgICBjb25zdCBpbnZhbGlkS2V5cyA9IGtleXMgfHwgWydwZXJpb2RpY2l0eScsICdob3VyJywgJ21pbnV0ZScsICdkYXknLCAnZGF5c09mV2VlaycsICdkYXlPZk1vbnRoJywgJ2ZpcnN0RXhlY3V0aW9uSG91ciddO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIGlmIChpbnZhbGlkS2V5cy5pbmNsdWRlcyhrZXkpKSB7XHJcbiAgICAgICAgZGVsZXRlIHZhbHVlW2tleV07XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXBsYWNlSG91ckZpcnN0RXhlY3V0aW9uKGRhdGU6IHN0cmluZywgdGltZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGZpcnN0RXhlY3V0aW9uRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xyXG5cclxuICAgIGNvbnN0IHRpbWVTcGxpdGVkID0gdGltZS5zcGxpdCgnOicpO1xyXG5cclxuICAgIGNvbnN0IGhvdXJzID0gcGFyc2VJbnQodGltZVNwbGl0ZWRbMF0sIDEwKTtcclxuICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUludCh0aW1lU3BsaXRlZFsxXSwgMTApO1xyXG5cclxuICAgIGZpcnN0RXhlY3V0aW9uRGF0ZS5zZXRIb3Vycyhob3VycywgbWludXRlcyk7XHJcblxyXG4gICAgcmV0dXJuIGNvbnZlcnREYXRlVG9JU09FeHRlbmRlZChmaXJzdEV4ZWN1dGlvbkRhdGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXR1cm5WYWxpZEV4ZWN1dGlvblBhcmFtZXRlcihwYXJhbWV0ZXI6IG9iamVjdCkge1xyXG4gICAgY29uc3QgbmV3UGFyYW1ldGVyID0geyAuLi5wYXJhbWV0ZXIgfTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBuZXdQYXJhbWV0ZXIpIHtcclxuICAgICAgaWYgKG5ld1BhcmFtZXRlci5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG5ld1BhcmFtZXRlcltrZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBkZWxldGUgbmV3UGFyYW1ldGVyW2tleV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3UGFyYW1ldGVyO1xyXG4gIH1cclxuXHJcbn1cclxuIl19