/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { PoPageJobSchedulerInternal } from './po-page-job-scheduler-internal';
/**
 * \@description
 *
 * O `po-page-job-scheduler` é uma página para criação e atualização de agendamentos da execução de processos (Job Scheduler),
 * como por exemplo: a geração da folha de pagamento dos funcionários.
 *
 * Para utilizar esta página, basta informar o serviço (endpoint) para consumo,
 * sem a necessidade de criar componentes e tratamentos dos dados.
 *
 * Veja mais sobre os padrões utilizados nas requisições no [Guia de implementação de APIs](guides/api).
 */
var PoPageJobSchedulerBaseComponent = /** @class */ (function () {
    function PoPageJobSchedulerBaseComponent(poPageJobSchedulerService) {
        this.poPageJobSchedulerService = poPageJobSchedulerService;
        /**
         * Objeto com as propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
        this.model = new PoPageJobSchedulerInternal();
    }
    /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    PoPageJobSchedulerBaseComponent.prototype.loadData = /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (!id) {
            this.model = new PoPageJobSchedulerInternal();
            return;
        }
        this.poPageJobSchedulerService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.model = response;
        })).catch((/**
         * @return {?}
         */
        function () {
            _this.model = new PoPageJobSchedulerInternal();
        }));
    };
    /**
     * @protected
     * @param {?} controls
     * @return {?}
     */
    PoPageJobSchedulerBaseComponent.prototype.markAsDirtyInvalidControls = /**
     * @protected
     * @param {?} controls
     * @return {?}
     */
    function (controls) {
        for (var key in controls) {
            if (controls.hasOwnProperty(key)) {
                /** @type {?} */
                var control = controls[key];
                if (control.invalid) {
                    control.markAsDirty();
                }
            }
        }
    };
    PoPageJobSchedulerBaseComponent.propDecorators = {
        breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
        serviceApi: [{ type: Input, args: ['p-service-api',] }],
        title: [{ type: Input, args: ['p-title',] }]
    };
    return PoPageJobSchedulerBaseComponent;
}());
export { PoPageJobSchedulerBaseComponent };
if (false) {
    /**
     * Objeto com as propriedades do breadcrumb.
     * @type {?}
     */
    PoPageJobSchedulerBaseComponent.prototype.breadcrumb;
    /**
     * Endpoint usado pelo componente para busca dos processos e parâmetros que serão utilizados para criação e edição dos agendamentos.
     *
     * #### Processos
     *
     * Os processos são as tarefas que estarão disponíveis para o usuário poder fazer os agendamentos.
     * Ao inicializar o componente, será feito uma requisição `GET` para o endpoint `{service-api}/processes`, para buscar
     * essa lista de processos.
     *
     * Este endpoint `{service-api}/processes` deve retornar uma lista de objetos que seguem a definição de dados abaixo:
     *
     * ```
     * GET {service-api}/processes
     * ```
     *
     * ```
     * {
     *   items: [
     *     { "processID": "ac4f", "description": "Gerar folha de pagamento" },
     *     { "processID": "df6l", "description": "Relatório de imposto a recolher" },
     *     { "processID": "dk3p", "description": "Títulos em aberto" },
     *   ]
     * }
     * ```
     *
     * Desta forma será renderizado um componente para selecionar o processo e/ou filtrá-los.
     *
     * Para realizar o filtro de busca do processo, será feita uma requisição enviando o conteúdo digitado na busca através do
     * parâmetro `search`. Da seguinte forma:
     *
     * ```
     * GET {service-api}/processes?search=relatorio
     * ```
     *
     * > Veja mais sobre paginação e filtros no [Guia de implementação de APIs](guides/api).
     *
     * Também é possível fazer um agendamento de um processo específico, sem que seja necessário um endpoint para busca desses
     * processos. Então, caso o endpoint `{service-api}/processes` não seja válido, será apresentado um campo de entrada de
     * texto para o usuário informar diretamente
     * o **identificador do processo - `processID`** e ao salvar será enviado um `POST` para o endpoint difinido `serviceApi` conforme abaixo:
     *
     * ```
     * POST {service-api}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "daily": { "hour": 10, "minute": 12 },
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": true,
     *   "processID": "ac0405"
     *   ...
     * }
     * ```
     *
     * Caso seja necessário informar parâmetros e adicionar configurações no processo selecionado, será realizado um `GET`
     * como exemplificado abaixo. Os parâmetros devem retornar uma lista de objetos que seguem a interface
     * [PoDynamicFormField](/documentation/po-dynamic-form).
     *
     * ```
     * GET {service-api}/processes/:id/parameters
     * ...
     * {
     *   items: [
     *     { "property": "vencimento", type: "date" },
     *     { "property": "imposto-retido", "label": "Imposto Retido", type: "boolean" }
     *   ]
     * }
     * ```
     *
     * #### Salvar e Atualizar
     *
     * Para salvar o agendamento, será feita uma requisição de criação, passando os valores preenchidos pelo usuário via *payload*.
     * Abaixo uma requisição `POST` disparada, onde as propriedades do *Job Scheduler* foram preenchidas:
     *
     * ```
     *  POST {service-api}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": true,
     *   "daily": { "hour": 10, "minute": 12 },
     *   "processID": "ac0405"
     * }
     * ```
     *
     * Caso queira que o componente carregue um agendamento já existente, deve ser incluído um parâmetro na rota chamado `id`.
     *
     * Exemplo de configuração de rota:
     *
     * ```
     *  RouterModule.forRoot([
     *    ...
     *    { path: 'edit/:id', component: ExampleJobSchedulerComponent },
     *    ...
     *  ],
     * ```
     *
     * Baseado nisso, na inicialização do template será disparado uma requisição para buscar o recurso que será editado.
     *
     * ```
     * GET {service-api}/{id}
     * ```
     *
     * Ao atualizar o agendamento, será disparado um `PUT` com os dados preenchidos.
     * Veja abaixo uma requisição `PUT` disparada, onde a propriedade *recurrent* e *daily* foram atualizadas:
     *
     * ```
     *  PUT {service-api}/{id}
     * ```
     *
     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:
     *
     * ```
     * {
     *   "firstExecution": "2018-12-07T00:00:01-00:00",
     *   "recurrent": false,
     *   "daily": { "hour": 11, "minute": 30 },
     *   "processID": "ac0405"
     * }
     * ```
     * @type {?}
     */
    PoPageJobSchedulerBaseComponent.prototype.serviceApi;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageJobSchedulerBaseComponent.prototype.title;
    /** @type {?} */
    PoPageJobSchedulerBaseComponent.prototype.model;
    /**
     * @type {?}
     * @protected
     */
    PoPageJobSchedulerBaseComponent.prototype.poPageJobSchedulerService;
}
//# sourceMappingURL=data:application/json;base64,