/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, Input } from '@angular/core';
import { browserLanguage, poLocaleDefault } from '../../../utils/util';
import { poPageBlockedUserLiterals } from './../literals/i18n/po-page-blocked-user-literals';
import { PoPageBlockedUserReason } from '../enums/po-page-blocked-user-reason.enum';
var PoPageBlockedUserReasonComponent = /** @class */ (function () {
    function PoPageBlockedUserReasonComponent(changeDetector) {
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PoPageBlockedUserReasonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    };
    /**
     * @return {?}
     */
    PoPageBlockedUserReasonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getLiterals();
    };
    /**
     * @return {?}
     */
    PoPageBlockedUserReasonComponent.prototype.getImageByReasonType = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return "./assets/images/" + reasonImage + ".svg";
    };
    /**
     * @return {?}
     */
    PoPageBlockedUserReasonComponent.prototype.getParams = /**
     * @return {?}
     */
    function () {
        this.literalParams =
            this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];
    };
    /**
     * @private
     * @return {?}
     */
    PoPageBlockedUserReasonComponent.prototype.getLiterals = /**
     * @private
     * @return {?}
     */
    function () {
        this.getParams();
        this.literals = tslib_1.__assign({}, poPageBlockedUserLiterals[this.reason][poLocaleDefault], poPageBlockedUserLiterals[this.reason][browserLanguage()]);
        this.changeDetector.detectChanges();
    };
    PoPageBlockedUserReasonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page-blocked-user-reason',
                    template: "<div class=\"po-page-blocked-user-reason-content\">\n  <img \n    class=\"po-page-blocked-user-image po-mb-3\" \n    [src]=\"getImageByReasonType()\"> \n  <div class=\"po-page-blocked-user-header po-mb-md-3 po-row\">\n    <div class=\"po-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"po-page-blocked-user-text po-font-text po-row\">\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12 po-page-blocked-user-text-bold\">{{ literals?.firstPhrase | poI18n:literalParams }}</div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>"
                }] }
    ];
    /** @nocollapse */
    PoPageBlockedUserReasonComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    PoPageBlockedUserReasonComponent.propDecorators = {
        params: [{ type: Input, args: ['p-params',] }],
        reason: [{ type: Input, args: ['p-reason',] }]
    };
    return PoPageBlockedUserReasonComponent;
}());
export { PoPageBlockedUserReasonComponent };
if (false) {
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.literalParams;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.literals;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.params;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.reason;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserReasonComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXRlbXBsYXRlcy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXBhZ2UtYmxvY2tlZC11c2VyL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQW9DLE1BQU0sZUFBZSxDQUFDO0FBRXRHLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDN0YsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFHcEY7SUFhRSwwQ0FBb0IsY0FBaUM7UUFBakMsbUJBQWMsR0FBZCxjQUFjLENBQW1CO0lBQUcsQ0FBQzs7Ozs7SUFFekQsc0RBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQjtJQUNILENBQUM7Ozs7SUFFRCxtREFBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7OztJQUVELCtEQUFvQjs7O0lBQXBCOztZQUNNLFdBQVc7UUFFZixRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbkIsS0FBSyxNQUFNLENBQUMsQ0FBQztnQkFDWCxXQUFXLEdBQUcsVUFBVSxDQUFDO2dCQUN6QixNQUFNO2FBQ1A7WUFDRCxLQUFLLGtCQUFrQixDQUFDLENBQUM7Z0JBQ3ZCLFdBQVcsR0FBRyxjQUFjLENBQUM7Z0JBQzdCLE1BQU07YUFDUDtZQUNELEtBQUssaUJBQWlCLENBQUMsQ0FBQztnQkFDdEIsV0FBVyxHQUFHLFNBQVMsQ0FBQztnQkFDeEIsTUFBTTthQUNQO1NBQ0Y7UUFDRCxPQUFPLHFCQUFtQixXQUFXLFNBQU0sQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsb0RBQVM7OztJQUFUO1FBQ0UsSUFBSSxDQUFDLGFBQWE7WUFDaEIsSUFBSSxDQUFDLE1BQU0sS0FBSyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekgsQ0FBQzs7Ozs7SUFFTyxzREFBVzs7OztJQUFuQjtRQUNFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsUUFBUSx3QkFDUix5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLEVBQ3ZELHlCQUF5QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUM3RCxDQUFDO1FBRUYsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN0QyxDQUFDOztnQkEzREYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw2QkFBNkI7b0JBQ3ZDLGd0QkFBMkQ7aUJBQzVEOzs7O2dCQVhRLGlCQUFpQjs7O3lCQWlCdkIsS0FBSyxTQUFDLFVBQVU7eUJBRWhCLEtBQUssU0FBQyxVQUFVOztJQWtEbkIsdUNBQUM7Q0FBQSxBQTdERCxJQTZEQztTQXpEWSxnQ0FBZ0M7OztJQUUzQyx5REFBYzs7SUFDZCxvREFBMEY7O0lBRTFGLGtEQUF5RDs7SUFFekQsa0RBQW1EOzs7OztJQUV2QywwREFBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgYnJvd3Nlckxhbmd1YWdlLCBwb0xvY2FsZURlZmF1bHQgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgcG9QYWdlQmxvY2tlZFVzZXJMaXRlcmFscyB9IGZyb20gJy4vLi4vbGl0ZXJhbHMvaTE4bi9wby1wYWdlLWJsb2NrZWQtdXNlci1saXRlcmFscyc7XG5pbXBvcnQgeyBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvbiB9IGZyb20gJy4uL2VudW1zL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5lbnVtJztcbmltcG9ydCB7IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uUGFyYW1zIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24tcGFyYW1zLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQge1xuXG4gIGxpdGVyYWxQYXJhbXM7XG4gIGxpdGVyYWxzOiB7dGl0bGU6IHN0cmluZywgZmlyc3RQaHJhc2U6IHN0cmluZywgc2Vjb25kUGhyYXNlOiBzdHJpbmcsIHRoaXJkUGhyYXNlOiBzdHJpbmd9O1xuXG4gIEBJbnB1dCgncC1wYXJhbXMnKSBwYXJhbXM6IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uUGFyYW1zO1xuXG4gIEBJbnB1dCgncC1yZWFzb24nKSByZWFzb246IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5yZWFzb24gfHwgY2hhbmdlcy5wYXJhbXMpIHtcbiAgICAgIHRoaXMuZ2V0TGl0ZXJhbHMoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmdldExpdGVyYWxzKCk7XG4gIH1cblxuICBnZXRJbWFnZUJ5UmVhc29uVHlwZSgpIHtcbiAgICBsZXQgcmVhc29uSW1hZ2U7XG5cbiAgICBzd2l0Y2ggKHRoaXMucmVhc29uKSB7XG4gICAgICBjYXNlICdub25lJzoge1xuICAgICAgICByZWFzb25JbWFnZSA9ICdiaWctbG9jayc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZXhjZWVkZWRBdHRlbXB0cyc6IHtcbiAgICAgICAgcmVhc29uSW1hZ2UgPSAnYmxvY2tlZC11c2VyJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdleHBpcmVkUGFzc3dvcmQnOiB7XG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2V4cGlyZWQnO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGAuL2Fzc2V0cy9pbWFnZXMvJHtyZWFzb25JbWFnZX0uc3ZnYDtcbiAgfVxuXG4gIGdldFBhcmFtcygpIHtcbiAgICB0aGlzLmxpdGVyYWxQYXJhbXMgPVxuICAgICAgdGhpcy5yZWFzb24gPT09ICdleHBpcmVkUGFzc3dvcmQnID8gW3RoaXMucGFyYW1zLmRheXMsIHRoaXMucGFyYW1zLmRheXNdIDogW3RoaXMucGFyYW1zLmF0dGVtcHRzLCB0aGlzLnBhcmFtcy5ob3Vyc107XG4gIH1cblxuICBwcml2YXRlIGdldExpdGVyYWxzKCkge1xuICAgIHRoaXMuZ2V0UGFyYW1zKCk7XG5cbiAgICB0aGlzLmxpdGVyYWxzID0ge1xuICAgICAgLi4ucG9QYWdlQmxvY2tlZFVzZXJMaXRlcmFsc1t0aGlzLnJlYXNvbl1bcG9Mb2NhbGVEZWZhdWx0XSxcbiAgICAgIC4uLnBvUGFnZUJsb2NrZWRVc2VyTGl0ZXJhbHNbdGhpcy5yZWFzb25dW2Jyb3dzZXJMYW5ndWFnZSgpXSxcbiAgICB9O1xuXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cblxufVxuIl19