/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { PoPageLoginAuthenticationType } from './enums/po-page-login-authentication-type.enum';
var PoPageLoginService = /** @class */ (function () {
    function PoPageLoginService(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} type
     * @param {?} loginForm
     * @return {?}
     */
    PoPageLoginService.prototype.onLogin = /**
     * @param {?} url
     * @param {?} type
     * @param {?} loginForm
     * @return {?}
     */
    function (url, type, loginForm) {
        if (type === PoPageLoginAuthenticationType.Bearer) {
            loginForm.password = btoa(loginForm.password);
            return this.http.post(url, loginForm);
        }
        else {
            /** @type {?} */
            var user = "(" + loginForm.login + ":" + loginForm.password + ")";
            /** @type {?} */
            var headers = new HttpHeaders({
                'Authorization': type + " " + btoa(user)
            });
            delete loginForm.login;
            delete loginForm.password;
            return this.http.post(url, loginForm, { headers: headers });
        }
    };
    PoPageLoginService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoPageLoginService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoPageLoginService;
}());
export { PoPageLoginService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageLoginService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1sb2dpbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdGVtcGxhdGVzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tcGFnZS1sb2dpbi9wby1wYWdlLWxvZ2luLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUszQyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUUvRjtJQUdFLDRCQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQzs7Ozs7OztJQUV6QyxvQ0FBTzs7Ozs7O0lBQVAsVUFBUSxHQUFXLEVBQUUsSUFBbUMsRUFBRSxTQUFzQjtRQUU5RSxJQUFJLElBQUksS0FBSyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUU7WUFDakQsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07O2dCQUNDLElBQUksR0FBRyxNQUFJLFNBQVMsQ0FBQyxLQUFLLFNBQUksU0FBUyxDQUFDLFFBQVEsTUFBRzs7Z0JBQ25ELE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQztnQkFDOUIsZUFBZSxFQUFLLElBQUksTUFBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDekMsQ0FBQztZQUNGLE9BQU8sU0FBUyxDQUFDLEtBQUssQ0FBQztZQUN2QixPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUM7WUFDMUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO0lBRUgsQ0FBQzs7Z0JBcEJGLFVBQVU7Ozs7Z0JBUkYsVUFBVTs7SUE4Qm5CLHlCQUFDO0NBQUEsQUF0QkQsSUFzQkM7U0FyQlksa0JBQWtCOzs7Ozs7SUFFakIsa0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUG9QYWdlTG9naW4gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcGFnZS1sb2dpbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlTG9naW5BdXRoZW50aWNhdGlvblR5cGUgfSBmcm9tICcuL2VudW1zL3BvLXBhZ2UtbG9naW4tYXV0aGVudGljYXRpb24tdHlwZS5lbnVtJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvUGFnZUxvZ2luU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cblxuICBvbkxvZ2luKHVybDogc3RyaW5nLCB0eXBlOiBQb1BhZ2VMb2dpbkF1dGhlbnRpY2F0aW9uVHlwZSwgbG9naW5Gb3JtOiBQb1BhZ2VMb2dpbik6IE9ic2VydmFibGU8T2JqZWN0PiB7XG5cbiAgICBpZiAodHlwZSA9PT0gUG9QYWdlTG9naW5BdXRoZW50aWNhdGlvblR5cGUuQmVhcmVyKSB7XG4gICAgICBsb2dpbkZvcm0ucGFzc3dvcmQgPSBidG9hKGxvZ2luRm9ybS5wYXNzd29yZCk7XG4gICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBsb2dpbkZvcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB1c2VyID0gYCgke2xvZ2luRm9ybS5sb2dpbn06JHtsb2dpbkZvcm0ucGFzc3dvcmR9KWA7XG4gICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKHtcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgJHt0eXBlfSBgICsgYnRvYSh1c2VyKVxuICAgICAgfSk7XG4gICAgICBkZWxldGUgbG9naW5Gb3JtLmxvZ2luO1xuICAgICAgZGVsZXRlIGxvZ2luRm9ybS5wYXNzd29yZDtcbiAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIGxvZ2luRm9ybSwgeyBoZWFkZXJzIH0pO1xuICAgIH1cblxuICB9XG5cbn1cbiJdfQ==