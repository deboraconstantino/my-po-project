/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild } from '@angular/core';
import { PoDynamicFieldType, PoLanguageService } from '@portinari/portinari-ui';
import { capitalizeFirstLetter, getBrowserLanguage } from '../../utils/util';
import { PoPageCustomizationService } from '../../services/po-page-customization/po-page-customization.service';
import { PoAdvancedFilterComponent } from './po-advanced-filter/po-advanced-filter.component';
import { PoPageDynamicSearchBaseComponent } from './po-page-dynamic-search-base.component';
/**
 * \@docsExtends PoPageDynamicSearchBaseComponent
 *
 * \@example
 *
 * <example name="po-page-dynamic-search-basic" title="Portinari Page Dynamic Search Basic">
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-search-hiring-processes" title="Portinari Page Dynamic Search - Hiring processes">
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.service.ts"> </file>
 * </example>
 */
var PoPageDynamicSearchComponent = /** @class */ (function (_super) {
    tslib_1.__extends(PoPageDynamicSearchComponent, _super);
    function PoPageDynamicSearchComponent(languageService, poPageCustomizationService) {
        var _this = _super.call(this, languageService) || this;
        _this.poPageCustomizationService = poPageCustomizationService;
        _this._disclaimerGroup = {
            change: _this.onChangeDisclaimerGroup.bind(_this),
            disclaimers: [],
            title: _this.literals.disclaimerGroupTitle
        };
        _this._filterSettings = {
            action: 'onAction',
            advancedAction: 'onAdvancedAction',
            ngModel: 'quickFilter',
            placeholder: _this.literals.searchPlaceholder
        };
        // Flag to control when changeDisclaimerGroup should be called
        _this.changeDisclaimersEnabled = false;
        return _this;
    }
    Object.defineProperty(PoPageDynamicSearchComponent.prototype, "disclaimerGroup", {
        get: /**
         * @return {?}
         */
        function () {
            return Object.assign({}, this._disclaimerGroup, { title: this.literals.disclaimerGroupTitle });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PoPageDynamicSearchComponent.prototype, "filterSettings", {
        get: /**
         * @return {?}
         */
        function () {
            this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : 'onAdvancedAction';
            return Object.assign({}, this._filterSettings, { placeholder: this.literals.searchPlaceholder });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setAdvancedFilterLiterals(this.literals);
        if (this.onLoad) {
            this.loadOptionsOnInitialize(this.onLoad);
        }
    };
    /**
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.loadSubscription) {
            this.loadSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.onAction = /**
     * @return {?}
     */
    function () {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = [
            { property: 'search', label: this.literals.quickSearchLabel + " " + this.quickFilter, value: this.quickFilter }
        ];
        if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {
            this.quickSearch.emit(this.quickFilter);
        }
        this.quickFilter = undefined;
    };
    /**
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.onAdvancedAction = /**
     * @return {?}
     */
    function () {
        this.poAdvancedFilter.open();
    };
    /**
     * @param {?} filters
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.onAdvancedSearch = /**
     * @param {?} filters
     * @return {?}
     */
    function (filters) {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = this.setDisclaimers(filters);
        this.advancedSearch.emit(filters);
    };
    /**
     * @private
     * @param {?} field
     * @param {?} filterValue
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.applyDisclaimerLabelValue = /**
     * @private
     * @param {?} field
     * @param {?} filterValue
     * @return {?}
     */
    function (field, filterValue) {
        /** @type {?} */
        var values = Array.isArray(filterValue) ? filterValue : [filterValue];
        /** @type {?} */
        var labels = values.map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var filteredField = field.options.find((/**
             * @param {?} option
             * @return {?}
             */
            function (option) { return option.value === value; }));
            return filteredField.label || filteredField.value;
        }));
        return labels.join(', ');
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.formatDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var year = parseInt(date.substr(0, 4), 10);
        /** @type {?} */
        var month = parseInt(date.substr(5, 2), 10);
        /** @type {?} */
        var day = parseInt(date.substr(8, 2), 10);
        return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());
    };
    /**
     * @private
     * @param {?} fields
     * @param {?} fieldName
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.getFieldByProperty = /**
     * @private
     * @param {?} fields
     * @param {?} fieldName
     * @return {?}
     */
    function (fields, fieldName) {
        return fields.find((/**
         * @param {?} field
         * @return {?}
         */
        function (field) { return field.property === fieldName; }));
    };
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.getFilterValueToDisclaimer = /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (field, value) {
        if (field.type === PoDynamicFieldType.Date) {
            return this.formatDate(value);
        }
        if (field.options) {
            return this.applyDisclaimerLabelValue(field, value);
        }
        return value;
    };
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.onChangeDisclaimerGroup = /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    function (disclaimers) {
        this.changeDisclaimersEnabled ? this.changeDisclaimers.emit(disclaimers) : this.changeDisclaimersEnabled = true;
    };
    /**
     * @private
     * @param {?} filters
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.setDisclaimers = /**
     * @private
     * @param {?} filters
     * @return {?}
     */
    function (filters) {
        var _this = this;
        /** @type {?} */
        var disclaimers = [];
        /** @type {?} */
        var properties = Object.keys(filters);
        properties.forEach((/**
         * @param {?} property
         * @return {?}
         */
        function (property) {
            /** @type {?} */
            var field = _this.getFieldByProperty(_this.filters, property);
            /** @type {?} */
            var label = field.label || capitalizeFirstLetter(field.property);
            /** @type {?} */
            var value = filters[property];
            disclaimers.push({
                label: label + ": " + _this.getFilterValueToDisclaimer(field, value),
                property: property,
                value: value
            });
        }));
        return disclaimers;
    };
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.loadOptionsOnInitialize = /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    function (onLoad) {
        var _this = this;
        this.loadSubscription = this.getPoDynamicPageOptions(onLoad).subscribe((/**
         * @param {?} responsePoOption
         * @return {?}
         */
        function (responsePoOption) {
            return _this.poPageCustomizationService.changeOriginalOptionsToNewOptions(_this, responsePoOption);
        }));
    };
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    PoPageDynamicSearchComponent.prototype.getPoDynamicPageOptions = /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    function (onLoad) {
        /** @type {?} */
        var originalOption = {
            title: this.title,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            filters: this.filters
        };
        /** @type {?} */
        var pageOptionSchema = {
            schema: [
                {
                    nameProp: 'filters',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true,
                    keyForMerge: 'label'
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    };
    PoPageDynamicSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'po-page-dynamic-search',
                    template: "<po-page-list\n  [p-actions]=\"actions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-disclaimer-group]=\"disclaimerGroup\"\n  [p-filter]=\"filterSettings\"\n  [p-title]=\"title\">\n\n  <po-advanced-filter\n    [p-filters]=\"filters\"\n    [p-literals]=\"advancedFilterLiterals\"\n    (p-search-event)=\"onAdvancedSearch($event)\">\n  </po-advanced-filter>\n\n  <ng-content></ng-content>\n</po-page-list>\n"
                }] }
    ];
    /** @nocollapse */
    PoPageDynamicSearchComponent.ctorParameters = function () { return [
        { type: PoLanguageService },
        { type: PoPageCustomizationService }
    ]; };
    PoPageDynamicSearchComponent.propDecorators = {
        poAdvancedFilter: [{ type: ViewChild, args: [PoAdvancedFilterComponent, { static: true },] }]
    };
    return PoPageDynamicSearchComponent;
}(PoPageDynamicSearchBaseComponent));
export { PoPageDynamicSearchComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.loadSubscription;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype._disclaimerGroup;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype._filterSettings;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.changeDisclaimersEnabled;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.quickFilter;
    /** @type {?} */
    PoPageDynamicSearchComponent.prototype.poAdvancedFilter;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.poPageCustomizationService;
}
//# sourceMappingURL=data:application/json;base64,