/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
var PoPageDynamicService = /** @class */ (function () {
    function PoPageDynamicService(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-PORTINARI-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    PoPageDynamicService.prototype.configServiceApi = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        if (config === void 0) { config = {}; }
        this.endpoint = config.endpoint;
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    PoPageDynamicService.prototype.getMetadata = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'list'; }
        /** @type {?} */
        var key = this.endpoint + "-" + type + "-metadata";
        /** @type {?} */
        var cache = JSON.parse(localStorage.getItem(key)) || {};
        /** @type {?} */
        var url = this.endpoint + "/metadata?type=" + type + "&version=" + (cache.version || '');
        return this.http.get(url).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return tslib_1.__assign({}, cache, response);
        })));
    };
    // Deleta um único recurso
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    PoPageDynamicService.prototype.deleteResource = 
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.delete(this.endpoint + "/" + id, { headers: this.headers });
    };
    // Deleta recursos em lote
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    PoPageDynamicService.prototype.deleteResources = 
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        return this.http.request('delete', "" + this.endpoint, { headers: this.headers, body: ids });
    };
    // Busca uma lista de recursos
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    PoPageDynamicService.prototype.getResources = 
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    function (params) {
        if (params === void 0) { params = {}; }
        return this.http.get(this.endpoint, { headers: this.headers, params: params });
    };
    // Busca um único recurso
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    PoPageDynamicService.prototype.getResource = 
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.http.get(this.endpoint + "/" + id, { headers: this.headers });
    };
    // Cria um recurso
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    PoPageDynamicService.prototype.createResource = 
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    function (resource) {
        return this.http.post("" + this.endpoint, resource, { headers: this.headers });
    };
    // Atualiza um recurso
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    PoPageDynamicService.prototype.updateResource = 
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    function (id, resource) {
        return this.http.put(this.endpoint + "/" + id, resource, { headers: this.headers });
    };
    PoPageDynamicService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PoPageDynamicService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return PoPageDynamicService;
}());
export { PoPageDynamicService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicService.prototype.endpoint;
    /** @type {?} */
    PoPageDynamicService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlLWR5bmFtaWMtdGFibGUvcG8tcGFnZS1keW5hbWljLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHL0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDO0lBU0UsOEJBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFONUIsYUFBUSxHQUFHLEdBQUcsQ0FBQztRQUVkLFlBQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUM7WUFDOUMseUJBQXlCLEVBQUUsTUFBTTtTQUNsQyxDQUFDLENBQUM7SUFFcUMsQ0FBQzs7Ozs7SUFFekMsK0NBQWdCOzs7O0lBQWhCLFVBQWlCLE1BQWtDO1FBQWxDLHVCQUFBLEVBQUEsV0FBa0M7UUFDakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRUQsMENBQVc7Ozs7SUFBWCxVQUFZLElBQXFCO1FBQXJCLHFCQUFBLEVBQUEsYUFBcUI7O1lBQ3pCLEdBQUcsR0FBTSxJQUFJLENBQUMsUUFBUSxTQUFJLElBQUksY0FBVzs7WUFDekMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUU7O1lBRW5ELEdBQUcsR0FBTSxJQUFJLENBQUMsUUFBUSx1QkFBa0IsSUFBSSxrQkFBWSxLQUFLLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBRTtRQUVuRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsVUFBQyxRQUFhO1lBQy9DLElBQUksUUFBUSxDQUFDLE9BQU8sS0FBSyxLQUFLLENBQUMsT0FBTyxFQUFFO2dCQUN0QyxPQUFPLEtBQUssQ0FBQzthQUNkO1lBRUQsWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRXBELDRCQUFhLEtBQUssRUFBSyxRQUFRLEVBQUc7UUFDcEMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7SUFFRCwwQkFBMEI7Ozs7OztJQUMxQiw2Q0FBYzs7Ozs7O0lBQWQsVUFBZSxFQUFFO1FBQ2YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBSSxJQUFJLENBQUMsUUFBUSxTQUFJLEVBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQsMEJBQTBCOzs7Ozs7SUFDMUIsOENBQWU7Ozs7OztJQUFmLFVBQWdCLEdBQWU7UUFDN0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsS0FBRyxJQUFJLENBQUMsUUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFFLENBQUM7SUFDaEcsQ0FBQztJQUVELDhCQUE4Qjs7Ozs7O0lBQzlCLDJDQUFZOzs7Ozs7SUFBWixVQUFhLE1BQWU7UUFBZix1QkFBQSxFQUFBLFdBQWU7UUFDMUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxRQUFBLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRCx5QkFBeUI7Ozs7OztJQUN6QiwwQ0FBVzs7Ozs7O0lBQVgsVUFBWSxFQUFFO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsUUFBUSxTQUFJLEVBQUksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsa0JBQWtCOzs7Ozs7SUFDbEIsNkNBQWM7Ozs7OztJQUFkLFVBQWUsUUFBUTtRQUNyQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUcsSUFBSSxDQUFDLFFBQVUsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELHNCQUFzQjs7Ozs7OztJQUN0Qiw2Q0FBYzs7Ozs7OztJQUFkLFVBQWUsRUFBRSxFQUFFLFFBQVE7UUFDekIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsUUFBUSxTQUFJLEVBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDdEYsQ0FBQzs7Z0JBNURGLFVBQVU7Ozs7Z0JBTEYsVUFBVTs7SUFrRW5CLDJCQUFDO0NBQUEsQUE3REQsSUE2REM7U0E1RFksb0JBQW9COzs7Ozs7SUFFL0Isd0NBQXVCOztJQUV2Qix1Q0FFRzs7Ozs7SUFFUyxvQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUG9QYWdlRHluYW1pY1NlcnZpY2Uge1xuXG4gIHByaXZhdGUgZW5kcG9pbnQgPSAnLyc7XG5cbiAgcmVhZG9ubHkgaGVhZGVyczogSHR0cEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICdYLVBPUlRJTkFSSS1TQ1JFRU4tTE9DSyc6ICd0cnVlJ1xuICB9KTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGNvbmZpZ1NlcnZpY2VBcGkoY29uZmlnOiB7IGVuZHBvaW50Pzogc3RyaW5nIH0gPSB7fSkge1xuICAgIHRoaXMuZW5kcG9pbnQgPSBjb25maWcuZW5kcG9pbnQ7XG4gIH1cblxuICBnZXRNZXRhZGF0YSh0eXBlOiBzdHJpbmcgPSAnbGlzdCcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IGtleSA9IGAke3RoaXMuZW5kcG9pbnR9LSR7dHlwZX0tbWV0YWRhdGFgO1xuICAgIGNvbnN0IGNhY2hlID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpKSB8fCB7fTtcblxuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuZW5kcG9pbnR9L21ldGFkYXRhP3R5cGU9JHt0eXBlfSZ2ZXJzaW9uPSR7Y2FjaGUudmVyc2lvbiB8fCAnJ31gO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKS5waXBlKG1hcCgocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlLnZlcnNpb24gPT09IGNhY2hlLnZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlO1xuICAgICAgfVxuXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XG5cbiAgICAgIHJldHVybiAgeyAuLi5jYWNoZSwgLi4ucmVzcG9uc2UgfTtcbiAgICB9KSk7XG4gIH1cblxuICAvLyBEZWxldGEgdW0gw7puaWNvIHJlY3Vyc29cbiAgZGVsZXRlUmVzb3VyY2UoaWQpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKGAke3RoaXMuZW5kcG9pbnR9LyR7aWR9YCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gIH1cblxuICAvLyBEZWxldGEgcmVjdXJzb3MgZW0gbG90ZVxuICBkZWxldGVSZXNvdXJjZXMoaWRzOiBBcnJheTxhbnk+KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnJlcXVlc3QoJ2RlbGV0ZScsIGAke3RoaXMuZW5kcG9pbnR9YCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIGJvZHk6IGlkcyB9ICk7XG4gIH1cblxuICAvLyBCdXNjYSB1bWEgbGlzdGEgZGUgcmVjdXJzb3NcbiAgZ2V0UmVzb3VyY2VzKHBhcmFtczoge30gPSB7fSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5lbmRwb2ludCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsIHBhcmFtcyB9KTtcbiAgfVxuXG4gIC8vIEJ1c2NhIHVtIMO6bmljbyByZWN1cnNvXG4gIGdldFJlc291cmNlKGlkKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHt0aGlzLmVuZHBvaW50fS8ke2lkfWAsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICB9XG5cbiAgLy8gQ3JpYSB1bSByZWN1cnNvXG4gIGNyZWF0ZVJlc291cmNlKHJlc291cmNlKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QoYCR7dGhpcy5lbmRwb2ludH1gLCByZXNvdXJjZSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gIH1cblxuICAvLyBBdHVhbGl6YSB1bSByZWN1cnNvXG4gIHVwZGF0ZVJlc291cmNlKGlkLCByZXNvdXJjZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQoYCR7dGhpcy5lbmRwb2ludH0vJHtpZH1gLCByZXNvdXJjZSwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gIH1cbn1cbiJdfQ==