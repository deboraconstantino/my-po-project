/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var PoPageCustomizationService = /** @class */ (function () {
    function PoPageCustomizationService(http) {
        this.http = http;
    }
    /**
     * @param {?} origin
     * @param {?} originalOption
     * @return {?}
     */
    PoPageCustomizationService.prototype.getCustomOptions = /**
     * @param {?} origin
     * @param {?} originalOption
     * @return {?}
     */
    function (origin, originalOption) {
        var _this = this;
        return this.createObservable(origin).pipe(map((/**
         * @param {?} newPageOptions
         * @return {?}
         */
        function (newPageOptions) { return _this.mergePageOptions(originalOption, newPageOptions); })));
    };
    /**
     * @template T, K
     * @param {?} objectToChange
     * @param {?} newOptions
     * @return {?}
     */
    PoPageCustomizationService.prototype.changeOriginalOptionsToNewOptions = /**
     * @template T, K
     * @param {?} objectToChange
     * @param {?} newOptions
     * @return {?}
     */
    function (objectToChange, newOptions) {
        Object.keys(newOptions).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var value = newOptions[key];
            if (objectToChange[key]) {
                if (Array.isArray(value)) {
                    objectToChange[key] = tslib_1.__spread(value);
                    return;
                }
                if ((typeof (value) === 'number' || typeof (value) === 'string')) {
                    objectToChange[key] = value;
                    return;
                }
                if (typeof (value) === 'object') {
                    objectToChange[key] = tslib_1.__assign({}, value);
                }
            }
        }));
    };
    /**
     * @private
     * @param {?} origin
     * @return {?}
     */
    PoPageCustomizationService.prototype.createObservable = /**
     * @private
     * @param {?} origin
     * @return {?}
     */
    function (origin) {
        if (typeof origin === 'string') {
            return this.http.post(origin, {});
        }
        return from(Promise.resolve(origin()));
    };
    /**
     * @private
     * @param {?} originalOption
     * @param {?} newPageOptions
     * @return {?}
     */
    PoPageCustomizationService.prototype.mergePageOptions = /**
     * @private
     * @param {?} originalOption
     * @param {?} newPageOptions
     * @return {?}
     */
    function (originalOption, newPageOptions) {
        /** @type {?} */
        var mergePageOptions = {
            filters: this.mergeOptions(originalOption.filters, newPageOptions.filters, 'property'),
            actions: this.mergeOptions(originalOption.actions, newPageOptions.actions, 'label'),
            breadcrumb: newPageOptions.breadcrumb ? newPageOptions.breadcrumb : originalOption.breadcrumb,
            title: newPageOptions.title ? newPageOptions.title : originalOption.title
        };
        Object.keys(mergePageOptions).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return !mergePageOptions[key] && delete mergePageOptions[key]; }));
        return mergePageOptions;
    };
    /**
     * @private
     * @template T
     * @param {?} originalOptions
     * @param {?} newOptions
     * @param {?} filterProp
     * @return {?}
     */
    PoPageCustomizationService.prototype.mergeOptions = /**
     * @private
     * @template T
     * @param {?} originalOptions
     * @param {?} newOptions
     * @param {?} filterProp
     * @return {?}
     */
    function (originalOptions, newOptions, filterProp) {
        if (!originalOptions && !newOptions) {
            return;
        }
        if (!newOptions) {
            return originalOptions;
        }
        if (!originalOptions) {
            return newOptions;
        }
        /** @type {?} */
        var deduplicateNewOptions = newOptions.filter((/**
         * @param {?} newItem
         * @return {?}
         */
        function (newItem) { return !originalOptions.find((/**
         * @param {?} originalItem
         * @return {?}
         */
        function (originalItem) { return originalItem[filterProp] === newItem[filterProp]; })); }));
        /** @type {?} */
        var mergedOriginalOptions = originalOptions.map((/**
         * @param {?} originalItem
         * @return {?}
         */
        function (originalItem) {
            /** @type {?} */
            var newItem = newOptions.find((/**
             * @param {?} newOptionsItem
             * @return {?}
             */
            function (newOptionsItem) { return originalItem[filterProp] === newOptionsItem[filterProp]; })) || originalItem;
            return tslib_1.__assign({}, originalItem, newItem);
        }));
        return tslib_1.__spread(mergedOriginalOptions, deduplicateNewOptions);
    };
    PoPageCustomizationService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PoPageCustomizationService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ PoPageCustomizationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PoPageCustomizationService_Factory() { return new PoPageCustomizationService(i0.ɵɵinject(i1.HttpClient)); }, token: PoPageCustomizationService, providedIn: "root" });
    return PoPageCustomizationService;
}());
export { PoPageCustomizationService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageCustomizationService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,