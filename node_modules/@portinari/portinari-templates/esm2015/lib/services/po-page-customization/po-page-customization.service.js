/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoPageCustomizationService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} origin
     * @param {?} originalOption
     * @return {?}
     */
    getCustomOptions(origin, originalOption) {
        return this.createObservable(origin).pipe(map((/**
         * @param {?} newPageOptions
         * @return {?}
         */
        newPageOptions => this.mergePageOptions(originalOption, newPageOptions))));
    }
    /**
     * @template T, K
     * @param {?} objectToChange
     * @param {?} newOptions
     * @return {?}
     */
    changeOriginalOptionsToNewOptions(objectToChange, newOptions) {
        Object.keys(newOptions).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const value = newOptions[key];
            if (objectToChange[key]) {
                if (Array.isArray(value)) {
                    objectToChange[key] = [...value];
                    return;
                }
                if ((typeof (value) === 'number' || typeof (value) === 'string')) {
                    objectToChange[key] = value;
                    return;
                }
                if (typeof (value) === 'object') {
                    objectToChange[key] = Object.assign({}, value);
                }
            }
        }));
    }
    /**
     * @private
     * @param {?} origin
     * @return {?}
     */
    createObservable(origin) {
        if (typeof origin === 'string') {
            return this.http.post(origin, {});
        }
        return from(Promise.resolve(origin()));
    }
    /**
     * @private
     * @param {?} originalOption
     * @param {?} newPageOptions
     * @return {?}
     */
    mergePageOptions(originalOption, newPageOptions) {
        /** @type {?} */
        const mergePageOptions = {
            filters: this.mergeOptions(originalOption.filters, newPageOptions.filters, 'property'),
            actions: this.mergeOptions(originalOption.actions, newPageOptions.actions, 'label'),
            breadcrumb: newPageOptions.breadcrumb ? newPageOptions.breadcrumb : originalOption.breadcrumb,
            title: newPageOptions.title ? newPageOptions.title : originalOption.title
        };
        Object.keys(mergePageOptions).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => !mergePageOptions[key] && delete mergePageOptions[key]));
        return mergePageOptions;
    }
    /**
     * @private
     * @template T
     * @param {?} originalOptions
     * @param {?} newOptions
     * @param {?} filterProp
     * @return {?}
     */
    mergeOptions(originalOptions, newOptions, filterProp) {
        if (!originalOptions && !newOptions) {
            return;
        }
        if (!newOptions) {
            return originalOptions;
        }
        if (!originalOptions) {
            return newOptions;
        }
        /** @type {?} */
        const deduplicateNewOptions = newOptions.filter((/**
         * @param {?} newItem
         * @return {?}
         */
        newItem => !originalOptions.find((/**
         * @param {?} originalItem
         * @return {?}
         */
        originalItem => originalItem[filterProp] === newItem[filterProp]))));
        /** @type {?} */
        const mergedOriginalOptions = originalOptions.map((/**
         * @param {?} originalItem
         * @return {?}
         */
        originalItem => {
            /** @type {?} */
            const newItem = newOptions.find((/**
             * @param {?} newOptionsItem
             * @return {?}
             */
            newOptionsItem => originalItem[filterProp] === newOptionsItem[filterProp])) || originalItem;
            return Object.assign({}, originalItem, newItem);
        }));
        return [...mergedOriginalOptions, ...deduplicateNewOptions];
    }
}
PoPageCustomizationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PoPageCustomizationService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ PoPageCustomizationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PoPageCustomizationService_Factory() { return new PoPageCustomizationService(i0.ɵɵinject(i1.HttpClient)); }, token: PoPageCustomizationService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageCustomizationService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1jdXN0b21pemF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvcG8tcGFnZS1jdXN0b21pemF0aW9uL3BvLXBhZ2UtY3VzdG9taXphdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBUXJDLE1BQU0sT0FBTywwQkFBMEI7Ozs7SUFFckMsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7Ozs7OztJQUV6QyxnQkFBZ0IsQ0FBQyxNQUFvQyxFQUFFLGNBQW9DO1FBQ3pGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FDdkMsR0FBRzs7OztRQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxjQUFjLENBQUMsRUFBQyxDQUM3RSxDQUFDO0lBQ0osQ0FBQzs7Ozs7OztJQUVELGlDQUFpQyxDQUFPLGNBQWlCLEVBQUUsVUFBYTtRQUN0RSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU87Ozs7UUFBQyxHQUFHLENBQUMsRUFBRTs7a0JBQzlCLEtBQUssR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDO1lBQzdCLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7b0JBQ3hC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LEdBQUcscUJBQXFCLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7WUExRUYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBVlEsVUFBVTs7Ozs7Ozs7SUFjTCwwQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNPcHRpb25zLCBVcmxPclBvQ3VzdG9taXphdGlvbkZ1bmN0aW9uIH0gZnJvbSAnLi9wby1wYWdlLWR5bmFtaWMtb3B0aW9ucy5pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuZXhwb3J0IGNsYXNzIFBvUGFnZUN1c3RvbWl6YXRpb25TZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGdldEN1c3RvbU9wdGlvbnMob3JpZ2luOiBVcmxPclBvQ3VzdG9taXphdGlvbkZ1bmN0aW9uLCBvcmlnaW5hbE9wdGlvbjogUG9QYWdlRHluYW1pY09wdGlvbnMpOiBPYnNlcnZhYmxlPFBvUGFnZUR5bmFtaWNPcHRpb25zPiB7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlT2JzZXJ2YWJsZShvcmlnaW4pLnBpcGUoXG4gICAgICBtYXAobmV3UGFnZU9wdGlvbnMgPT4gdGhpcy5tZXJnZVBhZ2VPcHRpb25zKG9yaWdpbmFsT3B0aW9uLCBuZXdQYWdlT3B0aW9ucykpXG4gICAgKTtcbiAgfVxuXG4gIGNoYW5nZU9yaWdpbmFsT3B0aW9uc1RvTmV3T3B0aW9uczxULCBLPihvYmplY3RUb0NoYW5nZTogVCwgbmV3T3B0aW9uczogSykge1xuICAgIE9iamVjdC5rZXlzKG5ld09wdGlvbnMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gbmV3T3B0aW9uc1trZXldO1xuICAgICAgaWYgKG9iamVjdFRvQ2hhbmdlW2tleV0pIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgb2JqZWN0VG9DaGFuZ2Vba2V5XSA9IFsuLi52YWx1ZV07XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgodHlwZW9mICh2YWx1ZSkgPT09ICdudW1iZXInIHx8IHR5cGVvZiAodmFsdWUpID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICBvYmplY3RUb0NoYW5nZVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBvYmplY3RUb0NoYW5nZVtrZXldID0geyAuLi52YWx1ZSB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZU9ic2VydmFibGUob3JpZ2luOiBVcmxPclBvQ3VzdG9taXphdGlvbkZ1bmN0aW9uKTogT2JzZXJ2YWJsZTxQb1BhZ2VEeW5hbWljT3B0aW9ucz4ge1xuICAgIGlmICh0eXBlb2Ygb3JpZ2luID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0PFBvUGFnZUR5bmFtaWNPcHRpb25zPihvcmlnaW4sIHt9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZyb20oUHJvbWlzZS5yZXNvbHZlKG9yaWdpbigpKSk7XG4gIH1cblxuICBwcml2YXRlIG1lcmdlUGFnZU9wdGlvbnMob3JpZ2luYWxPcHRpb246IFBvUGFnZUR5bmFtaWNPcHRpb25zLCBuZXdQYWdlT3B0aW9uczogUG9QYWdlRHluYW1pY09wdGlvbnMpOiBQb1BhZ2VEeW5hbWljT3B0aW9ucyB7XG4gICAgY29uc3QgbWVyZ2VQYWdlT3B0aW9uczogUG9QYWdlRHluYW1pY09wdGlvbnMgPSB7XG4gICAgICBmaWx0ZXJzOiB0aGlzLm1lcmdlT3B0aW9ucyhvcmlnaW5hbE9wdGlvbi5maWx0ZXJzLCBuZXdQYWdlT3B0aW9ucy5maWx0ZXJzLCAncHJvcGVydHknKSxcbiAgICAgIGFjdGlvbnM6IHRoaXMubWVyZ2VPcHRpb25zKG9yaWdpbmFsT3B0aW9uLmFjdGlvbnMsIG5ld1BhZ2VPcHRpb25zLmFjdGlvbnMsICdsYWJlbCcpLFxuICAgICAgYnJlYWRjcnVtYjogbmV3UGFnZU9wdGlvbnMuYnJlYWRjcnVtYiA/IG5ld1BhZ2VPcHRpb25zLmJyZWFkY3J1bWIgOiBvcmlnaW5hbE9wdGlvbi5icmVhZGNydW1iLFxuICAgICAgdGl0bGU6IG5ld1BhZ2VPcHRpb25zLnRpdGxlID8gbmV3UGFnZU9wdGlvbnMudGl0bGUgOiBvcmlnaW5hbE9wdGlvbi50aXRsZVxuICAgIH07XG5cbiAgICBPYmplY3Qua2V5cyhtZXJnZVBhZ2VPcHRpb25zKS5mb3JFYWNoKGtleSA9PiAhbWVyZ2VQYWdlT3B0aW9uc1trZXldICYmIGRlbGV0ZSBtZXJnZVBhZ2VPcHRpb25zW2tleV0pO1xuXG4gICAgcmV0dXJuIG1lcmdlUGFnZU9wdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIG1lcmdlT3B0aW9uczxUPihvcmlnaW5hbE9wdGlvbnM6IEFycmF5PFQ+LCBuZXdPcHRpb25zOiBBcnJheTxUPiwgZmlsdGVyUHJvcDoga2V5b2YgVCk6IEFycmF5PFQ+IHtcblxuICAgIGlmICghb3JpZ2luYWxPcHRpb25zICYmICFuZXdPcHRpb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbmV3T3B0aW9ucykge1xuICAgICAgcmV0dXJuIG9yaWdpbmFsT3B0aW9ucztcbiAgICB9XG4gICAgaWYgKCFvcmlnaW5hbE9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBuZXdPcHRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IGRlZHVwbGljYXRlTmV3T3B0aW9ucyA9IG5ld09wdGlvbnMuZmlsdGVyKFxuICAgICAgbmV3SXRlbSA9PiAhb3JpZ2luYWxPcHRpb25zLmZpbmQob3JpZ2luYWxJdGVtID0+IG9yaWdpbmFsSXRlbVtmaWx0ZXJQcm9wXSA9PT0gbmV3SXRlbVtmaWx0ZXJQcm9wXSkpO1xuICAgIGNvbnN0IG1lcmdlZE9yaWdpbmFsT3B0aW9ucyA9IG9yaWdpbmFsT3B0aW9ucy5tYXAob3JpZ2luYWxJdGVtID0+IHtcbiAgICAgICAgY29uc3QgbmV3SXRlbSA9IG5ld09wdGlvbnMuZmluZChuZXdPcHRpb25zSXRlbSA9PiBvcmlnaW5hbEl0ZW1bZmlsdGVyUHJvcF0gPT09IG5ld09wdGlvbnNJdGVtW2ZpbHRlclByb3BdKSB8fCBvcmlnaW5hbEl0ZW07XG4gICAgICAgIHJldHVybiB7Li4ub3JpZ2luYWxJdGVtLCAuLi5uZXdJdGVtfTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgcmV0dXJuIFsuLi5tZXJnZWRPcmlnaW5hbE9wdGlvbnMsIC4uLmRlZHVwbGljYXRlTmV3T3B0aW9uc107XG4gIH1cbn1cbiJdfQ==