/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoPageCustomizationService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @template T
     * @param {?} origin
     * @param {?} originalOption
     * @param {?} optionSchema
     * @return {?}
     */
    getCustomOptions(origin, originalOption, optionSchema) {
        return this.createObservable(origin).pipe(map((/**
         * @param {?} newPageOptions
         * @return {?}
         */
        newPageOptions => this.mergePageOptions(originalOption, newPageOptions, optionSchema))));
    }
    /**
     * @template T, K
     * @param {?} objectToChange
     * @param {?} newOptions
     * @return {?}
     */
    changeOriginalOptionsToNewOptions(objectToChange, newOptions) {
        Object.keys(newOptions).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const value = newOptions[key];
            if (objectToChange[key]) {
                if (Array.isArray(value)) {
                    objectToChange[key] = [...value];
                    return;
                }
                if ((typeof (value) === 'number' || typeof (value) === 'string')) {
                    objectToChange[key] = value;
                    return;
                }
                if (typeof (value) === 'object') {
                    objectToChange[key] = Object.assign({}, value);
                }
            }
        }));
    }
    /**
     * @private
     * @template T
     * @param {?} origin
     * @return {?}
     */
    createObservable(origin) {
        if (typeof origin === 'string') {
            return this.http.post(origin, {});
        }
        return from(Promise.resolve(origin()));
    }
    /**
     * @private
     * @template T
     * @param {?} originalOption
     * @param {?} newPageOptions
     * @param {?} optionSchema
     * @return {?}
     */
    mergePageOptions(originalOption, newPageOptions, optionSchema) {
        /** @type {?} */
        const mergePageOptions = optionSchema.schema.reduce((/**
         * @param {?} objWithNewProp
         * @param {?} prop
         * @return {?}
         */
        (objWithNewProp, prop) => (Object.assign({}, objWithNewProp, { [prop.nameProp]: this.createNewProp(prop, originalOption, newPageOptions) }))), (/** @type {?} */ ({})));
        Object.keys(mergePageOptions).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => !mergePageOptions[key] && delete mergePageOptions[key]));
        return mergePageOptions;
    }
    /**
     * @private
     * @template T
     * @param {?} prop
     * @param {?} originalOption
     * @param {?} newPageOptions
     * @return {?}
     */
    createNewProp(prop, originalOption, newPageOptions) {
        if (prop.merge) {
            return this.mergeOptions(originalOption[prop.nameProp], newPageOptions[prop.nameProp], prop.keyForMerge);
        }
        else {
            return newPageOptions[prop.nameProp] || originalOption[prop.nameProp];
        }
    }
    /**
     * @private
     * @template T
     * @param {?} originalOptions
     * @param {?} newOptions
     * @param {?=} filterProp
     * @return {?}
     */
    mergeOptions(originalOptions, newOptions, filterProp) {
        if (!originalOptions && !newOptions) {
            return;
        }
        if (!newOptions) {
            return originalOptions;
        }
        if (!originalOptions) {
            return newOptions;
        }
        if (originalOptions instanceof Array && newOptions instanceof Array) {
            return this.mergeOptionsArray(originalOptions, newOptions, filterProp);
        }
        return Object.assign({}, originalOptions, newOptions);
    }
    /**
     * @private
     * @template T
     * @param {?} originalOptions
     * @param {?} newOptions
     * @param {?} filterProp
     * @return {?}
     */
    mergeOptionsArray(originalOptions, newOptions, filterProp) {
        /** @type {?} */
        const deduplicateNewOptions = newOptions.filter((/**
         * @param {?} newItem
         * @return {?}
         */
        newItem => !originalOptions.find((/**
         * @param {?} originalItem
         * @return {?}
         */
        originalItem => originalItem[filterProp] === newItem[filterProp]))));
        /** @type {?} */
        const mergedOriginalOptions = originalOptions.map((/**
         * @param {?} originalItem
         * @return {?}
         */
        originalItem => {
            /** @type {?} */
            const newItem = newOptions.find((/**
             * @param {?} newOptionsItem
             * @return {?}
             */
            newOptionsItem => originalItem[filterProp] === newOptionsItem[filterProp])) || originalItem;
            return Object.assign({}, originalItem, newItem);
        }));
        return [...mergedOriginalOptions, ...deduplicateNewOptions];
    }
}
PoPageCustomizationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PoPageCustomizationService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ PoPageCustomizationService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function PoPageCustomizationService_Factory() { return new PoPageCustomizationService(i0.ɵɵinject(i1.HttpClient)); }, token: PoPageCustomizationService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageCustomizationService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,