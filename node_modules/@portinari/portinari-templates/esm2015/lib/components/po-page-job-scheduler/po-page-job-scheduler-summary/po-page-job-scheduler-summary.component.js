/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { DatePipe } from '@angular/common';
import { PoInfoOrientation } from '@portinari/portinari-ui';
export class PoPageJobSchedulerSummaryComponent {
    /**
     * @param {?} datePipe
     */
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.executionValue = '';
        this.firstExecutionValue = '';
        this.infoOrientation = PoInfoOrientation.Horizontal;
        this.periodicityValue = '';
        this.recurrentValue = '';
        this.literals = (/** @type {?} */ ({}));
        this.parameters = [];
        this.value = (/** @type {?} */ ({}));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const { periodicity, hour, dayOfMonth, daysOfWeek, recurrent, firstExecution, firstExecutionHour } = this.value;
        this.periodicityValue = this.getPeriodicityLabel(periodicity);
        this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);
        this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);
        this.recurrentValue = this.getRecurrentValue(recurrent);
    }
    /**
     * @private
     * @param {?} periodicity
     * @param {?=} hour
     * @param {?=} daysOfWeek
     * @param {?=} dayOfMonth
     * @return {?}
     */
    getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth) {
        switch (periodicity) {
            case 'daily':
                return this.getHourLabel(hour);
            case 'monthly':
                return this.getMonthlyLabelExecution(dayOfMonth, hour);
            case 'weekly':
                return this.getWeeklyLabelExecution(daysOfWeek, hour);
            default:
                return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?} firstExecution
     * @param {?=} firstExecutionHour
     * @return {?}
     */
    getFirstExecutionLabel(firstExecution, firstExecutionHour) {
        if (firstExecution) {
            /** @type {?} */
            const date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');
            return `${date} ${this.getHourLabel(firstExecutionHour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?} hour
     * @return {?}
     */
    getHourLabel(hour) {
        return `${this.literals.at} ${hour || '00:00'}h`;
    }
    /**
     * @private
     * @param {?} dayOfMonth
     * @param {?} hour
     * @return {?}
     */
    getMonthlyLabelExecution(dayOfMonth, hour) {
        /** @type {?} */
        const hourLabel = this.getHourLabel(hour);
        return `${this.literals.day} ${dayOfMonth} ${hourLabel}`;
    }
    /**
     * @private
     * @param {?} periodicity
     * @return {?}
     */
    getPeriodicityLabel(periodicity) {
        switch (periodicity) {
            case 'daily':
                return this.literals.daily;
            case 'monthly':
                return this.literals.monthly;
            case 'weekly':
                return this.literals.weekly;
            default:
                return this.literals.single;
        }
    }
    /**
     * @private
     * @param {?} recurrent
     * @return {?}
     */
    getRecurrentValue(recurrent) {
        return recurrent ? this.literals.yes : this.literals.no;
    }
    /**
     * @private
     * @return {?}
     */
    getSorterWeekDays() {
        return {
            'sunday': 0,
            'monday': 1,
            'tuesday': 2,
            'wednesday': 3,
            'thursday': 4,
            'friday': 5,
            'saturday': 6
        };
    }
    /**
     * @private
     * @param {?} day
     * @return {?}
     */
    getTranslateWeekDay(day) {
        /** @type {?} */
        const days = {
            Sunday: this.literals.sunday,
            Monday: this.literals.monday,
            Tuesday: this.literals.tuesday,
            Wednesday: this.literals.wednesday,
            Thursday: this.literals.thursday,
            Friday: this.literals.friday,
            Saturday: this.literals.saturday,
        };
        return days[day] || '';
    }
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    getWeekDaysLabel(days = []) {
        /** @type {?} */
        const weekDaysSorted = this.sortWeekDays(days);
        return weekDaysSorted.map((/**
         * @param {?} day
         * @return {?}
         */
        day => this.getTranslateWeekDay(day))).join(', ');
    }
    /**
     * @private
     * @param {?} daysOfWeek
     * @param {?} hour
     * @return {?}
     */
    getWeeklyLabelExecution(daysOfWeek, hour) {
        if (daysOfWeek && Array.isArray(daysOfWeek)) {
            return `${this.getWeekDaysLabel(daysOfWeek)} ${this.getHourLabel(hour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    sortWeekDays(days = []) {
        /** @type {?} */
        const sorterWeekDays = this.getSorterWeekDays();
        return days.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            const currDay = a.toLowerCase();
            /** @type {?} */
            const nextDay = b.toLowerCase();
            return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;
        }));
    }
}
PoPageJobSchedulerSummaryComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-job-scheduler-summary',
                template: "<div class=\"po-md-12\">\r\n  <po-info\r\n    [p-label]=\"literals.process\"\r\n    [p-orientation]=\"infoOrientation\"\r\n    [p-value]=\"value.processID\">\r\n  </po-info>\r\n\r\n  <po-info\r\n    [p-label]=\"literals.periodicity\"\r\n    [p-orientation]=\"infoOrientation\"\r\n    [p-value]=\"periodicityValue\">\r\n  </po-info>\r\n\r\n  <po-info *ngIf=\"value.periodicity !== 'single'\"\r\n    [p-label]=\"literals.execution\"\r\n    [p-orientation]=\"infoOrientation\"\r\n    [p-value]=\"executionValue\">\r\n  </po-info>\r\n\r\n  <po-info\r\n    [p-label]=\"literals.recurrent\"\r\n    [p-orientation]=\"infoOrientation\"\r\n    [p-value]=\"recurrentValue\">\r\n  </po-info>\r\n\r\n  <po-info\r\n    [p-label]=\"literals.firstExecution\"\r\n    [p-orientation]=\"infoOrientation\"\r\n    [p-value]=\"firstExecutionValue\">\r\n  </po-info>\r\n</div>\r\n\r\n<po-widget *ngIf=\"parameters && parameters.length\"\r\n  class=\"po-pt-1 po-pb-1 po-md-12\"\r\n  [p-title]=\"literals.parameters\">\r\n\r\n  <po-dynamic-view\r\n    [p-fields]=\"parameters\"\r\n    [p-value]=\"value.executionParameter\">\r\n  </po-dynamic-view>\r\n\r\n</po-widget>\r\n\r\n"
            }] }
];
/** @nocollapse */
PoPageJobSchedulerSummaryComponent.ctorParameters = () => [
    { type: DatePipe }
];
PoPageJobSchedulerSummaryComponent.propDecorators = {
    literals: [{ type: Input, args: ['p-literals',] }],
    parameters: [{ type: Input, args: ['p-parameters',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
if (false) {
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.executionValue;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.firstExecutionValue;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.infoOrientation;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.periodicityValue;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.recurrentValue;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.literals;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.parameters;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerSummaryComponent.prototype.datePipe;
}
//# sourceMappingURL=data:application/json;base64,