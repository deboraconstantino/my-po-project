/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { addZero, convertDateToISOExtended } from '../../utils/util';
export class PoPageJobSchedulerService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-PORTINARI-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        /** @type {?} */
        const jobScheduler = this.convertToJobScheduler(resource);
        return this.http.post(`${this.endpoint}`, jobScheduler, { headers: this.headers });
    }
    /**
     * @return {?}
     */
    getHeadProcesses() {
        /** @type {?} */
        const headers = { 'X-Portinari-No-Error': 'true' };
        return this.http.head(`${this.endpoint}/processes`, { headers });
    }
    // Busca parametros pelo processo id
    /**
     * @param {?} processId
     * @return {?}
     */
    getParametersByProcess(processId) {
        return this.http.get(`${this.endpoint}/processes/${processId}/parameters`, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        (resource) => resource.items)));
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getProcess(id) {
        return this.http.get(`${this.endpoint}/processes/${id}`, { headers: this.headers });
    }
    // Busca uma lista de processos
    /**
     * @param {?=} params
     * @return {?}
     */
    getProcesses(params = {}) {
        return this.http.get(`${this.endpoint}/processes`, { params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        resource => this.convertToJobSchedulerInternal(resource))));
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        /** @type {?} */
        const jobScheduler = this.convertToJobScheduler(resource);
        return this.http.put(`${this.endpoint}/${id}`, jobScheduler, { headers: this.headers });
    }
    /**
     * @private
     * @param {?} jobSchedulerInternal
     * @return {?}
     */
    convertToJobScheduler(jobSchedulerInternal) {
        /** @type {?} */
        const jobScheduler = Object.assign({}, jobSchedulerInternal);
        if (jobSchedulerInternal.periodicity) {
            if (jobSchedulerInternal.periodicity === 'single') {
                jobScheduler.recurrent = false;
            }
            else {
                Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));
            }
        }
        if (jobSchedulerInternal.firstExecutionHour) {
            jobScheduler.firstExecution =
                this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);
        }
        if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {
            delete jobScheduler.executionParameter;
        }
        this.removeInvalidKeys(jobScheduler);
        return jobScheduler;
    }
    /**
     * @private
     * @param {?=} jobScheduler
     * @return {?}
     */
    convertToJobSchedulerInternal(jobScheduler = (/** @type {?} */ ({}))) {
        /** @type {?} */
        const jobSchedulerInternal = Object.assign({}, jobScheduler);
        if (jobScheduler.firstExecution) {
            jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);
        }
        Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));
        this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);
        return jobSchedulerInternal;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    convertToPeriodicity(value) {
        /** @type {?} */
        const newValue = {};
        /** @type {?} */
        const valuePeriodicity = value.periodicity;
        if (valuePeriodicity) {
            newValue[valuePeriodicity] = {};
            if (valuePeriodicity === 'monthly') {
                newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;
            }
            else if (valuePeriodicity === 'weekly') {
                newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;
            }
            newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;
            newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;
        }
        return newValue;
    }
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    convertToPeriodicityInternal(value = (/** @type {?} */ ({}))) {
        if (value.monthly) {
            return {
                periodicity: 'monthly',
                hour: `${addZero(value.monthly.hour)}:${addZero(value.monthly.minute)}`,
                dayOfMonth: value.monthly.day
            };
        }
        else if (value.daily) {
            return {
                periodicity: 'daily',
                hour: `${addZero(value.daily.hour)}:${addZero(value.daily.minute)}`
            };
        }
        else if (value.weekly) {
            return {
                periodicity: 'weekly',
                hour: `${addZero(value.weekly.hour)}:${addZero(value.weekly.minute)}`,
                daysOfWeek: [...value.weekly.daysOfWeek]
            };
        }
        else {
            return {
                periodicity: 'single'
            };
        }
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getCurrentHour(date) {
        /** @type {?} */
        const hours = addZero(date.getHours());
        /** @type {?} */
        const minutes = addZero(date.getMinutes());
        return `${hours}:${minutes}`;
    }
    /**
     * @private
     * @param {?} firstExecutionDate
     * @return {?}
     */
    getHourFirstExecution(firstExecutionDate) {
        return this.getCurrentHour(new Date(firstExecutionDate));
    }
    /**
     * @private
     * @param {?} value
     * @param {?=} keys
     * @return {?}
     */
    removeInvalidKeys(value, keys) {
        /** @type {?} */
        const invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];
        Object.keys(value).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (invalidKeys.includes(key)) {
                delete value[key];
            }
        }));
    }
    /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    replaceHourFirstExecution(date, time) {
        /** @type {?} */
        const firstExecutionDate = new Date(date);
        /** @type {?} */
        const timeSplited = time.split(':');
        /** @type {?} */
        const hours = parseInt(timeSplited[0], 10);
        /** @type {?} */
        const minutes = parseInt(timeSplited[1], 10);
        firstExecutionDate.setHours(hours, minutes);
        return convertDateToISOExtended(firstExecutionDate);
    }
    /**
     * @private
     * @param {?} parameter
     * @return {?}
     */
    returnValidExecutionParameter(parameter) {
        /** @type {?} */
        const newParameter = Object.assign({}, parameter);
        for (const key in newParameter) {
            if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {
                delete newParameter[key];
            }
        }
        return newParameter;
    }
}
PoPageJobSchedulerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoPageJobSchedulerService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerService.prototype.endpoint;
    /** @type {?} */
    PoPageJobSchedulerService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1qb2Itc2NoZWR1bGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlLWpvYi1zY2hlZHVsZXIvcG8tcGFnZS1qb2Itc2NoZWR1bGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBT3JFLE1BQU0sT0FBTyx5QkFBeUI7Ozs7SUFRcEMsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQU41QixhQUFRLEdBQUcsR0FBRyxDQUFDO1FBRWQsWUFBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQztZQUM5Qyx5QkFBeUIsRUFBRSxNQUFNO1NBQ2xDLENBQUMsQ0FBQztJQUVxQyxDQUFDOzs7OztJQUV6QyxnQkFBZ0IsQ0FBQyxTQUFnQyxFQUFFO1FBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNsQyxDQUFDOzs7Ozs7SUFHRCxjQUFjLENBQUMsUUFBUTs7Y0FDZixZQUFZLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQztRQUV6RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNyRixDQUFDOzs7O0lBRUQsZ0JBQWdC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QUFDOztjQUVuQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O2NBRTdCLEtBQUssR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQzs7Y0FDcEMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBRTVDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFNUMsT0FBTyx3QkFBd0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7OztJQUVPLDZCQUE2QixDQUFDLFNBQWlCOztjQUMvQyxZQUFZLHFCQUFRLFNBQVMsQ0FBRTtRQUVyQyxLQUFLLE1BQU0sR0FBRyxJQUFJLFlBQVksRUFBRTtZQUM5QixJQUFJLFlBQVksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDdkUsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDMUI7U0FDRjtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7OztZQTNMRixVQUFVOzs7O1lBWkYsVUFBVTs7Ozs7OztJQWVqQiw2Q0FBdUI7O0lBRXZCLDRDQUVHOzs7OztJQUVTLHlDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IGFkZFplcm8sIGNvbnZlcnREYXRlVG9JU09FeHRlbmRlZCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkIH0gZnJvbSAnQHBvcnRpbmFyaS9wb3J0aW5hcmktdWknO1xuXG5pbXBvcnQgeyBQb0pvYlNjaGVkdWxlciB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1qb2Itc2NoZWR1bGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0pvYlNjaGVkdWxlckludGVybmFsIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWpvYi1zY2hlZHVsZXItaW50ZXJuYWwuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvUGFnZUpvYlNjaGVkdWxlclNlcnZpY2Uge1xuXG4gIHByaXZhdGUgZW5kcG9pbnQgPSAnLyc7XG5cbiAgcmVhZG9ubHkgaGVhZGVyczogSHR0cEhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoe1xuICAgICdYLVBPUlRJTkFSSS1TQ1JFRU4tTE9DSyc6ICd0cnVlJ1xuICB9KTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIGNvbmZpZ1NlcnZpY2VBcGkoY29uZmlnOiB7IGVuZHBvaW50Pzogc3RyaW5nIH0gPSB7fSkge1xuICAgIHRoaXMuZW5kcG9pbnQgPSBjb25maWcuZW5kcG9pbnQ7XG4gIH1cblxuICAvLyBDcmlhIHVtIHJlY3Vyc29cbiAgY3JlYXRlUmVzb3VyY2UocmVzb3VyY2UpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IGpvYlNjaGVkdWxlciA9IHRoaXMuY29udmVydFRvSm9iU2NoZWR1bGVyKHJlc291cmNlKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdChgJHt0aGlzLmVuZHBvaW50fWAsIGpvYlNjaGVkdWxlciwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gIH1cblxuICBnZXRIZWFkUHJvY2Vzc2VzKCkge1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7ICdYLVBvcnRpbmFyaS1Oby1FcnJvcic6ICd0cnVlJyB9O1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5oZWFkKGAke3RoaXMuZW5kcG9pbnR9L3Byb2Nlc3Nlc2AsIHsgaGVhZGVycyB9KTtcbiAgfVxuXG4gIC8vIEJ1c2NhIHBhcmFtZXRyb3MgcGVsbyBwcm9jZXNzbyBpZFxuICBnZXRQYXJhbWV0ZXJzQnlQcm9jZXNzKHByb2Nlc3NJZDogc3RyaW5nIHwgbnVtYmVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHt0aGlzLmVuZHBvaW50fS9wcm9jZXNzZXMvJHtwcm9jZXNzSWR9L3BhcmFtZXRlcnNgLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KVxuICAgIC5waXBlKG1hcCgocmVzb3VyY2U6IHsgaXRlbXM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4gfSkgPT4gcmVzb3VyY2UuaXRlbXMpKTtcbiAgfVxuXG4gIC8vIEJ1c2NhIHVtIMO6bmljbyByZWN1cnNvXG4gIGdldFByb2Nlc3MoaWQ6IHN0cmluZyB8IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5lbmRwb2ludH0vcHJvY2Vzc2VzLyR7aWR9YCwgeyBoZWFkZXJzOiB0aGlzLmhlYWRlcnMgfSk7XG4gIH1cblxuICAvLyBCdXNjYSB1bWEgbGlzdGEgZGUgcHJvY2Vzc29zXG4gIGdldFByb2Nlc3NlcyhwYXJhbXM6IHt9ID0ge30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGAke3RoaXMuZW5kcG9pbnR9L3Byb2Nlc3Nlc2AsIHsgcGFyYW1zIH0pO1xuICB9XG5cbiAgLy8gQnVzY2EgdW0gw7puaWNvIHJlY3Vyc29cbiAgZ2V0UmVzb3VyY2UoaWQ6IHN0cmluZyB8IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5lbmRwb2ludH0vJHtpZH1gLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KVxuICAgICAgLnBpcGUobWFwKHJlc291cmNlID0+IHRoaXMuY29udmVydFRvSm9iU2NoZWR1bGVySW50ZXJuYWwocmVzb3VyY2UpKSk7XG4gIH1cblxuICAvLyBBdHVhbGl6YSB1bSByZWN1cnNvXG4gIHVwZGF0ZVJlc291cmNlKGlkLCByZXNvdXJjZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3Qgam9iU2NoZWR1bGVyID0gdGhpcy5jb252ZXJ0VG9Kb2JTY2hlZHVsZXIocmVzb3VyY2UpO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wdXQoYCR7dGhpcy5lbmRwb2ludH0vJHtpZH1gLCBqb2JTY2hlZHVsZXIsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0VG9Kb2JTY2hlZHVsZXIoam9iU2NoZWR1bGVySW50ZXJuYWwpOiBQb0pvYlNjaGVkdWxlciB7XG4gICAgY29uc3Qgam9iU2NoZWR1bGVyID0geyAuLi5qb2JTY2hlZHVsZXJJbnRlcm5hbCB9O1xuXG4gICAgaWYgKGpvYlNjaGVkdWxlckludGVybmFsLnBlcmlvZGljaXR5KSB7XG5cbiAgICAgIGlmIChqb2JTY2hlZHVsZXJJbnRlcm5hbC5wZXJpb2RpY2l0eSA9PT0gJ3NpbmdsZScpIHtcbiAgICAgICAgam9iU2NoZWR1bGVyLnJlY3VycmVudCA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihqb2JTY2hlZHVsZXIsIHRoaXMuY29udmVydFRvUGVyaW9kaWNpdHkoam9iU2NoZWR1bGVySW50ZXJuYWwpKTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIGlmIChqb2JTY2hlZHVsZXJJbnRlcm5hbC5maXJzdEV4ZWN1dGlvbkhvdXIpIHtcbiAgICAgIGpvYlNjaGVkdWxlci5maXJzdEV4ZWN1dGlvbiA9XG4gICAgICAgIHRoaXMucmVwbGFjZUhvdXJGaXJzdEV4ZWN1dGlvbihqb2JTY2hlZHVsZXJJbnRlcm5hbC5maXJzdEV4ZWN1dGlvbiwgam9iU2NoZWR1bGVySW50ZXJuYWwuZmlyc3RFeGVjdXRpb25Ib3VyKTtcbiAgICB9XG5cbiAgICBpZiAoIU9iamVjdC5rZXlzKHRoaXMucmV0dXJuVmFsaWRFeGVjdXRpb25QYXJhbWV0ZXIoam9iU2NoZWR1bGVyLmV4ZWN1dGlvblBhcmFtZXRlcikpLmxlbmd0aCkge1xuICAgICAgZGVsZXRlIGpvYlNjaGVkdWxlci5leGVjdXRpb25QYXJhbWV0ZXI7XG4gICAgfVxuXG4gICAgdGhpcy5yZW1vdmVJbnZhbGlkS2V5cyhqb2JTY2hlZHVsZXIpO1xuXG4gICAgcmV0dXJuIGpvYlNjaGVkdWxlcjtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFRvSm9iU2NoZWR1bGVySW50ZXJuYWwoam9iU2NoZWR1bGVyID0gPGFueT4ge30pOiBQb0pvYlNjaGVkdWxlckludGVybmFsIHtcbiAgICBjb25zdCBqb2JTY2hlZHVsZXJJbnRlcm5hbCA9IHsgLi4uam9iU2NoZWR1bGVyIH07XG5cbiAgICBpZiAoam9iU2NoZWR1bGVyLmZpcnN0RXhlY3V0aW9uKSB7XG4gICAgICBqb2JTY2hlZHVsZXJJbnRlcm5hbC5maXJzdEV4ZWN1dGlvbkhvdXIgPSB0aGlzLmdldEhvdXJGaXJzdEV4ZWN1dGlvbihqb2JTY2hlZHVsZXIuZmlyc3RFeGVjdXRpb24pO1xuICAgIH1cblxuICAgIE9iamVjdC5hc3NpZ24oam9iU2NoZWR1bGVySW50ZXJuYWwsIHRoaXMuY29udmVydFRvUGVyaW9kaWNpdHlJbnRlcm5hbChqb2JTY2hlZHVsZXIpKTtcblxuICAgIHRoaXMucmVtb3ZlSW52YWxpZEtleXMoam9iU2NoZWR1bGVySW50ZXJuYWwsIFsnd2Vla2x5JywgJ21vbnRobHknLCAnZGFpbHknXSk7XG5cbiAgICByZXR1cm4gam9iU2NoZWR1bGVySW50ZXJuYWw7XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRUb1BlcmlvZGljaXR5KHZhbHVlOiB7IHBlcmlvZGljaXR5OiBzdHJpbmcgLCBkYXlPZk1vbnRoPzogc3RyaW5nLCBkYXlzT2ZXZWVrPzogbnVtYmVyLCBob3VyPzogc3RyaW5nIH0pIHtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHt9O1xuICAgIGNvbnN0IHZhbHVlUGVyaW9kaWNpdHkgPSB2YWx1ZS5wZXJpb2RpY2l0eTtcblxuICAgIGlmICh2YWx1ZVBlcmlvZGljaXR5KSB7XG4gICAgICBuZXdWYWx1ZVt2YWx1ZVBlcmlvZGljaXR5XSA9IHt9O1xuXG4gICAgICBpZiAodmFsdWVQZXJpb2RpY2l0eSA9PT0gJ21vbnRobHknKSB7XG4gICAgICAgIG5ld1ZhbHVlW3ZhbHVlUGVyaW9kaWNpdHldLmRheSA9IHZhbHVlLmRheU9mTW9udGggPyBwYXJzZUludCh2YWx1ZS5kYXlPZk1vbnRoLCAxMCkgOiAwO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZVBlcmlvZGljaXR5ID09PSAnd2Vla2x5Jykge1xuICAgICAgICBuZXdWYWx1ZVt2YWx1ZVBlcmlvZGljaXR5XS5kYXlzT2ZXZWVrID0gdmFsdWUuZGF5c09mV2VlaztcbiAgICAgIH1cblxuICAgICAgbmV3VmFsdWVbdmFsdWVQZXJpb2RpY2l0eV0uaG91ciA9IHZhbHVlLmhvdXIgPyBwYXJzZUludCh2YWx1ZS5ob3VyLnNwbGl0KCc6JylbMF0sIDEwKSA6IDA7XG4gICAgICBuZXdWYWx1ZVt2YWx1ZVBlcmlvZGljaXR5XS5taW51dGUgPSB2YWx1ZS5ob3VyID8gcGFyc2VJbnQodmFsdWUuaG91ci5zcGxpdCgnOicpWzFdLCAxMCkgOiAwO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdWYWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFRvUGVyaW9kaWNpdHlJbnRlcm5hbCh2YWx1ZSA9IDxhbnk+IHt9KSB7XG4gICAgaWYgKHZhbHVlLm1vbnRobHkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBlcmlvZGljaXR5OiAnbW9udGhseScsXG4gICAgICAgIGhvdXI6IGAke2FkZFplcm8odmFsdWUubW9udGhseS5ob3VyKX06JHthZGRaZXJvKHZhbHVlLm1vbnRobHkubWludXRlKX1gLFxuICAgICAgICBkYXlPZk1vbnRoOiB2YWx1ZS5tb250aGx5LmRheVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlLmRhaWx5KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwZXJpb2RpY2l0eTogJ2RhaWx5JyxcbiAgICAgICAgaG91cjogYCR7YWRkWmVybyh2YWx1ZS5kYWlseS5ob3VyKX06JHthZGRaZXJvKHZhbHVlLmRhaWx5Lm1pbnV0ZSl9YFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlLndlZWtseSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGVyaW9kaWNpdHk6ICd3ZWVrbHknLFxuICAgICAgICBob3VyOiBgJHthZGRaZXJvKHZhbHVlLndlZWtseS5ob3VyKX06JHthZGRaZXJvKHZhbHVlLndlZWtseS5taW51dGUpfWAsXG4gICAgICAgIGRheXNPZldlZWs6IFsuLi52YWx1ZS53ZWVrbHkuZGF5c09mV2Vla11cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBlcmlvZGljaXR5OiAnc2luZ2xlJ1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEN1cnJlbnRIb3VyKGRhdGU6IERhdGUpOiBzdHJpbmcge1xuICAgIGNvbnN0IGhvdXJzID0gYWRkWmVybyhkYXRlLmdldEhvdXJzKCkpO1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBhZGRaZXJvKGRhdGUuZ2V0TWludXRlcygpKTtcblxuICAgIHJldHVybiBgJHtob3Vyc306JHttaW51dGVzfWA7XG4gIH1cblxuICBwcml2YXRlIGdldEhvdXJGaXJzdEV4ZWN1dGlvbihmaXJzdEV4ZWN1dGlvbkRhdGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudEhvdXIobmV3IERhdGUoZmlyc3RFeGVjdXRpb25EYXRlKSk7XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZUludmFsaWRLZXlzKHZhbHVlOiBvYmplY3QsIGtleXM/OiBBcnJheTxzdHJpbmc+KSB7XG4gICAgY29uc3QgaW52YWxpZEtleXMgPSBrZXlzIHx8IFsncGVyaW9kaWNpdHknLCAnaG91cicsICdtaW51dGUnLCAnZGF5JywgJ2RheXNPZldlZWsnLCAnZGF5T2ZNb250aCcsICdmaXJzdEV4ZWN1dGlvbkhvdXInXTtcblxuICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoaW52YWxpZEtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBkZWxldGUgdmFsdWVba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVwbGFjZUhvdXJGaXJzdEV4ZWN1dGlvbihkYXRlOiBzdHJpbmcsIHRpbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgZmlyc3RFeGVjdXRpb25EYXRlID0gbmV3IERhdGUoZGF0ZSk7XG5cbiAgICBjb25zdCB0aW1lU3BsaXRlZCA9IHRpbWUuc3BsaXQoJzonKTtcblxuICAgIGNvbnN0IGhvdXJzID0gcGFyc2VJbnQodGltZVNwbGl0ZWRbMF0sIDEwKTtcbiAgICBjb25zdCBtaW51dGVzID0gcGFyc2VJbnQodGltZVNwbGl0ZWRbMV0sIDEwKTtcblxuICAgIGZpcnN0RXhlY3V0aW9uRGF0ZS5zZXRIb3Vycyhob3VycywgbWludXRlcyk7XG5cbiAgICByZXR1cm4gY29udmVydERhdGVUb0lTT0V4dGVuZGVkKGZpcnN0RXhlY3V0aW9uRGF0ZSk7XG4gIH1cblxuICBwcml2YXRlIHJldHVyblZhbGlkRXhlY3V0aW9uUGFyYW1ldGVyKHBhcmFtZXRlcjogb2JqZWN0KSB7XG4gICAgY29uc3QgbmV3UGFyYW1ldGVyID0geyAuLi5wYXJhbWV0ZXIgfTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIG5ld1BhcmFtZXRlcikge1xuICAgICAgaWYgKG5ld1BhcmFtZXRlci5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIG5ld1BhcmFtZXRlcltrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZGVsZXRlIG5ld1BhcmFtZXRlcltrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXdQYXJhbWV0ZXI7XG4gIH1cblxufVxuIl19