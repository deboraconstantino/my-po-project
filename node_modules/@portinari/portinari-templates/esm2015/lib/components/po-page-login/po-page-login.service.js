/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { PoPageLoginAuthenticationType } from './enums/po-page-login-authentication-type.enum';
export class PoPageLoginService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} type
     * @param {?} loginForm
     * @return {?}
     */
    onLogin(url, type, loginForm) {
        if (type === PoPageLoginAuthenticationType.Bearer) {
            loginForm.password = btoa(loginForm.password);
            return this.http.post(url, loginForm);
        }
        else {
            /** @type {?} */
            const user = `(${loginForm.login}:${loginForm.password})`;
            /** @type {?} */
            const headers = new HttpHeaders({
                'Authorization': `${type} ` + btoa(user)
            });
            delete loginForm.login;
            delete loginForm.password;
            return this.http.post(url, loginForm, { headers });
        }
    }
}
PoPageLoginService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoPageLoginService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageLoginService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1sb2dpbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdGVtcGxhdGVzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tcGFnZS1sb2dpbi9wby1wYWdlLWxvZ2luLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUszQyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUcvRixNQUFNLE9BQU8sa0JBQWtCOzs7O0lBRTdCLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7SUFBSSxDQUFDOzs7Ozs7O0lBRXpDLE9BQU8sQ0FBQyxHQUFXLEVBQUUsSUFBbUMsRUFBRSxTQUFzQjtRQUU5RSxJQUFJLElBQUksS0FBSyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUU7WUFDakQsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3ZDO2FBQU07O2tCQUNDLElBQUksR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLElBQUksU0FBUyxDQUFDLFFBQVEsR0FBRzs7a0JBQ25ELE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQztnQkFDOUIsZUFBZSxFQUFFLEdBQUcsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQzthQUN6QyxDQUFDO1lBQ0YsT0FBTyxTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ3ZCLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUMxQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3BEO0lBRUgsQ0FBQzs7O1lBcEJGLFVBQVU7Ozs7WUFSRixVQUFVOzs7Ozs7O0lBV0wsa0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuXHJcbmltcG9ydCB7IFBvUGFnZUxvZ2luIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXBhZ2UtbG9naW4uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgUG9QYWdlTG9naW5BdXRoZW50aWNhdGlvblR5cGUgfSBmcm9tICcuL2VudW1zL3BvLXBhZ2UtbG9naW4tYXV0aGVudGljYXRpb24tdHlwZS5lbnVtJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBvUGFnZUxvZ2luU2VydmljZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkgeyB9XHJcblxyXG4gIG9uTG9naW4odXJsOiBzdHJpbmcsIHR5cGU6IFBvUGFnZUxvZ2luQXV0aGVudGljYXRpb25UeXBlLCBsb2dpbkZvcm06IFBvUGFnZUxvZ2luKTogT2JzZXJ2YWJsZTxPYmplY3Q+IHtcclxuXHJcbiAgICBpZiAodHlwZSA9PT0gUG9QYWdlTG9naW5BdXRoZW50aWNhdGlvblR5cGUuQmVhcmVyKSB7XHJcbiAgICAgIGxvZ2luRm9ybS5wYXNzd29yZCA9IGJ0b2EobG9naW5Gb3JtLnBhc3N3b3JkKTtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgbG9naW5Gb3JtKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHVzZXIgPSBgKCR7bG9naW5Gb3JtLmxvZ2lufToke2xvZ2luRm9ybS5wYXNzd29yZH0pYDtcclxuICAgICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgJHt0eXBlfSBgICsgYnRvYSh1c2VyKVxyXG4gICAgICB9KTtcclxuICAgICAgZGVsZXRlIGxvZ2luRm9ybS5sb2dpbjtcclxuICAgICAgZGVsZXRlIGxvZ2luRm9ybS5wYXNzd29yZDtcclxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHVybCwgbG9naW5Gb3JtLCB7IGhlYWRlcnMgfSk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn1cclxuIl19