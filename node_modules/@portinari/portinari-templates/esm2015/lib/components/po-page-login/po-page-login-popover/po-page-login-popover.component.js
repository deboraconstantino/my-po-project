/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { isExternalLink, isTypeof } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para definição da mensagem de aviso de bloqueio do `po-page-login`.
 */
export class PoPageLoginPopoverComponent {
    constructor() {
        /**
         * se 'p-recovery' for do tipo Function ou PoPageLoginRecovery, emite para o método 'openUrl' do componente 'po-page-login'
         */
        this.forgotPassword = new EventEmitter();
    }
    /**
     * exibe o link de 'esqueci minha senha' e verifica se o valor é um link interno ou externo
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
        if (isTypeof(value, 'string')) {
            this.recoveryType = isExternalLink(value) ? 'externalLink' : 'internalLink';
        }
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * @param {?} recovery
     * @return {?}
     */
    onForgotPasswordClick(recovery) {
        this.forgotPassword.emit(recovery);
    }
}
PoPageLoginPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-login-popover',
                template: "<div class=\"po-page-login-popover-container\">\n  <div class=\"po-page-login-popover\">\n    <div class=\"po-page-login-popover-arrow\"></div>\n    <div class=\"po-page-login-popover-content\">\n      <p class=\"po-font-text-bold po-page-login-popover-title\">\n        {{ literals?.titlePopover }}\n      </p>\n      <p class=\"po-font-text\">\n        {{ literals?.forgotYourPassword }}\n      </p>\n      <p class=\"po-font-text\">\n        {{ literals?.ifYouTryHarder }}\n        <span class=\"po-font-text-bold po-page-login-popover-attempts\">\n          {{ literals?.attempts | poI18n:remainingAttempts }}\n        </span>{{ literals?.yourUserWillBeBlocked }}\n      </p>\n      <br>\n      <p class=\"po-font-text\">\n        {{ literals?.createANewPasswordNow }}\n      </p>\n      <div *ngIf=\"recovery\" class=\"po-font-text-bold po-mt-1 po-page-login-popover-link-container\">\n        <a *ngIf=\"recoveryType === 'internalLink'\"\n          class=\"po-page-login-popover-link\"\n          [routerLink]=\"recovery\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"recoveryType === 'externalLink'\"\n          class=\"po-page-login-popover-link\"\n          [href]=\"recovery\"\n          target=\"_blank\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"!recoveryType\"\n          class=\"po-page-login-popover-link\"\n          (click)=\"onForgotPasswordClick(recovery)\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }] }
];
PoPageLoginPopoverComponent.propDecorators = {
    literals: [{ type: Input, args: ['p-literals',] }],
    recovery: [{ type: Input, args: ['p-recovery',] }],
    remainingAttempts: [{ type: Input, args: ['p-remaining-attempts',] }],
    forgotPassword: [{ type: Output, args: ['p-forgot-password',] }]
};
if (false) {
    /** @type {?} */
    PoPageLoginPopoverComponent.prototype.recoveryType;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginPopoverComponent.prototype._recovery;
    /** @type {?} */
    PoPageLoginPopoverComponent.prototype.literals;
    /**
     * define se a mensagem deverá ser exibida caso seja maior que 0(zero)
     * @type {?}
     */
    PoPageLoginPopoverComponent.prototype.remainingAttempts;
    /**
     * se 'p-recovery' for do tipo Function ou PoPageLoginRecovery, emite para o método 'openUrl' do componente 'po-page-login'
     * @type {?}
     */
    PoPageLoginPopoverComponent.prototype.forgotPassword;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1sb2dpbi1wb3BvdmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXRlbXBsYXRlcy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXBhZ2UtbG9naW4vcG8tcGFnZS1sb2dpbi1wb3BvdmVyL3BvLXBhZ2UtbG9naW4tcG9wb3Zlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVUvRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sMkJBQTJCO0lBWnhDOzs7O1FBcUMrQixtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUFNeEUsQ0FBQzs7Ozs7O0lBdEJDLElBQXlCLFFBQVEsQ0FBQyxLQUE4QztRQUM5RSxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUV2QixJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFlBQVksR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDO1NBQzdFO0lBQ0gsQ0FBQzs7OztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7OztJQVFELHFCQUFxQixDQUFDLFFBQVE7UUFDNUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQzs7O1lBekNGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQywraERBQXFEO2FBQ3REOzs7dUJBZUUsS0FBSyxTQUFDLFlBQVk7dUJBR2xCLEtBQUssU0FBQyxZQUFZO2dDQWFsQixLQUFLLFNBQUMsc0JBQXNCOzZCQUc1QixNQUFNLFNBQUMsbUJBQW1COzs7O0lBdkIzQixtREFBcUI7Ozs7O0lBRXJCLGdEQUEyRDs7SUFFM0QsK0NBQW1EOzs7OztJQWdCbkQsd0RBQXlEOzs7OztJQUd6RCxxREFBc0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBpc0V4dGVybmFsTGluaywgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9QYWdlTG9naW5MaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tcGFnZS1sb2dpbi1saXRlcmFscy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlTG9naW5SZWNvdmVyeSB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tcGFnZS1sb2dpbi1yZWNvdmVyeS5pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1wYWdlLWxvZ2luLXBvcG92ZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tcGFnZS1sb2dpbi1wb3BvdmVyLmNvbXBvbmVudC5odG1sJ1xufSlcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBDb21wb25lbnRlIHBhcmEgZGVmaW5pw6fDo28gZGEgbWVuc2FnZW0gZGUgYXZpc28gZGUgYmxvcXVlaW8gZG8gYHBvLXBhZ2UtbG9naW5gLlxuICovXG5leHBvcnQgY2xhc3MgUG9QYWdlTG9naW5Qb3BvdmVyQ29tcG9uZW50IHtcblxuICByZWNvdmVyeVR5cGU6IHN0cmluZztcblxuICBwcml2YXRlIF9yZWNvdmVyeTogc3RyaW5nIHwgRnVuY3Rpb24gfCBQb1BhZ2VMb2dpblJlY292ZXJ5O1xuXG4gIEBJbnB1dCgncC1saXRlcmFscycpIGxpdGVyYWxzOiBQb1BhZ2VMb2dpbkxpdGVyYWxzO1xuXG4gIC8qKiBleGliZSBvIGxpbmsgZGUgJ2VzcXVlY2kgbWluaGEgc2VuaGEnIGUgdmVyaWZpY2Egc2UgbyB2YWxvciDDqSB1bSBsaW5rIGludGVybm8gb3UgZXh0ZXJubyAqL1xuICBASW5wdXQoJ3AtcmVjb3ZlcnknKSBzZXQgcmVjb3ZlcnkodmFsdWU6IHN0cmluZyB8IEZ1bmN0aW9uIHwgUG9QYWdlTG9naW5SZWNvdmVyeSkge1xuICAgIHRoaXMuX3JlY292ZXJ5ID0gdmFsdWU7XG5cbiAgICBpZiAoaXNUeXBlb2YodmFsdWUsICdzdHJpbmcnKSkge1xuICAgICAgdGhpcy5yZWNvdmVyeVR5cGUgPSBpc0V4dGVybmFsTGluayh2YWx1ZSkgPyAnZXh0ZXJuYWxMaW5rJyA6ICdpbnRlcm5hbExpbmsnO1xuICAgIH1cbiAgfVxuXG4gIGdldCByZWNvdmVyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVjb3Zlcnk7XG4gIH1cblxuICAvKiogZGVmaW5lIHNlIGEgbWVuc2FnZW0gZGV2ZXLDoSBzZXIgZXhpYmlkYSBjYXNvIHNlamEgbWFpb3IgcXVlIDAoemVybykgKi9cbiAgQElucHV0KCdwLXJlbWFpbmluZy1hdHRlbXB0cycpIHJlbWFpbmluZ0F0dGVtcHRzOiBudW1iZXI7XG5cbiAgLyoqIHNlICdwLXJlY292ZXJ5JyBmb3IgZG8gdGlwbyBGdW5jdGlvbiBvdSBQb1BhZ2VMb2dpblJlY292ZXJ5LCBlbWl0ZSBwYXJhIG8gbcOpdG9kbyAnb3BlblVybCcgZG8gY29tcG9uZW50ZSAncG8tcGFnZS1sb2dpbicgKi9cbiAgQE91dHB1dCgncC1mb3Jnb3QtcGFzc3dvcmQnKSBmb3Jnb3RQYXNzd29yZCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIG9uRm9yZ290UGFzc3dvcmRDbGljayhyZWNvdmVyeSkge1xuICAgIHRoaXMuZm9yZ290UGFzc3dvcmQuZW1pdChyZWNvdmVyeSk7XG4gIH1cblxufVxuIl19