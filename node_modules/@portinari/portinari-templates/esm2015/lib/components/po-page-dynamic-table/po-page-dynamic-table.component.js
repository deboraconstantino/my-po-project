/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ActivatedRoute, Router } from '@angular/router';
import { Component, Input } from '@angular/core';
import { EMPTY, throwError, concat } from 'rxjs';
import { tap } from 'rxjs/operators';
import { PoDialogService, PoNotificationService, PoTableColumnSortType } from '@portinari/portinari-ui';
import * as util from '../../utils/util';
import { PoPageDynamicDetailComponent } from '../po-page-dynamic-detail/po-page-dynamic-detail.component';
import { PoPageDynamicListBaseComponent } from './po-page-dynamic-list-base.component';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
import { PoPageCustomizationService } from './../../services/po-page-customization/po-page-customization.service';
/** @type {?} */
export const poPageDynamicTableLiteralsDefault = {
    en: {
        pageAction: 'New',
        pageActionRemoveAll: 'Delete',
        tableActionView: 'View',
        tableActionEdit: 'Edit',
        tableActionDuplicate: 'Duplicate',
        tableActionDelete: 'Delete',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        confirmRemoveAllTitle: 'Confirm batch deletion',
        confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',
        loadDataErrorNotification: 'Service not found',
        removeSuccessNotification: 'Item deleted successfully',
        removeAllSuccessNotification: 'Items deleted successfully'
    },
    es: {
        pageAction: 'Nuevo',
        pageActionRemoveAll: 'Borrar',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Borrar',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        confirmRemoveAllTitle: 'Confirmar la exclusión por lotes',
        confirmRemoveAllMessage: '¿Está seguro de que desea eliminar todos estos registros? No puede deshacer esta acción.',
        loadDataErrorNotification: 'Servicio no informado.',
        removeSuccessNotification: 'Elemento eliminado con éxito',
        removeAllSuccessNotification: 'Elementos eliminados con éxito'
    },
    pt: {
        pageAction: 'Novo',
        pageActionRemoveAll: 'Excluir',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Excluir',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        confirmRemoveAllTitle: 'Confirmar exclusão em lote',
        confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? Você não poderá desfazer essa ação.',
        loadDataErrorNotification: 'Serviço não informado.',
        removeSuccessNotification: 'Item excluido com sucesso',
        removeAllSuccessNotification: 'Items excluidos com sucesso'
    }
};
/**
 * \@docsExtends PoPageDynamicListBaseComponent
 *
 * \@description
 *
 * O `po-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-table` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * ```
 * {
 *   path: 'people',
 *   component: PoPageDynamicTableComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata' // endpoint dos metadados
 *   }
 * }
 * ```
 *
 * Para carregar com um recurso já existente, deve ser incluído um parâmetro na rota chamado `id`:
 *
 * ```
 * {
 *   path: 'people/:id',
 *   component: PoPageDynamicTableComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata' // endpoint dos metadados
 *   }
 * }
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicTableMetadata](/documentation/po-page-dynamic-table#po-page-dynamic-table-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person Table',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ]
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=list&version={version}
 * ```
 *
 * \@example
 *
 * <example name="po-page-dynamic-table-basic" title="Portinari Page Dynamic Table Basic">
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-users" title="Portinari Page Dynamic Table - Users">
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.ts"> </file>
 * </example>
 */
export class PoPageDynamicTableComponent extends PoPageDynamicListBaseComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} poDialogService
     * @param {?} poNotification
     * @param {?} poPageDynamicService
     * @param {?} poPageCustomizationService
     */
    constructor(router, activatedRoute, poDialogService, poNotification, poPageDynamicService, poPageCustomizationService) {
        super();
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poDialogService = poDialogService;
        this.poNotification = poNotification;
        this.poPageDynamicService = poPageDynamicService;
        this.poPageCustomizationService = poPageCustomizationService;
        this._actions = {};
        this._pageActions = [];
        this._tableActions = [];
        this.page = 1;
        this.params = {};
        this.subscriptions = [];
        this.hasNext = false;
        this.items = [];
        this.literals = Object.assign({}, poPageDynamicTableLiteralsDefault[util.poLocaleDefault], poPageDynamicTableLiteralsDefault[util.browserLanguage()]);
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ações da página e da tabela.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
        this.setPageActions(this.actions);
        this.setRemoveAllAction();
        this.setTableActions(this.actions);
    }
    /**
     * @return {?}
     */
    get actions() {
        return this._actions;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loadDataFromAPI();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.forEach((/**
             * @param {?} subscription
             * @return {?}
             */
            subscription => {
                subscription.unsubscribe();
            }));
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    onAdvancedSearch(filter) {
        this.subscriptions.push(this.loadData(Object.assign({ page: 1 }, filter)).subscribe());
        this.params = filter;
    }
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    onChangeDisclaimers(disclaimers) {
        /** @type {?} */
        const filter = {};
        disclaimers.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        disclaimer => {
            filter[disclaimer.property] = disclaimer.value;
        }));
        this.onAdvancedSearch(filter);
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    onQuickSearch(filter) {
        this.subscriptions.push(this.loadData(filter ? { page: 1, search: filter } : undefined).subscribe());
        this.params = filter ? { search: filter } : {};
    }
    /**
     * @param {?} sortedColumn
     * @return {?}
     */
    onSort(sortedColumn) {
        this.sortedColumn = sortedColumn;
    }
    /**
     * @return {?}
     */
    showMore() {
        this.subscriptions.push(this.loadData(Object.assign({ page: ++this.page }, this.params)).subscribe());
    }
    /**
     * @return {?}
     */
    get hasActionRemoveAll() {
        return !!this.actions.removeAll;
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @return {?}
     */
    get tableActions() {
        return this._tableActions;
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    confirmRemove(item) {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, item)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @return {?}
     */
    confirmRemoveAll() {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveAllTitle,
            message: this.literals.confirmRemoveAllMessage,
            confirm: this.removeAll.bind(this)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @param {?=} sortedColumn
     * @return {?}
     */
    getOrderParam(sortedColumn = { type: undefined }) {
        const { column, type } = sortedColumn;
        if (!column) {
            return {};
        }
        if (type === PoTableColumnSortType.Descending) {
            return { order: `-${column.property}` };
        }
        return { order: `${column.property}` };
    }
    /**
     * @private
     * @param {?=} params
     * @return {?}
     */
    loadData(params = {}) {
        if (!this.serviceApi) {
            this.poNotification.error(this.literals.loadDataErrorNotification);
            return throwError(this.literals.loadDataErrorNotification);
        }
        /** @type {?} */
        const orderParam = this.getOrderParam(this.sortedColumn);
        /** @type {?} */
        const defaultParams = { page: 1, pageSize: 10 };
        /** @type {?} */
        const fullParams = Object.assign({}, defaultParams, params, orderParam);
        return this.poPageDynamicService.getResources(fullParams).pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.items = fullParams.page === 1 ? response.items : [...this.items, ...response.items];
            this.page = fullParams.page;
            this.hasNext = response.hasNext;
        })));
    }
    /**
     * @private
     * @param {?} serviceApi
     * @return {?}
     */
    getMetadata(serviceApi) {
        if (serviceApi) {
            return this.poPageDynamicService.getMetadata().pipe(tap((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.autoRouter = response.autoRouter || this.autoRouter;
                this.actions = response.actions || this.actions;
                this.breadcrumb = response.breadcrumb || this.breadcrumb;
                this.fields = response.fields || this.fields;
                this.title = response.title || this.title;
            })));
        }
        return EMPTY;
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        () => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }
            })));
            this.navigateTo(route, true);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openDetail(path, item) {
        /** @type {?} */
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url, component: PoPageDynamicDetailComponent });
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openDuplicate(path, item) {
        /** @type {?} */
        const duplicates = util.mapObjectByProperties(item, this.duplicates);
        this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } });
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openEdit(path, item) {
        /** @type {?} */
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url });
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    openNew(path) {
        this.navigateTo({ path });
    }
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'portinari' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|portinari
     * @private
     * @param {?} item
     * @return {?}
     */
    remove(item) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        this.poPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.removeLocalItems([item]);
            this.poNotification.success(this.literals.removeSuccessNotification);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removeAll() {
        // TODO: usar propriedade nova pra validar os itens selecionados
        /** @type {?} */
        const selectedItems = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected));
        if (selectedItems.length === 0) {
            // TODO: usar propriedade nova pra validar os itens selecionados
            return;
        }
        /** @type {?} */
        const keysSelectedItems = util.mapArrayByProperties(selectedItems, this.keys);
        this.poPageDynamicService.deleteResources(keysSelectedItems).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.removeLocalItems(selectedItems);
            this.poNotification.success(this.literals.removeAllSuccessNotification);
        }));
    }
    /**
     * @private
     * @param {?=} items
     * @return {?}
     */
    removeLocalItems(items = []) {
        items.forEach((/**
         * @param {?} itemRemoved
         * @return {?}
         */
        itemRemoved => {
            /** @type {?} */
            const indexItemRemoved = this.items.indexOf(itemRemoved);
            this.items.splice(indexItemRemoved, 1);
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    setPageActions(actions) {
        if (actions) {
            this._pageActions = [
                { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new },
            ];
        }
    }
    /**
     * @private
     * @return {?}
     */
    setRemoveAllAction() {
        if (this._actions.removeAll) {
            this._pageActions.push({
                label: this.literals.pageActionRemoveAll, action: this.confirmRemoveAll.bind(this),
                disabled: !this._actions.removeAll
            });
        }
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    setTableActions(actions) {
        if (actions) {
            this._tableActions = [
                { action: this.openDetail.bind(this, actions.detail), label: this.literals.tableActionView, visible: !!this._actions.detail },
                { action: this.openEdit.bind(this, actions.edit), label: this.literals.tableActionEdit, visible: !!this._actions.edit },
                { action: this.openDuplicate.bind(this, actions.duplicate), label: this.literals.tableActionDuplicate,
                    visible: !!this._actions.duplicate
                },
                { action: this.confirmRemove.bind(this), label: this.literals.tableActionDelete, separator: true, type: 'danger',
                    visible: !!this._actions.remove
                }
            ];
        }
    }
    /**
     * @private
     * @return {?}
     */
    loadDataFromAPI() {
        const { serviceApi, serviceMetadataApi } = this.activatedRoute.snapshot.data;
        this.serviceApi = serviceApi || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        /** @type {?} */
        const metadata$ = this.getMetadata(serviceApi);
        /** @type {?} */
        const data$ = this.loadData();
        /** @type {?} */
        const customOption$ = this.loadOptionsOnInitialize(this.onLoad);
        this.subscriptions.push(concat(metadata$, data$, customOption$).subscribe());
    }
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    loadOptionsOnInitialize(onLoad) {
        if (onLoad) {
            return this.getPoDynamicPageOptions(onLoad).pipe(tap((/**
             * @param {?} responsePoOption
             * @return {?}
             */
            responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption))));
        }
        return EMPTY;
    }
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    getPoDynamicPageOptions(onLoad) {
        /** @type {?} */
        const originalOption = {
            fields: this.fields,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            title: this.title
        };
        /** @type {?} */
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'fields',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
}
PoPageDynamicTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-table',
                template: "<po-page-dynamic-search\r\n  [p-actions]=\"pageActions\"\r\n  [p-breadcrumb]=\"breadcrumb\"\r\n  [p-filters]=\"filters\"\r\n  [p-title]=\"title\"\r\n  (p-advanced-search)=\"onAdvancedSearch($event)\"\r\n  (p-change-disclaimers)=\"onChangeDisclaimers($event)\"\r\n  (p-quick-search)=\"onQuickSearch($event)\">\r\n\r\n  <po-table\r\n    p-sort=\"true\"\r\n    [p-actions]=\"tableActions\"\r\n    [p-checkbox]=\"hasActionRemoveAll\"\r\n    [p-columns]=\"columns\"\r\n    [p-items]=\"items\"\r\n    [p-show-more-disabled]=\"!hasNext\"\r\n    (p-show-more)=\"showMore()\"\r\n    (p-sort-by)=\"onSort($event)\">\r\n  </po-table>\r\n\r\n</po-page-dynamic-search>\r\n",
                providers: [PoPageDynamicService]
            }] }
];
/** @nocollapse */
PoPageDynamicTableComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoDialogService },
    { type: PoNotificationService },
    { type: PoPageDynamicService },
    { type: PoPageCustomizationService }
];
PoPageDynamicTableComponent.propDecorators = {
    onLoad: [{ type: Input, args: ['p-load',] }],
    actions: [{ type: Input, args: ['p-actions',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype._pageActions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype._tableActions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.page;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.params;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.sortedColumn;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.subscriptions;
    /** @type {?} */
    PoPageDynamicTableComponent.prototype.hasNext;
    /** @type {?} */
    PoPageDynamicTableComponent.prototype.items;
    /** @type {?} */
    PoPageDynamicTableComponent.prototype.literals;
    /**
     * Função ou serviço que será executado na inicialização do componente.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * O retorno desta função deve ser do tipo `PoPageDynamicTableOptions`,
     * onde o usuário poderá customizar novos campos, breadcrumb, title e actions
     *
     * Por exemplo:
     *
     * ```
     * getPageOptions(): PoPageDynamicTableOptions {
     * return {
     *   actions:
     *     { new: 'new', edit: 'edit/:id', remove: true },
     *   fields: [
     *     { property: 'idCard', gridColumns: 6 }
     *   ]
     * };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-load]="onLoadOptions.bind(this)"
     * ```
     * @type {?}
     */
    PoPageDynamicTableComponent.prototype.onLoad;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.poDialogService;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.poNotification;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.poPageDynamicService;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.poPageCustomizationService;
}
//# sourceMappingURL=data:application/json;base64,