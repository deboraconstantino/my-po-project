/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { PoDialogService, PoDynamicFormComponent, PoGridComponent, PoNotificationService } from '@portinari/portinari-ui';
import * as util from './../../utils/util';
import { PoPageDynamicService } from './po-page-dynamic.service';
/** @type {?} */
export const poPageDynamicEditLiteralsDefault = {
    en: {
        cancelConfirmMessage: 'Are you sure you want to cancel this operation?',
        detailActionNew: 'New',
        pageActionCancel: 'Cancel',
        pageActionSave: 'Save',
        pageActionSaveNew: 'Save and new',
        registerNotFound: 'Register not found.',
        saveNewNotificationSuccessSave: 'Resource successfully saved.',
        saveNewNotificationSuccessUpdate: 'Resource successfully updated.',
        saveNewNotificationWarning: 'Form must be filled out correctly.',
        saveNotificationSuccessSave: 'Resource successfully saved.',
        saveNotificationSuccessUpdate: 'Resource successfully updated.',
        saveNotificationWarning: 'Form must be filled out correctly.',
    },
    es: {
        cancelConfirmMessage: 'Está seguro de que desea cancelar esta operación?',
        detailActionNew: 'Nuevo',
        pageActionCancel: 'Cancelar',
        pageActionSave: 'Guardar',
        pageActionSaveNew: 'Guardar y nuevo',
        registerNotFound: 'Registro no encontrado.',
        saveNewNotificationSuccessSave: 'Recurso salvo con éxito.',
        saveNewNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
        saveNewNotificationWarning: 'El formulario debe llenarse correctamente.',
        saveNotificationSuccessSave: 'Recurso salvo con éxito.',
        saveNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
        saveNotificationWarning: 'El formulario debe llenarse correctamente.',
    },
    pt: {
        cancelConfirmMessage: 'Tem certeza que deseja cancelar esta operação?',
        detailActionNew: 'Novo',
        pageActionCancel: 'Cancelar',
        pageActionSave: 'Salvar',
        pageActionSaveNew: 'Salvar e novo',
        registerNotFound: 'Registro não encontrado.',
        saveNewNotificationSuccessSave: 'Recurso salvo com sucesso.',
        saveNewNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
        saveNewNotificationWarning: 'Formulário precisa ser preenchido corretamente.',
        saveNotificationSuccessSave: 'Recurso salvo com sucesso.',
        saveNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
        saveNotificationWarning: 'Formulário precisa ser preenchido corretamente.',
    }
};
/**
 * \@description
 *
 * O `po-page-dynamic-edit` é uma página que pode servir para editar ou criar novos registros,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-edit` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * ```
 * {
 *   path: 'people',
 *   component: PoPageDynamicEditComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata' // endpoint dos metadados
 *   }
 * }
 * ```
 *
 * Para carregar com um recurso já existente, deve-se ser incluído um parâmetro na rota chamado `id`:
 *
 * ```
 * {
 *   path: 'people/:id',
 *   component: PoPageDynamicEditComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata' // endpoint dos metadados
 *   }
 * }
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicEditMetadata](/documentation/po-page-dynamic-edit#po-page-dynamic-edit-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person edit',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ]
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=edit&version={version}
 * ```
 *
 * \@example
 *
 * <example name="po-page-dynamic-edit-basic" title="Portinari Page Dynamic Edit Basic">
 *  <file name="sample-po-page-dynamic-edit-basic/sample-po-page-dynamic-edit-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-edit-basic/sample-po-page-dynamic-edit-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-edit-user" title="Portinari Page Dynamic Edit - User">
 *  <file name="sample-po-page-dynamic-edit-user/sample-po-page-dynamic-edit-user.component.html"> </file>
 *  <file name="sample-po-page-dynamic-edit-user/sample-po-page-dynamic-edit-user.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-edit-master-detail" title="Portinari Page Dynamic Edit - Master Detail">
 *  <file name="sample-po-page-dynamic-edit-master-detail/sample-po-page-dynamic-edit-master-detail.component.html"> </file>
 *  <file name="sample-po-page-dynamic-edit-master-detail/sample-po-page-dynamic-edit-master-detail.component.ts"> </file>
 * </example>
 */
export class PoPageDynamicEditComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} poNotification
     * @param {?} poDialogService
     * @param {?} poPageDynamicService
     */
    constructor(router, activatedRoute, poNotification, poDialogService, poPageDynamicService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poNotification = poNotification;
        this.poDialogService = poDialogService;
        this.poPageDynamicService = poPageDynamicService;
        this._actions = {};
        this._autoRouter = false;
        this._controlFields = [];
        this._detailFields = [];
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.literals = Object.assign({}, poPageDynamicEditLiteralsDefault[util.poLocaleDefault], poPageDynamicEditLiteralsDefault[util.browserLanguage()]);
        this.model = {};
        // beforeSave: return boolean
        // afterSave
        // beforeRemove: return boolean
        // afterRemove
        // beforeInsert: : return boolean
        this.detailActions = {};
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ações da página.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    /**
     * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = util.convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * Lista dos campos usados na tabela e busca avançada.
     * @param {?} value
     * @return {?}
     */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this._fields);
        this._duplicates = this.getDuplicatesByFields(this._fields);
        this._controlFields = this.getControlFields(this._fields);
        this._detailFields = this.getDetailFields(this._fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const duplicate = this.activatedRoute.snapshot.queryParams['duplicate'];
        const { serviceApi, serviceMetadataApi } = this.activatedRoute.snapshot.data;
        this.serviceApi = serviceApi || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        if (serviceApi) {
            this.loadMetadata(paramId, duplicate);
        }
        else {
            this.loadData(paramId, duplicate);
        }
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @return {?}
     */
    get controlFields() {
        return this._controlFields;
    }
    /**
     * @return {?}
     */
    get detailFields() {
        return this._detailFields;
    }
    /**
     * @return {?}
     */
    detailActionNew() {
        this.gridDetail.insertRow();
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    cancel(path) {
        if (this.dynamicForm && this.dynamicForm.form.dirty) {
            this.poDialogService.confirm({
                message: this.literals.cancelConfirmMessage,
                title: this.literals.pageActionCancel,
                confirm: this.goBack.bind(this, path)
            });
        }
        else {
            this.goBack(path);
        }
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    goBack(path) {
        if (path) {
            this.router.navigate([path]);
        }
        else {
            window.history.back();
        }
    }
    /**
     * @private
     * @param {?} id
     * @param {?=} duplicate
     * @return {?}
     */
    loadData(id, duplicate) {
        if (!id) {
            try {
                this.model = JSON.parse(duplicate) || {};
            }
            catch (_a) {
                this.model = {};
            }
            return;
        }
        this.poPageDynamicService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = undefined;
            this.actions = undefined;
            this._pageActions = [];
        }));
    }
    /**
     * @private
     * @param {?} paramId
     * @param {?} duplicate
     * @return {?}
     */
    loadMetadata(paramId, duplicate) {
        /** @type {?} */
        const typeMetadata = paramId ? 'edit' : 'create';
        this.poPageDynamicService.getMetadata(typeMetadata).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData(paramId, duplicate);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    navigateTo(path) {
        if (path) {
            /** @type {?} */
            const url = this.resolveUrl(this.model, path);
            this.router.navigate([url]);
        }
        else {
            window.history.back();
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    save(path) {
        if (this.dynamicForm.form.invalid) {
            this.poNotification.warning(this.literals.saveNotificationWarning);
            return;
        }
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const saveOperation = paramId
            ? this.poPageDynamicService.updateResource(paramId, this.model)
            : this.poPageDynamicService.createResource(this.model);
        /** @type {?} */
        const msgSucess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;
        saveOperation.toPromise().then((/**
         * @return {?}
         */
        () => {
            this.poNotification.success(msgSucess);
            this.navigateTo(path);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    saveNew(path) {
        if (this.dynamicForm.form.invalid) {
            this.poNotification.warning(this.literals.saveNewNotificationWarning);
            return;
        }
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        if (paramId) {
            this.poPageDynamicService.updateResource(paramId, this.model)
                .toPromise().then((/**
             * @return {?}
             */
            () => {
                this.poNotification.success(this.literals.saveNewNotificationSuccessUpdate);
                this.navigateTo(path);
            }));
        }
        else {
            this.poPageDynamicService.createResource(this.model)
                .toPromise().then((/**
             * @return {?}
             */
            () => {
                this.poNotification.success(this.literals.saveNewNotificationSuccessSave);
                this.model = {};
                this.dynamicForm.form.reset();
            }));
        }
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getKeysByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getControlFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.type !== 'detail'));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDetailFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.type === 'detail'));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDuplicatesByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} actions
     * @return {?}
     */
    getPageActions(actions = {}) {
        /** @type {?} */
        const pageActions = [{ label: this.literals.pageActionSave, action: this.save.bind(this, actions.save) }];
        if (actions.saveNew) {
            pageActions.push({ label: this.literals.pageActionSaveNew, action: this.saveNew.bind(this, actions.saveNew) });
        }
        if (actions.cancel === undefined || actions.cancel) {
            pageActions.push({ label: this.literals.pageActionCancel, action: this.cancel.bind(this, actions.cancel) });
        }
        return pageActions;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
}
PoPageDynamicEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-edit',
                template: "<po-page-default\n  [p-actions]=\"pageActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then formFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</po-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <po-widget>\n    <span class=\"po-icon po-icon-info\"></span>\n    <span class=\"po-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </po-widget>\n\n</ng-template>\n\n<ng-template #formFieldsTemplate>\n\n  <po-dynamic-form #dynamicForm [p-fields]=\"controlFields\" [p-value]=\"model\">\n  </po-dynamic-form>\n\n  <div *ngIf=\"detailFields.length > 0\" class=\"po-sm-12\">\n    <po-divider [p-label]=\"detailFields[0].divider\"></po-divider>\n\n    <div class=\"po-row po-mb-2\">\n      <po-button [p-label]=\"literals.detailActionNew\" (p-click)=\"detailActionNew()\" p-small></po-button>\n    </div>\n\n    <po-grid #gridDetail\n      [p-row-actions]=\"detailActions\"\n      [p-columns]=\"detailFields[0].detail.columns\"\n      [p-data]=\"model[detailFields[0].property]\">\n    </po-grid>\n  </div>\n\n</ng-template>\n",
                providers: [PoPageDynamicService]
            }] }
];
/** @nocollapse */
PoPageDynamicEditComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoNotificationService },
    { type: PoDialogService },
    { type: PoPageDynamicService }
];
PoPageDynamicEditComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    autoRouter: [{ type: Input, args: ['p-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    fields: [{ type: Input, args: ['p-fields',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }],
    title: [{ type: Input, args: ['p-title',] }],
    dynamicForm: [{ type: ViewChild, args: ['dynamicForm', { static: false },] }],
    gridDetail: [{ type: ViewChild, args: ['gridDetail', { static: false },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._autoRouter;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._controlFields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._detailFields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._duplicates;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._keys;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._pageActions;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.literals;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.model;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.detailActions;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDynamicEditComponent.prototype.breadcrumb;
    /**
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso que será exibido para edição.
     *
     * Para as ações de `save` e `saveNew`, será feito uma requisição de criação nesse mesmo endpoint passando os valores
     * preenchidos pelo usuário via payload.
     *
     * > `POST {end-point}`
     *
     * ```
     *  <po-page-dynamic-edit
     *    [p-actions]="{ save: '/', saveNew: 'new' }"
     *    [p-fields]="[ { property: 'name' }, { property: 'city' } ]"
     *    p-service="/api/po-samples/v1/people"
     *    ...>
     *  </po-page-dynamic-edit>
     * ```
     *
     * Resquisição disparada, onde a propriedade `name` e `city` foram preenchidas:
     *
     * ```
     *  POST /api/po-samples/v1/people HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * Request payload:
     *
     * ```
     * { "name": "Fulano", "city": "Smallville" }
     * ```
     *
     * Caso queira que o template carregue um recurso já existente, deve-se ser incluído um parametro na rota chamado `id`.
     *
     * Exemplo de configuração de rota:
     *
     * ```
     *  RouterModule.forRoot([
     *    ...
     *    { path: 'edit/:id', component: PersonEditComponent },
     *    ...
     *  ],
     * ```
     *
     * Baseado nisso, na inicialização do template, será disparado uma requisição para buscar o recurso que será editado.
     *
     * > `GET {end-point}/{id}`
     *
     * Nos métodos de `save` e `saveNew`, ao invés de um `POST`, será disparado um `PUT`.
     *
     * Resquisição disparada, onde a propriedade `name` e `city` foram preenchidas / atualizadas, e o `id` da url é 2:
     *
     * ```
     *  PUT /api/po-samples/v1/people/2 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * Request payload:
     *
     * ```
     * { "name": "Fulano", "city": "Metropolis" }
     * ```
     * @type {?}
     */
    PoPageDynamicEditComponent.prototype.serviceApi;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageDynamicEditComponent.prototype.title;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.dynamicForm;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.gridDetail;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.poNotification;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.poDialogService;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.poPageDynamicService;
}
//# sourceMappingURL=data:application/json;base64,