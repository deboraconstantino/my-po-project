/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean, isExternalLink, isTypeof } from '../../utils/util';
/**
 * \@description
 *
 * O componente `po-page-change-password` é utilizado como template para tela de cadastro ou alteração de senha.
 *
 * Apresenta dicas e regras para senhas mais seguras e também possibilidade de personalizar o redirecionamento para as telas
 * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas são pré-definidos e imutáveis.
 *
 * A propriedade `p-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteração de senha, bastando
 * definir uma url para POST das informações digitadas pelo usuário.  A flexibilidade e praticidade podem chegar a um nível em que o
 * desenvolvimento da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de cadastro/alteração de senha.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@portinari/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
export class PoPageChangePasswordBaseComponent {
    constructor() {
        this._hideCurrentPassword = false;
        this._requirements = [];
        this._urlHome = '/';
        /**
         * \@optional
         *
         * \@description
         *
         * URL para a ação de retorno da página.
         *
         * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `p-hide-current-password` for
         * falsa.
         *
         * \@default `/`
         */
        this.urlBack = '/';
        /**
         * \@optional
         *
         * \@description
         *
         * Função executada ao submeter o form pelo botão salvar.
         *
         * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
         * método `openConfirmation`. Exemplo:
         *
         * ```
         * \@ViewChild(PoPageChangePasswordComponent) changePassword: PoPageChangePasswordComponent;
         *
         * onSubmit() {
         *  this.changePassword.openConfirmation();
         * }
         *
         * ```
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-new-password`.
         */
        this.submit = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde o campo `Senha atual` para que o template seja para criação de senha.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideCurrentPassword(value) {
        this._hideCurrentPassword = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideCurrentPassword() {
        return this._hideCurrentPassword;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação do link `Esqueceu a senha`.
     *
     * A propriedade aceita os seguintes tipos:
     *
     * - **String**: informe uma url externa ou uma rota válida;
     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
     * ```
     * <po-page-change-password>
     *      [recovery]="this.myFunc.bind(this)";
     * </po-page-change-password>
     * ```
     *
     * - **PoPageChangePasswordRecovery**: cria-se vínculo automático com o template **po-modal-password-recovery**.
     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
     *   **email** para contato e **máscara** do campo de telefone.
     *
     * > Caso não tenha valor o link `Esqueceu a senha` desaparece.
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
        if (isTypeof(value, 'string')) {
            this.recoveryUrlType = isExternalLink(value) ? 'externalLink' : 'internalLink';
        }
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de regras para criação e alteração de senha.
     * @param {?} value
     * @return {?}
     */
    set requirements(value) {
        this._requirements = value || [];
        this.showRequirements = this._requirements.length > 0;
    }
    /**
     * @return {?}
     */
    get requirements() {
        return this._requirements;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método
     * `openConfirmation`.
     *
     * \@default `/`
     * @param {?} value
     * @return {?}
     */
    set urlHome(value) {
        this._urlHome = value;
        this.modalAction.action = this.navigateTo.bind(this, this.urlHome);
    }
    /**
     * @return {?}
     */
    get urlHome() {
        return this._urlHome;
    }
}
PoPageChangePasswordBaseComponent.propDecorators = {
    hideCurrentPassword: [{ type: Input, args: ['p-hide-current-password',] }],
    logo: [{ type: Input, args: ['p-logo',] }],
    recovery: [{ type: Input, args: ['p-recovery',] }],
    requirements: [{ type: Input, args: ['p-requirements',] }],
    secondaryLogo: [{ type: Input, args: ['p-secondary-logo',] }],
    token: [{ type: Input, args: ['p-token',] }],
    urlBack: [{ type: Input, args: ['p-url-back',] }],
    urlNewPassword: [{ type: Input, args: ['p-url-new-password',] }],
    urlHome: [{ type: Input, args: ['p-url-home',] }],
    submit: [{ type: Output, args: ['p-submit',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordBaseComponent.prototype._hideCurrentPassword;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordBaseComponent.prototype._recovery;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordBaseComponent.prototype._requirements;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordBaseComponent.prototype._urlHome;
    /**
     * @type {?}
     * @protected
     */
    PoPageChangePasswordBaseComponent.prototype.validatorChange;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.confirmPassword;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.currentPassword;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.modalAction;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.newPassword;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.recoveryUrlType;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.showRequirements;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada na parte superior.
     *
     * > Caso seja indefinida o espaço se mantém preservado porém vazio.
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.logo;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.secondaryLogo;
    /**
     * Token para solicitação de troca/recuperação de senha.
     *
     * > Esta propriedade será ignorada caso exista um token como parâmetro na URL inicial do template.
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.token;
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação de retorno da página.
     *
     * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `p-hide-current-password` for
     * falsa.
     *
     * \@default `/`
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.urlBack;
    /**
     * Endpoint usado pelo template para realizar um POST. Quando preenchido, o método `p-submit` será ignorado e o componente adquirirá
     * automatização para o processo de cadastro/troca de senha.
     *
     * ### Processo
     * Ao digitar um valor válido nos campos de senha e pressionar **salvar**,
     * o componente fará uma requisição `POST` na url especificada nesta propriedade passando o objeto contendo os valores definidos pelo
     * usuário.
     *
     * ```
     * body {
     *  token?: token,
     *  oldPassword?: oldPassword,
     *  newPassword: newPassword
     * }
     * ```
     *
     * O código de resposta HTTP de status esperado é `204`.
     *
     * Em caso de **sucesso**, será exibida a modal de confirmação de senha alterada.
     *
     * > O token será informado pela propriedade `p-token`do componente ou por um *query parameter* na URL do template.
     *
     * *Processo finalizado.*
     *
     * _______________
     *
     * #### Praticidade
     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
     * dispensa-se qualquer menção e/ou importação do componente `po-page-change-password` no restante da aplicação. O exemplo abaixo
     * exemplifica a forma dinâmica com a qual o template de tela de troca de senha pode ser gerado ao navegar para rota `/change-password`, e
     * também como ele se comunica com o serviço para efetuação do processo de troca de senha do usuário e solicitação de nova senha.
     * Basta definir nas configurações de rota:
     *
     *
     * ```
     *   import { PoModalPasswordRecoveryType, PoPageChangePasswordComponent } from '\@portinari/portinari-templates';
     *
     *   ...
     *   const routes: Routes = [
     *     {
     *       path: 'change-password', component: PoPageChangePasswordComponent, data: {
     *         serviceApi: 'https://portinari.io/sample/api/new-password',
     *         recovery: {
     *           url: 'https://portinari.io/sample/api/users',
     *           type: PoModalPasswordRecoveryType.All,
     *           contactMail: 'dev.portinari\@portinari.com',
     *           phoneMask: '9-999-999-9999'
     *         }
     *       }
     *     }
     *     ...
     *   ];
     *
     * \@NgModule({
     *     imports: [RouterModule.forRoot(routes)],
     *     exports: [RouterModule]
     *   })
     *   export class AppRoutingModule { }
     * ```
     *
     *
     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de troca de senha. E `recovery` é a interface
     * `PoPageChangePasswordRecovery` responsável pelas especificações contidas na modal de recuperação de senha.
     *
     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
     *
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.urlNewPassword;
    /**
     * \@optional
     *
     * \@description
     *
     * Função executada ao submeter o form pelo botão salvar.
     *
     * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
     * método `openConfirmation`. Exemplo:
     *
     * ```
     * \@ViewChild(PoPageChangePasswordComponent) changePassword: PoPageChangePasswordComponent;
     *
     * onSubmit() {
     *  this.changePassword.openConfirmation();
     * }
     *
     * ```
     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-new-password`.
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.submit;
    /**
     * @abstract
     * @param {?} url
     * @return {?}
     */
    PoPageChangePasswordBaseComponent.prototype.navigateTo = function (url) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1jaGFuZ2UtcGFzc3dvcmQtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlLWNoYW5nZS1wYXNzd29yZC9wby1wYWdlLWNoYW5nZS1wYXNzd29yZC1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlDOUUsTUFBTSxPQUFnQixpQ0FBaUM7SUFBdkQ7UUFFVSx5QkFBb0IsR0FBWSxLQUFLLENBQUM7UUFFdEMsa0JBQWEsR0FBMkMsRUFBRSxDQUFDO1FBQzNELGFBQVEsR0FBVyxHQUFHLENBQUM7Ozs7Ozs7Ozs7Ozs7UUFvSFYsWUFBTyxHQUFXLEdBQUcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBOEd2QixXQUFNLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFJckUsQ0FBQzs7Ozs7Ozs7Ozs7O0lBbk5DLElBQXNDLG1CQUFtQixDQUFDLEtBQWM7UUFDdEUsSUFBSSxDQUFDLG9CQUFvQixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7SUFFRCxJQUFJLG1CQUFtQjtRQUNyQixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUNuQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQW9DRCxJQUF5QixRQUFRLENBQUMsS0FBdUQ7UUFDdkYsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFFdkIsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQztTQUNoRjtJQUNILENBQUM7Ozs7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQzs7Ozs7Ozs7OztJQVNELElBQTZCLFlBQVksQ0FBQyxLQUE2QztRQUNyRixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN4RCxDQUFDOzs7O0lBQ0QsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7Ozs7Ozs7Ozs7Ozs7SUFnSEQsSUFBeUIsT0FBTyxDQUFDLEtBQWE7UUFDNUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7O0lBQ0QsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7OztrQ0F6TEEsS0FBSyxTQUFDLHlCQUF5QjttQkFpQi9CLEtBQUssU0FBQyxRQUFRO3VCQXlCZCxLQUFLLFNBQUMsWUFBWTsyQkFtQmxCLEtBQUssU0FBQyxnQkFBZ0I7NEJBZXRCLEtBQUssU0FBQyxrQkFBa0I7b0JBT3hCLEtBQUssU0FBQyxTQUFTO3NCQWNmLEtBQUssU0FBQyxZQUFZOzZCQXNFbEIsS0FBSyxTQUFDLG9CQUFvQjtzQkFZMUIsS0FBSyxTQUFDLFlBQVk7cUJBNEJsQixNQUFNLFNBQUMsVUFBVTs7Ozs7OztJQXJPbEIsaUVBQThDOzs7OztJQUM5QyxzREFBb0U7Ozs7O0lBQ3BFLDBEQUFtRTs7Ozs7SUFDbkUscURBQStCOzs7OztJQUMvQiw0REFBK0I7O0lBRS9CLDREQUF3Qjs7SUFDeEIsNERBQXdCOztJQUN4Qix3REFBMkI7O0lBQzNCLHdEQUFvQjs7SUFDcEIsNERBQXdCOztJQUN4Qiw2REFBMEI7Ozs7Ozs7Ozs7O0lBNEIxQixpREFBK0I7Ozs7Ozs7OztJQTJEL0IsMERBQWtEOzs7Ozs7O0lBT2xELGtEQUFpQzs7Ozs7Ozs7Ozs7Ozs7SUFjakMsb0RBQTJDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBc0UzQywyREFBcUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUF3Q3JELG1EQUFtRTs7Ozs7O0lBRW5FLDRFQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb01vZGFsQWN0aW9uIH0gZnJvbSAnQHBvcnRpbmFyaS9wb3J0aW5hcmktdWknO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuLCBpc0V4dGVybmFsTGluaywgaXNUeXBlb2YgfSBmcm9tICcuLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9QYWdlQ2hhbmdlUGFzc3dvcmRSZWNvdmVyeSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWNoYW5nZS1wYXNzd29yZC1yZWNvdmVyeS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlQ2hhbmdlUGFzc3dvcmRSZXF1aXJlbWVudCB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWNoYW5nZS1wYXNzd29yZC1yZXF1aXJlbWVudC5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tcGFnZS1jaGFuZ2UtcGFzc3dvcmRgIMOpIHV0aWxpemFkbyBjb21vIHRlbXBsYXRlIHBhcmEgdGVsYSBkZSBjYWRhc3RybyBvdSBhbHRlcmHDp8OjbyBkZSBzZW5oYS5cbiAqXG4gKiBBcHJlc2VudGEgZGljYXMgZSByZWdyYXMgcGFyYSBzZW5oYXMgbWFpcyBzZWd1cmFzIGUgdGFtYsOpbSBwb3NzaWJpbGlkYWRlIGRlIHBlcnNvbmFsaXphciBvIHJlZGlyZWNpb25hbWVudG8gcGFyYSBhcyB0ZWxhc1xuICogJ2VzcXVlY2V1IGEgc2VuaGEnLCAndm9sdGFyJyBlICdlbnRyYXIgbm8gc2lzdGVtYScuIE9zIHRleHRvcyBkYXMgdGVsYXMgc8OjbyBwcsOpLWRlZmluaWRvcyBlIGltdXTDoXZlaXMuXG4gKlxuICogQSBwcm9wcmllZGFkZSBgcC11cmwtbmV3LXBhc3N3b3JkYCBhdXRvbWF0aXphIGEgcm90aW5hIGRvIHRlbXBsYXRlIGUgc2ltcGxpZmljYSBvIHByb2Nlc3NvIGRlIGNhZGFzdHJvL2FsdGVyYcOnw6NvIGRlIHNlbmhhLCBiYXN0YW5kb1xuICogZGVmaW5pciB1bWEgdXJsIHBhcmEgUE9TVCBkYXMgaW5mb3JtYcOnw7VlcyBkaWdpdGFkYXMgcGVsbyB1c3XDoXJpby4gIEEgZmxleGliaWxpZGFkZSBlIHByYXRpY2lkYWRlIHBvZGVtIGNoZWdhciBhIHVtIG7DrXZlbCBlbSBxdWUgb1xuICogZGVzZW52b2x2aW1lbnRvIGRhIGFwbGljYcOnw6NvIG5vICpjbGllbnQgc2lkZSogw6kgZGVzcHJvdmlkYSBkZSBxdWFscXVlciBjw7NkaWdvLWZvbnRlIHJlbGFjaW9uYWRvIMOgIHJvdGluYSBkZSBjYWRhc3Ryby9hbHRlcmHDp8OjbyBkZSBzZW5oYS5cbiAqIFNldSBkZXRhbGhhbWVudG8gcGFyYSB1c28gcG9kZSBzZXIgdmlzdG8gbG9nbyBhYmFpeG8gZW0gKnByb3ByaWVkYWRlcyouXG4gKiBDYXNvIGp1bGd1ZSBuZWNlc3PDoXJpbywgcG9kZS1zZSB0YW1iw6ltIGRlZmluaXIgbWFudWFsbWVudGUgYSByb3RpbmEgZG8gY29tcG9uZW50ZS5cbiAqXG4gKiBQYXJhIHF1ZSBhcyBpbWFnZW5zIHNlamFtIGV4aWJpZGFzIGNvcnJldGFtZW50ZSwgw6kgbmVjZXNzw6FyaW8gaW5jbHVpciBvIGNhbWluaG8gZGVsYXMgYW8gcHJvamV0by4gUGFyYSBpc3NvLCBlZGl0ZVxuICogbyAqYXNzZXRzKiBubyBhcnF1aXZvICoqYW5ndWxhci5qc29uKiogZGEgYXBsaWNhw6fDo28gbmEgc2VndWludGUgb3JkZW06XG4gKiBgYGBcbiAqICAgXCJhc3NldHNcIjogW1xuICogICAgIFwic3JjL2Fzc2V0c1wiLFxuICogICAgIFwic3JjL2Zhdmljb24uaWNvXCIsXG4gKiAgICAge1xuICogICAgICAgXCJnbG9iXCI6IFwiKipcXC8qXCIsXG4gKiAgICAgICBcImlucHV0XCI6IFwibm9kZV9tb2R1bGVzL0Bwb3J0aW5hcmkvc3R5bGUvaW1hZ2VzXCIsXG4gKiAgICAgICBcIm91dHB1dFwiOiBcImFzc2V0cy9pbWFnZXNcIlxuICogICAgIH1cbiAqICAgXVxuICogYGBgXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb1BhZ2VDaGFuZ2VQYXNzd29yZEJhc2VDb21wb25lbnQge1xuXG4gIHByaXZhdGUgX2hpZGVDdXJyZW50UGFzc3dvcmQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBfcmVjb3Zlcnk6IHN0cmluZyB8IFBvUGFnZUNoYW5nZVBhc3N3b3JkUmVjb3ZlcnkgfCBGdW5jdGlvbjtcbiAgcHJpdmF0ZSBfcmVxdWlyZW1lbnRzOiBBcnJheTxQb1BhZ2VDaGFuZ2VQYXNzd29yZFJlcXVpcmVtZW50PiA9IFtdO1xuICBwcml2YXRlIF91cmxIb21lOiBzdHJpbmcgPSAnLyc7XG4gIHByb3RlY3RlZCB2YWxpZGF0b3JDaGFuZ2U6IGFueTtcblxuICBjb25maXJtUGFzc3dvcmQ6IHN0cmluZztcbiAgY3VycmVudFBhc3N3b3JkOiBzdHJpbmc7XG4gIG1vZGFsQWN0aW9uOiBQb01vZGFsQWN0aW9uO1xuICBuZXdQYXNzd29yZDogc3RyaW5nO1xuICByZWNvdmVyeVVybFR5cGU6IHN0cmluZztcbiAgc2hvd1JlcXVpcmVtZW50czogYm9vbGVhbjtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBFc2NvbmRlIG8gY2FtcG8gYFNlbmhhIGF0dWFsYCBwYXJhIHF1ZSBvIHRlbXBsYXRlIHNlamEgcGFyYSBjcmlhw6fDo28gZGUgc2VuaGEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1oaWRlLWN1cnJlbnQtcGFzc3dvcmQnKSBzZXQgaGlkZUN1cnJlbnRQYXNzd29yZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVDdXJyZW50UGFzc3dvcmQgPSBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBoaWRlQ3VycmVudFBhc3N3b3JkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9oaWRlQ3VycmVudFBhc3N3b3JkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ2FtaW5obyBwYXJhIGEgbG9nb21hcmNhIGxvY2FsaXphZGEgbmEgcGFydGUgc3VwZXJpb3IuXG4gICAqXG4gICAqID4gQ2FzbyBzZWphIGluZGVmaW5pZGEgbyBlc3Bhw6dvIHNlIG1hbnTDqW0gcHJlc2VydmFkbyBwb3LDqW0gdmF6aW8uXG4gICAqL1xuICBASW5wdXQoJ3AtbG9nbycpIGxvZ28/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVVJMIHBhcmEgYSBhw6fDo28gZG8gbGluayBgRXNxdWVjZXUgYSBzZW5oYWAuXG4gICAqXG4gICAqIEEgcHJvcHJpZWRhZGUgYWNlaXRhIG9zIHNlZ3VpbnRlcyB0aXBvczpcbiAgICpcbiAgICogLSAqKlN0cmluZyoqOiBpbmZvcm1lIHVtYSB1cmwgZXh0ZXJuYSBvdSB1bWEgcm90YSB2w6FsaWRhO1xuICAgKiAtICoqRnVuY3Rpb24qKjogcG9kZS1zZSBjdXN0b21pemFyIGEgYcOnw6NvLiBQYXJhIGVzdGEgcG9zc2lsaWRhZGUgYmFzdGEgYXRyaWJ1aXI6XG4gICAqIGBgYFxuICAgKiA8cG8tcGFnZS1jaGFuZ2UtcGFzc3dvcmQ+XG4gICAqICAgICAgW3JlY292ZXJ5XT1cInRoaXMubXlGdW5jLmJpbmQodGhpcylcIjtcbiAgICogPC9wby1wYWdlLWNoYW5nZS1wYXNzd29yZD5cbiAgICogYGBgXG4gICAqXG4gICAqIC0gKipQb1BhZ2VDaGFuZ2VQYXNzd29yZFJlY292ZXJ5Kio6IGNyaWEtc2UgdsOtbmN1bG8gYXV0b23DoXRpY28gY29tIG8gdGVtcGxhdGUgKipwby1tb2RhbC1wYXNzd29yZC1yZWNvdmVyeSoqLlxuICAgKiAgIE8gb2JqZXRvIGRldmUgY29udGVyIGEgKip1cmwqKiBwYXJhIHJlcXVpc2nDp8OjbyBkb3MgcmVjdXJzb3MgZSBwb2RlLXNlIGRlZmluaXIgbyAqKnRpcG8qKiBkZSBtb2RhbCBwYXJhIHJlY3VwZXJhw6fDo28gZGUgc2VuaGEsXG4gICAqICAgKiplbWFpbCoqIHBhcmEgY29udGF0byBlICoqbcOhc2NhcmEqKiBkbyBjYW1wbyBkZSB0ZWxlZm9uZS5cbiAgICpcbiAgICogPiBDYXNvIG7Do28gdGVuaGEgdmFsb3IgbyBsaW5rIGBFc3F1ZWNldSBhIHNlbmhhYCBkZXNhcGFyZWNlLlxuICAgKi9cbiAgQElucHV0KCdwLXJlY292ZXJ5Jykgc2V0IHJlY292ZXJ5KHZhbHVlOiBzdHJpbmcgfCBGdW5jdGlvbiB8IFBvUGFnZUNoYW5nZVBhc3N3b3JkUmVjb3ZlcnkpIHtcbiAgICB0aGlzLl9yZWNvdmVyeSA9IHZhbHVlO1xuXG4gICAgaWYgKGlzVHlwZW9mKHZhbHVlLCAnc3RyaW5nJykpIHtcbiAgICAgIHRoaXMucmVjb3ZlcnlVcmxUeXBlID0gaXNFeHRlcm5hbExpbmsodmFsdWUpID8gJ2V4dGVybmFsTGluaycgOiAnaW50ZXJuYWxMaW5rJztcbiAgICB9XG4gIH1cblxuICBnZXQgcmVjb3ZlcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlY292ZXJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTGlzdGEgZGUgcmVncmFzIHBhcmEgY3JpYcOnw6NvIGUgYWx0ZXJhw6fDo28gZGUgc2VuaGEuXG4gICAqL1xuICBASW5wdXQoJ3AtcmVxdWlyZW1lbnRzJykgc2V0IHJlcXVpcmVtZW50cyh2YWx1ZTogQXJyYXk8UG9QYWdlQ2hhbmdlUGFzc3dvcmRSZXF1aXJlbWVudD4pIHtcbiAgICB0aGlzLl9yZXF1aXJlbWVudHMgPSB2YWx1ZSB8fCBbXTtcbiAgICB0aGlzLnNob3dSZXF1aXJlbWVudHMgPSB0aGlzLl9yZXF1aXJlbWVudHMubGVuZ3RoID4gMDtcbiAgfVxuICBnZXQgcmVxdWlyZW1lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXF1aXJlbWVudHM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBDYW1pbmhvIHBhcmEgYSBsb2dvbWFyY2EgbG9jYWxpemFkYSBubyByb2RhcMOpLlxuICAgKi9cbiAgQElucHV0KCdwLXNlY29uZGFyeS1sb2dvJykgc2Vjb25kYXJ5TG9nbz86IHN0cmluZztcblxuICAvKipcbiAgICogVG9rZW4gcGFyYSBzb2xpY2l0YcOnw6NvIGRlIHRyb2NhL3JlY3VwZXJhw6fDo28gZGUgc2VuaGEuXG4gICAqXG4gICAqID4gRXN0YSBwcm9wcmllZGFkZSBzZXLDoSBpZ25vcmFkYSBjYXNvIGV4aXN0YSB1bSB0b2tlbiBjb21vIHBhcsOibWV0cm8gbmEgVVJMIGluaWNpYWwgZG8gdGVtcGxhdGUuXG4gICAqL1xuICBASW5wdXQoJ3AtdG9rZW4nKSB0b2tlbj86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBVUkwgcGFyYSBhIGHDp8OjbyBkZSByZXRvcm5vIGRhIHDDoWdpbmEuXG4gICAqXG4gICAqID4gTyBib3TDo28gYFZvbHRhcmAgYXBhcmVjZSBhcGVuYXMgcGFyYSB0ZWxhcyBkZSBhbHRlcmHDp8OjbyBkZSBzZW5oYSwgb3Ugc2VqYSwgc8OzIGFwYXJlY2Ugc2UgYSBwcm9wcmllZGFkZSBgcC1oaWRlLWN1cnJlbnQtcGFzc3dvcmRgIGZvclxuICAgKiBmYWxzYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYC9gXG4gICAqL1xuICBASW5wdXQoJ3AtdXJsLWJhY2snKSB1cmxCYWNrOiBzdHJpbmcgPSAnLyc7XG5cbiAgLyoqXG4gICAqIEVuZHBvaW50IHVzYWRvIHBlbG8gdGVtcGxhdGUgcGFyYSByZWFsaXphciB1bSBQT1NULiBRdWFuZG8gcHJlZW5jaGlkbywgbyBtw6l0b2RvIGBwLXN1Ym1pdGAgc2Vyw6EgaWdub3JhZG8gZSBvIGNvbXBvbmVudGUgYWRxdWlyaXLDoVxuICAgKiBhdXRvbWF0aXphw6fDo28gcGFyYSBvIHByb2Nlc3NvIGRlIGNhZGFzdHJvL3Ryb2NhIGRlIHNlbmhhLlxuICAgKlxuICAgKiAjIyMgUHJvY2Vzc29cbiAgICogQW8gZGlnaXRhciB1bSB2YWxvciB2w6FsaWRvIG5vcyBjYW1wb3MgZGUgc2VuaGEgZSBwcmVzc2lvbmFyICoqc2FsdmFyKiosXG4gICAqIG8gY29tcG9uZW50ZSBmYXLDoSB1bWEgcmVxdWlzacOnw6NvIGBQT1NUYCBuYSB1cmwgZXNwZWNpZmljYWRhIG5lc3RhIHByb3ByaWVkYWRlIHBhc3NhbmRvIG8gb2JqZXRvIGNvbnRlbmRvIG9zIHZhbG9yZXMgZGVmaW5pZG9zIHBlbG9cbiAgICogdXN1w6FyaW8uXG4gICAqXG4gICAqIGBgYFxuICAgKiBib2R5IHtcbiAgICogIHRva2VuPzogdG9rZW4sXG4gICAqICBvbGRQYXNzd29yZD86IG9sZFBhc3N3b3JkLFxuICAgKiAgbmV3UGFzc3dvcmQ6IG5ld1Bhc3N3b3JkXG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIE8gY8OzZGlnbyBkZSByZXNwb3N0YSBIVFRQIGRlIHN0YXR1cyBlc3BlcmFkbyDDqSBgMjA0YC5cbiAgICpcbiAgICogRW0gY2FzbyBkZSAqKnN1Y2Vzc28qKiwgc2Vyw6EgZXhpYmlkYSBhIG1vZGFsIGRlIGNvbmZpcm1hw6fDo28gZGUgc2VuaGEgYWx0ZXJhZGEuXG4gICAqXG4gICAqID4gTyB0b2tlbiBzZXLDoSBpbmZvcm1hZG8gcGVsYSBwcm9wcmllZGFkZSBgcC10b2tlbmBkbyBjb21wb25lbnRlIG91IHBvciB1bSAqcXVlcnkgcGFyYW1ldGVyKiBuYSBVUkwgZG8gdGVtcGxhdGUuXG4gICAqXG4gICAqICpQcm9jZXNzbyBmaW5hbGl6YWRvLipcbiAgICpcbiAgICogX19fX19fX19fX19fX19fXG4gICAqXG4gICAqICMjIyMgUHJhdGljaWRhZGVcbiAgICogQXMgaW5mb3JtYcOnw7VlcyBkbyBzZXJ2acOnbyBkZSBhdXRlbnRpY2HDp8OjbyB0YW1iw6ltIHBvZGVtIHNlciB0cmFuc21pdGlkYXMgZGlyZXRhbWVudGUgcGVsYXMgY29uZmlndXJhw6fDo29zIGRlIHJvdGEgZSwgZGVzdGEgbWFuZWlyYSxcbiAgICogZGlzcGVuc2Etc2UgcXVhbHF1ZXIgbWVuw6fDo28gZS9vdSBpbXBvcnRhw6fDo28gZG8gY29tcG9uZW50ZSBgcG8tcGFnZS1jaGFuZ2UtcGFzc3dvcmRgIG5vIHJlc3RhbnRlIGRhIGFwbGljYcOnw6NvLiBPIGV4ZW1wbG8gYWJhaXhvXG4gICAqIGV4ZW1wbGlmaWNhIGEgZm9ybWEgZGluw6JtaWNhIGNvbSBhIHF1YWwgbyB0ZW1wbGF0ZSBkZSB0ZWxhIGRlIHRyb2NhIGRlIHNlbmhhIHBvZGUgc2VyIGdlcmFkbyBhbyBuYXZlZ2FyIHBhcmEgcm90YSBgL2NoYW5nZS1wYXNzd29yZGAsIGVcbiAgICogdGFtYsOpbSBjb21vIGVsZSBzZSBjb211bmljYSBjb20gbyBzZXJ2acOnbyBwYXJhIGVmZXR1YcOnw6NvIGRvIHByb2Nlc3NvIGRlIHRyb2NhIGRlIHNlbmhhIGRvIHVzdcOhcmlvIGUgc29saWNpdGHDp8OjbyBkZSBub3ZhIHNlbmhhLlxuICAgKiBCYXN0YSBkZWZpbmlyIG5hcyBjb25maWd1cmHDp8O1ZXMgZGUgcm90YTpcbiAgICpcbiAgICpcbiAgICogYGBgXG4gICAqICAgaW1wb3J0IHsgUG9Nb2RhbFBhc3N3b3JkUmVjb3ZlcnlUeXBlLCBQb1BhZ2VDaGFuZ2VQYXNzd29yZENvbXBvbmVudCB9IGZyb20gJ0Bwb3J0aW5hcmkvcG9ydGluYXJpLXRlbXBsYXRlcyc7XG4gICAqXG4gICAqICAgLi4uXG4gICAqICAgY29uc3Qgcm91dGVzOiBSb3V0ZXMgPSBbXG4gICAqICAgICB7XG4gICAqICAgICAgIHBhdGg6ICdjaGFuZ2UtcGFzc3dvcmQnLCBjb21wb25lbnQ6IFBvUGFnZUNoYW5nZVBhc3N3b3JkQ29tcG9uZW50LCBkYXRhOiB7XG4gICAqICAgICAgICAgc2VydmljZUFwaTogJ2h0dHBzOi8vcG9ydGluYXJpLmlvL3NhbXBsZS9hcGkvbmV3LXBhc3N3b3JkJyxcbiAgICogICAgICAgICByZWNvdmVyeToge1xuICAgKiAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9wb3J0aW5hcmkuaW8vc2FtcGxlL2FwaS91c2VycycsXG4gICAqICAgICAgICAgICB0eXBlOiBQb01vZGFsUGFzc3dvcmRSZWNvdmVyeVR5cGUuQWxsLFxuICAgKiAgICAgICAgICAgY29udGFjdE1haWw6ICdkZXYucG9ydGluYXJpQHBvcnRpbmFyaS5jb20nLFxuICAgKiAgICAgICAgICAgcGhvbmVNYXNrOiAnOS05OTktOTk5LTk5OTknXG4gICAqICAgICAgICAgfVxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgICAuLi5cbiAgICogICBdO1xuICAgKlxuICAgKiAgIEBOZ01vZHVsZSh7XG4gICAqICAgICBpbXBvcnRzOiBbUm91dGVyTW9kdWxlLmZvclJvb3Qocm91dGVzKV0sXG4gICAqICAgICBleHBvcnRzOiBbUm91dGVyTW9kdWxlXVxuICAgKiAgIH0pXG4gICAqICAgZXhwb3J0IGNsYXNzIEFwcFJvdXRpbmdNb2R1bGUgeyB9XG4gICAqIGBgYFxuICAgKlxuICAgKlxuICAgKiBPIG1ldGFkYWRvIGBzZXJ2aWNlQXBpYCBkZXZlIHNlciBhICoqdXJsKiogcGFyYSByZXF1aXNpw6fDo28gZG9zIHJlY3Vyc29zIGRlIHRyb2NhIGRlIHNlbmhhLiBFIGByZWNvdmVyeWAgw6kgYSBpbnRlcmZhY2VcbiAgICogYFBvUGFnZUNoYW5nZVBhc3N3b3JkUmVjb3ZlcnlgIHJlc3BvbnPDoXZlbCBwZWxhcyBlc3BlY2lmaWNhw6fDtWVzIGNvbnRpZGFzIG5hIG1vZGFsIGRlIHJlY3VwZXJhw6fDo28gZGUgc2VuaGEuXG4gICAqXG4gICAqID4gw4kgZXNzZW5jaWFsIHF1ZSBzaWdhIGEgbm9tZW5jbGF0dXJhIGRvcyBhdHJpYnV0b3MgZXhlbXBsaWZpY2Fkb3MgYWNpbWEgcGFyYSBzdWEgZWZldGl2YSBmdW5jaW9uYWxpZGFkZS5cbiAgICpcbiAgICovXG4gIEBJbnB1dCgncC11cmwtbmV3LXBhc3N3b3JkJykgdXJsTmV3UGFzc3dvcmQ/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVVJMIHBhcmEgYSBhw6fDo28gZG8gYm90w6NvIGBFbnRyYXIgbm8gc2lzdGVtYWAgZGEgbW9kYWwgZGUgY29uZmlybWHDp8OjbyBxdWUgYXBhcmVjZSBhcMOzcyBzYWx2YXIgYSBzZW5oYSBvdSBzZSBjaGFtYWRhIHBlbG8gbcOpdG9kb1xuICAgKiBgb3BlbkNvbmZpcm1hdGlvbmAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGAvYFxuICAgKi9cbiAgQElucHV0KCdwLXVybC1ob21lJykgc2V0IHVybEhvbWUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX3VybEhvbWUgPSB2YWx1ZTtcbiAgICB0aGlzLm1vZGFsQWN0aW9uLmFjdGlvbiA9IHRoaXMubmF2aWdhdGVUby5iaW5kKHRoaXMsIHRoaXMudXJsSG9tZSk7XG4gIH1cbiAgZ2V0IHVybEhvbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VybEhvbWU7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBGdW7Dp8OjbyBleGVjdXRhZGEgYW8gc3VibWV0ZXIgbyBmb3JtIHBlbG8gYm90w6NvIHNhbHZhci5cbiAgICpcbiAgICogQ2FzbyBkZWZpbmlkYSBlc3NhIGZ1bsOnw6NvLCBhIG1vZGFsIGRlIGNvbmZpcm1hw6fDo28gbsOjbyBhcGFyZWNlLCBtYXMgcG9kZSBzZXIgY2hhbWFkYSBwZWxvXG4gICAqIG3DqXRvZG8gYG9wZW5Db25maXJtYXRpb25gLiBFeGVtcGxvOlxuICAgKlxuICAgKiBgYGBcbiAgICogQFZpZXdDaGlsZChQb1BhZ2VDaGFuZ2VQYXNzd29yZENvbXBvbmVudCkgY2hhbmdlUGFzc3dvcmQ6IFBvUGFnZUNoYW5nZVBhc3N3b3JkQ29tcG9uZW50O1xuICAgKlxuICAgKiBvblN1Ym1pdCgpIHtcbiAgICogIHRoaXMuY2hhbmdlUGFzc3dvcmQub3BlbkNvbmZpcm1hdGlvbigpO1xuICAgKiB9XG4gICAqXG4gICAqIGBgYFxuICAgKiA+IEVzdGEgcHJvcHJpZWRhZGUgc2Vyw6EgaWdub3JhZGEgc2UgZm9yIGRlZmluaWRvIHZhbG9yIHBhcmEgYSBwcm9wcmllZGFkZSBgcC11cmwtbmV3LXBhc3N3b3JkYC5cbiAgICovXG4gIEBPdXRwdXQoJ3Atc3VibWl0Jykgc3VibWl0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBhYnN0cmFjdCBuYXZpZ2F0ZVRvKHVybDogc3RyaW5nKTogdm9pZDtcblxufVxuIl19