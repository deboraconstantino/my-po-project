/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
export class PoPageDynamicService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-PORTINARI-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    getMetadata(type = 'list') {
        /** @type {?} */
        const key = `${this.endpoint}-${type}-metadata`;
        /** @type {?} */
        const cache = JSON.parse(localStorage.getItem(key)) || {};
        /** @type {?} */
        const url = `${this.endpoint}/metadata?type=${type}&version=${cache.version || ''}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return Object.assign({}, cache, response);
        })));
    }
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    deleteResource(id) {
        return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    deleteResources(ids) {
        return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids });
    }
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    getResources(params = {}) {
        return this.http.get(this.endpoint, { headers: this.headers, params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });
    }
}
PoPageDynamicService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoPageDynamicService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicService.prototype.endpoint;
    /** @type {?} */
    PoPageDynamicService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9ydGluYXJpL3BvcnRpbmFyaS10ZW1wbGF0ZXMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9wby1wYWdlLWR5bmFtaWMtZGV0YWlsL3BvLXBhZ2UtZHluYW1pYy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFHL0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3JDLE1BQU0sT0FBTyxvQkFBb0I7Ozs7SUFRL0IsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQU41QixhQUFRLEdBQUcsR0FBRyxDQUFDO1FBRWQsWUFBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQztZQUM5Qyx5QkFBeUIsRUFBRSxNQUFNO1NBQ2xDLENBQUMsQ0FBQztJQUVxQyxDQUFDOzs7OztJQUV6QyxnQkFBZ0IsQ0FBQyxTQUFnQyxFQUFFO1FBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFlLE1BQU07O2NBQ3pCLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxXQUFXOztjQUN6QyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRTs7Y0FFbkQsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsa0JBQWtCLElBQUksWUFBWSxLQUFLLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFBRTtRQUVuRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHOzs7O1FBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRTtZQUNuRCxJQUFJLFFBQVEsQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDdEMsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUVELFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUVwRCx5QkFBYSxLQUFLLEVBQUssUUFBUSxFQUFHO1FBQ3BDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDTixDQUFDOzs7Ozs7SUFHRCxjQUFjLENBQUMsRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7OztJQUdELGVBQWUsQ0FBQyxHQUFlO1FBQzdCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFFLENBQUM7SUFDaEcsQ0FBQzs7Ozs7O0lBR0QsWUFBWSxDQUFDLFNBQWEsRUFBRTtRQUMxQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Ozs7OztJQUdELFdBQVcsQ0FBQyxFQUFFO1FBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDNUUsQ0FBQzs7Ozs7O0lBR0QsY0FBYyxDQUFDLFFBQVE7UUFDckIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDakYsQ0FBQzs7Ozs7OztJQUdELGNBQWMsQ0FBQyxFQUFFLEVBQUUsUUFBUTtRQUN6QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDdEYsQ0FBQzs7O1lBNURGLFVBQVU7Ozs7WUFMRixVQUFVOzs7Ozs7O0lBUWpCLHdDQUF1Qjs7SUFFdkIsdUNBRUc7Ozs7O0lBRVMsb0NBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvUGFnZUR5bmFtaWNTZXJ2aWNlIHtcblxuICBwcml2YXRlIGVuZHBvaW50ID0gJy8nO1xuXG4gIHJlYWRvbmx5IGhlYWRlcnM6IEh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKHtcbiAgICAnWC1QT1JUSU5BUkktU0NSRUVOLUxPQ0snOiAndHJ1ZSdcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cblxuICBjb25maWdTZXJ2aWNlQXBpKGNvbmZpZzogeyBlbmRwb2ludD86IHN0cmluZyB9ID0ge30pIHtcbiAgICB0aGlzLmVuZHBvaW50ID0gY29uZmlnLmVuZHBvaW50O1xuICB9XG5cbiAgZ2V0TWV0YWRhdGEodHlwZTogc3RyaW5nID0gJ2xpc3QnKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBrZXkgPSBgJHt0aGlzLmVuZHBvaW50fS0ke3R5cGV9LW1ldGFkYXRhYDtcbiAgICBjb25zdCBjYWNoZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSkgfHwge307XG5cbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmVuZHBvaW50fS9tZXRhZGF0YT90eXBlPSR7dHlwZX0mdmVyc2lvbj0ke2NhY2hlLnZlcnNpb24gfHwgJyd9YDtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCkucGlwZShtYXAoKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgIGlmIChyZXNwb25zZS52ZXJzaW9uID09PSBjYWNoZS52ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICAgIH1cblxuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShyZXNwb25zZSkpO1xuXG4gICAgICByZXR1cm4gIHsgLi4uY2FjaGUsIC4uLnJlc3BvbnNlIH07XG4gICAgfSkpO1xuICB9XG5cbiAgLy8gRGVsZXRhIHVtIMO6bmljbyByZWN1cnNvXG4gIGRlbGV0ZVJlc291cmNlKGlkKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZShgJHt0aGlzLmVuZHBvaW50fS8ke2lkfWAsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICB9XG5cbiAgLy8gRGVsZXRhIHJlY3Vyc29zIGVtIGxvdGVcbiAgZGVsZXRlUmVzb3VyY2VzKGlkczogQXJyYXk8YW55Pik6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5yZXF1ZXN0KCdkZWxldGUnLCBgJHt0aGlzLmVuZHBvaW50fWAsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzLCBib2R5OiBpZHMgfSApO1xuICB9XG5cbiAgLy8gQnVzY2EgdW1hIGxpc3RhIGRlIHJlY3Vyc29zXG4gIGdldFJlc291cmNlcyhwYXJhbXM6IHt9ID0ge30pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuZW5kcG9pbnQsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzLCBwYXJhbXMgfSk7XG4gIH1cblxuICAvLyBCdXNjYSB1bSDDum5pY28gcmVjdXJzb1xuICBnZXRSZXNvdXJjZShpZCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5lbmRwb2ludH0vJHtpZH1gLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgfVxuXG4gIC8vIENyaWEgdW0gcmVjdXJzb1xuICBjcmVhdGVSZXNvdXJjZShyZXNvdXJjZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KGAke3RoaXMuZW5kcG9pbnR9YCwgcmVzb3VyY2UsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICB9XG5cbiAgLy8gQXR1YWxpemEgdW0gcmVjdXJzb1xuICB1cGRhdGVSZXNvdXJjZShpZCwgcmVzb3VyY2UpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KGAke3RoaXMuZW5kcG9pbnR9LyR7aWR9YCwgcmVzb3VyY2UsIHsgaGVhZGVyczogdGhpcy5oZWFkZXJzIH0pO1xuICB9XG59XG4iXX0=