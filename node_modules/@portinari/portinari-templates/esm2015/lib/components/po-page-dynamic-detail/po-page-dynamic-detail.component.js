/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import * as util from '../../utils/util';
import { PoDialogService, PoNotificationService } from '@portinari/portinari-ui';
import { PoPageDynamicService } from '../../services/po-page-dynamic/po-page-dynamic.service';
/** @type {?} */
export const poPageDynamicDetailLiteralsDefault = {
    en: {
        pageActionEdit: 'Edit',
        pageActionRemove: 'Delete',
        pageActionBack: 'Back',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        removeNotificationSuccess: 'Item deleted successfully.',
        registerNotFound: 'Register not found.'
    },
    es: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Borrar',
        pageActionBack: 'Regreso',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        removeNotificationSuccess: 'Elemento eliminado con éxito.',
        registerNotFound: 'Registro no encontrado.'
    },
    pt: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Excluir',
        pageActionBack: 'Voltar',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        removeNotificationSuccess: 'Item excluído com sucesso.',
        registerNotFound: 'Registro não encontrado.'
    }
};
/**
 * \@description
 *
 * O `po-page-dynamic-detail` é uma página que serve para exibir registros em detalhes,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * \@example
 *
 * <example name="po-page-dynamic-detail-basic" title="Portinari Page Dynamic Detail Basic">
 *  <file name="sample-po-page-dynamic-detail-basic/sample-po-page-dynamic-detail-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-detail-basic/sample-po-page-dynamic-detail-basic.component.ts"> </file>
 * </example>
 */
export class PoPageDynamicDetailComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} poNotification
     * @param {?} poDialogService
     * @param {?} poPageDynamicService
     */
    constructor(router, activatedRoute, poNotification, poDialogService, poPageDynamicService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poNotification = poNotification;
        this.poDialogService = poDialogService;
        this.poPageDynamicService = poPageDynamicService;
        this._actions = {};
        this._autoRouter = false;
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.literals = Object.assign({}, poPageDynamicDetailLiteralsDefault[util.poLocaleDefault], poPageDynamicDetailLiteralsDefault[util.browserLanguage()]);
        this.model = {};
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define as ações da página de acordo com a interface `PoPageDynamicDetailActions`.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    /**
     * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = util.convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * Lista dos campos exibidos na página.
     * @param {?} value
     * @return {?}
     */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this.fields);
        this._duplicates = this.getDuplicatesByFields(this.fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        if (this.activatedRoute.snapshot.data.serviceApi) {
            this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
            this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadMetadata(paramId);
        }
        else {
            this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData(paramId);
        }
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    confirmRemove(path) {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, path)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = util.mapObjectByProperties(item, this.keys);
        return util.valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @return {?}
     */
    goBack( /*path*/) {
        window.history.back();
        // if (path) {
        //   this.navigateTo({ path, component: PoPageDynamicEditComponent });
        // } else {
        //   window.history.back();
        // }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    loadData(id) {
        this.poPageDynamicService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = undefined;
            this.actions = undefined;
        }));
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    loadMetadata(id) {
        this.poPageDynamicService.getMetadata('detail').toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData(id);
        }));
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        () => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }
            })));
            this.navigateTo(route, true);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    openEdit(path) {
        /** @type {?} */
        const url = this.resolveUrl(this.model, path);
        // this.navigateTo({ path, url, component: PoPageDynamicEditComponent });
        this.navigateTo({ path, url });
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    remove(path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(this.model);
        this.poPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.poNotification.success(this.literals.removeNotificationSuccess);
            this.navigateTo({ path: path });
            // this.navigateTo({ path: path, component: PoPageDynamicTableComponent });
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?=} actions
     * @return {?}
     */
    getPageActions(actions = {}) {
        /** @type {?} */
        const pageActions = [];
        if (actions.edit) {
            pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });
        }
        if (actions.remove) {
            pageActions.push({ label: this.literals.pageActionRemove, action: this.confirmRemove.bind(this, actions.remove) });
        }
        if (actions.back === undefined || actions.back) {
            pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });
        }
        return pageActions;
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getKeysByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDuplicatesByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
}
PoPageDynamicDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-detail',
                template: "<po-page-default\n  [p-actions]=\"pageActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then viewFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</po-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <po-widget>\n    <span class=\"po-icon po-icon-info\"></span>\n    <span class=\"po-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </po-widget>\n\n</ng-template>\n\n<ng-template #viewFieldsTemplate>\n\n  <po-dynamic-view [p-fields]=\"fields\" [p-value]=\"model\">\n  </po-dynamic-view>\n\n</ng-template>\n",
                providers: [PoPageDynamicService]
            }] }
];
/** @nocollapse */
PoPageDynamicDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoNotificationService },
    { type: PoDialogService },
    { type: PoPageDynamicService }
];
PoPageDynamicDetailComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    autoRouter: [{ type: Input, args: ['p-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    fields: [{ type: Input, args: ['p-fields',] }],
    title: [{ type: Input, args: ['p-title',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._autoRouter;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._duplicates;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._keys;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._pageActions;
    /** @type {?} */
    PoPageDynamicDetailComponent.prototype.literals;
    /** @type {?} */
    PoPageDynamicDetailComponent.prototype.model;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDynamicDetailComponent.prototype.breadcrumb;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageDynamicDetailComponent.prototype.title;
    /**
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso que serão exibido.
     *
     * Caso a ação `remove` estiver configurada, será feito uma requisição de exclusão nesse mesmo endpoint passando os campos
     * setados como `key: true`.
     *
     * > `DELETE {end-point}/{keys}`
     *
     * ```
     *  <po-page-dynamic-detail
     *    [p-actions]="{ remove: '/' }"
     *    [p-fields]="[ { property: 'id', key: true } ]"
     *    p-service="/api/po-samples/v1/people"
     *    ...>
     *  </po-page-dynamic-detail>
     * ```
     *
     * Resquisição disparada, onde a propriedade `id` é igual a 2:
     *
     * ```
     *  DELETE /api/po-samples/v1/people/2 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * > Caso esteja usando metadados com o template, será disparado uma requisição na inicialização do template para buscar
     * > os metadados da página passando o tipo do metadado esperado e a versão cacheada pelo browser.
     * >
     * > `GET {end-point}/metadata?type=detail&version={version}`
     * @type {?}
     */
    PoPageDynamicDetailComponent.prototype.serviceApi;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.poNotification;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.poDialogService;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.poPageDynamicService;
}
//# sourceMappingURL=data:application/json;base64,