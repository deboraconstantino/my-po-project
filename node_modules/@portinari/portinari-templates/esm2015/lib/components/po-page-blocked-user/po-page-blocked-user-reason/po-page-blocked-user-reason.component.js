/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Input } from '@angular/core';
import { browserLanguage, poLocaleDefault } from '../../../utils/util';
import { poPageBlockedUserLiterals } from './../literals/i18n/po-page-blocked-user-literals';
import { PoPageBlockedUserReason } from '../enums/po-page-blocked-user-reason.enum';
export class PoPageBlockedUserReasonComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getLiterals();
    }
    /**
     * @return {?}
     */
    getImageByReasonType() {
        /** @type {?} */
        let reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return `./assets/images/${reasonImage}.svg`;
    }
    /**
     * @return {?}
     */
    getParams() {
        this.literalParams =
            this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];
    }
    /**
     * @private
     * @return {?}
     */
    getLiterals() {
        this.getParams();
        this.literals = Object.assign({}, poPageBlockedUserLiterals[this.reason][poLocaleDefault], poPageBlockedUserLiterals[this.reason][browserLanguage()]);
        this.changeDetector.detectChanges();
    }
}
PoPageBlockedUserReasonComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-blocked-user-reason',
                template: "<div class=\"po-page-blocked-user-reason-content\">\n  <img \n    class=\"po-page-blocked-user-image po-mb-3\" \n    [src]=\"getImageByReasonType()\"> \n  <div class=\"po-page-blocked-user-header po-mb-md-3 po-row\">\n    <div class=\"po-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"po-page-blocked-user-text po-font-text po-row\">\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12 po-page-blocked-user-text-bold\">{{ literals?.firstPhrase | poI18n:literalParams }}</div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>"
            }] }
];
/** @nocollapse */
PoPageBlockedUserReasonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoPageBlockedUserReasonComponent.propDecorators = {
    params: [{ type: Input, args: ['p-params',] }],
    reason: [{ type: Input, args: ['p-reason',] }]
};
if (false) {
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.literalParams;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.literals;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.params;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.reason;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserReasonComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXRlbXBsYXRlcy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXBhZ2UtYmxvY2tlZC11c2VyL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFFdEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUM3RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQU9wRixNQUFNLE9BQU8sZ0NBQWdDOzs7O0lBUzNDLFlBQW9CLGNBQWlDO1FBQWpDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtJQUFHLENBQUM7Ozs7O0lBRXpELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNwQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7O0lBRUQsb0JBQW9COztZQUNkLFdBQVc7UUFFZixRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbkIsS0FBSyxNQUFNLENBQUMsQ0FBQztnQkFDWCxXQUFXLEdBQUcsVUFBVSxDQUFDO2dCQUN6QixNQUFNO2FBQ1A7WUFDRCxLQUFLLGtCQUFrQixDQUFDLENBQUM7Z0JBQ3ZCLFdBQVcsR0FBRyxjQUFjLENBQUM7Z0JBQzdCLE1BQU07YUFDUDtZQUNELEtBQUssaUJBQWlCLENBQUMsQ0FBQztnQkFDdEIsV0FBVyxHQUFHLFNBQVMsQ0FBQztnQkFDeEIsTUFBTTthQUNQO1NBQ0Y7UUFDRCxPQUFPLG1CQUFtQixXQUFXLE1BQU0sQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxhQUFhO1lBQ2hCLElBQUksQ0FBQyxNQUFNLEtBQUssaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pILENBQUM7Ozs7O0lBRU8sV0FBVztRQUNqQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFakIsSUFBSSxDQUFDLFFBQVEscUJBQ1IseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUN2RCx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FDN0QsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7O1lBM0RGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2QyxndEJBQTJEO2FBQzVEOzs7O1lBWFEsaUJBQWlCOzs7cUJBaUJ2QixLQUFLLFNBQUMsVUFBVTtxQkFFaEIsS0FBSyxTQUFDLFVBQVU7Ozs7SUFMakIseURBQWM7O0lBQ2Qsb0RBQTBGOztJQUUxRixrREFBeUQ7O0lBRXpELGtEQUFtRDs7Ozs7SUFFdkMsMERBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGJyb3dzZXJMYW5ndWFnZSwgcG9Mb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IHBvUGFnZUJsb2NrZWRVc2VyTGl0ZXJhbHMgfSBmcm9tICcuLy4uL2xpdGVyYWxzL2kxOG4vcG8tcGFnZS1ibG9ja2VkLXVzZXItbGl0ZXJhbHMnO1xuaW1wb3J0IHsgUG9QYWdlQmxvY2tlZFVzZXJSZWFzb24gfSBmcm9tICcuLi9lbnVtcy9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uZW51bSc7XG5pbXBvcnQgeyBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvblBhcmFtcyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLXBhcmFtcy5pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcblxuICBsaXRlcmFsUGFyYW1zO1xuICBsaXRlcmFsczoge3RpdGxlOiBzdHJpbmcsIGZpcnN0UGhyYXNlOiBzdHJpbmcsIHNlY29uZFBocmFzZTogc3RyaW5nLCB0aGlyZFBocmFzZTogc3RyaW5nfTtcblxuICBASW5wdXQoJ3AtcGFyYW1zJykgcGFyYW1zOiBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvblBhcmFtcztcblxuICBASW5wdXQoJ3AtcmVhc29uJykgcmVhc29uOiBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge31cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMucmVhc29uIHx8IGNoYW5nZXMucGFyYW1zKSB7XG4gICAgICB0aGlzLmdldExpdGVyYWxzKCk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5nZXRMaXRlcmFscygpO1xuICB9XG5cbiAgZ2V0SW1hZ2VCeVJlYXNvblR5cGUoKSB7XG4gICAgbGV0IHJlYXNvbkltYWdlO1xuXG4gICAgc3dpdGNoICh0aGlzLnJlYXNvbikge1xuICAgICAgY2FzZSAnbm9uZSc6IHtcbiAgICAgICAgcmVhc29uSW1hZ2UgPSAnYmlnLWxvY2snO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2V4Y2VlZGVkQXR0ZW1wdHMnOiB7XG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2Jsb2NrZWQtdXNlcic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAnZXhwaXJlZFBhc3N3b3JkJzoge1xuICAgICAgICByZWFzb25JbWFnZSA9ICdleHBpcmVkJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBgLi9hc3NldHMvaW1hZ2VzLyR7cmVhc29uSW1hZ2V9LnN2Z2A7XG4gIH1cblxuICBnZXRQYXJhbXMoKSB7XG4gICAgdGhpcy5saXRlcmFsUGFyYW1zID1cbiAgICAgIHRoaXMucmVhc29uID09PSAnZXhwaXJlZFBhc3N3b3JkJyA/IFt0aGlzLnBhcmFtcy5kYXlzLCB0aGlzLnBhcmFtcy5kYXlzXSA6IFt0aGlzLnBhcmFtcy5hdHRlbXB0cywgdGhpcy5wYXJhbXMuaG91cnNdO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMaXRlcmFscygpIHtcbiAgICB0aGlzLmdldFBhcmFtcygpO1xuXG4gICAgdGhpcy5saXRlcmFscyA9IHtcbiAgICAgIC4uLnBvUGFnZUJsb2NrZWRVc2VyTGl0ZXJhbHNbdGhpcy5yZWFzb25dW3BvTG9jYWxlRGVmYXVsdF0sXG4gICAgICAuLi5wb1BhZ2VCbG9ja2VkVXNlckxpdGVyYWxzW3RoaXMucmVhc29uXVticm93c2VyTGFuZ3VhZ2UoKV0sXG4gICAgfTtcblxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbn1cbiJdfQ==