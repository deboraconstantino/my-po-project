/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Input } from '@angular/core';
import { browserLanguage, poLocaleDefault } from '../../../utils/util';
import { poPageBlockedUserLiterals } from './../literals/i18n/po-page-blocked-user-literals';
import { PoPageBlockedUserReason } from '../enums/po-page-blocked-user-reason.enum';
export class PoPageBlockedUserReasonComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getLiterals();
    }
    /**
     * @return {?}
     */
    getImageByReasonType() {
        /** @type {?} */
        let reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return `./assets/images/${reasonImage}.svg`;
    }
    /**
     * @return {?}
     */
    getParams() {
        this.literalParams =
            this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];
    }
    /**
     * @private
     * @return {?}
     */
    getLiterals() {
        this.getParams();
        this.literals = Object.assign({}, poPageBlockedUserLiterals[this.reason][poLocaleDefault], poPageBlockedUserLiterals[this.reason][browserLanguage()]);
        this.changeDetector.detectChanges();
    }
}
PoPageBlockedUserReasonComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-blocked-user-reason',
                template: "<div class=\"po-page-blocked-user-reason-content\">\r\n  <img \r\n    class=\"po-page-blocked-user-image po-mb-3\" \r\n    [src]=\"getImageByReasonType()\"> \r\n  <div class=\"po-page-blocked-user-header po-mb-md-3 po-row\">\r\n    <div class=\"po-md-12\">{{ literals?.title }}</div>\r\n  </div>\r\n  <div class=\"po-page-blocked-user-text po-font-text po-row\">\r\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12 po-page-blocked-user-text-bold\">{{ literals?.firstPhrase | poI18n:literalParams }}</div>\r\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\">{{ literals?.secondPhrase }}</div>\r\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\r\n  </div>\r\n</div>"
            }] }
];
/** @nocollapse */
PoPageBlockedUserReasonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoPageBlockedUserReasonComponent.propDecorators = {
    params: [{ type: Input, args: ['p-params',] }],
    reason: [{ type: Input, args: ['p-reason',] }]
};
if (false) {
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.literalParams;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.literals;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.params;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.reason;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserReasonComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb3J0aW5hcmkvcG9ydGluYXJpLXRlbXBsYXRlcy8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3BvLXBhZ2UtYmxvY2tlZC11c2VyL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBb0MsTUFBTSxlQUFlLENBQUM7QUFFdEcsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUM3RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQU9wRixNQUFNLE9BQU8sZ0NBQWdDOzs7O0lBUzNDLFlBQW9CLGNBQWlDO1FBQWpDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtJQUFHLENBQUM7Ozs7O0lBRXpELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNwQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7O0lBRUQsb0JBQW9COztZQUNkLFdBQVc7UUFFZixRQUFRLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbkIsS0FBSyxNQUFNLENBQUMsQ0FBQztnQkFDWCxXQUFXLEdBQUcsVUFBVSxDQUFDO2dCQUN6QixNQUFNO2FBQ1A7WUFDRCxLQUFLLGtCQUFrQixDQUFDLENBQUM7Z0JBQ3ZCLFdBQVcsR0FBRyxjQUFjLENBQUM7Z0JBQzdCLE1BQU07YUFDUDtZQUNELEtBQUssaUJBQWlCLENBQUMsQ0FBQztnQkFDdEIsV0FBVyxHQUFHLFNBQVMsQ0FBQztnQkFDeEIsTUFBTTthQUNQO1NBQ0Y7UUFDRCxPQUFPLG1CQUFtQixXQUFXLE1BQU0sQ0FBQztJQUM5QyxDQUFDOzs7O0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxhQUFhO1lBQ2hCLElBQUksQ0FBQyxNQUFNLEtBQUssaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pILENBQUM7Ozs7O0lBRU8sV0FBVztRQUNqQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFakIsSUFBSSxDQUFDLFFBQVEscUJBQ1IseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxFQUN2RCx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FDN0QsQ0FBQztRQUVGLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7O1lBM0RGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2Qyx3dUJBQTJEO2FBQzVEOzs7O1lBWFEsaUJBQWlCOzs7cUJBaUJ2QixLQUFLLFNBQUMsVUFBVTtxQkFFaEIsS0FBSyxTQUFDLFVBQVU7Ozs7SUFMakIseURBQWM7O0lBQ2Qsb0RBQTBGOztJQUUxRixrREFBeUQ7O0lBRXpELGtEQUFtRDs7Ozs7SUFFdkMsMERBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBicm93c2VyTGFuZ3VhZ2UsIHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xyXG5cclxuaW1wb3J0IHsgcG9QYWdlQmxvY2tlZFVzZXJMaXRlcmFscyB9IGZyb20gJy4vLi4vbGl0ZXJhbHMvaTE4bi9wby1wYWdlLWJsb2NrZWQtdXNlci1saXRlcmFscyc7XHJcbmltcG9ydCB7IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uIH0gZnJvbSAnLi4vZW51bXMvcG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmVudW0nO1xyXG5pbXBvcnQgeyBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvblBhcmFtcyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLXBhcmFtcy5pbnRlcmZhY2UnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdwby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24nLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50Lmh0bWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0IHtcclxuXHJcbiAgbGl0ZXJhbFBhcmFtcztcclxuICBsaXRlcmFsczoge3RpdGxlOiBzdHJpbmcsIGZpcnN0UGhyYXNlOiBzdHJpbmcsIHNlY29uZFBocmFzZTogc3RyaW5nLCB0aGlyZFBocmFzZTogc3RyaW5nfTtcclxuXHJcbiAgQElucHV0KCdwLXBhcmFtcycpIHBhcmFtczogUG9QYWdlQmxvY2tlZFVzZXJSZWFzb25QYXJhbXM7XHJcblxyXG4gIEBJbnB1dCgncC1yZWFzb24nKSByZWFzb246IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge31cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMucmVhc29uIHx8IGNoYW5nZXMucGFyYW1zKSB7XHJcbiAgICAgIHRoaXMuZ2V0TGl0ZXJhbHMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgdGhpcy5nZXRMaXRlcmFscygpO1xyXG4gIH1cclxuXHJcbiAgZ2V0SW1hZ2VCeVJlYXNvblR5cGUoKSB7XHJcbiAgICBsZXQgcmVhc29uSW1hZ2U7XHJcblxyXG4gICAgc3dpdGNoICh0aGlzLnJlYXNvbikge1xyXG4gICAgICBjYXNlICdub25lJzoge1xyXG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2JpZy1sb2NrJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBjYXNlICdleGNlZWRlZEF0dGVtcHRzJzoge1xyXG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2Jsb2NrZWQtdXNlcic7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSAnZXhwaXJlZFBhc3N3b3JkJzoge1xyXG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2V4cGlyZWQnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYC4vYXNzZXRzL2ltYWdlcy8ke3JlYXNvbkltYWdlfS5zdmdgO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGFyYW1zKCkge1xyXG4gICAgdGhpcy5saXRlcmFsUGFyYW1zID1cclxuICAgICAgdGhpcy5yZWFzb24gPT09ICdleHBpcmVkUGFzc3dvcmQnID8gW3RoaXMucGFyYW1zLmRheXMsIHRoaXMucGFyYW1zLmRheXNdIDogW3RoaXMucGFyYW1zLmF0dGVtcHRzLCB0aGlzLnBhcmFtcy5ob3Vyc107XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldExpdGVyYWxzKCkge1xyXG4gICAgdGhpcy5nZXRQYXJhbXMoKTtcclxuXHJcbiAgICB0aGlzLmxpdGVyYWxzID0ge1xyXG4gICAgICAuLi5wb1BhZ2VCbG9ja2VkVXNlckxpdGVyYWxzW3RoaXMucmVhc29uXVtwb0xvY2FsZURlZmF1bHRdLFxyXG4gICAgICAuLi5wb1BhZ2VCbG9ja2VkVXNlckxpdGVyYWxzW3RoaXMucmVhc29uXVticm93c2VyTGFuZ3VhZ2UoKV0sXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19