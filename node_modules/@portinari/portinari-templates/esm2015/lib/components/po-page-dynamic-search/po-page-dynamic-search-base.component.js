/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output } from '@angular/core';
import { poLocaleDefault } from '../../utils/util';
import { poAdvancedFiltersLiteralsDefault } from './po-advanced-filter/po-advanced-filter-base.component';
/** @type {?} */
export const poPageDynamicSearchLiteralsDefault = {
    en: (/** @type {?} */ ({
        disclaimerGroupTitle: 'Displaying results filtered by:',
        filterTitle: poAdvancedFiltersLiteralsDefault.en.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.en.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.en.confirmLabel,
        quickSearchLabel: 'Quick search:',
        searchPlaceholder: 'Search'
    })),
    es: (/** @type {?} */ ({
        disclaimerGroupTitle: 'Presentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.es.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.es.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.es.confirmLabel,
        quickSearchLabel: 'Búsqueda rápida:',
        searchPlaceholder: 'Buscar',
    })),
    pt: (/** @type {?} */ ({
        disclaimerGroupTitle: 'Apresentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.pt.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.pt.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.pt.confirmLabel,
        quickSearchLabel: 'Pesquisa rápida:',
        searchPlaceholder: 'Pesquisar'
    })),
    ru: (/** @type {?} */ ({
        disclaimerGroupTitle: 'Отображение результатов, отфильтрованных по:',
        filterTitle: poAdvancedFiltersLiteralsDefault.ru.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.ru.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.ru.confirmLabel,
        quickSearchLabel: 'Быстрый поиск:',
        searchPlaceholder: 'исследование'
    })),
};
/**
 * \@description
 *
 * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs
 * e exiba as informações.
 */
export class PoPageDynamicSearchBaseComponent {
    /**
     * @param {?} languageService
     */
    constructor(languageService) {
        this._filters = [];
        /**
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
         */
        this.actions = [];
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
        /**
         * \@description
         *
         * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
         *
         * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
         */
        this.advancedSearch = new EventEmitter();
        /**
         * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
         */
        this.changeDisclaimers = new EventEmitter();
        /**
         * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
         */
        this.quickSearch = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `po-page-dynamic-search`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    disclaimerGroupTitle: 'Filtros aplicados:',
     *    filterTitle: 'Filtro avançado',
     *    filterCancelLabel: 'Fechar',
     *    filterConfirmLabel: 'Aplicar',
     *    quickSearchLabel: 'Valor pesquisado:',
     *    searchPlaceholder: 'Pesquise aqui'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    filterTitle: 'Filtro avançado'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-dynamic-search
     *   [p-literals]="customLiterals">
     * </po-page-dynamic-search>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, poPageDynamicSearchLiteralsDefault[poLocaleDefault], poPageDynamicSearchLiteralsDefault[this.language], value);
        }
        else {
            this._literals = poPageDynamicSearchLiteralsDefault[this.language];
        }
        this.setAdvancedFilterLiterals(this.literals);
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || poPageDynamicSearchLiteralsDefault[this.language];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
     * @param {?} filters
     * @return {?}
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    /**
     * @return {?}
     */
    get filters() {
        return this._filters;
    }
    /**
     * @protected
     * @param {?} literals
     * @return {?}
     */
    setAdvancedFilterLiterals(literals) {
        this.advancedFilterLiterals = {
            cancelLabel: literals.filterCancelLabel,
            confirmLabel: literals.filterConfirmLabel,
            title: literals.filterTitle
        };
    }
}
PoPageDynamicSearchBaseComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    filters: [{ type: Input, args: ['p-filters',] }],
    onLoad: [{ type: Input, args: ['p-load',] }],
    title: [{ type: Input, args: ['p-title',] }],
    advancedSearch: [{ type: Output, args: ['p-advanced-search',] }],
    changeDisclaimers: [{ type: Output, args: ['p-change-disclaimers',] }],
    quickSearch: [{ type: Output, args: ['p-quick-search',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchBaseComponent.prototype._filters;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchBaseComponent.prototype._literals;
    /** @type {?} */
    PoPageDynamicSearchBaseComponent.prototype.advancedFilterLiterals;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchBaseComponent.prototype.language;
    /**
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.actions;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.breadcrumb;
    /**
     * Função ou serviço que será executado na inicialização do componente.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * O retorno desta função deve ser do tipo `PoPageDynamicSearchOptions`,
     * onde o usuário poderá customizar novos filtros, breadcrumb, title e actions
     *
     * Por exemplo:
     *
     * ```
     * getPageOptions(): PoPageDynamicSearchOptions {
     * return {
     *   actions: [
     *     { label: 'Find on Google' },
     *   ],
     *   filters: [
     *     { property: 'idCard', gridColumns: 6 }
     *   ]
     * };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-load]="onLoadOptions.bind(this)"
     * ```
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.onLoad;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.title;
    /**
     * \@description
     *
     * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
     *
     * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.advancedSearch;
    /**
     * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.changeDisclaimers;
    /**
     * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.quickSearch;
}
//# sourceMappingURL=data:application/json;base64,