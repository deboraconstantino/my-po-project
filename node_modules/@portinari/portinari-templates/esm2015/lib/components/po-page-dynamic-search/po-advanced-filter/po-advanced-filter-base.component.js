/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { PoModalComponent } from '@portinari/portinari-ui';
import { poLocaleDefault } from '../../../utils/util';
/** @type {?} */
export const poAdvancedFiltersLiteralsDefault = {
    en: (/** @type {?} */ ({
        title: 'Advanced search',
        cancelLabel: 'Cancel',
        confirmLabel: 'Apply filters'
    })),
    es: (/** @type {?} */ ({
        title: 'Búsqueda avanzada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    })),
    pt: (/** @type {?} */ ({
        title: 'Busca avançada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    })),
    ru: (/** @type {?} */ ({
        title: 'Расширенный поиск',
        cancelLabel: 'отменить',
        confirmLabel: 'Применить фильтры'
    }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Filtro de busca avançada criado a partir de um formulário dinâmico.
 * Componente de uso interno.
 */
export class PoAdvancedFilterBaseComponent {
    /**
     * @param {?} languageService
     */
    constructor(languageService) {
        this._filters = [];
        this.filter = {};
        this.language = poLocaleDefault;
        this.primaryAction = {
            action: (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const models = this.getValuesFromForm();
                this.searchEvent.emit(models);
                this.poModal.close();
            }),
            label: this.literals.confirmLabel
        };
        this.secondaryAction = {
            action: (/**
             * @return {?}
             */
            () => {
                this.poModal.close();
            }),
            label: this.literals.cancelLabel
        };
        /**
         * Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar.
         */
        this.searchEvent = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * Coleção de objetos que implementam a interface PoDynamicFormField, para definição dos campos que serão criados
     * dinamicamente.
     * @param {?} filters
     * @return {?}
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    /**
     * @return {?}
     */
    get filters() {
        return this._filters;
    }
    /**
     * Objeto com as literais usadas no `po-advanced-filter`.
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, poAdvancedFiltersLiteralsDefault[poLocaleDefault], poAdvancedFiltersLiteralsDefault[this.language], value);
        }
        else {
            this._literals = poAdvancedFiltersLiteralsDefault[this.language];
        }
        this.primaryAction.label = this.literals.confirmLabel;
        this.secondaryAction.label = this.literals.cancelLabel;
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || poAdvancedFiltersLiteralsDefault[this.language];
    }
    // Retorna os models dos campos preenchidos
    /**
     * @private
     * @return {?}
     */
    getValuesFromForm() {
        Object.keys(this.filter).forEach((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            if (this.filter[property] === undefined || this.filter[property] === '') {
                delete this.filter[property];
            }
        }));
        return this.filter;
    }
}
PoAdvancedFilterBaseComponent.propDecorators = {
    poModal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }],
    filters: [{ type: Input, args: ['p-filters',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    searchEvent: [{ type: Output, args: ['p-search-event',] }]
};
if (false) {
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.poModal;
    /**
     * @type {?}
     * @private
     */
    PoAdvancedFilterBaseComponent.prototype._filters;
    /**
     * @type {?}
     * @private
     */
    PoAdvancedFilterBaseComponent.prototype._literals;
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.filter;
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.language;
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.primaryAction;
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.secondaryAction;
    /**
     * Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar.
     * @type {?}
     */
    PoAdvancedFilterBaseComponent.prototype.searchEvent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYWR2YW5jZWQtZmlsdGVyLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHBvcnRpbmFyaS9wb3J0aW5hcmktdGVtcGxhdGVzLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcG8tcGFnZS1keW5hbWljLXNlYXJjaC9wby1hZHZhbmNlZC1maWx0ZXIvcG8tYWR2YW5jZWQtZmlsdGVyLWJhc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZFLE9BQU8sRUFBd0QsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVqSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBSXRELE1BQU0sT0FBTyxnQ0FBZ0MsR0FBRztJQUM5QyxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLEtBQUssRUFBRSxpQkFBaUI7UUFDeEIsV0FBVyxFQUFFLFFBQVE7UUFDckIsWUFBWSxFQUFFLGVBQWU7S0FDOUIsRUFBQTtJQUNELEVBQUUsRUFBRSxtQkFBMkI7UUFDN0IsS0FBSyxFQUFFLG1CQUFtQjtRQUMxQixXQUFXLEVBQUUsVUFBVTtRQUN2QixZQUFZLEVBQUUsaUJBQWlCO0tBQ2hDLEVBQUE7SUFDRCxFQUFFLEVBQUUsbUJBQTJCO1FBQzdCLEtBQUssRUFBRSxnQkFBZ0I7UUFDdkIsV0FBVyxFQUFFLFVBQVU7UUFDdkIsWUFBWSxFQUFFLGlCQUFpQjtLQUNoQyxFQUFBO0lBQ0QsRUFBRSxFQUFFLG1CQUEyQjtRQUM3QixLQUFLLEVBQUUsbUJBQW1CO1FBQzFCLFdBQVcsRUFBRSxVQUFVO1FBQ3ZCLFlBQVksRUFBRSxtQkFBbUI7S0FDbEMsRUFBQTtDQUNGOzs7Ozs7Ozs7QUFVRCxNQUFNLE9BQU8sNkJBQTZCOzs7O0lBOER4QyxZQUFZLGVBQWtDO1FBMUR0QyxhQUFR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Qzs7SUFFNUMsK0NBQVk7O0lBQ1osaURBQW1DOztJQUVuQyxzREFRRTs7SUFFRix3REFLRTs7Ozs7SUFtQ0Ysb0RBQWdFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9EeW5hbWljRm9ybUZpZWxkLCBQb0xhbmd1YWdlU2VydmljZSwgUG9Nb2RhbEFjdGlvbiwgUG9Nb2RhbENvbXBvbmVudCB9IGZyb20gJ0Bwb3J0aW5hcmkvcG9ydGluYXJpLXVpJztcblxuaW1wb3J0IHsgcG9Mb2NhbGVEZWZhdWx0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvQWR2YW5jZWRGaWx0ZXJMaXRlcmFscyB9IGZyb20gJy4vcG8tYWR2YW5jZWQtZmlsdGVyLWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjb25zdCBwb0FkdmFuY2VkRmlsdGVyc0xpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxQb0FkdmFuY2VkRmlsdGVyTGl0ZXJhbHM+IHtcbiAgICB0aXRsZTogJ0FkdmFuY2VkIHNlYXJjaCcsXG4gICAgY2FuY2VsTGFiZWw6ICdDYW5jZWwnLFxuICAgIGNvbmZpcm1MYWJlbDogJ0FwcGx5IGZpbHRlcnMnXG4gIH0sXG4gIGVzOiA8UG9BZHZhbmNlZEZpbHRlckxpdGVyYWxzPiB7XG4gICAgdGl0bGU6ICdCw7pzcXVlZGEgYXZhbnphZGEnLFxuICAgIGNhbmNlbExhYmVsOiAnQ2FuY2VsYXInLFxuICAgIGNvbmZpcm1MYWJlbDogJ0FwbGljYXIgZmlsdHJvcydcbiAgfSxcbiAgcHQ6IDxQb0FkdmFuY2VkRmlsdGVyTGl0ZXJhbHM+IHtcbiAgICB0aXRsZTogJ0J1c2NhIGF2YW7Dp2FkYScsXG4gICAgY2FuY2VsTGFiZWw6ICdDYW5jZWxhcicsXG4gICAgY29uZmlybUxhYmVsOiAnQXBsaWNhciBmaWx0cm9zJ1xuICB9LFxuICBydTogPFBvQWR2YW5jZWRGaWx0ZXJMaXRlcmFscz4ge1xuICAgIHRpdGxlOiAn0KDQsNGB0YjQuNGA0LXQvdC90YvQuSDQv9C+0LjRgdC6JyxcbiAgICBjYW5jZWxMYWJlbDogJ9C+0YLQvNC10L3QuNGC0YwnLFxuICAgIGNvbmZpcm1MYWJlbDogJ9Cf0YDQuNC80LXQvdC40YLRjCDRhNC40LvRjNGC0YDRiydcbiAgfVxufTtcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBGaWx0cm8gZGUgYnVzY2EgYXZhbsOnYWRhIGNyaWFkbyBhIHBhcnRpciBkZSB1bSBmb3JtdWzDoXJpbyBkaW7Dom1pY28uXG4gKiBDb21wb25lbnRlIGRlIHVzbyBpbnRlcm5vLlxuICovXG5leHBvcnQgY2xhc3MgUG9BZHZhbmNlZEZpbHRlckJhc2VDb21wb25lbnQge1xuXG4gIEBWaWV3Q2hpbGQoUG9Nb2RhbENvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgcG9Nb2RhbDogUG9Nb2RhbENvbXBvbmVudDtcblxuICBwcml2YXRlIF9maWx0ZXJzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+ID0gW107XG4gIHByaXZhdGUgX2xpdGVyYWxzOiBQb0FkdmFuY2VkRmlsdGVyTGl0ZXJhbHM7XG5cbiAgZmlsdGVyID0ge307XG4gIGxhbmd1YWdlOiBzdHJpbmcgPSBwb0xvY2FsZURlZmF1bHQ7XG5cbiAgcHJpbWFyeUFjdGlvbjogUG9Nb2RhbEFjdGlvbiA9IHtcbiAgICBhY3Rpb246ICgpID0+IHtcbiAgICAgIGNvbnN0IG1vZGVscyA9IHRoaXMuZ2V0VmFsdWVzRnJvbUZvcm0oKTtcblxuICAgICAgdGhpcy5zZWFyY2hFdmVudC5lbWl0KG1vZGVscyk7XG4gICAgICB0aGlzLnBvTW9kYWwuY2xvc2UoKTtcbiAgICB9LFxuICAgIGxhYmVsOiB0aGlzLmxpdGVyYWxzLmNvbmZpcm1MYWJlbFxuICB9O1xuXG4gIHNlY29uZGFyeUFjdGlvbjogUG9Nb2RhbEFjdGlvbiA9IHtcbiAgICBhY3Rpb246ICgpID0+IHtcbiAgICAgIHRoaXMucG9Nb2RhbC5jbG9zZSgpO1xuICAgIH0sXG4gICAgbGFiZWw6IHRoaXMubGl0ZXJhbHMuY2FuY2VsTGFiZWxcbiAgfTtcblxuICAvKipcbiAgICogQ29sZcOnw6NvIGRlIG9iamV0b3MgcXVlIGltcGxlbWVudGFtIGEgaW50ZXJmYWNlIFBvRHluYW1pY0Zvcm1GaWVsZCwgcGFyYSBkZWZpbmnDp8OjbyBkb3MgY2FtcG9zIHF1ZSBzZXLDo28gY3JpYWRvc1xuICAgKiBkaW5hbWljYW1lbnRlLlxuICAgKi9cbiAgQElucHV0KCdwLWZpbHRlcnMnKSBzZXQgZmlsdGVycyhmaWx0ZXJzOiBBcnJheTxQb0R5bmFtaWNGb3JtRmllbGQ+KSB7XG4gICAgdGhpcy5fZmlsdGVycyA9IEFycmF5LmlzQXJyYXkoZmlsdGVycykgPyBbLi4uZmlsdGVyc10gOiBbXTtcbiAgfVxuXG4gIGdldCBmaWx0ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLl9maWx0ZXJzO1xuICB9XG5cbiAgLyoqIE9iamV0byBjb20gYXMgbGl0ZXJhaXMgdXNhZGFzIG5vIGBwby1hZHZhbmNlZC1maWx0ZXJgLiAqL1xuICBASW5wdXQoJ3AtbGl0ZXJhbHMnKSBzZXQgbGl0ZXJhbHModmFsdWU6IFBvQWR2YW5jZWRGaWx0ZXJMaXRlcmFscykge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCAmJiAhKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHtcbiAgICAgICAgLi4ucG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcbiAgICAgICAgLi4ucG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV0sXG4gICAgICAgIC4uLnZhbHVlXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXRlcmFscyA9IHBvQWR2YW5jZWRGaWx0ZXJzTGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VdO1xuICAgIH1cblxuICAgIHRoaXMucHJpbWFyeUFjdGlvbi5sYWJlbCA9IHRoaXMubGl0ZXJhbHMuY29uZmlybUxhYmVsO1xuICAgIHRoaXMuc2Vjb25kYXJ5QWN0aW9uLmxhYmVsID0gdGhpcy5saXRlcmFscy5jYW5jZWxMYWJlbDtcbiAgfVxuXG4gIGdldCBsaXRlcmFscygpIHtcbiAgICByZXR1cm4gdGhpcy5fbGl0ZXJhbHMgfHwgcG9BZHZhbmNlZEZpbHRlcnNMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XG4gIH1cblxuICAvKiogRnVuw6fDo28gcXVlIHNlcsOhIGRpc3BhcmFkYSBlIHJlY2ViZXLDoSBvcyB2YWxvcmVzIGRvIGZvcm11bMOhcmlvIGFvIHNlciBjbGljYWRvIG5vIGJvdMOjbyBidXNjYXIuICovXG4gIEBPdXRwdXQoJ3Atc2VhcmNoLWV2ZW50Jykgc2VhcmNoRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb25zdHJ1Y3RvcihsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgdGhpcy5sYW5ndWFnZSA9IGxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG4gIH1cblxuICAgIC8vIFJldG9ybmEgb3MgbW9kZWxzIGRvcyBjYW1wb3MgcHJlZW5jaGlkb3NcbiAgcHJpdmF0ZSBnZXRWYWx1ZXNGcm9tRm9ybSgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmZpbHRlcikuZm9yRWFjaChwcm9wZXJ0eSA9PiB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJbcHJvcGVydHldID09PSB1bmRlZmluZWQgfHwgdGhpcy5maWx0ZXJbcHJvcGVydHldID09PSAnJykge1xuICAgICAgICBkZWxldGUgdGhpcy5maWx0ZXJbcHJvcGVydHldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyO1xuICB9XG5cbn1cbiJdfQ==