/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild } from '@angular/core';
import { PoDynamicFieldType, PoLanguageService } from '@portinari/portinari-ui';
import { capitalizeFirstLetter, getBrowserLanguage } from '../../utils/util';
import { PoPageCustomizationService } from '../../services/po-page-customization/po-page-customization.service';
import { PoAdvancedFilterComponent } from './po-advanced-filter/po-advanced-filter.component';
import { PoPageDynamicSearchBaseComponent } from './po-page-dynamic-search-base.component';
/**
 * \@docsExtends PoPageDynamicSearchBaseComponent
 *
 * \@example
 *
 * <example name="po-page-dynamic-search-basic" title="Portinari Page Dynamic Search Basic">
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-search-hiring-processes" title="Portinari Page Dynamic Search - Hiring processes">
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.service.ts"> </file>
 * </example>
 */
export class PoPageDynamicSearchComponent extends PoPageDynamicSearchBaseComponent {
    /**
     * @param {?} languageService
     * @param {?} poPageCustomizationService
     */
    constructor(languageService, poPageCustomizationService) {
        super(languageService);
        this.poPageCustomizationService = poPageCustomizationService;
        this._disclaimerGroup = {
            change: this.onChangeDisclaimerGroup.bind(this),
            disclaimers: [],
            title: this.literals.disclaimerGroupTitle
        };
        this._filterSettings = {
            action: 'onAction',
            advancedAction: 'onAdvancedAction',
            ngModel: 'quickFilter',
            placeholder: this.literals.searchPlaceholder
        };
        // Flag to control when changeDisclaimerGroup should be called
        this.changeDisclaimersEnabled = false;
    }
    /**
     * @return {?}
     */
    get disclaimerGroup() {
        return Object.assign({}, this._disclaimerGroup, { title: this.literals.disclaimerGroupTitle });
    }
    /**
     * @return {?}
     */
    get filterSettings() {
        this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : 'onAdvancedAction';
        return Object.assign({}, this._filterSettings, { placeholder: this.literals.searchPlaceholder });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setAdvancedFilterLiterals(this.literals);
        if (this.onLoad) {
            this.loadOptionsOnInitialize(this.onLoad);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.loadSubscription) {
            this.loadSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    onAction() {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = [
            { property: 'search', label: `${this.literals.quickSearchLabel} ${this.quickFilter}`, value: this.quickFilter }
        ];
        if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {
            this.quickSearch.emit(this.quickFilter);
        }
        this.quickFilter = undefined;
    }
    /**
     * @return {?}
     */
    onAdvancedAction() {
        this.poAdvancedFilter.open();
    }
    /**
     * @param {?} filters
     * @return {?}
     */
    onAdvancedSearch(filters) {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = this.setDisclaimers(filters);
        this.advancedSearch.emit(filters);
    }
    /**
     * @private
     * @param {?} field
     * @param {?} filterValue
     * @return {?}
     */
    applyDisclaimerLabelValue(field, filterValue) {
        /** @type {?} */
        const values = Array.isArray(filterValue) ? filterValue : [filterValue];
        /** @type {?} */
        const labels = values.map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const filteredField = field.options.find((/**
             * @param {?} option
             * @return {?}
             */
            option => option.value === value));
            return filteredField.label || filteredField.value;
        }));
        return labels.join(', ');
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    formatDate(date) {
        /** @type {?} */
        const year = parseInt(date.substr(0, 4), 10);
        /** @type {?} */
        const month = parseInt(date.substr(5, 2), 10);
        /** @type {?} */
        const day = parseInt(date.substr(8, 2), 10);
        return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());
    }
    /**
     * @private
     * @param {?} fields
     * @param {?} fieldName
     * @return {?}
     */
    getFieldByProperty(fields, fieldName) {
        return fields.find((/**
         * @param {?} field
         * @return {?}
         */
        (field) => field.property === fieldName));
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    getFilterValueToDisclaimer(field, value) {
        if (field.type === PoDynamicFieldType.Date) {
            return this.formatDate(value);
        }
        if (field.options) {
            return this.applyDisclaimerLabelValue(field, value);
        }
        return value;
    }
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    onChangeDisclaimerGroup(disclaimers) {
        this.changeDisclaimersEnabled ? this.changeDisclaimers.emit(disclaimers) : this.changeDisclaimersEnabled = true;
    }
    /**
     * @private
     * @param {?} filters
     * @return {?}
     */
    setDisclaimers(filters) {
        /** @type {?} */
        const disclaimers = [];
        /** @type {?} */
        const properties = Object.keys(filters);
        properties.forEach((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            /** @type {?} */
            const field = this.getFieldByProperty(this.filters, property);
            /** @type {?} */
            const label = field.label || capitalizeFirstLetter(field.property);
            /** @type {?} */
            const value = filters[property];
            disclaimers.push({
                label: `${label}: ${this.getFilterValueToDisclaimer(field, value)}`,
                property,
                value
            });
        }));
        return disclaimers;
    }
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    loadOptionsOnInitialize(onLoad) {
        this.loadSubscription = this.getPoDynamicPageOptions(onLoad).subscribe((/**
         * @param {?} responsePoOption
         * @return {?}
         */
        responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption)));
    }
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    getPoDynamicPageOptions(onLoad) {
        /** @type {?} */
        const originalOption = {
            title: this.title,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            filters: this.filters
        };
        /** @type {?} */
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'filters',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true,
                    keyForMerge: 'label'
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
}
PoPageDynamicSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-search',
                template: "<po-page-list\r\n  [p-actions]=\"actions\"\r\n  [p-breadcrumb]=\"breadcrumb\"\r\n  [p-disclaimer-group]=\"disclaimerGroup\"\r\n  [p-filter]=\"filterSettings\"\r\n  [p-title]=\"title\">\r\n\r\n  <po-advanced-filter\r\n    [p-filters]=\"filters\"\r\n    [p-literals]=\"advancedFilterLiterals\"\r\n    (p-search-event)=\"onAdvancedSearch($event)\">\r\n  </po-advanced-filter>\r\n\r\n  <ng-content></ng-content>\r\n</po-page-list>\r\n"
            }] }
];
/** @nocollapse */
PoPageDynamicSearchComponent.ctorParameters = () => [
    { type: PoLanguageService },
    { type: PoPageCustomizationService }
];
PoPageDynamicSearchComponent.propDecorators = {
    poAdvancedFilter: [{ type: ViewChild, args: [PoAdvancedFilterComponent, { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.loadSubscription;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype._disclaimerGroup;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype._filterSettings;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.changeDisclaimersEnabled;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.quickFilter;
    /** @type {?} */
    PoPageDynamicSearchComponent.prototype.poAdvancedFilter;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.poPageCustomizationService;
}
//# sourceMappingURL=data:application/json;base64,