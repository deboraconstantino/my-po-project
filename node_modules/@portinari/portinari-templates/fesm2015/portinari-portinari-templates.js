import { EventEmitter, Input, Output, Injectable, Component, ViewChild, NgModule, ChangeDetectorRef, ViewContainerRef, ɵɵdefineInjectable, ɵɵinject, ViewEncapsulation, IterableDiffers } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, NgForm } from '@angular/forms';
import { PoI18nPipe, PoFieldModule, PoModalModule, PoDividerModule, PoModule, PoComponentInjectorService, PoModalComponent, PoNotificationService, PoDialogService, PoDynamicModule, PoPageModule, PoWidgetModule, PoButtonModule, PoGridModule, PoLanguageService, PoDynamicFormComponent, PoDynamicFieldType, PoLanguageModule, PoTableColumnSortType, PoTableModule, PoStepperStatus, PoInfoOrientation, PoContainerModule, PoDialogModule, PoInfoModule, PoStepperModule } from '@portinari/portinari-ui';
import { Router, RouterModule, ActivatedRoute } from '@angular/router';
import { HttpClient, HttpHeaders, HttpClientModule } from '@angular/common/http';
import { map, tap } from 'rxjs/operators';
import { from, throwError, EMPTY, concat } from 'rxjs';
import { __awaiter } from 'tslib';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Idiomas suportados pelas páginas
/** @type {?} */
const poLocales = ['pt', 'en', 'es', 'ru'];
// Idioma padrão
/** @type {?} */
const poLocaleDefault = 'pt';
/**
 * @deprecated
 * Utilize o método `getShortBrowserLanguage`.
 *
 * \@description
 * Retorna idioma do browser ou o idioma padrão.
 * @return {?}
 */
function browserLanguage() {
    return getShortBrowserLanguage();
}
/**
 * Retorna o idioma atual do navegador
 * @return {?}
 */
function getBrowserLanguage() {
    // navigator.userLanguage is the value for IE10
    return navigator.language || navigator['userLanguage'];
}
/**
 * Retorna o idioma do navegador, com somente as duas primeiras letras. Por exemplo: "pt" ou "es".
 *
 * Caso o valor retornado pelo navegador não estiver dentro dos idiomas suportados pelo PO,
 * será retornado a linguagem padrão (poLocaleDefault).
 * @return {?}
 */
function getShortBrowserLanguage() {
    /** @type {?} */
    const language = (getBrowserLanguage() || poLocaleDefault).toLowerCase().substring(0, 2);
    if (!poLocales.includes(language)) {
        return poLocaleDefault;
    }
    return language;
}
/**
 * @param {?} val
 * @return {?}
 */
function convertToBoolean(val) {
    if (typeof val === 'string') {
        val = val.toLowerCase().trim();
        return (val === 'true' || val === 'on' || val === '');
    }
    if (typeof val === 'number') {
        return val === 1;
    }
    return !!val;
}
/**
 * @param {?} value
 * @param {?=} valueDefault
 * @return {?}
 */
function convertToInt(value, valueDefault) {
    /** @type {?} */
    const validNumber = parseInt(value, 10);
    /** @type {?} */
    const validDefaultValue = parseInt(valueDefault, 10);
    /** @type {?} */
    const defaultValue = validDefaultValue || validDefaultValue === 0 ? validDefaultValue : undefined;
    return validNumber || validNumber === 0 ? validNumber : defaultValue;
}
/**
 * @param {?} object
 * @param {?} type
 * @return {?}
 */
function isTypeof(object, type) {
    return typeof object === type;
}
/**
 *
 * @param {?} fn Função que será executada dentro do contexto. Podendo ser o nome da função
 * ou a referência da mesma.
 *
 * @param {?} context Contexto do qual a função será executada.
 * @param {?=} param
 * @return {?}
 */
function callFunction(fn, context, param) {
    if (isTypeof(fn, 'function')) {
        fn.call(context, param);
    }
    else {
        context[fn](param);
    }
}
/**
 * @param {?} value
 * @param {?} start
 * @param {?} end
 * @return {?}
 */
function convertIsoToDate(value, start, end) {
    if (value) {
        /** @type {?} */
        const day = parseInt(value.substring(8, 10), 10);
        /** @type {?} */
        const month = parseInt(value.substring(5, 7), 10);
        /** @type {?} */
        const year = parseInt(value.substring(0, 4), 10);
        if (start) {
            /** @type {?} */
            const date = new Date(year, month - 1, day, 0, 0, 0);
            setYearFrom0To100(date, year);
            return date;
        }
        else if (end) {
            /** @type {?} */
            const date = new Date(year, month - 1, day, 23, 59, 59);
            setYearFrom0To100(date, year);
            return date;
        }
        else {
            /** @type {?} */
            const milliseconds = Date.parse(value);
            /** @type {?} */
            const timezone = new Date().getTimezoneOffset() * 60000;
            return new Date(milliseconds + timezone);
        }
    }
}
/**
 * @param {?} date
 * @param {?=} time
 * @return {?}
 */
function convertDateToISOExtended(date, time) {
    if (date) {
        /** @type {?} */
        const getMonth = date.getMonth() + 1;
        /** @type {?} */
        const day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
        /** @type {?} */
        const month = getMonth < 10 ? '0' + getMonth : getMonth;
        /** @type {?} */
        const year = formatYear(date.getFullYear());
        /** @type {?} */
        const dateString = date.toString();
        if (time) {
            return year + '-' + month + '-' + day + time;
        }
        else {
            return year + '-' + month + '-' + day + 'T' + dateString.substring(16, 24) +
                dateString.substring(28, 31) + ':' + dateString.substring(31, 33);
        }
    }
    else {
        return null;
    }
}
/**
 * Transforma o ano em uma string no formato yyyy e caso o ano seja menor que 1000 preenche com zeros a esquerda.
 * @param {?} year Ano
 * @return {?}
 */
function formatYear(year) {
    if (year >= 1000) {
        return year.toString();
    }
    if (year > 99 && year < 1000) {
        return `0${year}`;
    }
    if (year > 9 && year < 100) {
        return `00${year}`;
    }
    if (year >= 0 && year < 10) {
        return `000${year}`;
    }
}
/**
 * @param {?} value
 * @param {?} comparedValue
 * @return {?}
 */
function isEquals(value, comparedValue) {
    return JSON.stringify(value) === JSON.stringify(comparedValue);
}
/**
 * Caso o ano original da data seja entre 0 e 100 atribui esse valor ao ano, pois o `new Date` do javascript transforma o ano para 190X.
 * @param {?} date Data
 * @param {?} year Ano original
 * @return {?}
 */
function setYearFrom0To100(date, year) {
    if (year >= 0 && year < 100) {
        date.setFullYear(year);
    }
}
/**
 * @param {?} options
 * @param {?} property
 * @return {?}
 */
function sortOptionsByProperty(options, property) {
    options.sort((/**
     * @param {?} optionA
     * @param {?} optionB
     * @return {?}
     */
    (optionA, optionB) => {
        optionA = optionA[property].toString().toLowerCase();
        optionB = optionB[property].toString().toLowerCase();
        if (optionA < optionB) {
            return -1;
        }
        if (optionA > optionB) {
            return 1;
        }
        return 0;
    }));
}
/**
 * @param {?} list
 * @return {?}
 */
function removeDuplicatedOptions(list) {
    for (let i = 0; i < list.length; i++) {
        if (i === 0) {
            continue;
        }
        if (list.findIndex((/**
         * @param {?} op
         * @return {?}
         */
        op => op.value === list[i].value)) !== i) {
            list.splice(i, 1);
            i--;
        }
    }
}
/**
 * @param {?} list
 * @return {?}
 */
function removeUndefinedAndNullOptions(list) {
    for (let i = 0; i < list.length; i++) {
        if (list[i].value === undefined || list[i].value === null) {
            list.splice(i, 1);
            i--;
        }
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function validValue(value) {
    return (value !== null && value !== undefined && value !== '') || value === false;
}
/**
 * @param {?} url
 * @return {?}
 */
function isExternalLink(url) {
    return url ? url.startsWith('http') : false;
}
/**
 * @param {?} url
 * @return {?}
 */
function openExternalLink(url) {
    window.open(url, '_blank');
}
/**
 * @param {?} link
 * @return {?}
 */
function getFormattedLink(link) {
    /** @type {?} */
    let formattedLink = '';
    // Retira todos os pontos no começo da URL.
    if (link) {
        formattedLink = link.replace(/^(\.)+/g, '');
    }
    // Verifica se foi utilizado uma rota que não comece com barra.
    if (!formattedLink.startsWith('/')) {
        formattedLink = '/'.concat(formattedLink);
    }
    return formattedLink;
}
/**
 * Método responsável por ordenar dois valores.
 *
 * @param {?} leftSide Primeiro valor a ser comparado.
 * @param {?} rightSide Segundo valor a ser comparado.
 * @param {?=} ascending Determina se será em ordem ascendente ou descendente.
 * @return {?}
 */
function sortValues(leftSide, rightSide, ascending = true) {
    if (ascending) {
        if (leftSide < rightSide) {
            return -1;
        }
        else if (leftSide > rightSide) {
            return 1;
        }
    }
    else if (ascending === false) {
        if (leftSide < rightSide) {
            return 1;
        }
        else if (leftSide > rightSide) {
            return -1;
        }
    }
    return 0;
}
/**
 * @param {?} date
 * @param {?} dateStart
 * @param {?} dateEnd
 * @return {?}
 */
function validateDateRange(date, dateStart, dateEnd) {
    if (dateStart && dateEnd) {
        return (date >= dateStart && date <= dateEnd);
    }
    else if (dateStart && !dateEnd) {
        return (date >= dateStart);
    }
    else if (!dateStart && dateEnd) {
        return (date <= dateEnd);
    }
    else {
        return true;
    }
}
/**
 * @param {?} text
 * @return {?}
 */
function capitalizeFirstLetter(text) {
    return `${text.charAt(0).toUpperCase()}${text.slice(1)}`;
}
/**
 * Mapeia um novo array apenas com as propriedades definidas pelo desenvolvedor baseado em um array de
 * origem.
 *
 * Exemplo:
 *
 * ```
 * const people = [
 *  { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 },
 *  { id: 2, name: 'Beltrano', birthdate: '1997-01-21', genre: 'Female', city: 'Joinville', dependents: 0 },
 *  { id: 3, name: 'Siclano', birthdate: '1995-07-15', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapArrayByProperties(people, properties);
 *
 * console.log(idAndName); // [{ id: 1, name: 'Fulano' }, { id: 2, name: 'Beltrano' }, { id: 3, name: 'Siclano' }]
 * ```
 *
 * Um outro uso para o método é "parear" todos os objetos do array com as mesmas propriedades.
 *
 * ```
 * const customers = [
 *  { id: 1, name: 'Fulano', city: 'São Paulo', dependents: 2 }, // sem genre
 *  { id: 2, name: 'Beltrano', genre: 'Female', city: 'Joinville' }, // sem dependents
 *  { id: 3, name: 'Siclano', genre: 'Male', city: 'Joinville', dependents: 0 }
 * ];
 * const properties = ['id', 'name', 'city', 'genre', 'dependents'];
 *
 * const pattern = mapArrayByProperties(customers, properties);
 * console.log(pattern);
 *
 * // [
 * //   { id: 1, name: 'Fulano', city: 'São Paulo', genre: undefined, dependents: 2 },
 * //   { id: 2, name: 'Beltrano', city: 'Joinville', genre: 'Female', dependents: undefined },
 * //   { id: 3, name: 'Siclano', city: 'Joinville', genre: 'Male', dependents: 0 }
 * // ]
 * ```
 *
 * @param {?=} items {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */
function mapArrayByProperties(items = [], properties = []) {
    return items.map((/**
     * @param {?} item
     * @return {?}
     */
    item => mapObjectByProperties(item, properties)));
}
/**
 * Mapeia um novo objeto apenas com as propriedades definidas pelo desenvolvedor.
 *
 * Exemplo:
 *
 * ```
 * const person = { id: 1, name: 'Fulano', birthdate: '1980-11-01', genre: 'Male', city: 'São Paulo', dependents: 2 };
 *
 * const properties = ['id', 'name'];
 *
 * const idAndName = mapObjectByProperties(person, properties);
 *
 * console.log(idAndName); // { id: 1, name: 'Fulano' }
 * ```
 *
 * @param {?=} object {Array<any>} Array de items original.
 * @param {?=} properties {Array<string>} Array de string com a lista de propriedades que devem ser retornadas.
 *
 * @return {?} Array<any>
 */
function mapObjectByProperties(object = {}, properties = []) {
    /** @type {?} */
    const getSelectedProperties = (/**
     * @param {?} selectedProperties
     * @param {?} property
     * @return {?}
     */
    (selectedProperties, property) => (Object.assign({}, selectedProperties, { [property]: object[property] })));
    return properties.reduce(getSelectedProperties, {});
}
/**
 * Retorna os valores de um objeto dentro de um array.
 *
 * > Simula o Object.values(obj), o mesmo deve ser removido assim que a versão typescrit for atualizada.
 *
 * @param {?=} object Objeto de onde será pego os valores.
 * @return {?}
 */
function valuesFromObject(object = {}) {
    return Object.keys(object).map((/**
     * @param {?} property
     * @return {?}
     */
    property => object[property]));
}
/**
 * adiciona 0 no tempo informado, caso menor q 10
 *
 * @param {?} time
 * @return {?}
 */
function addZero(time) {
    if (!time) {
        return '00';
    }
    if (time < 10) {
        return `0${time}`;
    }
    return time;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poModalPasswordRecoveryLiterals = {
    en: (/** @type {?} */ ({
        cancelButton: 'Cancel',
        closeButton: 'Close',
        continueButton: 'Continue',
        email: 'e-mail',
        emailErrorMessagePhrase: 'Invalid e-mail format',
        emailSentConfirmationPhrase: `We have sent the instructions and new password creation link to your e-mail.
    If you did not receive it after a few minutes, check your spam box or click Resend.`,
        emailSentTitle: 'E-mail sent',
        forgotPasswordTitle: 'Forgot your password?',
        insertCode: 'Type the code',
        insertEmail: 'Enter your e-mail',
        insertPhone: 'Enter your mobile number',
        phoneErrorMessagePhrase: 'Invalid phone number',
        prepositionIn: 'in',
        prepositionOr: 'or',
        recoveryPasswordPhrase: 'To recover your password we will send you a {0} with instructions.',
        resendEmailButton: 'Resend',
        resendSmsCodePhrase: 'If the code does not arrive within a few minutes, please send it again.',
        sendAgainPhrase: 'If the code does not arrive within a few minutes',
        sendAgain: 'send again.',
        sendButton: 'Submit',
        sentSmsCodePhrase: 'We sent a code for your mobile phone.',
        sms: 'SMS',
        smsCodeErrorMessagePhrase: 'Invalid code. Please re-enter or contact support',
        supportContact: 'If you do not have access to {0} contact support',
        telephone: 'telephone',
        typeCodeTitle: 'Enter sent code'
    })),
    es: (/** @type {?} */ ({
        cancelButton: 'Cancelar',
        closeButton: 'Cerrar',
        continueButton: 'Continuar',
        email: 'e-mail',
        emailErrorMessagePhrase: 'Formato de correo electrónico no válido',
        emailSentConfirmationPhrase: `Enviamos las instrucciones y enlace de creación de nueva contraseña para su correo electrónico.
    Si no ha recibido después de unos minutos, compruebe su caja de spam o haga clic en Reenviar`,
        emailSentTitle: 'E-mail enviado',
        forgotPasswordTitle: 'Olvidaste tu contraseña?',
        insertCode: 'Introduzca el código',
        insertEmail: 'Introduce tu e-mail',
        insertPhone: 'Introduce tu número de celular',
        phoneErrorMessagePhrase: 'Número de teléfono no válido',
        prepositionIn: 'en',
        prepositionOr: 'u',
        recoveryPasswordPhrase: 'Para recuperar su contraseña vamos a enviar un {0} con instrucciones.',
        resendEmailButton: 'Reenviar',
        resendSmsCodePhrase: 'Si el código no llega dentro de unos minutos, vuelva a enviar.',
        sendAgain: 'envíe de nuevo.',
        sendAgainPhrase: 'Si el código no llega dentro de unos minutos',
        sendButton: 'Enviar',
        sentSmsCodePhrase: 'Enviamos un código para su celular.',
        sms: 'SMS',
        smsCodeErrorMessagePhrase: 'Código no válido. Escriba de nuevo o póngase en contacto con el soporte',
        supportContact: 'Si no tiene acceso a {0} póngase en contacto con el soporte',
        telephone: 'teléfono',
        typeCodeTitle: 'Escribir código enviado'
    })),
    pt: (/** @type {?} */ ({
        cancelButton: 'Cancelar',
        closeButton: 'Fechar',
        continueButton: 'Continuar',
        email: 'e-mail',
        emailErrorMessagePhrase: 'Formato de e-mail inválido',
        emailSentConfirmationPhrase: `Enviamos as instruções e link de criação de nova senha para o seu e-mail.
    Caso não tenha recebido após alguns minutos, verifique sua caixa de spam ou clique em Reenviar.`,
        emailSentTitle: 'E-mail enviado',
        forgotPasswordTitle: 'Esqueceu sua senha?',
        insertCode: 'Digite o código',
        insertEmail: 'Insira seu e-mail',
        insertPhone: 'Insira seu número de celular',
        phoneErrorMessagePhrase: 'Número de telefone inválido',
        prepositionIn: 'em',
        prepositionOr: 'ou',
        recoveryPasswordPhrase: 'Para recuperar sua senha vamos enviar um {0} com instruções.',
        resendEmailButton: 'Reenviar',
        resendSmsCodePhrase: 'Se o código não chegar dentro de alguns minutos envie novamente',
        sendAgain: 'envie novamente.',
        sendAgainPhrase: 'Se o código não chegar dentro de alguns minutos',
        sendButton: 'Enviar',
        sentSmsCodePhrase: 'Enviamos um código para seu celular cadastrado.',
        sms: 'SMS',
        smsCodeErrorMessagePhrase: 'Código inválido. Digite novamente ou contacte o suporte',
        supportContact: 'Se não tiver acesso ao {0} contacte o suporte',
        telephone: 'telefone',
        typeCodeTitle: 'Digitar código enviado'
    })),
    ru: (/** @type {?} */ ({
        cancelButton: 'отменить',
        closeButton: 'близко',
        continueButton: 'близко',
        email: 'по электронной почте',
        emailErrorMessagePhrase: 'Неверный формат электронной почты',
        emailSentConfirmationPhrase: `Мы отправили инструкции и новую ссылку для создания пароля для вашей электронной почты.
Если вы не получили его в течение нескольких минут, установите флажок Спам или нажмите Далее.`,
        emailSentTitle: 'Письмо отправлено',
        forgotPasswordTitle: 'Забыли пароль?',
        insertCode: 'Введите код',
        insertEmail: 'Введите адрес электронной почты',
        insertPhone: 'Введите номер вашего мобильного телефона',
        phoneErrorMessagePhrase: 'Неверный номер телефона',
        prepositionIn: 'в',
        prepositionOr: 'или',
        recoveryPasswordPhrase: 'Для восстановления вашего пароля мы вышлем {0} с инструкциями.',
        resendEmailButton: 'Отправить еще раз',
        resendSmsCodePhrase: 'Если код не приходит через несколько минут, попробуйте еще раз.',
        sendAgain: 'отправить снова.',
        sendAgainPhrase: 'Если код не приходит через несколько минут',
        sendButton: 'послать',
        sentSmsCodePhrase: 'Мы отправляем код на ваш зарегистрированный мобильный телефон.',
        sms: 'SMS',
        smsCodeErrorMessagePhrase: 'Неверный код. Повторите или обратитесь в службу поддержки',
        supportContact: 'Если у вас нет доступа к {0}, обратитесь в службу поддержки',
        telephone: 'телефон',
        typeCodeTitle: 'Введите отправленный код'
    }))
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const PoModalPasswordRecoveryType = {
    /** Possibilita ao usuário optar por envio via email ou SMS */
    All: 'all',
    /** Definição para recuperação apenas por email */
    Email: 'email',
    /** Definição para recuperação apenas por SMS */
    SMS: 'sms',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PoModalPasswordRecoveryDefaultMaxLength = 15;
/** @type {?} */
const PoModalPasswordRecoveryDefaultMinLength = 15;
/** @type {?} */
const PoModalPasswordRecoveryDefaultPhone = '(99) 99999-9999';
/** @type {?} */
const PoModalPasswordRecoveryTypeDefault = PoModalPasswordRecoveryType.Email;
/**
 * \@description
 *
 * O componente `po-modal-password-recovery` é utilizado como template para solicitação de troca de senha.
 *
 * É composto por uma modal que possui três telas, cada uma com as seguintes características:
 *
 * - A primeira possui campos para preenchimento de email ou número de telefone;
 * - Tela com campo para preenchimento de código SMS enviado para o número de telefone enviado;
 * - A terceira se trata de uma confirmação de envio de link para a caixa de email do usuário.
 *
 *
 * A propriedade `p-url-recovery` automatiza a rotina do componente e simplifica o processo
 * para recuperação de senha, bastando definir uma url para requisição dos recursos.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 *
 * Para a modal de digitação de código SMS, é possível definir uma mensagem de erro
 * customizada com a propriedade `p-code-error` e há um link para
 * reenvio de código por SMS. Ao reenviar, o evento `p-code-submit` envia um objeto com o telefone do usuário e a quantidade
 * de vezes em que o usuário fez a solicitação de reenvio.
 *
 * > É indicada a utilização da tela de digitação para envio de código SMS apenas
 * se a opção por envio SMS for disponibilizada para o usuário.
 *
 *
 * A modal de confirmação contém uma ação de reenvio e o evento `p-submit`
 * é quem passa o objeto contendo o email em conjunto com a quantidade de tentativas de reenvio.
 *
 * > A tela de confirmação é indicada para quando o usuário solicitar a troca através do email.
 *
 * > Os textos das modals são pré-definidos, imutáveis e são traduzidos de acordo com o idioma do *browser* (pt, en e es)
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@portinari/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
class PoModalPasswordRecoveryBaseComponent {
    constructor() {
        this._phoneMask = PoModalPasswordRecoveryDefaultPhone;
        this._type = PoModalPasswordRecoveryTypeDefault;
        this.maxLength = PoModalPasswordRecoveryDefaultMaxLength;
        this.minLength = PoModalPasswordRecoveryDefaultMinLength;
        this.literals = Object.assign({}, poModalPasswordRecoveryLiterals[poLocaleDefault], poModalPasswordRecoveryLiterals[browserLanguage()]);
        /**
         * \@optional
         *
         * \@description
         *
         * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.
         */
        this.codeSubmit = new EventEmitter();
        /**
         * \@optional
         *
         * \@description
         *
         * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.
         */
        this.submit = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Definição do e-mail que é exibido na mensagem para contato de suporte.
     * @param {?} value
     * @return {?}
     */
    set contactEmail(value) {
        this._contactEmail = value;
        this.smsCodeErrorMessage = this.concatenateSMSErrorMessage(value);
    }
    /**
     * @return {?}
     */
    get contactEmail() {
        return this._contactEmail;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Definição da mascara do campo de telefone.
     *
     * \@default `(99) 99999-9999`
     * @param {?} value
     * @return {?}
     */
    set phoneMask(value) {
        this._phoneMask = value || PoModalPasswordRecoveryDefaultPhone;
        this.minLength = this.maxLength = this._phoneMask.length;
    }
    /**
     * @return {?}
     */
    get phoneMask() {
        return this._phoneMask;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define o tipo de recuperação de senha que será exibido.
     *
     * \@default `PoModalPasswordRecoveryType.Email`
     *
     * @param {?} value
     * @return {?}
     */
    set type(value) {
        this._type = ((/** @type {?} */ (Object))).values(PoModalPasswordRecoveryType).includes(value) ? value : PoModalPasswordRecoveryTypeDefault;
    }
    /**
     * @return {?}
     */
    get type() {
        return this._type;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    concatenateSMSErrorMessage(value) {
        /** @type {?} */
        const literalCodeErrorMessage = this.literals.smsCodeErrorMessagePhrase;
        return value && value !== '' ? `${literalCodeErrorMessage} ${this.literals.prepositionIn} ${value}.` : literalCodeErrorMessage;
    }
}
PoModalPasswordRecoveryBaseComponent.propDecorators = {
    contactEmail: [{ type: Input, args: ['p-contact-email',] }],
    codeError: [{ type: Input, args: ['p-code-error',] }],
    phoneMask: [{ type: Input, args: ['p-phone-mask',] }],
    type: [{ type: Input, args: ['p-type',] }],
    urlRecovery: [{ type: Input, args: ['p-url-recovery',] }],
    codeSubmit: [{ type: Output, args: ['p-code-submit',] }],
    submit: [{ type: Output, args: ['p-submit',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryBaseComponent.prototype._contactEmail;
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryBaseComponent.prototype._phoneMask;
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryBaseComponent.prototype._type;
    /** @type {?} */
    PoModalPasswordRecoveryBaseComponent.prototype.email;
    /** @type {?} */
    PoModalPasswordRecoveryBaseComponent.prototype.maxLength;
    /** @type {?} */
    PoModalPasswordRecoveryBaseComponent.prototype.minLength;
    /** @type {?} */
    PoModalPasswordRecoveryBaseComponent.prototype.modalPasswordRecoveryTypeAll;
    /** @type {?} */
    PoModalPasswordRecoveryBaseComponent.prototype.phone;
    /** @type {?} */
    PoModalPasswordRecoveryBaseComponent.prototype.smsCode;
    /** @type {?} */
    PoModalPasswordRecoveryBaseComponent.prototype.smsCodeErrorMessage;
    /** @type {?} */
    PoModalPasswordRecoveryBaseComponent.prototype.literals;
    /**
     * \@optional
     *
     * \@description
     *
     * Definição de mensagem de erro customizada para quando o usuário passar um código SMS inválido ou errado.
     * @type {?}
     */
    PoModalPasswordRecoveryBaseComponent.prototype.codeError;
    /**
     * \@optional
     *
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso. Quando preenchido,
     * o métodos `p-submit` e `p-submit-code` serão ignorados e o componente adquirirá automatização
     * para o processo de solicitação de troca de senha.
     *
     * ### Processos
     * Ao digitar um valor válido no campo de email/telefone e pressionar **enviar**,
     * o componente fará uma requisição `POST` na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário.
     *
     * ```
     * body {
     *  email: email,
     *  retry?: retry
     * }
     * ```
     *
     *
     * #### Recuperação por email
     * Para a recuperação de senha por **email**, o código de resposta HTTP de status esperado é `204`.
     *
     * Em caso de **sucesso**, será exibida a modal de confirmação de e-mail para o usuário.
     *
     *
     * > A ação **Reenviar** na tela de confirmação efetua uma nova requisição
     * passando-se o objeto com incremento para o valor da propriedade **retry**.
     *
     * *Processo finalizado.*
     *
     *
     * #### Recuperação por SMS
     * Se a opção de recuperação for por **SMS**, o código de status de sucesso deve ser `200`.
     * Em caso de **sucesso**, abre-se a modal de digitação de código SMS e a resposta
     * desta requisição deve retornar uma definição de dados abaixo:
     *
     * ```
     * 200:
     *  {
     *    hash: hash,
     *    urlValidationCode?: url
     *  }
     * ```
     *
     *
     * - O **hash** será o código de validação da solicitação do SMS para ser enviado juntamente com o código de verificação do SMS;
     * - **urlValidationCode** é a url usada para validação do código enviado por SMS.
     *
     *
     * > Caso não seja passado urlValidationCode, o endpoint usado para validação do código será `<p-url-recovery>/validation`.
     *
     *
     * #### Validação do código SMS
     * Ao digitar um valor válido no campo de código SMS e pressionar **continuar**, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * POST /<p-url-recovery>/validation OU /<urlValidationCode>
     * Body {
     *  hash: hash,
     *  code: code
     * }
     * ```
     *
     *
     * O código de resposta HTTP de status esperado é `200`.
     *
     * Em caso de **erro** na validação do código SMS, a modal se mantém com o campo para digitação
     * de código SMS
     *
     *
     * > Pode-se atribuir a mensagem de erro (message) para o atributo `p-code-error` conforme retorno abaixo:
     *
     * ```
     * 400
     *  {
     *    error {
     *      message: 'Error Message'
     *    }
     *  }
     * ```
     *
     *
     * Em caso de **sucesso**, espera-se a resposta desta requisição retornando a seguinte definição:
     *
     * ```
     * 200:
     *  {
     *    token: token,
     *    urlChangePassword?: url
     *  }
     * ```
     *
     *
     * - **token**: Token de alteração de senha;
     * - **urlChangePassword**: url para o formulário de alteração de senha.
     *
     *
     * O componente está configurado para redirecionar para a url estabelecida em `urlChangePassword`.
     *
     * > Caso não seja passado valor para urlChangePassword,
     * a url usada para validação será a `<p-url-recovery>/changePassword?token=<token>`.
     *
     * *Processo finalizado.*
     * @type {?}
     */
    PoModalPasswordRecoveryBaseComponent.prototype.urlRecovery;
    /**
     * \@optional
     *
     * \@description
     *
     * Ação contendo como parâmetro o código enviado por SMS e digitado pelo usuário.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.
     * @type {?}
     */
    PoModalPasswordRecoveryBaseComponent.prototype.codeSubmit;
    /**
     * \@optional
     *
     * \@description
     *
     * Ação contendo o email como parâmetro e que é executada quando o usuário clica sobres os botões de 'enviar' e 'reenviar' e-mail.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.
     * @type {?}
     */
    PoModalPasswordRecoveryBaseComponent.prototype.submit;
    /**
     * Acão para conclusão de processo e fechamento da modal. Indica-se sua utilização
     * para após o envio e validação do código SMS enviado pelo usuário.
     *
     * > Nas modals em que há a ação de 'cancelar' dispensa-se o uso desta ação pois o componente já trata o fechamento da modal.
     * @abstract
     * @return {?}
     */
    PoModalPasswordRecoveryBaseComponent.prototype.completed = function () { };
    /**
     * Abre a modal de preenchimento de email ou número de telefone para solicitação de troca de senha.
     * @abstract
     * @return {?}
     */
    PoModalPasswordRecoveryBaseComponent.prototype.open = function () { };
    /**
     * Abre a modal de confirmação de envio de email.
     * @abstract
     * @return {?}
     */
    PoModalPasswordRecoveryBaseComponent.prototype.openConfirmation = function () { };
    /**
     * Abre a modal de preenchimento do código SMS enviado ao usuário.
     * @abstract
     * @return {?}
     */
    PoModalPasswordRecoveryBaseComponent.prototype.openSmsCode = function () { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const PoModalPasswordRecoveryModalContent = {
    /** Exibição de modal contendo campo para preenchimento de email ou número de telefone */
    Email: 'email',
    /** Exibição de modal contendo campo para inserção de código enviado por SMS */
    SMSCode: 'smsCode',
    /** Exibição de modal de confirmação de envio */
    Confirmation: 'confirmation',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoModalPasswordRecoveryService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} urlRecovery
     * @param {?} item
     * @param {?=} params
     * @return {?}
     */
    post(urlRecovery, item, params) {
        return this.http.post(urlRecovery, item, { observe: 'response', params: params });
    }
}
PoModalPasswordRecoveryService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoModalPasswordRecoveryService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoModalPasswordRecoveryBaseComponent
 *
 * \@example
 *
 * <example name="po-modal-password-recovery-basic" title="Portinari Modal Password Recovery Basic">
 *  <file name="sample-po-modal-password-recovery-basic/sample-po-modal-password-recovery-basic.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-basic/sample-po-modal-password-recovery-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-password-recovery-labs" title="Portinari Modal Password Recovery Labs">
 *  <file name="sample-po-modal-password-recovery-labs/sample-po-modal-password-recovery-labs.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-labs/sample-po-modal-password-recovery-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-modal-password-recovery-request" title="Portinari Modal Password Recovery Request">
 *  <file name="sample-po-modal-password-recovery-request/sample-po-modal-password-recovery-request.component.html"> </file>
 *  <file name="sample-po-modal-password-recovery-request/sample-po-modal-password-recovery-request.component.ts"> </file>
 * </example>
 */
class PoModalPasswordRecoveryComponent extends PoModalPasswordRecoveryBaseComponent {
    /**
     * @param {?} router
     * @param {?} poI18nPipe
     * @param {?} poModalPasswordRecoveryService
     */
    constructor(router, poI18nPipe, poModalPasswordRecoveryService) {
        super();
        this.router = router;
        this.poI18nPipe = poI18nPipe;
        this.poModalPasswordRecoveryService = poModalPasswordRecoveryService;
        this.chosenTypeFormOption = PoModalPasswordRecoveryType.Email;
        this.codeMask = '9 9 9 9 9 9';
        this.emailModal = true;
        this.emailModalPhrases = { firstPhrase: (/** @type {?} */ (null)), secondPhrase: (/** @type {?} */ (null)) };
        this.endpoint = '.';
        this.invalidCode = false;
        this.invalidEmail = false;
        this.modalType = PoModalPasswordRecoveryModalContent.Email;
        this.submittedCodeValue = (/** @type {?} */ ({}));
        this.submittedContactValue = (/** @type {?} */ ({}));
        this.primaryAction = { label: undefined, action: (/**
             * @return {?}
             */
            () => { }) };
        this.secondaryAction = { label: undefined, action: (/**
             * @return {?}
             */
            () => { }) };
        this.typeFormOptions = [
            { label: 'e-mail', value: PoModalPasswordRecoveryType.Email },
            { label: 'SMS', value: PoModalPasswordRecoveryType.SMS }
        ];
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.passwordRecoverySubscription) {
            this.passwordRecoverySubscription.unsubscribe();
        }
        if (this.smsCodeSubscription) {
            this.smsCodeSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    completed() {
        this.cancelAction();
    }
    /**
     * @param {?} form
     * @return {?}
     */
    formModelChangesCheck(form) {
        /** @type {?} */
        const invalidForm = form.invalid;
        this.invalidEmail = invalidForm && form.dirty;
        this.primaryAction.disabled = invalidForm;
        if (this.modalType === PoModalPasswordRecoveryModalContent.SMSCode) {
            /** @type {?} */
            const codeError = this.codeError !== undefined && this.codeError !== '';
            this.showCustomCodeError = codeError && form.pristine;
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getInputType(type) {
        this.type = type;
        this.pipeModalPhrases();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.control = this.emailForm.controls[type];
            this.formModelChangesCheck(this.emailForm);
            this.resetFormFields(this.control);
        }));
    }
    /**
     * @return {?}
     */
    open() {
        /** @type {?} */
        const control = this.checkFormType(this.type);
        this.control = this.emailForm.controls[control];
        this.setEmailModalPhrasesAndActions();
        this.formModelChangesCheck(this.emailForm);
        this.recoveryModalElement.open();
    }
    /**
     * @return {?}
     */
    openConfirmation() {
        this.modalTitle = this.literals.emailSentTitle;
        this.modalType = PoModalPasswordRecoveryModalContent.Confirmation;
        this.setActions(this.cancelAction, this.literals.closeButton, this.submitAction, this.literals.resendEmailButton, false);
    }
    /**
     * @return {?}
     */
    openSmsCode() {
        this.modalTitle = this.literals.typeCodeTitle;
        this.modalType = PoModalPasswordRecoveryModalContent.SMSCode;
        this.setActions(this.submitSmsCodeAction, this.literals.continueButton, this.cancelAction, this.literals.cancelButton, true);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.control = this.smsCodeForm.controls['sms'];
            this.formModelChangesCheck(this.smsCodeForm);
        }));
    }
    /**
     * @return {?}
     */
    resendSmsCode() {
        this.incrementRetryAttempts();
        if (this.urlRecovery) {
            this.submitActionRequest(this.submittedContactValue, this.type);
        }
        else {
            this.submit.emit(this.submittedContactValue);
        }
    }
    /**
     * @private
     * @param {?} responseObj
     * @return {?}
     */
    assignSmsResponse(responseObj) {
        this.smsBodyResponse = Object.assign({}, { hash: responseObj.hash });
        if (responseObj.urlValidationCode) {
            this.smsBodyResponse = Object.assign(this.smsBodyResponse, { urlValidationCode: responseObj.urlValidationCode });
        }
    }
    /**
     * @private
     * @return {?}
     */
    cancelAction() {
        this.resetFormFields(this.control);
        this.submittedContactValue = {};
        this.chosenTypeFormOption = PoModalPasswordRecoveryType.Email;
        this.modalType = PoModalPasswordRecoveryModalContent.Email;
        this.type = this.modalPasswordRecoveryTypeAll ? PoModalPasswordRecoveryType.All : this.type;
        this.recoveryModalElement.close();
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    checkFormType(type) {
        return type !== PoModalPasswordRecoveryType.All ? type : PoModalPasswordRecoveryType.Email;
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    /**
     * @private
     * @param {?} type
     * @return {?}
     */
    getEmitValue(type) {
        return type === PoModalPasswordRecoveryType.SMS ? this.phone : this.email;
    }
    /**
     * @private
     * @return {?}
     */
    incrementRetryAttempts() {
        this.submittedContactValue.retry = (this.submittedContactValue.retry + 1 || 1);
    }
    /**
     * @private
     * @param {?} url
     * @param {?} queryParam
     * @return {?}
     */
    openExternalLink(url, queryParam) {
        window.open(`${url}?token=${queryParam}`, '_self');
    }
    /**
     * @private
     * @param {?} url
     * @param {?} endpoint
     * @param {?} queryParam
     * @return {?}
     */
    openInternalLink(url, endpoint, queryParam) {
        this.router.navigate([`${url}/${endpoint}`], { queryParams: { token: queryParam } });
    }
    /**
     * @private
     * @return {?}
     */
    pipeModalPhrases() {
        if (this.type === PoModalPasswordRecoveryType.SMS) {
            this.emailModalPhrases.firstPhrase = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.sms);
            this.emailModalPhrases.secondPhrase = this.setPipeArguments(this.literals.supportContact, this.literals.telephone);
        }
        else {
            this.emailModalPhrases.firstPhrase = this.setPipeArguments(this.literals.recoveryPasswordPhrase, this.literals.email);
            this.emailModalPhrases.secondPhrase = this.setPipeArguments(this.literals.supportContact, this.literals.email);
        }
    }
    /**
     * @private
     * @param {?} recoveryToken
     * @return {?}
     */
    redirectToChangePassword(recoveryToken) {
        /** @type {?} */
        const urlChangePassword = recoveryToken.urlChangePassword;
        if (urlChangePassword) {
            isExternalLink(urlChangePassword) ?
                this.openExternalLink(urlChangePassword, recoveryToken.token) :
                this.openInternalLink(this.urlRecovery, urlChangePassword, recoveryToken.token);
        }
        else {
            /** @type {?} */
            const changePasswordEndpoint = 'changePassword';
            this.openInternalLink(this.urlRecovery, changePasswordEndpoint, recoveryToken.token);
        }
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    resetFormFields(control) {
        this.formReset(control);
        this.email = undefined;
        this.phone = undefined;
        this.smsCode = undefined;
    }
    /**
     * @private
     * @param {?} primaryAction
     * @param {?} primarylabel
     * @param {?} secondaryAction
     * @param {?} secondaryLabel
     * @param {?} disabled
     * @return {?}
     */
    setActions(primaryAction, primarylabel, secondaryAction, secondaryLabel, disabled) {
        this.primaryAction.action = (/**
         * @return {?}
         */
        () => primaryAction.call(this));
        this.primaryAction.label = primarylabel;
        this.secondaryAction.action = (/**
         * @return {?}
         */
        () => secondaryAction.call(this));
        this.secondaryAction.label = secondaryLabel;
        this.primaryAction.disabled = disabled;
    }
    /**
     * @private
     * @return {?}
     */
    setEmailModalPhrasesAndActions() {
        this.modalTitle = this.literals.forgotPasswordTitle;
        this.pipeModalPhrases();
        this.modalPasswordRecoveryTypeAll = this.type === PoModalPasswordRecoveryType.All;
        this.setActions(this.submitAction, this.literals.sendButton, this.cancelAction, this.literals.cancelButton, true);
    }
    /**
     * @private
     * @param {?=} urlValidationCode
     * @return {?}
     */
    setRequestEndpoint(urlValidationCode) {
        /** @type {?} */
        const endpoint = urlValidationCode || 'validation';
        return `${this.urlRecovery}/${endpoint}`;
    }
    /**
     * @private
     * @param {?} literalAttr
     * @param {?} arg
     * @return {?}
     */
    setPipeArguments(literalAttr, arg) {
        return this.poI18nPipe.transform(literalAttr, arg);
    }
    /**
     * @private
     * @return {?}
     */
    submitAction() {
        this.modalType === PoModalPasswordRecoveryModalContent.Confirmation ? this.incrementRetryAttempts() : this.formReset(this.control);
        this.submittedContactValue[this.checkFormType(this.type)] = this.getEmitValue(this.type);
        if (this.urlRecovery) {
            this.submitActionRequest(this.submittedContactValue, this.type);
        }
        else {
            this.submit.emit(this.submittedContactValue);
        }
    }
    /**
     * @private
     * @param {?} data
     * @param {?} modalType
     * @return {?}
     */
    submitActionRequest(data, modalType) {
        /** @type {?} */
        const params = modalType === PoModalPasswordRecoveryType.SMS ? { type: 'sms' } : undefined;
        this.passwordRecoverySubscription =
            this.poModalPasswordRecoveryService.post(this.urlRecovery, data, params)
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                if ((modalType === PoModalPasswordRecoveryType.Email || modalType === PoModalPasswordRecoveryType.All) && response.status === 204) {
                    this.openConfirmation();
                }
                else if (modalType === PoModalPasswordRecoveryType.SMS && response.status === 200) {
                    this.assignSmsResponse(response.body);
                    this.openSmsCode();
                }
            }));
    }
    /**
     * @private
     * @return {?}
     */
    submitSmsCodeAction() {
        this.submittedCodeValue.code = this.smsCode;
        if (this.urlRecovery) {
            this.submittedCodeValue = Object.assign(this.submittedCodeValue, { hash: this.smsBodyResponse.hash });
            this.submitSmsCodeRequest(this.submittedCodeValue);
        }
        else {
            this.codeSubmit.emit(this.submittedCodeValue);
        }
        this.resetFormFields(this.control);
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    submitSmsCodeRequest(data) {
        this.smsCodeSubscription = this.poModalPasswordRecoveryService
            .post(this.setRequestEndpoint(this.smsBodyResponse.urlValidationCode), data)
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const successStatus = response.status === 200;
            if (successStatus) {
                this.completed();
                this.redirectToChangePassword(response.body);
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.codeError = error.error.message;
            this.openSmsCode();
        }));
    }
}
PoModalPasswordRecoveryComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-modal-password-recovery',
                template: "<po-modal #recoveryModal\n  p-hide-close\n  p-size=\"auto\"\n  [ngSwitch]=\"modalType\"\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\"\n  [p-title]=\"modalTitle\"> \n  <div class=\"po-modal-password-recovery-wrapper\">\n    <div *ngSwitchCase=\"'email'\" class=\"po-modal-password-recovery-content po-row\">\n      <div class=\"po-modal-password-recovery-text po-md-12 po-mb-1\">\n        {{ emailModalPhrases.firstPhrase }}\n      </div>\n      <div class=\"po-mb-2 po-md-12\">\n        <form #emailForm=\"ngForm\">\n\n          <div *ngIf=\"modalPasswordRecoveryTypeAll\">\n            <po-radio-group \n              name=\"type\"\n              [(ngModel)]=\"chosenTypeFormOption\"\n              [p-options]=\"typeFormOptions\"\n              (p-change)=\"getInputType($event)\">\n            </po-radio-group>\n          </div>\n\n          <div class=\"po-mt-1\">\n            <po-email *ngIf=\"type === 'email' || type === 'all'\"\n              name=\"email\"\n              [(ngModel)]=\"email\"\n              p-required\n              [p-label]=\"literals.insertEmail\"\n              (p-change-model)=\"formModelChangesCheck(emailForm)\">\n            </po-email>\n    \n            <po-input *ngIf=\"type === 'sms'\"\n              name=\"sms\"\n              [(ngModel)]=\"phone\"\n              p-icon=\"po-icon-telephone\"\n              p-required\n              [p-label]=\"literals.insertPhone\"\n              [p-mask]=\"phoneMask\"\n              [p-maxlength]=\"maxLength\"\n              [p-minlength]=\"minLength\"\n              (p-change-model)=\"formModelChangesCheck(emailForm)\">\n            </po-input>\n          </div>\n          \n          <div class=\"po-field-container-bottom po-field-container-error-container\">\n            <po-modal-password-recovery-error-message *ngIf=\"invalidEmail && control.dirty\" \n              [p-text]=\"type === 'sms' ? literals.phoneErrorMessagePhrase : literals.emailErrorMessagePhrase\">\n            </po-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"po-modal-password-recovery-text po-md-12\">{{ emailModalPhrases.secondPhrase }}<span *ngIf=\"contactEmail\">\n        {{ literals.prepositionIn }} \n          <a class=\"po-modal-password-recovery-link\" href=\"mailto:{{ contactEmail }}\" target=\"_self\">{{ contactEmail }}</a>\n        </span>{{ endpoint }}\n      </div>\n    </div>\n\n    <div #smsCodeModal *ngSwitchCase=\"'smsCode'\" class=\"po-modal-password-recovery-content po-row\">\n      <div class=\"po-modal-password-recovery-text po-md-12 po-mb-1\">{{ literals.sentSmsCodePhrase }}</div>\n      <div class=\"po-mb-2 po-md-12\">\n        <form #smsCodeForm=\"ngForm\">\n          <po-input\n            name=\"sms\"\n            [(ngModel)]=\"smsCode\"\n            p-maxlength=\"11\"\n            p-minlength=\"11\"\n            p-required\n            [p-label]=\"literals.insertCode\"\n            [p-mask]=\"codeMask\"\n            (p-change-model)=\"formModelChangesCheck(smsCodeForm)\">\n          </po-input>\n          <div class=\"po-field-container-bottom po-field-container-error-container\">\n            <po-modal-password-recovery-error-message *ngIf=\"invalidEmail\"\n              [p-text]=\"smsCodeErrorMessage || this.literals.smsCodeErrorMessagePhrase\">\n            </po-modal-password-recovery-error-message>\n            <po-modal-password-recovery-error-message *ngIf=\"showCustomCodeError\"\n              [p-text]=\"codeError\">\n            </po-modal-password-recovery-error-message>\n          </div>\n        </form>\n      </div>\n      <div class=\"po-modal-password-recovery-text po-md-12\">\n        {{ literals.sendAgainPhrase }} \n        <span class=\"po-modal-password-recovery-link\" (click)=\"resendSmsCode()\">{{ literals.sendAgain }}</span>\n      </div>\n    </div>\n    \n    <div #confirmationModal *ngSwitchCase=\"'confirmation'\" class=\"po-modal-password-recovery-content po-row\">\n      <img \n        class=\"po-modal-password-recovery-user-image po-mb-2\" \n        src=\"./assets/images/email-sent.svg\"> \n      <div class=\"po-modal-password-recovery-text\">\n        {{ literals.emailSentConfirmationPhrase }}\n      </div>\n    </div>\n  </div>\n</po-modal>\n"
            }] }
];
/** @nocollapse */
PoModalPasswordRecoveryComponent.ctorParameters = () => [
    { type: Router },
    { type: PoI18nPipe },
    { type: PoModalPasswordRecoveryService }
];
PoModalPasswordRecoveryComponent.propDecorators = {
    emailForm: [{ type: ViewChild, args: ['emailForm', { static: false },] }],
    recoveryModalElement: [{ type: ViewChild, args: ['recoveryModal', { static: true },] }],
    smsCodeForm: [{ type: ViewChild, args: ['smsCodeForm', { static: false },] }]
};
if (false) {
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.chosenTypeFormOption;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.codeMask;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.control;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.emailModal;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.emailModalPhrases;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.endpoint;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.invalidCode;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.invalidEmail;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.modalTitle;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.modalType;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.showCustomCodeError;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.smsCodeErrorMessagePhrase;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.submittedCodeValue;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.submittedContactValue;
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryComponent.prototype.passwordRecoverySubscription;
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryComponent.prototype.smsBodyResponse;
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryComponent.prototype.smsCodeSubscription;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.emailForm;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.recoveryModalElement;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.smsCodeForm;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.primaryAction;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.secondaryAction;
    /** @type {?} */
    PoModalPasswordRecoveryComponent.prototype.typeFormOptions;
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryComponent.prototype.poI18nPipe;
    /**
     * @type {?}
     * @private
     */
    PoModalPasswordRecoveryComponent.prototype.poModalPasswordRecoveryService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Componente utilizado para exibição da mensagem customizada de erro em um campo de formulário.
 */
class PoModalPasswordRecoveryErrorMessageComponent {
}
PoModalPasswordRecoveryErrorMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-modal-password-recovery-error-message',
                template: "<div class=\"po-field-container-bottom-text-error po-field-container-error-item\">\n  <span class=\"po-icon po-icon-exclamation\"></span>\n  <span class=\"po-field-container-error-text\">{{ text }}</span>\n</div>\n"
            }] }
];
PoModalPasswordRecoveryErrorMessageComponent.propDecorators = {
    text: [{ type: Input, args: ['p-text',] }]
};
if (false) {
    /**
     * Texto exibido na mensagem de erro.
     * @type {?}
     */
    PoModalPasswordRecoveryErrorMessageComponent.prototype.text;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-modal-password-recovery.
 */
class PoModalPasswordRecoveryModule {
}
PoModalPasswordRecoveryModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    PoFieldModule,
                    PoModalModule
                ],
                declarations: [
                    PoModalPasswordRecoveryComponent,
                    PoModalPasswordRecoveryErrorMessageComponent
                ],
                exports: [
                    PoModalPasswordRecoveryComponent,
                    PoModalPasswordRecoveryErrorMessageComponent
                ],
                providers: [PoI18nPipe, PoModalPasswordRecoveryService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para definição de cor de fundo e dos logotipos primário e secundário para os templates
 * de `po-page-login` e demais templates de login.
 */
class PoPageBackgroundComponent {
    constructor() {
        this._showSelectLanguage = false;
        this.selectLanguageOptions = [
            { label: 'English', value: 'en' },
            { label: 'Español', value: 'es' },
            { label: 'Português', value: 'pt' },
            { label: 'Pусский', value: 'ru' }
        ];
        /**
         * Evento disparado ao selecionar alguma opção no seletor de idiomas.
         * Para este evento será passado como parâmetro o valor de idioma selecionado.
         */
        this.selectedLanguage = new EventEmitter();
    }
    /**
     * Caminho para a logomarca localizada na parte superior.
     * @param {?} value
     * @return {?}
     */
    set logo(value) {
        this._logo = isTypeof(value, 'string') && value.trim() ? value : undefined;
    }
    /**
     * @return {?}
     */
    get logo() {
        return this._logo;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @param {?} value
     * @return {?}
     */
    set secondaryLogo(value) {
        this._secondaryLogo = isTypeof(value, 'string') && value.trim() ? value : undefined;
    }
    /**
     * @return {?}
     */
    get secondaryLogo() {
        return this._secondaryLogo;
    }
    /**
     * Define se o seletor de idiomas deve ser exibido.
     * @param {?} showSelectLanguage
     * @return {?}
     */
    set showSelectLanguage(showSelectLanguage) {
        this._showSelectLanguage = convertToBoolean(showSelectLanguage);
    }
    /**
     * @return {?}
     */
    get showSelectLanguage() {
        return this._showSelectLanguage;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.selectedLanguageOption = browserLanguage();
    }
    /**
     * @return {?}
     */
    onChangeLanguage() {
        this.selectedLanguage.emit(this.selectedLanguageOption);
    }
}
PoPageBackgroundComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-background',
                template: "<div class=\"po-page-login-container\">\n  <div class=\"po-page-login-panel\">\n    <img *ngIf=\"logo\"\n      class=\"po-page-background-main-logo\"\n      [class.po-page-background-hide-logo]=\"hideLogo\"\n      alt=\"main-logo\"\n      [src]=\"logo\">\n\n    <div class=\"po-page-login-body\">\n      <div class=\"po-page-login-panel-content\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <div class=\"po-page-background-footer po-sm-12\">\n\n      <po-divider class=\"po-page-background-footer-mobile-only\"></po-divider>\n\n      <div class=\"po-page-background-footer-content\">\n        <div *ngIf=\"showSelectLanguage\" class=\"po-page-background-footer-select\">\n          <po-select\n            name=\"selectedLanguageOption\"\n            [(ngModel)]=\"selectedLanguageOption\"\n            [p-options]=\"selectLanguageOptions\"\n            (p-change) = \"onChangeLanguage()\">\n          </po-select>\n        </div>\n\n        <div class=\"po-page-background-secondary-logo\"\n          [ngClass]=\"showSelectLanguage ? 'po-page-background-secondary-logo-right' : 'po-page-background-secondary-logo-centered'\">\n\n          <img *ngIf=\"secondaryLogo\"\n            class=\"po-page-background-secondary-logo-image\"\n            alt=\"secondary-logo\"\n            [src]=\"secondaryLogo\">\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"background\"\n    [ngClass]=\"background ? 'po-page-login-highlight-image' : 'po-page-login-highlight-image-off'\"\n    [style.background-image]=\"'url(' + background + ')'\">\n    <div class=\"po-page-login-highlight-text\">\n      <div class=\"po-font-display\">{{ highlightInfo }}</div>\n    </div>\n  </div>\n</div>\n"
            }] }
];
PoPageBackgroundComponent.propDecorators = {
    background: [{ type: Input, args: ['p-background',] }],
    hideLogo: [{ type: Input, args: ['p-hide-logo',] }],
    highlightInfo: [{ type: Input, args: ['p-highlight-info',] }],
    logo: [{ type: Input, args: ['p-logo',] }],
    secondaryLogo: [{ type: Input, args: ['p-secondary-logo',] }],
    showSelectLanguage: [{ type: Input, args: ['p-show-select-language',] }],
    selectedLanguage: [{ type: Output, args: ['p-selected-language',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageBackgroundComponent.prototype._logo;
    /**
     * @type {?}
     * @private
     */
    PoPageBackgroundComponent.prototype._secondaryLogo;
    /**
     * @type {?}
     * @private
     */
    PoPageBackgroundComponent.prototype._showSelectLanguage;
    /** @type {?} */
    PoPageBackgroundComponent.prototype.selectedLanguageOption;
    /** @type {?} */
    PoPageBackgroundComponent.prototype.selectLanguageOptions;
    /**
     * Insere uma imagem de destaque ao lado direito do container.
     * @type {?}
     */
    PoPageBackgroundComponent.prototype.background;
    /**
     * Designa se o logotipo deve desaparecer em resoluções menores.
     * @type {?}
     */
    PoPageBackgroundComponent.prototype.hideLogo;
    /**
     * Texto de destaque sobreposto à imagem de destaque. Essa opção é utilizada em conjunto com o atributo `p-background`.
     * @type {?}
     */
    PoPageBackgroundComponent.prototype.highlightInfo;
    /**
     * Evento disparado ao selecionar alguma opção no seletor de idiomas.
     * Para este evento será passado como parâmetro o valor de idioma selecionado.
     * @type {?}
     */
    PoPageBackgroundComponent.prototype.selectedLanguage;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-page-background.
 */
class PoPageBackgroundModule {
}
PoPageBackgroundModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoDividerModule,
                    PoFieldModule,
                ],
                declarations: [
                    PoPageBackgroundComponent
                ],
                exports: [
                    PoPageBackgroundComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const PoPageBlockedUserReason = {
    /** Sem definição; a tela exibirá conteúdo de bloqueio genérico. */
    None: 'none',
    /** Definição para tentativas de acesso esgotadas. */
    ExceededAttempts: 'exceededAttempts',
    /** Definição para senha expirada. */
    ExpiredPassword: 'expiredPassword',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PoPageBlockedUserReasonDefault = PoPageBlockedUserReason.None;
/** @type {?} */
const PoPageBlockedUserParamsDefault = { attempts: 5, days: 90, hours: 24 };
/**
 * \@description
 *
 * O componente `po-page-blocked-user` é utilizado como template para tela de bloqueio de usuário.
 * É possível definir entre três tipos de telas para alertar o usuário sobre um eventual bloqueio de login.
 *
 * Cada modelo de bloqueio possui uma imagem e texto adequados à situação.
 * Os textos das telas são pré-definidos e imutáveis, porém,
 * é possível estipular parâmetros como dias, horas e tentativas de acesso esgotadas.
 *
 * Por fim, há propriedades para adição de telefone e/ou email para contato e também a definição para a url de retorno.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@portinari/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 *
 * _______________
 *
 * #### Praticidade
 * O `po-page-blocked-user`, assim como suas propriedades, pode também ser transmitido diretamente pelas configuraçãos de rota e,
 * desta maneira, dispensa-se qualquer menção e/ou importação no restante da aplicação. O exemplo abaixo exemplifica
 * a forma dinâmica com a qual o template pode ser gerado se navegasse para uma rota denominada como `/access-denied`:
 *
 *
 * ```
 *   import { PoPageBlockedUserComponent, PoPageBlockedUserReason } from '\@portinari/portinari-templates';
 *
 *   ...
 *   const routes: Routes = [
 *     {
 *       path: 'access-denied', component: PoPageBlockedUserComponent, data: {
 *         contactEmail: 'dev.portinari\@portinari.com',
 *         contactPhone: '0800 1234 000',
 *         reason: PoPageBlockedUserReason.ExpiredPassword,
 *         urlBack: '/home'
 *       }
 *     }
 *     ...
 *   ];
 *
 * \@NgModule({
 *     imports: [RouterModule.forRoot(routes)],
 *     exports: [RouterModule]
 *   })
 *   export class AppRoutingModule { }
 * ```
 *
 * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
 *
 */
class PoPageBlockedUserBaseComponent {
    constructor() {
        this._params = Object.assign({}, PoPageBlockedUserParamsDefault);
        this._reason = PoPageBlockedUserReason.None;
        this._urlBack = '/';
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Designação de valores usados para a customização da mensagem de bloqueio.
     * Confira abaixo os valores pré-definidos.
     *
     * ```
     *  const customLiterals: PoPageBlockedUserReasonParams = {
     *    attempts: 5,
     *    days: 90,
     *    hours: 24
     *  };
     * ```
     *
     * > Salientamos a importância e atenção para configuração desses valores conforme definidos no projeto.
     *
     * > Veja os parâmetros customizáveis na interface `PoPageBlockedUserReasonParams`.
     *
     * @param {?} value
     * @return {?}
     */
    set params(value) {
        if (value instanceof Object) {
            /** @type {?} */
            const keys = Object.keys(value);
            /** @type {?} */
            const newParams = Object.assign({}, PoPageBlockedUserParamsDefault);
            keys.forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                newParams[key] = value[key];
            }));
            this._params = newParams;
        }
        else {
            this._params = Object.assign({}, PoPageBlockedUserParamsDefault);
        }
    }
    /**
     * @return {?}
     */
    get params() {
        return this._params;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Definição de motivo de bloqueio de usuário. As informações modificam conforme o motivo selecionado.
     *
     * > Veja os valores válidos no *enum* `PoPageBlockedUserReason`.
     *
     * \@default `PoPageBlockedUserReason.None`
     * @param {?} value
     * @return {?}
     */
    set reason(value) {
        this._reason = ((/** @type {?} */ (Object))).values(PoPageBlockedUserReason).includes(value) ? value : PoPageBlockedUserReasonDefault;
    }
    /**
     * @return {?}
     */
    get reason() {
        return this._reason;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação de retorno da página.
     *
     * \@default `/`
     * @param {?} url
     * @return {?}
     */
    set urlBack(url) {
        this._urlBack = url;
    }
    /**
     * @return {?}
     */
    get urlBack() {
        return this._urlBack;
    }
}
PoPageBlockedUserBaseComponent.propDecorators = {
    contactEmail: [{ type: Input, args: ['p-contact-email',] }],
    contactPhone: [{ type: Input, args: ['p-contact-phone',] }],
    params: [{ type: Input, args: ['p-params',] }],
    logo: [{ type: Input, args: ['p-logo',] }],
    reason: [{ type: Input, args: ['p-reason',] }],
    secondaryLogo: [{ type: Input, args: ['p-secondary-logo',] }],
    urlBack: [{ type: Input, args: ['p-url-back',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserBaseComponent.prototype._params;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserBaseComponent.prototype._reason;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserBaseComponent.prototype._urlBack;
    /**
     * \@optional
     *
     * \@description
     *
     * Valor para o email de contato que deve ser exibido. A ação está de acordo com o protocolo MAILTO e é possível definir
     * tanto rotas internas quanto externas.
     * @type {?}
     */
    PoPageBlockedUserBaseComponent.prototype.contactEmail;
    /**
     * \@optional
     *
     * \@description
     *
     * Valor para o telefone de contato que deve ser exibido. A ação está de acordo com o protocolo TEL.
     *
     * > A propriedade não contem tratamento de máscara, fica a critério do desenvolvedor defini-la.
     * @type {?}
     */
    PoPageBlockedUserBaseComponent.prototype.contactPhone;
    /**
     * Caminho para a logomarca localizada na parte superior, caso não seja definida ou seja inválida assume a logo padrão da PORTINARI.
     * @type {?}
     */
    PoPageBlockedUserBaseComponent.prototype.logo;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @type {?}
     */
    PoPageBlockedUserBaseComponent.prototype.secondaryLogo;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageBlockedUserButtonLiterals = {
    en: (/** @type {?} */ ({
        primaryButton: 'Back to home screen',
    })),
    es: (/** @type {?} */ ({
        primaryButton: 'Volver al inicio',
    })),
    pt: (/** @type {?} */ ({
        primaryButton: 'Voltar para o início',
    })),
    ru: (/** @type {?} */ ({
        primaryButton: 'Перейти к началу страницы',
    }))
};
/**
 * \@docsExtends PoPageBlockedUserBaseComponent
 *
 * \@example
 *
 * <example name="po-page-blocked-user-basic" title="Portinari Page Blocked User Basic">
 *  <file name="sample-po-page-blocked-user-basic/sample-po-page-blocked-user-basic.component.html"> </file>
 *  <file name="sample-po-page-blocked-user-basic/sample-po-page-blocked-user-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-blocked-user-labs" title="Portinari Page Blocked User Labs">
 *  <file name="sample-po-page-blocked-user-labs/sample-po-page-blocked-user-labs.component.html"> </file>
 *  <file name="sample-po-page-blocked-user-labs/sample-po-page-blocked-user-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-blocked-user-exceeded-attempts" title="Portinari Page Blocked User Exceeded Attempts">
 *  <file name="sample-po-page-blocked-user-exceeded-attempts/sample-po-page-blocked-user-exceeded-attempts.component.html"> </file>
 *  <file name="sample-po-page-blocked-user-exceeded-attempts/sample-po-page-blocked-user-exceeded-attempts.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-blocked-user-expired-password" title="Portinari Page Blocked User Expired Password">
 *  <file name="sample-po-page-blocked-user-expired-password/sample-po-page-blocked-user-expired-password.component.html"> </file>
 *  <file name="sample-po-page-blocked-user-expired-password/sample-po-page-blocked-user-expired-password.component.ts"> </file>
 * </example>
 */
class PoPageBlockedUserComponent extends PoPageBlockedUserBaseComponent {
    /**
     * @param {?} activatedRoute
     * @param {?} router
     */
    constructor(activatedRoute, router) {
        super();
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.literals = Object.assign({}, poPageBlockedUserButtonLiterals[poLocaleDefault], poPageBlockedUserButtonLiterals[browserLanguage()]);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    navigateTo(url) {
        isExternalLink(url) ? window.open(url) : this.router.navigate([url || '/']);
    }
    /**
     * @private
     * @param {?} object
     * @param {?} property
     * @return {?}
     */
    checkingForMetadataProperty(object, property) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
            return object[property];
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    checkingForRouteMetadata(data) {
        if (Object.keys(data).length !== 0) {
            this.contactEmail = this.checkingForMetadataProperty(data, 'contactEmail') || this.contactEmail;
            this.contactPhone = this.checkingForMetadataProperty(data, 'contactPhone') || this.contactPhone;
            this.reason = this.checkingForMetadataProperty(data, 'reason') || this.reason;
            this.urlBack = this.checkingForMetadataProperty(data, 'urlBack') || this.urlBack;
        }
    }
}
PoPageBlockedUserComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-blocked-user',
                template: "<div class=\"po-page-blocked-user-wrapper\">\n  <div class=\"po-page-background-wrap\">\n    <po-page-background\n      [p-hide-logo]=\"true\"\n      [p-logo]=\"logo\"\n      [p-secondary-logo]=\"secondaryLogo\">\n\n      <po-page-blocked-user-reason\n        [p-params]=\"params\"\n        [p-reason]=\"reason\">\n      </po-page-blocked-user-reason>\n\n      <div class=\"po-page-blocked-user-mobile-bottom-alignment\">\n        <po-page-blocked-user-contacts\n          [p-email]=\"contactEmail\"\n          [p-phone]=\"contactPhone\">\n        </po-page-blocked-user-contacts>\n\n        <div class=\"po-row\">\n          <po-button\n            class=\"po-lg-12 po-sm-12 po-page-blocked-user-button\"\n            p-type=\"primary\"\n            [p-label]=\"literals.primaryButton\"\n            (p-click)=\"navigateTo(urlBack)\">\n          </po-button>\n        </div>\n      </div>\n    </po-page-background>\n  </div>\n</div>\n"
            }] }
];
/** @nocollapse */
PoPageBlockedUserComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router }
];
if (false) {
    /** @type {?} */
    PoPageBlockedUserComponent.prototype.literals;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageBlockedUserContactItemMargin = 16;
class PoPageBlockedUserContactsComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.overflowItem = false;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.checkContactItemWidth();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.email || changes.phone) {
            this.checkContactItemWidth();
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkContactItemWidth() {
        if (!this.email || !this.phone) {
            this.overflowItem = true;
            return;
        }
        else {
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const phoneWidth = this.phoneItem.nativeElement.offsetWidth;
                /** @type {?} */
                const mailWidth = this.mailItem.nativeElement.offsetWidth;
                /** @type {?} */
                const contactGroupHalfWidth = this.contactGroup.nativeElement.offsetWidth / 2;
                this.overflowItem = phoneWidth > contactGroupHalfWidth || mailWidth > contactGroupHalfWidth - poPageBlockedUserContactItemMargin;
            }));
        }
        this.changeDetector.detectChanges();
    }
}
PoPageBlockedUserContactsComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-blocked-user-contacts',
                template: "<div #contactGroup class=\"po-page-blocked-user-contact-group po-row po-mb-3\">\n  <div *ngIf=\"phone\"\n    class=\"po-page-blocked-user-contact-item\"\n    [ngClass]=\"overflowItem ? 'po-md-12' : 'po-md-6'\">\n    <a\n      class=\"po-page-blocked-user-link po-clickable\"\n      [class.po-page-blocked-user-contact-content-inline]=\"overflowItem\"\n      href=\"tel:{{ phone }}\"\n      target=\"_self\">\n      <div class=\"po-page-blocked-user-contact-group-item\">\n        <span class=\"po-page-blocked-user-contact-icon po-icon po-icon-telephone po-pr-1\"></span>\n        <span #phoneItem class=\"po-page-blocked-user-contact-text po-font-text\">{{ phone }}</span>\n      </div>\n    </a>\n  </div>\n  <div *ngIf=\"email\"\n    class=\"po-page-blocked-user-contact-item po-page-blocked-user-contact-mail\"\n    [ngClass]=\"overflowItem ? 'po-md-12' : 'po-md-6'\">\n    <a\n      class=\"po-page-blocked-user-link po-clickable\"\n      [class.po-page-blocked-user-contact-content-inline]=\"overflowItem\"\n      href=\"mailto:{{ email }}\"\n      target=\"_self\">\n      <div class=\"po-page-blocked-user-contact-group-item\">\n        <span class=\"po-page-blocked-user-contact-icon po-icon po-icon-mail po-pr-1 \"></span>\n        <span #mailItem class=\"po-page-blocked-user-contact-text po-font-text\">{{ email }}</span>\n      </div>\n    </a>\n  </div>\n</div>"
            }] }
];
/** @nocollapse */
PoPageBlockedUserContactsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoPageBlockedUserContactsComponent.propDecorators = {
    email: [{ type: Input, args: ['p-email',] }],
    phone: [{ type: Input, args: ['p-phone',] }],
    contactGroup: [{ type: ViewChild, args: ['contactGroup', { static: true },] }],
    mailItem: [{ type: ViewChild, args: ['mailItem', { static: true },] }],
    phoneItem: [{ type: ViewChild, args: ['phoneItem', { static: true },] }]
};
if (false) {
    /** @type {?} */
    PoPageBlockedUserContactsComponent.prototype.literals;
    /** @type {?} */
    PoPageBlockedUserContactsComponent.prototype.overflowItem;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserContactsComponent.prototype.mailText;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserContactsComponent.prototype.phoneText;
    /** @type {?} */
    PoPageBlockedUserContactsComponent.prototype.email;
    /** @type {?} */
    PoPageBlockedUserContactsComponent.prototype.phone;
    /** @type {?} */
    PoPageBlockedUserContactsComponent.prototype.contactGroup;
    /** @type {?} */
    PoPageBlockedUserContactsComponent.prototype.mailItem;
    /** @type {?} */
    PoPageBlockedUserContactsComponent.prototype.phoneItem;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserContactsComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageBlockedUserLiterals = {
    none: {
        pt: {
            title: 'Opa!',
            firstPhrase: 'Tivemos que bloquear essa tela temporariamente.',
            secondPhrase: 'Mas não se preocupe! Basta fazer seu login novamente.'
        },
        en: {
            title: 'Oops!',
            firstPhrase: 'We had to temporarily block this screen.',
            secondPhrase: 'But do not worry! Just sign in again.'
        },
        es: {
            title: 'Opa!',
            firstPhrase: 'Tuvimos que bloquear esta pantalla temporalmente.',
            secondPhrase: '¡Pero no se preocupe! Sólo tienes que iniciar sesión de nuevo.'
        },
    },
    exceededAttempts: {
        pt: {
            title: 'Opa!',
            firstPhrase: `Para sua segurança, após {0} tentativa(s) de senha seu usuário fica bloqueado e não pode ser acessado em {1} hora(s) :( `,
            secondPhrase: 'Isso é para evitar que hackers invadam sua conta.',
            thirdPhrase: 'Mas não se preocupe! Se você for o dono da conta e apenas esqueceu sua senha, basta entrar em contato com o suporte.'
        },
        en: {
            title: 'Oops!',
            firstPhrase: `For your security, after {0} attempt(s) of password
        your user gets blocked and can not be accessed in {1} hour(s) :(`,
            secondPhrase: 'This is to prevent hackers from hacking into your account.',
            thirdPhrase: 'But do not worry! If you are the owner of the account and just forgot your password, just contact support.'
        },
        es: {
            title: 'Opa!',
            firstPhrase: `Para su seguridad, después de {0} intento(s) de contraseña
        su usuario queda bloqueado y no puede ser accedido en {1} hora(s) :(`,
            secondPhrase: 'Esto es para evitar que los hackers invadan su cuenta.',
            thirdPhrase: `¡Pero no se preocupe! Si usted es el dueño de la cuenta
        y acaba de olvidar su contraseña, simplemente póngase en contacto con el soporte.`
        }
    },
    expiredPassword: {
        pt: {
            title: 'Opa! Sua senha expirou',
            firstPhrase: `A cada {0} dia(s) é preciso criar uma nova senha por questão de segurança. Após esses {0} dia(s) seu acesso é bloqueado :(`,
            secondPhrase: 'Mas não se preocupe! Basta entrar em contato com o administrador do sistema.'
        },
        en: {
            title: 'Oops! Your Password has expired',
            firstPhrase: `Every {0} day(s) you need to create a new password for security reasons.
        After these {0} day(s) your access is blocked :(`,
            secondPhrase: 'But do not worry! Just contact your system administrator.'
        },
        es: {
            title: 'Opa! Su contraseña ha caducado',
            firstPhrase: `Cada {0} día(s) es necesario crear una nueva contraseña por razones de seguridad.
        Después de estos {0} día(s) su acceso está bloqueado :(`,
            secondPhrase: '¡Pero no se preocupe! Sólo tienes que ponerse en contacto con el administrador del sistema.'
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageBlockedUserReasonComponent {
    /**
     * @param {?} changeDetector
     */
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getLiterals();
    }
    /**
     * @return {?}
     */
    getImageByReasonType() {
        /** @type {?} */
        let reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return `./assets/images/${reasonImage}.svg`;
    }
    /**
     * @return {?}
     */
    getParams() {
        this.literalParams =
            this.reason === 'expiredPassword' ? [this.params.days, this.params.days] : [this.params.attempts, this.params.hours];
    }
    /**
     * @private
     * @return {?}
     */
    getLiterals() {
        this.getParams();
        this.literals = Object.assign({}, poPageBlockedUserLiterals[this.reason][poLocaleDefault], poPageBlockedUserLiterals[this.reason][browserLanguage()]);
        this.changeDetector.detectChanges();
    }
}
PoPageBlockedUserReasonComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-blocked-user-reason',
                template: "<div class=\"po-page-blocked-user-reason-content\">\n  <img \n    class=\"po-page-blocked-user-image po-mb-3\" \n    [src]=\"getImageByReasonType()\"> \n  <div class=\"po-page-blocked-user-header po-mb-md-3 po-row\">\n    <div class=\"po-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"po-page-blocked-user-text po-font-text po-row\">\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12 po-page-blocked-user-text-bold\">{{ literals?.firstPhrase | poI18n:literalParams }}</div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>"
            }] }
];
/** @nocollapse */
PoPageBlockedUserReasonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoPageBlockedUserReasonComponent.propDecorators = {
    params: [{ type: Input, args: ['p-params',] }],
    reason: [{ type: Input, args: ['p-reason',] }]
};
if (false) {
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.literalParams;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.literals;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.params;
    /** @type {?} */
    PoPageBlockedUserReasonComponent.prototype.reason;
    /**
     * @type {?}
     * @private
     */
    PoPageBlockedUserReasonComponent.prototype.changeDetector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-page-blocked-user.
 */
class PoPageBlockedUserModule {
}
PoPageBlockedUserModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    RouterModule,
                    PoModule,
                    PoPageBackgroundModule,
                ],
                declarations: [
                    PoPageBlockedUserComponent,
                    PoPageBlockedUserContactsComponent,
                    PoPageBlockedUserReasonComponent,
                ],
                exports: [
                    PoPageBlockedUserComponent,
                    PoPageBlockedUserContactsComponent,
                    PoPageBlockedUserReasonComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O componente `po-page-change-password` é utilizado como template para tela de cadastro ou alteração de senha.
 *
 * Apresenta dicas e regras para senhas mais seguras e também possibilidade de personalizar o redirecionamento para as telas
 * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas são pré-definidos e imutáveis.
 *
 * A propriedade `p-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteração de senha, bastando
 * definir uma url para POST das informações digitadas pelo usuário.  A flexibilidade e praticidade podem chegar a um nível em que o
 * desenvolvimento da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de cadastro/alteração de senha.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@portinari/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
class PoPageChangePasswordBaseComponent {
    constructor() {
        this._hideCurrentPassword = false;
        this._requirements = [];
        this._urlHome = '/';
        /**
         * \@optional
         *
         * \@description
         *
         * URL para a ação de retorno da página.
         *
         * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `p-hide-current-password` for
         * falsa.
         *
         * \@default `/`
         */
        this.urlBack = '/';
        /**
         * \@optional
         *
         * \@description
         *
         * Função executada ao submeter o form pelo botão salvar.
         *
         * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
         * método `openConfirmation`. Exemplo:
         *
         * ```
         * \@ViewChild(PoPageChangePasswordComponent) changePassword: PoPageChangePasswordComponent;
         *
         * onSubmit() {
         *  this.changePassword.openConfirmation();
         * }
         *
         * ```
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-new-password`.
         */
        this.submit = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde o campo `Senha atual` para que o template seja para criação de senha.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideCurrentPassword(value) {
        this._hideCurrentPassword = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get hideCurrentPassword() {
        return this._hideCurrentPassword;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação do link `Esqueceu a senha`.
     *
     * A propriedade aceita os seguintes tipos:
     *
     * - **String**: informe uma url externa ou uma rota válida;
     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
     * ```
     * <po-page-change-password>
     *      [recovery]="this.myFunc.bind(this)";
     * </po-page-change-password>
     * ```
     *
     * - **PoPageChangePasswordRecovery**: cria-se vínculo automático com o template **po-modal-password-recovery**.
     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
     *   **email** para contato e **máscara** do campo de telefone.
     *
     * > Caso não tenha valor o link `Esqueceu a senha` desaparece.
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
        if (isTypeof(value, 'string')) {
            this.recoveryUrlType = isExternalLink(value) ? 'externalLink' : 'internalLink';
        }
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de regras para criação e alteração de senha.
     * @param {?} value
     * @return {?}
     */
    set requirements(value) {
        this._requirements = value || [];
        this.showRequirements = this._requirements.length > 0;
    }
    /**
     * @return {?}
     */
    get requirements() {
        return this._requirements;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método
     * `openConfirmation`.
     *
     * \@default `/`
     * @param {?} value
     * @return {?}
     */
    set urlHome(value) {
        this._urlHome = value;
        this.modalAction.action = this.navigateTo.bind(this, this.urlHome);
    }
    /**
     * @return {?}
     */
    get urlHome() {
        return this._urlHome;
    }
}
PoPageChangePasswordBaseComponent.propDecorators = {
    hideCurrentPassword: [{ type: Input, args: ['p-hide-current-password',] }],
    logo: [{ type: Input, args: ['p-logo',] }],
    recovery: [{ type: Input, args: ['p-recovery',] }],
    requirements: [{ type: Input, args: ['p-requirements',] }],
    secondaryLogo: [{ type: Input, args: ['p-secondary-logo',] }],
    token: [{ type: Input, args: ['p-token',] }],
    urlBack: [{ type: Input, args: ['p-url-back',] }],
    urlNewPassword: [{ type: Input, args: ['p-url-new-password',] }],
    urlHome: [{ type: Input, args: ['p-url-home',] }],
    submit: [{ type: Output, args: ['p-submit',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordBaseComponent.prototype._hideCurrentPassword;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordBaseComponent.prototype._recovery;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordBaseComponent.prototype._requirements;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordBaseComponent.prototype._urlHome;
    /**
     * @type {?}
     * @protected
     */
    PoPageChangePasswordBaseComponent.prototype.validatorChange;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.confirmPassword;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.currentPassword;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.modalAction;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.newPassword;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.recoveryUrlType;
    /** @type {?} */
    PoPageChangePasswordBaseComponent.prototype.showRequirements;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada na parte superior.
     *
     * > Caso seja indefinida o espaço se mantém preservado porém vazio.
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.logo;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.secondaryLogo;
    /**
     * Token para solicitação de troca/recuperação de senha.
     *
     * > Esta propriedade será ignorada caso exista um token como parâmetro na URL inicial do template.
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.token;
    /**
     * \@optional
     *
     * \@description
     *
     * URL para a ação de retorno da página.
     *
     * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `p-hide-current-password` for
     * falsa.
     *
     * \@default `/`
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.urlBack;
    /**
     * Endpoint usado pelo template para realizar um POST. Quando preenchido, o método `p-submit` será ignorado e o componente adquirirá
     * automatização para o processo de cadastro/troca de senha.
     *
     * ### Processo
     * Ao digitar um valor válido nos campos de senha e pressionar **salvar**,
     * o componente fará uma requisição `POST` na url especificada nesta propriedade passando o objeto contendo os valores definidos pelo
     * usuário.
     *
     * ```
     * body {
     *  token?: token,
     *  oldPassword?: oldPassword,
     *  newPassword: newPassword
     * }
     * ```
     *
     * O código de resposta HTTP de status esperado é `204`.
     *
     * Em caso de **sucesso**, será exibida a modal de confirmação de senha alterada.
     *
     * > O token será informado pela propriedade `p-token`do componente ou por um *query parameter* na URL do template.
     *
     * *Processo finalizado.*
     *
     * _______________
     *
     * #### Praticidade
     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
     * dispensa-se qualquer menção e/ou importação do componente `po-page-change-password` no restante da aplicação. O exemplo abaixo
     * exemplifica a forma dinâmica com a qual o template de tela de troca de senha pode ser gerado ao navegar para rota `/change-password`, e
     * também como ele se comunica com o serviço para efetuação do processo de troca de senha do usuário e solicitação de nova senha.
     * Basta definir nas configurações de rota:
     *
     *
     * ```
     *   import { PoModalPasswordRecoveryType, PoPageChangePasswordComponent } from '\@portinari/portinari-templates';
     *
     *   ...
     *   const routes: Routes = [
     *     {
     *       path: 'change-password', component: PoPageChangePasswordComponent, data: {
     *         serviceApi: 'https://portinari.io/sample/api/new-password',
     *         recovery: {
     *           url: 'https://portinari.io/sample/api/users',
     *           type: PoModalPasswordRecoveryType.All,
     *           contactMail: 'dev.portinari\@portinari.com',
     *           phoneMask: '9-999-999-9999'
     *         }
     *       }
     *     }
     *     ...
     *   ];
     *
     * \@NgModule({
     *     imports: [RouterModule.forRoot(routes)],
     *     exports: [RouterModule]
     *   })
     *   export class AppRoutingModule { }
     * ```
     *
     *
     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de troca de senha. E `recovery` é a interface
     * `PoPageChangePasswordRecovery` responsável pelas especificações contidas na modal de recuperação de senha.
     *
     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
     *
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.urlNewPassword;
    /**
     * \@optional
     *
     * \@description
     *
     * Função executada ao submeter o form pelo botão salvar.
     *
     * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo
     * método `openConfirmation`. Exemplo:
     *
     * ```
     * \@ViewChild(PoPageChangePasswordComponent) changePassword: PoPageChangePasswordComponent;
     *
     * onSubmit() {
     *  this.changePassword.openConfirmation();
     * }
     *
     * ```
     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-new-password`.
     * @type {?}
     */
    PoPageChangePasswordBaseComponent.prototype.submit;
    /**
     * @abstract
     * @param {?} url
     * @return {?}
     */
    PoPageChangePasswordBaseComponent.prototype.navigateTo = function (url) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageChangePasswordLiterals = {
    en: (/** @type {?} */ ({
        backButton: 'Back',
        confirmPassword: 'Confirm password',
        createNewPassword: 'Create new password',
        createNewPasswordPhrase: 'Protect your account with a personal password created by you',
        currentPassword: 'Current password',
        enterSystemButton: 'Enter the system',
        forgotPassword: 'Forgot your password?',
        newPassword: 'New password',
        passwordSuccessfullyCreated: 'Password successfully created!',
        passwordSuccessfullyUpdated: 'Password successfully updated!',
        requirements: 'Password requirements',
        safetyTips: 'Safety tips!',
        safetyTipsFirst: 'is used in other accounts;',
        safetyTipsPhrase: 'Avoid a password that:',
        safetyTipsSecond: 'has personal information like your name, nickname or family names;',
        safetyTipsThird: 'that uses obvious sequences like "123" or obvious words like "password";',
        saveButton: 'Save',
    })),
    es: (/** @type {?} */ ({
        backButton: 'Volver',
        confirmPassword: 'Confirmar seña',
        createNewPassword: 'Crear nueva contraseña',
        createNewPasswordPhrase: 'Proteger su cuenta con una contraseña personal creada por usted',
        currentPassword: 'Contraseña actual',
        enterSystemButton: 'Entrar en el sistema',
        forgotPassword: '¿Olvidaste tu contraseña?',
        newPassword: 'Nueva contraseña',
        passwordSuccessfullyCreated: 'Contraseña creada correctamente!',
        passwordSuccessfullyUpdated: 'Contraseña correctamente actualizada!',
        requirements: 'Requisitos de contraseña',
        safetyTips: 'Consejos de seguridad!',
        safetyTipsFirst: 'se utilice en otras cuentas;',
        safetyTipsPhrase: 'Evite una contraseña que:',
        safetyTipsSecond: 'utiliza información personal como su nombre, apellido o nombre de familia;',
        safetyTipsThird: 'utilice secuencias muy obvias como "1234" o "abcd" o palabras obvias como "contraseña";',
        saveButton: 'Guardar',
    })),
    pt: (/** @type {?} */ ({
        backButton: 'Voltar',
        confirmPassword: 'Confirmar senha',
        createNewPassword: 'Criar nova senha',
        createNewPasswordPhrase: 'Proteja sua conta com uma senha pessoal criada por você',
        currentPassword: 'Senha atual',
        enterSystemButton: 'Entrar no sistema',
        forgotPassword: 'Esqueceu sua senha?',
        newPassword: 'Nova senha',
        passwordSuccessfullyCreated: 'Senha criada com sucesso!',
        passwordSuccessfullyUpdated: 'Senha alterada com sucesso!',
        requirements: 'Requisitos de senha',
        safetyTips: 'Dicas de segurança!',
        safetyTipsFirst: 'seja usada em outras contas;',
        safetyTipsPhrase: 'Evite uma senha que:',
        safetyTipsSecond: 'usa informações pessoais como seu nome, apelido ou nome de familiares;',
        safetyTipsThird: 'use sequências muito óbvias como "1234" ou "abcd" ou palavras óbvias como “senha”;',
        saveButton: 'Salvar',
    })),
    ru: (/** @type {?} */ ({
        backButton: 'возвращение',
        confirmPassword: 'Подтвердите пароль',
        createNewPassword: 'Создать новый пароль',
        createNewPasswordPhrase: 'Защитите свой аккаунт с помощью личного пароля.',
        currentPassword: 'Текущий пароль',
        enterSystemButton: 'Вход в систему',
        forgotPassword: 'Забыли пароль?',
        newPassword: 'Новый пароль',
        passwordSuccessfullyCreated: 'Пароль успешно создан!',
        passwordSuccessfullyUpdated: 'Пароль успешно изменен!',
        requirements: 'Требования к паролю',
        safetyTips: 'Советы по безопасности!',
        safetyTipsFirst: 'использоваться на других счетах;',
        safetyTipsPhrase: 'Избегайте пароля, который:',
        safetyTipsSecond: 'использует личную информацию, такую ​​как ваше имя, фамилию или фамилию;',
        safetyTipsThird: 'используйте очень очевидные строки, такие как "1234" или "abcd", или такие очевидные слова, как "пароль";',
        saveButton: 'экономить',
    }))
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageChangePasswordService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} item
     * @return {?}
     */
    post(url, item) {
        return this.http.post(url, item, { observe: 'response' });
    }
}
PoPageChangePasswordService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoPageChangePasswordService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageChangePasswordBaseComponent
 *
 * \@example
 *
 * <example name="po-page-change-password-basic" title="Portinari Page Change Password Basic">
 *  <file name="sample-po-page-change-password-basic/sample-po-page-change-password-basic.component.html"> </file>
 *  <file name="sample-po-page-change-password-basic/sample-po-page-change-password-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-change-password-labs" title="Portinari Page Change Password Labs">
 *  <file name="sample-po-page-change-password-labs/sample-po-page-change-password-labs.component.html"> </file>
 *  <file name="sample-po-page-change-password-labs/sample-po-page-change-password-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-change-password-modify" title="Portinari Page Change Password Modify">
 *  <file name="sample-po-page-change-password-modify/sample-po-page-change-password-modify.component.html"> </file>
 *  <file name="sample-po-page-change-password-modify/sample-po-page-change-password-modify.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-change-password-create" title="Portinari Page Change Password Create">
 *  <file name="sample-po-page-change-password-create/sample-po-page-change-password-create.component.html"> </file>
 *  <file name="sample-po-page-change-password-create/sample-po-page-change-password-create.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-change-password-request" title="Portinari Page Change Password Request">
 *  <file name="sample-po-page-change-password-request/sample-po-page-change-password-request.component.html"> </file>
 *  <file name="sample-po-page-change-password-request/sample-po-page-change-password-request.component.ts"> </file>
 * </example>
 */
class PoPageChangePasswordComponent extends PoPageChangePasswordBaseComponent {
    /**
     * @param {?} activatedRoute
     * @param {?} route
     * @param {?} router
     * @param {?} service
     * @param {?} poComponentInjector
     * @param {?} viewRef
     */
    constructor(activatedRoute, route, router, service, poComponentInjector, viewRef) {
        super();
        this.activatedRoute = activatedRoute;
        this.route = route;
        this.router = router;
        this.service = service;
        this.poComponentInjector = poComponentInjector;
        this.literals = Object.assign({}, poPageChangePasswordLiterals[poLocaleDefault], poPageChangePasswordLiterals[browserLanguage()]);
        this.componentRef = null;
        this.modalAction = {
            action: this.navigateTo.bind(this, this.urlHome),
            label: this.literals.enterSystemButton
        };
        this.parentRef = viewRef['_view']['component'];
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.urlNewPassword) {
            this.subscribeToTokenParameter();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.newPasswordSubscription) {
            this.newPasswordSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
    }
    /**
     * @param {?} url
     * @return {?}
     */
    navigateTo(url) {
        isExternalLink(url) ? window.open(url) : this.router.navigate([url || '/']);
    }
    /**
     * @param {?} recovery
     * @return {?}
     */
    onForgotPasswordClick(recovery) {
        if (isTypeof(recovery, 'function')) {
            recovery();
        }
        else {
            this.createModalPasswordRecoveryComponent(recovery);
        }
    }
    /**
     * @return {?}
     */
    onLoginSubmit() {
        /** @type {?} */
        const form = this.getLoginForm();
        if (this.urlNewPassword) {
            this.postUrlNewPassword(form);
        }
        else if (this.submit && this.submit.observers.length) {
            this.emitSubmit(form);
        }
    }
    /**
     * Abre uma modal de confirmação com texto, imagem e botão que redireciona para o link definido na propriedade `p-url-home`
     * @return {?}
     */
    openConfirmation() {
        this.modal.open();
    }
    /**
     * @return {?}
     */
    validatePassword() {
        /** @type {?} */
        const controls = this.passwordForm.form.controls;
        /** @type {?} */
        const controlConfirmPassword = controls['confirmPassword'];
        /** @type {?} */
        const controlNewPassword = controls['newPassword'];
        if (!this.newPassword) {
            this.setFormErrors({ 'required': true }, [controlNewPassword]);
        }
        else if (!this.confirmPassword) {
            this.setFormErrors({ 'required': true }, [controlConfirmPassword]);
        }
        else if (this.newPassword && this.confirmPassword && this.newPassword !== this.confirmPassword) {
            this.setFormErrors({ 'equalPassword': true }, [controlNewPassword, controlConfirmPassword]);
        }
        else {
            this.setFormErrors(null, [controlConfirmPassword, controlNewPassword]);
        }
        if (this.requirements.length && this.requirements.find((/**
         * @param {?} requirement
         * @return {?}
         */
        requirement => this.validateRequirement(requirement) === false))) {
            this.setFormErrors({ 'requirement': true }, [controlNewPassword]);
        }
    }
    /**
     * @param {?} requirement
     * @return {?}
     */
    validateRequirement(requirement) {
        return typeof requirement.status === 'function' ? requirement.status.call(this.parentRef, this.newPassword) : requirement.status;
    }
    /**
     * @private
     * @param {?} object
     * @param {?} property
     * @return {?}
     */
    checkingForMetadataProperty(object, property) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
            return object[property];
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    checkingForRouteMetadata(data) {
        if (Object.keys(data).length !== 0) {
            this.urlNewPassword = this.checkingForMetadataProperty(data, 'serviceApi') || this.urlNewPassword;
            this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;
            this.hideCurrentPassword = this.checkingForMetadataProperty(data, 'hideCurrentPassword') || this.hideCurrentPassword;
        }
    }
    /**
     * @private
     * @param {?} recovery
     * @return {?}
     */
    createModalPasswordRecoveryComponent(recovery) {
        if (this.componentRef) {
            this.poComponentInjector.destroyComponentInApplication(this.componentRef);
        }
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoModalPasswordRecoveryComponent);
        this.componentRef.instance.recovery = recovery.url;
        this.componentRef.instance.contactEmail = recovery.contactMail;
        this.componentRef.instance.phoneMask = recovery.phoneMask;
        this.componentRef.instance.type = recovery.type || PoModalPasswordRecoveryType.Email;
        this.componentRef.changeDetectorRef.detectChanges();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.componentRef.instance.open();
        }));
    }
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    emitSubmit(form) {
        this.submit.emit(form);
    }
    /**
     * @private
     * @return {?}
     */
    getLoginForm() {
        return {
            currentPassword: this.currentPassword,
            newPassword: this.newPassword
        };
    }
    /**
     * @private
     * @param {?} form
     * @return {?}
     */
    postUrlNewPassword(form) {
        form['token'] = this.token;
        this.service.post(this.urlNewPassword, form).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            if (response.status === 204) {
                this.openConfirmation();
            }
        }));
    }
    /**
     * @private
     * @param {?} error
     * @param {?=} controls
     * @return {?}
     */
    setFormErrors(error, controls) {
        controls.forEach((/**
         * @param {?} control
         * @return {?}
         */
        control => {
            control.setErrors(error);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    subscribeToTokenParameter() {
        this.route.queryParams.subscribe((/**
         * @param {?} params
         * @return {?}
         */
        params => {
            /** @type {?} */
            const token = params['token'];
            if (token) {
                this.token = token;
            }
        }));
    }
}
PoPageChangePasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-change-password',
                template: "<div class=\"po-page-change-password-wrapper\" #pageChangePassword>\n  <div class=\"po-page-change-password-container\">\n    <po-page-background class=\"po-page-change-password\"\n      [p-logo]=\"logo\"\n      [p-secondary-logo]=\"secondaryLogo\">\n\n      <div class=\"po-page-blocked-user-header po-row\">\n        <div class=\"po-md-12\">{{literals.createNewPassword}}</div>\n        <div class=\"po-md-12 po-text-center po-font-text\">\n          {{literals.createNewPasswordPhrase}}\n        </div>\n      </div>\n\n      <form #passwordForm=\"ngForm\">\n\n        <div class=\"po-row po-mt-3 po-mt-sm-1\">\n          <div class=\"po-md-6\"\n            [ngClass]=\"{'po-offset-md-3 po-offset-lg-3 po-offset-xl-3': !showRequirements}\">\n            <div *ngIf=\"!hideCurrentPassword\">\n              <po-password\n                name=\"currentPassword\"\n                [(ngModel)]=\"currentPassword\"\n                p-required\n                [p-label]=\"literals.currentPassword\">\n              </po-password>\n            </div>\n            <div *ngIf=\"!hideCurrentPassword && recovery\" class=\"po-text-center po-mb-sm-1 po-mb-2\">\n              <a *ngIf=\"recoveryUrlType === 'internalLink'\"\n                class=\"po-font-text-bold po-page-change-password-forgot-password\"\n                [routerLink]=\"recovery\">\n                {{literals.forgotPassword}}\n              </a>\n              <a *ngIf=\"recoveryUrlType === 'externalLink'\"\n                class=\"po-font-text-bold po-page-change-password-forgot-password\"\n                [href]=\"recovery\">\n                {{literals.forgotPassword}}\n              </a>\n              <a *ngIf=\"!recoveryUrlType\"\n                class=\"po-font-text-bold po-page-change-password-forgot-password po-clickable\"\n                (click)=\"onForgotPasswordClick(recovery)\">\n                {{literals.forgotPassword}}\n              </a>\n            </div>\n            <div>\n              <po-password\n                name=\"newPassword\"\n                [(ngModel)]=\"newPassword\"\n                p-required\n                [p-label]=\"literals.newPassword\"\n                (p-change-model)=\"validatePassword()\">\n              </po-password>\n            </div>\n            <div>\n              <po-password\n                name=\"confirmPassword\"\n                [(ngModel)]=\"confirmPassword\"\n                p-required\n                [p-label]=\"literals.confirmPassword\"\n                (p-change-model)=\"validatePassword()\">\n              </po-password>\n            </div>\n          </div>\n          <div *ngIf=\"showRequirements\"\n            class=\"po-md-6 po-page-change-password-required-container\">\n            <po-container>\n              <ul class=\"po-page-change-password-required-list\">\n                <li class=\"po-page-change-password-required-item\">\n                  <p class=\"po-mb-1 po-font-text-bold po-page-change-password-required-title\">\n                    {{literals?.requirements}}\n                  </p>\n                </li>\n                <li *ngFor=\"let requirement of requirements\"\n                  class=\"po-page-change-password-required-item\">\n                  <span class=\"po-icon po-page-change-password-required-icon\"\n                    [ngClass]=\"validateRequirement(requirement) ? 'po-icon-ok po-page-change-password-required-ok' : 'po-icon-minus po-page-change-password-required-minus'\">\n                  </span>\n                  <p class=\"po-page-change-password-required-text po-font-text\">\n                    {{requirement.requirement}}\n                  </p>\n                </li>\n              </ul>\n            </po-container>\n          </div>\n        </div>\n      </form>\n\n      <po-divider class=\"po-sm-12\"></po-divider>\n\n      <div class=\"po-page-change-password-tips po-row\">\n        <div class=\"po-md-2 po-mr-3\">\n          <img\n            class=\"po-page-change-password-lock-image po-mb-3\"\n            alt=\"Blocked user image\"\n            src=\"./assets/images/big-lock.svg\"\n          />\n        </div>\n        <div class=\"po-md-9 po-page-change-password-tips-text\">\n          <div class=\"po-font-text-bold po-pb-1\">{{literals.safetyTips}}</div>\n          <div class=\"po-font-text-small\">\n            <div class=\"po-row po-pb-1\">{{literals.safetyTipsPhrase}}</div>\n            <div class=\"po-row po-pb-1\">\u2022 {{literals.safetyTipsFirst}}</div>\n            <div class=\"po-row po-pb-1\">\u2022 {{literals.safetyTipsSecond}}</div>\n            <div class=\"po-row po-pb-1\">\u2022 {{literals.safetyTipsThird}}</div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"po-page-change-password-buttons po-row\">\n\n        <po-divider class=\"po-sm-12 po-mobile-only\"></po-divider>\n\n        <po-button *ngIf=\"!hideCurrentPassword\"\n          class=\"po-sm-6 po-mb-sm-1\"\n          [p-label]=\"literals.backButton\"\n          (p-click)=\"navigateTo(urlBack)\">\n        </po-button>\n\n        <po-button\n          [ngClass]=\"hideCurrentPassword ? 'po-md-12':'po-sm-6'\"\n          p-type=\"primary\"\n          [p-disabled]=\"passwordForm.invalid\"\n          [p-label]=\"literals.saveButton\"\n          (p-click)=\"onLoginSubmit()\">\n        </po-button>\n\n      </div>\n\n    </po-page-background>\n\n  </div>\n</div>\n\n<po-modal\n  [p-primary-action]=\"modalAction\"\n  p-hide-close\n  p-size=\"auto\"\n  [p-title]=\"hideCurrentPassword ? literals.passwordSuccessfullyCreated : literals.passwordSuccessfullyUpdated\">\n\n  <div class=\"po-text-center\">\n    <img\n      alt=\"Blocked user image\"\n      class=\"po-page-change-password-lock-image po-mb-3\"\n      src=\"./assets/images/success.svg\"\n    />\n  </div>\n</po-modal>\n"
            }] }
];
/** @nocollapse */
PoPageChangePasswordComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: ActivatedRoute },
    { type: Router },
    { type: PoPageChangePasswordService },
    { type: PoComponentInjectorService },
    { type: ViewContainerRef }
];
PoPageChangePasswordComponent.propDecorators = {
    modal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }],
    pageChangePassword: [{ type: ViewChild, args: ['pageChangePassword', { read: ViewContainerRef, static: true },] }],
    passwordForm: [{ type: ViewChild, args: ['passwordForm', { read: NgForm, static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordComponent.prototype.newPasswordSubscription;
    /** @type {?} */
    PoPageChangePasswordComponent.prototype.literals;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordComponent.prototype.componentRef;
    /** @type {?} */
    PoPageChangePasswordComponent.prototype.modalAction;
    /** @type {?} */
    PoPageChangePasswordComponent.prototype.parentRef;
    /** @type {?} */
    PoPageChangePasswordComponent.prototype.modal;
    /** @type {?} */
    PoPageChangePasswordComponent.prototype.pageChangePassword;
    /** @type {?} */
    PoPageChangePasswordComponent.prototype.passwordForm;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordComponent.prototype.route;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordComponent.prototype.service;
    /**
     * @type {?}
     * @private
     */
    PoPageChangePasswordComponent.prototype.poComponentInjector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-page-change-password.
 */
class PoPageChangePasswordModule {
}
PoPageChangePasswordModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoModule,
                    PoPageBackgroundModule
                ],
                declarations: [
                    PoPageChangePasswordComponent
                ],
                entryComponents: [
                    PoModalPasswordRecoveryComponent
                ],
                providers: [
                    PoPageChangePasswordService
                ],
                exports: [
                    PoPageChangePasswordComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageDynamicService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-PORTINARI-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
        this.metadata = config.metadata || this.metadata;
    }
    /**
     * @template T
     * @param {?=} type
     * @return {?}
     */
    getMetadata(type = 'list') {
        /** @type {?} */
        const key = `${this.endpoint}-${type}-metadata`;
        /** @type {?} */
        const cache = JSON.parse(localStorage.getItem(key)) || {};
        /** @type {?} */
        const metadataUrlBase = this.metadata || `${this.endpoint}/metadata`;
        /** @type {?} */
        const url = `${metadataUrlBase}?type=${type}&version=${cache.version || ''}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.version === cache.version) {
                return cache;
            }
            localStorage.setItem(key, JSON.stringify(response));
            return Object.assign({}, cache, response);
        })));
    }
    // Deleta um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    deleteResource(id) {
        return this.http.delete(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Deleta recursos em lote
    /**
     * @param {?} ids
     * @return {?}
     */
    deleteResources(ids) {
        return this.http.request('delete', `${this.endpoint}`, { headers: this.headers, body: ids });
    }
    // Busca uma lista de recursos
    /**
     * @param {?=} params
     * @return {?}
     */
    getResources(params) {
        return this.http.get(this.endpoint, { headers: this.headers, params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers });
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        return this.http.post(`${this.endpoint}`, resource, { headers: this.headers });
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        return this.http.put(`${this.endpoint}/${id}`, resource, { headers: this.headers });
    }
}
PoPageDynamicService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PoPageDynamicService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ PoPageDynamicService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PoPageDynamicService_Factory() { return new PoPageDynamicService(ɵɵinject(HttpClient)); }, token: PoPageDynamicService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicService.prototype.endpoint;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicService.prototype.metadata;
    /** @type {?} */
    PoPageDynamicService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageDynamicDetailLiteralsDefault = {
    en: {
        pageActionEdit: 'Edit',
        pageActionRemove: 'Delete',
        pageActionBack: 'Back',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        removeNotificationSuccess: 'Item deleted successfully.',
        registerNotFound: 'Register not found.'
    },
    es: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Borrar',
        pageActionBack: 'Regreso',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        removeNotificationSuccess: 'Elemento eliminado con éxito.',
        registerNotFound: 'Registro no encontrado.'
    },
    pt: {
        pageActionEdit: 'Editar',
        pageActionRemove: 'Excluir',
        pageActionBack: 'Voltar',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        removeNotificationSuccess: 'Item excluído com sucesso.',
        registerNotFound: 'Registro não encontrado.'
    }
};
/**
 * \@description
 *
 * O `po-page-dynamic-detail` é uma página que serve para exibir registros em detalhes,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * \@example
 *
 * <example name="po-page-dynamic-detail-basic" title="Portinari Page Dynamic Detail Basic">
 *  <file name="sample-po-page-dynamic-detail-basic/sample-po-page-dynamic-detail-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-detail-basic/sample-po-page-dynamic-detail-basic.component.ts"> </file>
 * </example>
 */
class PoPageDynamicDetailComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} poNotification
     * @param {?} poDialogService
     * @param {?} poPageDynamicService
     */
    constructor(router, activatedRoute, poNotification, poDialogService, poPageDynamicService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poNotification = poNotification;
        this.poDialogService = poDialogService;
        this.poPageDynamicService = poPageDynamicService;
        this._actions = {};
        this._autoRouter = false;
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.literals = Object.assign({}, poPageDynamicDetailLiteralsDefault[poLocaleDefault], poPageDynamicDetailLiteralsDefault[browserLanguage()]);
        this.model = {};
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Define as ações da página de acordo com a interface `PoPageDynamicDetailActions`.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    /**
     * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * Lista dos campos exibidos na página.
     * @param {?} value
     * @return {?}
     */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this.fields);
        this._duplicates = this.getDuplicatesByFields(this.fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        if (this.activatedRoute.snapshot.data.serviceApi) {
            this.serviceApi = this.activatedRoute.snapshot.data.serviceApi;
            this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadMetadata(paramId);
        }
        else {
            this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi });
            this.loadData(paramId);
        }
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    confirmRemove(path) {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, path)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = mapObjectByProperties(item, this.keys);
        return valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @return {?}
     */
    goBack( /*path*/) {
        window.history.back();
        // if (path) {
        //   this.navigateTo({ path, component: PoPageDynamicEditComponent });
        // } else {
        //   window.history.back();
        // }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    loadData(id) {
        this.poPageDynamicService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = undefined;
            this.actions = undefined;
        }));
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    loadMetadata(id) {
        this.poPageDynamicService.getMetadata('detail').toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData(id);
        }));
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        () => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }
            })));
            this.navigateTo(route, true);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    openEdit(path) {
        /** @type {?} */
        const url = this.resolveUrl(this.model, path);
        // this.navigateTo({ path, url, component: PoPageDynamicEditComponent });
        this.navigateTo({ path, url });
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    remove(path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(this.model);
        this.poPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.poNotification.success(this.literals.removeNotificationSuccess);
            this.navigateTo({ path: path });
            // this.navigateTo({ path: path, component: PoPageDynamicTableComponent });
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?=} actions
     * @return {?}
     */
    getPageActions(actions = {}) {
        /** @type {?} */
        const pageActions = [];
        if (actions.edit) {
            pageActions.push({ label: this.literals.pageActionEdit, action: this.openEdit.bind(this, actions.edit) });
        }
        if (actions.remove) {
            pageActions.push({ label: this.literals.pageActionRemove, action: this.confirmRemove.bind(this, actions.remove) });
        }
        if (actions.back === undefined || actions.back) {
            pageActions.push({ label: this.literals.pageActionBack, action: this.goBack.bind(this, actions.back) });
        }
        return pageActions;
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getKeysByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDuplicatesByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
}
PoPageDynamicDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-detail',
                template: "<po-page-default\n  [p-actions]=\"pageActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then viewFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</po-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <po-widget>\n    <span class=\"po-icon po-icon-info\"></span>\n    <span class=\"po-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </po-widget>\n\n</ng-template>\n\n<ng-template #viewFieldsTemplate>\n\n  <po-dynamic-view [p-fields]=\"fields\" [p-value]=\"model\">\n  </po-dynamic-view>\n\n</ng-template>\n",
                providers: [PoPageDynamicService]
            }] }
];
/** @nocollapse */
PoPageDynamicDetailComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoNotificationService },
    { type: PoDialogService },
    { type: PoPageDynamicService }
];
PoPageDynamicDetailComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    autoRouter: [{ type: Input, args: ['p-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    fields: [{ type: Input, args: ['p-fields',] }],
    title: [{ type: Input, args: ['p-title',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._autoRouter;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._duplicates;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._keys;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype._pageActions;
    /** @type {?} */
    PoPageDynamicDetailComponent.prototype.literals;
    /** @type {?} */
    PoPageDynamicDetailComponent.prototype.model;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDynamicDetailComponent.prototype.breadcrumb;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageDynamicDetailComponent.prototype.title;
    /**
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso que serão exibido.
     *
     * Caso a ação `remove` estiver configurada, será feito uma requisição de exclusão nesse mesmo endpoint passando os campos
     * setados como `key: true`.
     *
     * > `DELETE {end-point}/{keys}`
     *
     * ```
     *  <po-page-dynamic-detail
     *    [p-actions]="{ remove: '/' }"
     *    [p-fields]="[ { property: 'id', key: true } ]"
     *    p-service="/api/po-samples/v1/people"
     *    ...>
     *  </po-page-dynamic-detail>
     * ```
     *
     * Resquisição disparada, onde a propriedade `id` é igual a 2:
     *
     * ```
     *  DELETE /api/po-samples/v1/people/2 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * > Caso esteja usando metadados com o template, será disparado uma requisição na inicialização do template para buscar
     * > os metadados da página passando o tipo do metadado esperado e a versão cacheada pelo browser.
     * >
     * > `GET {end-point}/metadata?type=detail&version={version}`
     * @type {?}
     */
    PoPageDynamicDetailComponent.prototype.serviceApi;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.poNotification;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.poDialogService;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicDetailComponent.prototype.poPageDynamicService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço do po-page-dynamic-service.
 */
class PoPageDynamicModule {
}
PoPageDynamicModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                providers: [
                    PoPageDynamicService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-page-dynamic-detail.
 */
class PoPageDynamicDetailModule {
}
PoPageDynamicDetailModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoDynamicModule,
                    PoModalModule,
                    PoPageModule,
                    PoWidgetModule,
                    PoPageDynamicModule
                ],
                declarations: [
                    PoPageDynamicDetailComponent
                ],
                exports: [
                    PoPageDynamicDetailComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageDynamicEditLiteralsDefault = {
    en: {
        cancelConfirmMessage: 'Are you sure you want to cancel this operation?',
        detailActionNew: 'New',
        pageActionCancel: 'Cancel',
        pageActionSave: 'Save',
        pageActionSaveNew: 'Save and new',
        registerNotFound: 'Register not found.',
        saveNewNotificationSuccessSave: 'Resource successfully saved.',
        saveNewNotificationSuccessUpdate: 'Resource successfully updated.',
        saveNewNotificationWarning: 'Form must be filled out correctly.',
        saveNotificationSuccessSave: 'Resource successfully saved.',
        saveNotificationSuccessUpdate: 'Resource successfully updated.',
        saveNotificationWarning: 'Form must be filled out correctly.',
    },
    es: {
        cancelConfirmMessage: 'Está seguro de que desea cancelar esta operación?',
        detailActionNew: 'Nuevo',
        pageActionCancel: 'Cancelar',
        pageActionSave: 'Guardar',
        pageActionSaveNew: 'Guardar y nuevo',
        registerNotFound: 'Registro no encontrado.',
        saveNewNotificationSuccessSave: 'Recurso salvo con éxito.',
        saveNewNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
        saveNewNotificationWarning: 'El formulario debe llenarse correctamente.',
        saveNotificationSuccessSave: 'Recurso salvo con éxito.',
        saveNotificationSuccessUpdate: 'Recurso actualizado con éxito.',
        saveNotificationWarning: 'El formulario debe llenarse correctamente.',
    },
    pt: {
        cancelConfirmMessage: 'Tem certeza que deseja cancelar esta operação?',
        detailActionNew: 'Novo',
        pageActionCancel: 'Cancelar',
        pageActionSave: 'Salvar',
        pageActionSaveNew: 'Salvar e novo',
        registerNotFound: 'Registro não encontrado.',
        saveNewNotificationSuccessSave: 'Recurso salvo com sucesso.',
        saveNewNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
        saveNewNotificationWarning: 'Formulário precisa ser preenchido corretamente.',
        saveNotificationSuccessSave: 'Recurso salvo com sucesso.',
        saveNotificationSuccessUpdate: 'Recurso atualizado com sucesso.',
        saveNotificationWarning: 'Formulário precisa ser preenchido corretamente.',
    }
};
/**
 * \@description
 *
 * O `po-page-dynamic-edit` é uma página que pode servir para editar ou criar novos registros,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-edit` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * ```
 * {
 *   path: 'people',
 *   component: PoPageDynamicEditComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata' // endpoint dos metadados
 *   }
 * }
 * ```
 *
 * Para carregar com um recurso já existente, deve-se ser incluído um parâmetro na rota chamado `id`:
 *
 * ```
 * {
 *   path: 'people/:id',
 *   component: PoPageDynamicEditComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata' // endpoint dos metadados
 *   }
 * }
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicEditMetadata](/documentation/po-page-dynamic-edit#po-page-dynamic-edit-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person edit',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ]
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=edit&version={version}
 * ```
 *
 * \@example
 *
 * <example name="po-page-dynamic-edit-basic" title="Portinari Page Dynamic Edit Basic">
 *  <file name="sample-po-page-dynamic-edit-basic/sample-po-page-dynamic-edit-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-edit-basic/sample-po-page-dynamic-edit-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-edit-user" title="Portinari Page Dynamic Edit - User">
 *  <file name="sample-po-page-dynamic-edit-user/sample-po-page-dynamic-edit-user.component.html"> </file>
 *  <file name="sample-po-page-dynamic-edit-user/sample-po-page-dynamic-edit-user.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-edit-master-detail" title="Portinari Page Dynamic Edit - Master Detail">
 *  <file name="sample-po-page-dynamic-edit-master-detail/sample-po-page-dynamic-edit-master-detail.component.html"> </file>
 *  <file name="sample-po-page-dynamic-edit-master-detail/sample-po-page-dynamic-edit-master-detail.component.ts"> </file>
 * </example>
 */
class PoPageDynamicEditComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} poNotification
     * @param {?} poDialogService
     * @param {?} poPageDynamicService
     */
    constructor(router, activatedRoute, poNotification, poDialogService, poPageDynamicService) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poNotification = poNotification;
        this.poDialogService = poDialogService;
        this.poPageDynamicService = poPageDynamicService;
        this._actions = {};
        this._autoRouter = false;
        this._controlFields = [];
        this._detailFields = [];
        this._duplicates = [];
        this._fields = [];
        this._keys = [];
        this._pageActions = [];
        this.literals = Object.assign({}, poPageDynamicEditLiteralsDefault[poLocaleDefault], poPageDynamicEditLiteralsDefault[browserLanguage()]);
        this.model = {};
        // beforeSave: return boolean
        // afterSave
        // beforeRemove: return boolean
        // afterRemove
        // beforeInsert: : return boolean
        this.detailActions = {};
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ações da página.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = this.isObject(value) ? value : {};
        this._pageActions = this.getPageActions(this._actions);
    }
    /**
     * \@todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
     *
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso as ações
     * estejam definidas nas ações.
     *
     * > Para o correto funcionamento não pode haver nenhum rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * Lista dos campos usados na tabela e busca avançada.
     * @param {?} value
     * @return {?}
     */
    set fields(value) {
        this._fields = Array.isArray(value) ? [...value] : [];
        this._keys = this.getKeysByFields(this._fields);
        this._duplicates = this.getDuplicatesByFields(this._fields);
        this._controlFields = this.getControlFields(this._fields);
        this._detailFields = this.getDetailFields(this._fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const duplicate = this.activatedRoute.snapshot.queryParams['duplicate'];
        const { serviceApi, serviceMetadataApi } = this.activatedRoute.snapshot.data;
        this.serviceApi = serviceApi || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        if (serviceApi) {
            this.loadMetadata(paramId, duplicate);
        }
        else {
            this.loadData(paramId, duplicate);
        }
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @return {?}
     */
    get controlFields() {
        return this._controlFields;
    }
    /**
     * @return {?}
     */
    get detailFields() {
        return this._detailFields;
    }
    /**
     * @return {?}
     */
    detailActionNew() {
        this.gridDetail.insertRow();
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    cancel(path) {
        if (this.dynamicForm && this.dynamicForm.form.dirty) {
            this.poDialogService.confirm({
                message: this.literals.cancelConfirmMessage,
                title: this.literals.pageActionCancel,
                confirm: this.goBack.bind(this, path)
            });
        }
        else {
            this.goBack(path);
        }
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = mapObjectByProperties(item, this.keys);
        return valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    goBack(path) {
        if (path) {
            this.router.navigate([path]);
        }
        else {
            window.history.back();
        }
    }
    /**
     * @private
     * @param {?} id
     * @param {?=} duplicate
     * @return {?}
     */
    loadData(id, duplicate) {
        if (!id) {
            try {
                this.model = JSON.parse(duplicate) || {};
            }
            catch (_a) {
                this.model = {};
            }
            return;
        }
        this.poPageDynamicService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = undefined;
            this.actions = undefined;
            this._pageActions = [];
        }));
    }
    /**
     * @private
     * @param {?} paramId
     * @param {?} duplicate
     * @return {?}
     */
    loadMetadata(paramId, duplicate) {
        /** @type {?} */
        const typeMetadata = paramId ? 'edit' : 'create';
        this.poPageDynamicService.getMetadata(typeMetadata).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.autoRouter = response.autoRouter;
            this.actions = response.actions || {};
            this.breadcrumb = response.breadcrumb || { items: [] };
            this.fields = response.fields || [];
            this.title = response.title;
            this.loadData(paramId, duplicate);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    navigateTo(path) {
        if (path) {
            /** @type {?} */
            const url = this.resolveUrl(this.model, path);
            this.router.navigate([url]);
        }
        else {
            window.history.back();
        }
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    save(path) {
        if (this.dynamicForm.form.invalid) {
            this.poNotification.warning(this.literals.saveNotificationWarning);
            return;
        }
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const saveOperation = paramId
            ? this.poPageDynamicService.updateResource(paramId, this.model)
            : this.poPageDynamicService.createResource(this.model);
        /** @type {?} */
        const msgSucess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;
        saveOperation.toPromise().then((/**
         * @return {?}
         */
        () => {
            this.poNotification.success(msgSucess);
            this.navigateTo(path);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    saveNew(path) {
        if (this.dynamicForm.form.invalid) {
            this.poNotification.warning(this.literals.saveNewNotificationWarning);
            return;
        }
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        if (paramId) {
            this.poPageDynamicService.updateResource(paramId, this.model)
                .toPromise().then((/**
             * @return {?}
             */
            () => {
                this.poNotification.success(this.literals.saveNewNotificationSuccessUpdate);
                this.navigateTo(path);
            }));
        }
        else {
            this.poPageDynamicService.createResource(this.model)
                .toPromise().then((/**
             * @return {?}
             */
            () => {
                this.poNotification.success(this.literals.saveNewNotificationSuccessSave);
                this.model = {};
                this.dynamicForm.form.reset();
            }));
        }
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getKeysByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getControlFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.type !== 'detail'));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDetailFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.type === 'detail'));
    }
    /**
     * @private
     * @param {?=} fields
     * @return {?}
     */
    getDuplicatesByFields(fields = []) {
        return fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
    /**
     * @private
     * @param {?=} actions
     * @return {?}
     */
    getPageActions(actions = {}) {
        /** @type {?} */
        const pageActions = [{ label: this.literals.pageActionSave, action: this.save.bind(this, actions.save) }];
        if (actions.saveNew) {
            pageActions.push({ label: this.literals.pageActionSaveNew, action: this.saveNew.bind(this, actions.saveNew) });
        }
        if (actions.cancel === undefined || actions.cancel) {
            pageActions.push({ label: this.literals.pageActionCancel, action: this.cancel.bind(this, actions.cancel) });
        }
        return pageActions;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    isObject(value) {
        return !!value && typeof value === 'object' && !Array.isArray(value);
    }
}
PoPageDynamicEditComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-edit',
                template: "<po-page-default\n  [p-actions]=\"pageActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-title]=\"title\">\n\n  <ng-container *ngIf=\"model; then formFieldsTemplate; else registerNotFoundTemplate\">\n  </ng-container>\n\n</po-page-default>\n\n<ng-template #registerNotFoundTemplate>\n\n  <po-widget>\n    <span class=\"po-icon po-icon-info\"></span>\n    <span class=\"po-font-text-large\">\n      {{ literals.registerNotFound }}\n    </span>\n  </po-widget>\n\n</ng-template>\n\n<ng-template #formFieldsTemplate>\n\n  <po-dynamic-form #dynamicForm [p-fields]=\"controlFields\" [p-value]=\"model\">\n  </po-dynamic-form>\n\n  <div *ngIf=\"detailFields.length > 0\" class=\"po-sm-12\">\n    <po-divider [p-label]=\"detailFields[0].divider\"></po-divider>\n\n    <div class=\"po-row po-mb-2\">\n      <po-button [p-label]=\"literals.detailActionNew\" (p-click)=\"detailActionNew()\" p-small></po-button>\n    </div>\n\n    <po-grid #gridDetail\n      [p-row-actions]=\"detailActions\"\n      [p-columns]=\"detailFields[0].detail.columns\"\n      [p-data]=\"model[detailFields[0].property]\">\n    </po-grid>\n  </div>\n\n</ng-template>\n",
                providers: [PoPageDynamicService]
            }] }
];
/** @nocollapse */
PoPageDynamicEditComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoNotificationService },
    { type: PoDialogService },
    { type: PoPageDynamicService }
];
PoPageDynamicEditComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    autoRouter: [{ type: Input, args: ['p-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    fields: [{ type: Input, args: ['p-fields',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }],
    title: [{ type: Input, args: ['p-title',] }],
    dynamicForm: [{ type: ViewChild, args: ['dynamicForm', { static: false },] }],
    gridDetail: [{ type: ViewChild, args: ['gridDetail', { static: false },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._autoRouter;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._controlFields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._detailFields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._duplicates;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._keys;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype._pageActions;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.literals;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.model;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.detailActions;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDynamicEditComponent.prototype.breadcrumb;
    /**
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso que será exibido para edição.
     *
     * Para as ações de `save` e `saveNew`, será feito uma requisição de criação nesse mesmo endpoint passando os valores
     * preenchidos pelo usuário via payload.
     *
     * > `POST {end-point}`
     *
     * ```
     *  <po-page-dynamic-edit
     *    [p-actions]="{ save: '/', saveNew: 'new' }"
     *    [p-fields]="[ { property: 'name' }, { property: 'city' } ]"
     *    p-service="/api/po-samples/v1/people"
     *    ...>
     *  </po-page-dynamic-edit>
     * ```
     *
     * Resquisição disparada, onde a propriedade `name` e `city` foram preenchidas:
     *
     * ```
     *  POST /api/po-samples/v1/people HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * Request payload:
     *
     * ```
     * { "name": "Fulano", "city": "Smallville" }
     * ```
     *
     * Caso queira que o template carregue um recurso já existente, deve-se ser incluído um parametro na rota chamado `id`.
     *
     * Exemplo de configuração de rota:
     *
     * ```
     *  RouterModule.forRoot([
     *    ...
     *    { path: 'edit/:id', component: PersonEditComponent },
     *    ...
     *  ],
     * ```
     *
     * Baseado nisso, na inicialização do template, será disparado uma requisição para buscar o recurso que será editado.
     *
     * > `GET {end-point}/{id}`
     *
     * Nos métodos de `save` e `saveNew`, ao invés de um `POST`, será disparado um `PUT`.
     *
     * Resquisição disparada, onde a propriedade `name` e `city` foram preenchidas / atualizadas, e o `id` da url é 2:
     *
     * ```
     *  PUT /api/po-samples/v1/people/2 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * Request payload:
     *
     * ```
     * { "name": "Fulano", "city": "Metropolis" }
     * ```
     * @type {?}
     */
    PoPageDynamicEditComponent.prototype.serviceApi;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageDynamicEditComponent.prototype.title;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.dynamicForm;
    /** @type {?} */
    PoPageDynamicEditComponent.prototype.gridDetail;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.poNotification;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.poDialogService;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicEditComponent.prototype.poPageDynamicService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-page-dynamic-detail.
 */
class PoPageDynamicEditModule {
}
PoPageDynamicEditModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoButtonModule,
                    PoDividerModule,
                    PoDynamicModule,
                    PoGridModule,
                    PoPageModule,
                    PoWidgetModule,
                    PoPageDynamicModule
                ],
                declarations: [
                    PoPageDynamicEditComponent
                ],
                exports: [
                    PoPageDynamicEditComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageCustomizationService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @template T
     * @param {?} origin
     * @param {?} originalOption
     * @param {?} optionSchema
     * @return {?}
     */
    getCustomOptions(origin, originalOption, optionSchema) {
        return this.createObservable(origin).pipe(map((/**
         * @param {?} newPageOptions
         * @return {?}
         */
        newPageOptions => this.mergePageOptions(originalOption, newPageOptions, optionSchema))));
    }
    /**
     * @template T, K
     * @param {?} objectToChange
     * @param {?} newOptions
     * @return {?}
     */
    changeOriginalOptionsToNewOptions(objectToChange, newOptions) {
        Object.keys(newOptions).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const value = newOptions[key];
            if (objectToChange[key]) {
                if (Array.isArray(value)) {
                    objectToChange[key] = [...value];
                    return;
                }
                if ((typeof (value) === 'number' || typeof (value) === 'string')) {
                    objectToChange[key] = value;
                    return;
                }
                if (typeof (value) === 'object') {
                    objectToChange[key] = Object.assign({}, value);
                }
            }
        }));
    }
    /**
     * @private
     * @template T
     * @param {?} origin
     * @return {?}
     */
    createObservable(origin) {
        if (typeof origin === 'string') {
            return this.http.post(origin, {});
        }
        return from(Promise.resolve(origin()));
    }
    /**
     * @private
     * @template T
     * @param {?} originalOption
     * @param {?} newPageOptions
     * @param {?} optionSchema
     * @return {?}
     */
    mergePageOptions(originalOption, newPageOptions, optionSchema) {
        /** @type {?} */
        const mergePageOptions = optionSchema.schema.reduce((/**
         * @param {?} objWithNewProp
         * @param {?} prop
         * @return {?}
         */
        (objWithNewProp, prop) => (Object.assign({}, objWithNewProp, { [prop.nameProp]: this.createNewProp(prop, originalOption, newPageOptions) }))), (/** @type {?} */ ({})));
        Object.keys(mergePageOptions).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => !mergePageOptions[key] && delete mergePageOptions[key]));
        return mergePageOptions;
    }
    /**
     * @private
     * @template T
     * @param {?} prop
     * @param {?} originalOption
     * @param {?} newPageOptions
     * @return {?}
     */
    createNewProp(prop, originalOption, newPageOptions) {
        if (prop.merge) {
            return this.mergeOptions(originalOption[prop.nameProp], newPageOptions[prop.nameProp], prop.keyForMerge);
        }
        else {
            return newPageOptions[prop.nameProp] || originalOption[prop.nameProp];
        }
    }
    /**
     * @private
     * @template T
     * @param {?} originalOptions
     * @param {?} newOptions
     * @param {?=} filterProp
     * @return {?}
     */
    mergeOptions(originalOptions, newOptions, filterProp) {
        if (!originalOptions && !newOptions) {
            return;
        }
        if (!newOptions) {
            return originalOptions;
        }
        if (!originalOptions) {
            return newOptions;
        }
        if (originalOptions instanceof Array && newOptions instanceof Array) {
            return this.mergeOptionsArray(originalOptions, newOptions, filterProp);
        }
        return Object.assign({}, originalOptions, newOptions);
    }
    /**
     * @private
     * @template T
     * @param {?} originalOptions
     * @param {?} newOptions
     * @param {?} filterProp
     * @return {?}
     */
    mergeOptionsArray(originalOptions, newOptions, filterProp) {
        /** @type {?} */
        const deduplicateNewOptions = newOptions.filter((/**
         * @param {?} newItem
         * @return {?}
         */
        newItem => !originalOptions.find((/**
         * @param {?} originalItem
         * @return {?}
         */
        originalItem => originalItem[filterProp] === newItem[filterProp]))));
        /** @type {?} */
        const mergedOriginalOptions = originalOptions.map((/**
         * @param {?} originalItem
         * @return {?}
         */
        originalItem => {
            /** @type {?} */
            const newItem = newOptions.find((/**
             * @param {?} newOptionsItem
             * @return {?}
             */
            newOptionsItem => originalItem[filterProp] === newOptionsItem[filterProp])) || originalItem;
            return Object.assign({}, originalItem, newItem);
        }));
        return [...mergedOriginalOptions, ...deduplicateNewOptions];
    }
}
PoPageCustomizationService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
PoPageCustomizationService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ PoPageCustomizationService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PoPageCustomizationService_Factory() { return new PoPageCustomizationService(ɵɵinject(HttpClient)); }, token: PoPageCustomizationService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageCustomizationService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do serviço do po-page-customization-service.
 */
class PoPageCustomizationModule {
}
PoPageCustomizationModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule
                ],
                providers: [
                    PoPageCustomizationService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poAdvancedFiltersLiteralsDefault = {
    en: (/** @type {?} */ ({
        title: 'Advanced search',
        cancelLabel: 'Cancel',
        confirmLabel: 'Apply filters'
    })),
    es: (/** @type {?} */ ({
        title: 'Búsqueda avanzada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    })),
    pt: (/** @type {?} */ ({
        title: 'Busca avançada',
        cancelLabel: 'Cancelar',
        confirmLabel: 'Aplicar filtros'
    })),
    ru: (/** @type {?} */ ({
        title: 'Расширенный поиск',
        cancelLabel: 'отменить',
        confirmLabel: 'Применить фильтры'
    }))
};
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Filtro de busca avançada criado a partir de um formulário dinâmico.
 * Componente de uso interno.
 */
class PoAdvancedFilterBaseComponent {
    /**
     * @param {?} languageService
     */
    constructor(languageService) {
        this._filters = [];
        this.filter = {};
        this.language = poLocaleDefault;
        this.primaryAction = {
            action: (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const models = this.getValuesFromForm();
                this.searchEvent.emit(models);
                this.poModal.close();
            }),
            label: this.literals.confirmLabel
        };
        this.secondaryAction = {
            action: (/**
             * @return {?}
             */
            () => {
                this.poModal.close();
            }),
            label: this.literals.cancelLabel
        };
        /**
         * Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar.
         */
        this.searchEvent = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * Coleção de objetos que implementam a interface PoDynamicFormField, para definição dos campos que serão criados
     * dinamicamente.
     * @param {?} filters
     * @return {?}
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    /**
     * @return {?}
     */
    get filters() {
        return this._filters;
    }
    /**
     * Objeto com as literais usadas no `po-advanced-filter`.
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, poAdvancedFiltersLiteralsDefault[poLocaleDefault], poAdvancedFiltersLiteralsDefault[this.language], value);
        }
        else {
            this._literals = poAdvancedFiltersLiteralsDefault[this.language];
        }
        this.primaryAction.label = this.literals.confirmLabel;
        this.secondaryAction.label = this.literals.cancelLabel;
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || poAdvancedFiltersLiteralsDefault[this.language];
    }
    // Retorna os models dos campos preenchidos
    /**
     * @private
     * @return {?}
     */
    getValuesFromForm() {
        Object.keys(this.filter).forEach((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            if (this.filter[property] === undefined || this.filter[property] === '') {
                delete this.filter[property];
            }
        }));
        return this.filter;
    }
}
PoAdvancedFilterBaseComponent.propDecorators = {
    poModal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }],
    filters: [{ type: Input, args: ['p-filters',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    searchEvent: [{ type: Output, args: ['p-search-event',] }]
};
if (false) {
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.poModal;
    /**
     * @type {?}
     * @private
     */
    PoAdvancedFilterBaseComponent.prototype._filters;
    /**
     * @type {?}
     * @private
     */
    PoAdvancedFilterBaseComponent.prototype._literals;
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.filter;
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.language;
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.primaryAction;
    /** @type {?} */
    PoAdvancedFilterBaseComponent.prototype.secondaryAction;
    /**
     * Função que será disparada e receberá os valores do formulário ao ser clicado no botão buscar.
     * @type {?}
     */
    PoAdvancedFilterBaseComponent.prototype.searchEvent;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@docsExtends PoAdvancedFilterBaseComponent
 *
 * \@examplePrivate
 *
 * <example-private name="po-advanced-filter" title="Portinari Busca Avançada">
 *   <file name="sample-po-advanced-filter.component.html"> </file>
 *   <file name="sample-po-advanced-filter.component.ts"> </file>
 * </example-private>
 */
class PoAdvancedFilterComponent extends PoAdvancedFilterBaseComponent {
    /**
     * @param {?} languageService
     */
    constructor(languageService) {
        super(languageService);
    }
    /**
     * @return {?}
     */
    open() {
        this.filter = {};
        this.poModal.open();
    }
}
PoAdvancedFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-advanced-filter',
                template: "<po-modal\n  p-hide-close\n  [p-primary-action]=\"primaryAction\"\n  [p-secondary-action]=\"secondaryAction\"\n  [p-title]=\"literals.title\">\n\n  <po-dynamic-form\n    [p-fields]=\"filters\"\n    [p-value]=\"filter\">\n  </po-dynamic-form>\n\n</po-modal>\n"
            }] }
];
/** @nocollapse */
PoAdvancedFilterComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoAdvancedFilterComponent.propDecorators = {
    poDynamicForm: [{ type: ViewChild, args: [PoDynamicFormComponent, { static: true },] }]
};
if (false) {
    /** @type {?} */
    PoAdvancedFilterComponent.prototype.poDynamicForm;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageDynamicSearchLiteralsDefault = {
    en: (/** @type {?} */ ({
        disclaimerGroupTitle: 'Displaying results filtered by:',
        filterTitle: poAdvancedFiltersLiteralsDefault.en.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.en.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.en.confirmLabel,
        quickSearchLabel: 'Quick search:',
        searchPlaceholder: 'Search'
    })),
    es: (/** @type {?} */ ({
        disclaimerGroupTitle: 'Presentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.es.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.es.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.es.confirmLabel,
        quickSearchLabel: 'Búsqueda rápida:',
        searchPlaceholder: 'Buscar',
    })),
    pt: (/** @type {?} */ ({
        disclaimerGroupTitle: 'Apresentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.pt.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.pt.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.pt.confirmLabel,
        quickSearchLabel: 'Pesquisa rápida:',
        searchPlaceholder: 'Pesquisar'
    })),
    ru: (/** @type {?} */ ({
        disclaimerGroupTitle: 'Отображение результатов, отфильтрованных по:',
        filterTitle: poAdvancedFiltersLiteralsDefault.ru.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.ru.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.ru.confirmLabel,
        quickSearchLabel: 'Быстрый поиск:',
        searchPlaceholder: 'исследование'
    })),
};
/**
 * \@description
 *
 * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs
 * e exiba as informações.
 */
class PoPageDynamicSearchBaseComponent {
    /**
     * @param {?} languageService
     */
    constructor(languageService) {
        this._filters = [];
        /**
         * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
         */
        this.actions = [];
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
        /**
         * \@description
         *
         * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
         *
         * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
         */
        this.advancedSearch = new EventEmitter();
        /**
         * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
         */
        this.changeDisclaimers = new EventEmitter();
        /**
         * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
         */
        this.quickSearch = new EventEmitter();
        this.language = languageService.getShortLanguage();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `po-page-dynamic-search`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    disclaimerGroupTitle: 'Filtros aplicados:',
     *    filterTitle: 'Filtro avançado',
     *    filterCancelLabel: 'Fechar',
     *    filterConfirmLabel: 'Aplicar',
     *    quickSearchLabel: 'Valor pesquisado:',
     *    searchPlaceholder: 'Pesquise aqui'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    filterTitle: 'Filtro avançado'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-dynamic-search
     *   [p-literals]="customLiterals">
     * </po-page-dynamic-search>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign({}, poPageDynamicSearchLiteralsDefault[poLocaleDefault], poPageDynamicSearchLiteralsDefault[this.language], value);
        }
        else {
            this._literals = poPageDynamicSearchLiteralsDefault[this.language];
        }
        this.setAdvancedFilterLiterals(this.literals);
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals || poPageDynamicSearchLiteralsDefault[this.language];
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
     * @param {?} filters
     * @return {?}
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
    }
    /**
     * @return {?}
     */
    get filters() {
        return this._filters;
    }
    /**
     * @protected
     * @param {?} literals
     * @return {?}
     */
    setAdvancedFilterLiterals(literals) {
        this.advancedFilterLiterals = {
            cancelLabel: literals.filterCancelLabel,
            confirmLabel: literals.filterConfirmLabel,
            title: literals.filterTitle
        };
    }
}
PoPageDynamicSearchBaseComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    filters: [{ type: Input, args: ['p-filters',] }],
    onLoad: [{ type: Input, args: ['p-load',] }],
    title: [{ type: Input, args: ['p-title',] }],
    advancedSearch: [{ type: Output, args: ['p-advanced-search',] }],
    changeDisclaimers: [{ type: Output, args: ['p-change-disclaimers',] }],
    quickSearch: [{ type: Output, args: ['p-quick-search',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchBaseComponent.prototype._filters;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchBaseComponent.prototype._literals;
    /** @type {?} */
    PoPageDynamicSearchBaseComponent.prototype.advancedFilterLiterals;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchBaseComponent.prototype.language;
    /**
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.actions;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.breadcrumb;
    /**
     * Função ou serviço que será executado na inicialização do componente.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * O retorno desta função deve ser do tipo `PoPageDynamicSearchOptions`,
     * onde o usuário poderá customizar novos filtros, breadcrumb, title e actions
     *
     * Por exemplo:
     *
     * ```
     * getPageOptions(): PoPageDynamicSearchOptions {
     * return {
     *   actions: [
     *     { label: 'Find on Google' },
     *   ],
     *   filters: [
     *     { property: 'idCard', gridColumns: 6 }
     *   ]
     * };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-load]="onLoadOptions.bind(this)"
     * ```
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.onLoad;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.title;
    /**
     * \@description
     *
     * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
     *
     * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.advancedSearch;
    /**
     * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.changeDisclaimers;
    /**
     * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
     * @type {?}
     */
    PoPageDynamicSearchBaseComponent.prototype.quickSearch;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageDynamicSearchBaseComponent
 *
 * \@example
 *
 * <example name="po-page-dynamic-search-basic" title="Portinari Page Dynamic Search Basic">
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-search-hiring-processes" title="Portinari Page Dynamic Search - Hiring processes">
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.service.ts"> </file>
 * </example>
 */
class PoPageDynamicSearchComponent extends PoPageDynamicSearchBaseComponent {
    /**
     * @param {?} languageService
     * @param {?} poPageCustomizationService
     */
    constructor(languageService, poPageCustomizationService) {
        super(languageService);
        this.poPageCustomizationService = poPageCustomizationService;
        this._disclaimerGroup = {
            change: this.onChangeDisclaimerGroup.bind(this),
            disclaimers: [],
            title: this.literals.disclaimerGroupTitle
        };
        this._filterSettings = {
            action: 'onAction',
            advancedAction: 'onAdvancedAction',
            ngModel: 'quickFilter',
            placeholder: this.literals.searchPlaceholder
        };
        // Flag to control when changeDisclaimerGroup should be called
        this.changeDisclaimersEnabled = false;
    }
    /**
     * @return {?}
     */
    get disclaimerGroup() {
        return Object.assign({}, this._disclaimerGroup, { title: this.literals.disclaimerGroupTitle });
    }
    /**
     * @return {?}
     */
    get filterSettings() {
        this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : 'onAdvancedAction';
        return Object.assign({}, this._filterSettings, { placeholder: this.literals.searchPlaceholder });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setAdvancedFilterLiterals(this.literals);
        if (this.onLoad) {
            this.loadOptionsOnInitialize(this.onLoad);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.loadSubscription) {
            this.loadSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    onAction() {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = [
            { property: 'search', label: `${this.literals.quickSearchLabel} ${this.quickFilter}`, value: this.quickFilter }
        ];
        if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {
            this.quickSearch.emit(this.quickFilter);
        }
        this.quickFilter = undefined;
    }
    /**
     * @return {?}
     */
    onAdvancedAction() {
        this.poAdvancedFilter.open();
    }
    /**
     * @param {?} filters
     * @return {?}
     */
    onAdvancedSearch(filters) {
        this.changeDisclaimersEnabled = false;
        this._disclaimerGroup.disclaimers = this.setDisclaimers(filters);
        this.advancedSearch.emit(filters);
    }
    /**
     * @private
     * @param {?} field
     * @param {?} filterValue
     * @return {?}
     */
    applyDisclaimerLabelValue(field, filterValue) {
        /** @type {?} */
        const values = Array.isArray(filterValue) ? filterValue : [filterValue];
        /** @type {?} */
        const labels = values.map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            /** @type {?} */
            const filteredField = field.options.find((/**
             * @param {?} option
             * @return {?}
             */
            option => option.value === value));
            return filteredField.label || filteredField.value;
        }));
        return labels.join(', ');
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    formatDate(date) {
        /** @type {?} */
        const year = parseInt(date.substr(0, 4), 10);
        /** @type {?} */
        const month = parseInt(date.substr(5, 2), 10);
        /** @type {?} */
        const day = parseInt(date.substr(8, 2), 10);
        return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());
    }
    /**
     * @private
     * @param {?} fields
     * @param {?} fieldName
     * @return {?}
     */
    getFieldByProperty(fields, fieldName) {
        return fields.find((/**
         * @param {?} field
         * @return {?}
         */
        (field) => field.property === fieldName));
    }
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    getFilterValueToDisclaimer(field, value) {
        if (field.type === PoDynamicFieldType.Date) {
            return this.formatDate(value);
        }
        if (field.options) {
            return this.applyDisclaimerLabelValue(field, value);
        }
        return value;
    }
    /**
     * @private
     * @param {?} disclaimers
     * @return {?}
     */
    onChangeDisclaimerGroup(disclaimers) {
        this.changeDisclaimersEnabled ? this.changeDisclaimers.emit(disclaimers) : this.changeDisclaimersEnabled = true;
    }
    /**
     * @private
     * @param {?} filters
     * @return {?}
     */
    setDisclaimers(filters) {
        /** @type {?} */
        const disclaimers = [];
        /** @type {?} */
        const properties = Object.keys(filters);
        properties.forEach((/**
         * @param {?} property
         * @return {?}
         */
        property => {
            /** @type {?} */
            const field = this.getFieldByProperty(this.filters, property);
            /** @type {?} */
            const label = field.label || capitalizeFirstLetter(field.property);
            /** @type {?} */
            const value = filters[property];
            disclaimers.push({
                label: `${label}: ${this.getFilterValueToDisclaimer(field, value)}`,
                property,
                value
            });
        }));
        return disclaimers;
    }
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    loadOptionsOnInitialize(onLoad) {
        this.loadSubscription = this.getPoDynamicPageOptions(onLoad).subscribe((/**
         * @param {?} responsePoOption
         * @return {?}
         */
        responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption)));
    }
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    getPoDynamicPageOptions(onLoad) {
        /** @type {?} */
        const originalOption = {
            title: this.title,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            filters: this.filters
        };
        /** @type {?} */
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'filters',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true,
                    keyForMerge: 'label'
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
}
PoPageDynamicSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-search',
                template: "<po-page-list\n  [p-actions]=\"actions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-disclaimer-group]=\"disclaimerGroup\"\n  [p-filter]=\"filterSettings\"\n  [p-title]=\"title\">\n\n  <po-advanced-filter\n    [p-filters]=\"filters\"\n    [p-literals]=\"advancedFilterLiterals\"\n    (p-search-event)=\"onAdvancedSearch($event)\">\n  </po-advanced-filter>\n\n  <ng-content></ng-content>\n</po-page-list>\n"
            }] }
];
/** @nocollapse */
PoPageDynamicSearchComponent.ctorParameters = () => [
    { type: PoLanguageService },
    { type: PoPageCustomizationService }
];
PoPageDynamicSearchComponent.propDecorators = {
    poAdvancedFilter: [{ type: ViewChild, args: [PoAdvancedFilterComponent, { static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.loadSubscription;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype._disclaimerGroup;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype._filterSettings;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.changeDisclaimersEnabled;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.quickFilter;
    /** @type {?} */
    PoPageDynamicSearchComponent.prototype.poAdvancedFilter;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicSearchComponent.prototype.poPageCustomizationService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-page-dynamic-search.
 */
class PoPageDynamicSearchModule {
}
PoPageDynamicSearchModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoDynamicModule,
                    PoLanguageModule,
                    PoModalModule,
                    PoPageModule,
                    PoPageCustomizationModule
                ],
                declarations: [
                    PoAdvancedFilterComponent,
                    PoPageDynamicSearchComponent
                ],
                exports: [
                    PoPageDynamicSearchComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageDynamicListBaseComponent {
    constructor() {
        this._autoRouter = false;
        this._columns = [];
        this._duplicates = [];
        this._fields = [];
        this._filters = [];
        this._keys = [];
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `p-actions`
     *
     * As rotas criadas serão baseadas na propriedade `p-actions`.
     *
     * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
     *
     * \@default false
     * @param {?} value
     * @return {?}
     */
    set autoRouter(value) {
        this._autoRouter = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get autoRouter() {
        return this._autoRouter;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Lista dos campos usados na tabela e busca avançada.
     *
     *
     * > Caso não seja definido fields a tabela assumirá o comportamento padrão.
     * @param {?} fields
     * @return {?}
     */
    set fields(fields) {
        this._fields = Array.isArray(fields) ? [...fields] : [];
        this.setFieldsProperties(this.fields);
    }
    /**
     * @return {?}
     */
    get fields() {
        return this._fields;
    }
    /**
     * @return {?}
     */
    get columns() {
        return [...this._columns];
    }
    /**
     * @return {?}
     */
    get duplicates() {
        return [...this._duplicates];
    }
    /**
     * @return {?}
     */
    get filters() {
        return [...this._filters];
    }
    /**
     * @return {?}
     */
    get keys() {
        return [...this._keys];
    }
    /**
     * @private
     * @param {?} fields
     * @return {?}
     */
    setFieldsProperties(fields) {
        this._filters = fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.filter === true));
        this._columns = fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.visible === undefined || field.visible === true));
        this._keys = fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.key === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
        this._duplicates = fields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field.duplicate === true)).map((/**
         * @param {?} field
         * @return {?}
         */
        field => field.property));
    }
}
PoPageDynamicListBaseComponent.propDecorators = {
    autoRouter: [{ type: Input, args: ['p-auto-router',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    fields: [{ type: Input, args: ['p-fields',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }],
    title: [{ type: Input, args: ['p-title',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicListBaseComponent.prototype._autoRouter;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicListBaseComponent.prototype._columns;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicListBaseComponent.prototype._duplicates;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicListBaseComponent.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicListBaseComponent.prototype._filters;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicListBaseComponent.prototype._keys;
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageDynamicListBaseComponent.prototype.breadcrumb;
    /**
     * \@description
     *
     * Endpoint usado pelo template para requisição dos recursos que serão exibidos.
     *
     * Ao realizar requisições de busca, podem ser enviados os parâmetros (caso possuam valor): `page`, `pageSize`, `search` e `order`.
     *
     * Caso a coluna estiver ordenada descendentemente será enviada da seguinte forma: `-name`, se for ordenada
     * ascendentemente será enviada apenas com o nome da coluna, por exemplo: `name`.
     *
     * Exemplo de uma requisição de busca:
     *
     * > `GET {end-point}/{resource}?page=1&pageSize=10&search=components&order=-name`
     *
     * Caso a ação `remove` estiver configurada, será feito uma requisição de exclusão nesse mesmo endpoint passando os campos
     * setados como `key: true`.
     *
     * > `DELETE {end-point}/{keys}`
     *
     * ```
     *  <po-page-dynamic-table
     *    [p-actions]="{ remove: true }"
     *    [p-fields]="[ { property: 'id', key: true } ]"
     *    p-service="/api/po-samples/v1/people"
     *    ...>
     *  </po-page-dynamic-table>
     * ```
     *
     * Resquisição disparada, onde a propriedade `id` é igual a 2:
     *
     * ```
     *  DELETE /api/po-samples/v1/people/2 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * Para a ação `removeAll`, será feito uma requisição de exclusão em lote para esse mesmo endpoint passando, uma lista
     * de objetos com os campos setados como `key: true` via `payload`.
     *
     * > `DELETE {end-point}`
     *
     * > `Payload: [ {key}, {key} ... {key} ]`
     *
     * ```
     *  <po-page-dynamic-table
     *    [p-actions]="{ removeAll: true }"
     *    [p-fields]="[ { property: 'id', key: true } ]"
     *    p-service="/api/po-samples/v1/people"
     *    ...>
     *  </po-page-dynamic-table>
     * ```
     *
     * Resquisição disparada, onde foram selecionados 3 itens para serem removidos:
     *
     * ```
     *  DELETE /api/po-samples/v1/people HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * Request payload:
     *
     * ```
     * [{"id":2},{"id":4},{"id":5}]
     * ```
     *
     * > Caso esteja usando metadados com o template, será disparado uma requisição na inicialização do template para buscar
     * > os metadados da página passando o tipo do metadado esperado e a versão cacheada pelo browser.
     * >
     * > `GET {end-point}/metadata?type=list&version={version}`
     * @type {?}
     */
    PoPageDynamicListBaseComponent.prototype.serviceApi;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageDynamicListBaseComponent.prototype.title;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageDynamicTableLiteralsDefault = {
    en: {
        pageAction: 'New',
        pageActionRemoveAll: 'Delete',
        tableActionView: 'View',
        tableActionEdit: 'Edit',
        tableActionDuplicate: 'Duplicate',
        tableActionDelete: 'Delete',
        confirmRemoveTitle: 'Confirm delete',
        confirmRemoveMessage: 'Are you sure you want to delete this record? You can not undo this action.',
        confirmRemoveAllTitle: 'Confirm batch deletion',
        confirmRemoveAllMessage: 'Are you sure you want to delete all these records? You can not undo this action.',
        loadDataErrorNotification: 'Service not found',
        removeSuccessNotification: 'Item deleted successfully',
        removeAllSuccessNotification: 'Items deleted successfully'
    },
    es: {
        pageAction: 'Nuevo',
        pageActionRemoveAll: 'Borrar',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Borrar',
        confirmRemoveTitle: 'Confirmar la exclusión',
        confirmRemoveMessage: '¿Está seguro de que desea eliminar este registro? No puede deshacer esta acción.',
        confirmRemoveAllTitle: 'Confirmar la exclusión por lotes',
        confirmRemoveAllMessage: '¿Está seguro de que desea eliminar todos estos registros? No puede deshacer esta acción.',
        loadDataErrorNotification: 'Servicio no informado.',
        removeSuccessNotification: 'Elemento eliminado con éxito',
        removeAllSuccessNotification: 'Elementos eliminados con éxito'
    },
    pt: {
        pageAction: 'Novo',
        pageActionRemoveAll: 'Excluir',
        tableActionView: 'Visualizar',
        tableActionEdit: 'Editar',
        tableActionDuplicate: 'Duplicar',
        tableActionDelete: 'Excluir',
        confirmRemoveTitle: 'Confirmar exclusão',
        confirmRemoveMessage: 'Tem certeza de que deseja excluir esse registro? Você não poderá desfazer essa ação.',
        confirmRemoveAllTitle: 'Confirmar exclusão em lote',
        confirmRemoveAllMessage: 'Tem certeza de que deseja excluir todos esses registros? Você não poderá desfazer essa ação.',
        loadDataErrorNotification: 'Serviço não informado.',
        removeSuccessNotification: 'Item excluido com sucesso',
        removeAllSuccessNotification: 'Items excluidos com sucesso'
    }
};
/**
 * \@docsExtends PoPageDynamicListBaseComponent
 *
 * \@description
 *
 * O `po-page-dynamic-table` é uma página que exibe uma lista de registros em uma tabela baseado em uma lista de fields,
 * o mesmo também suporta metadados conforme especificado na documentação.
 *
 * ### Utilização via rota
 *
 * Ao utilizar as rotas para carregar o template, o `page-dynamic-table` disponibiliza propriedades para
 * poder especificar o endpoint dos dados e dos metadados. Exemplo de utilização:
 *
 * ```
 * {
 *   path: 'people',
 *   component: PoPageDynamicTableComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata' // endpoint dos metadados
 *   }
 * }
 * ```
 *
 * Para carregar com um recurso já existente, deve ser incluído um parâmetro na rota chamado `id`:
 *
 * ```
 * {
 *   path: 'people/:id',
 *   component: PoPageDynamicTableComponent,
 *   data: {
 *     serviceApi: 'http://localhost:3000/v1/people', // endpoint dos dados
 *     serviceMetadataApi: 'http://localhost:3000/v1/metadata' // endpoint dos metadados
 *   }
 * }
 * ```
 *
 * A requisição dos metadados é feita na inicialização do template para buscar os metadados da página passando o
 * tipo do metadado esperado e a versão cacheada pelo browser.
 *
 * O formato esperado na resposta da requisição está especificado na interface
 * [PoPageDynamicTableMetadata](/documentation/po-page-dynamic-table#po-page-dynamic-table-metadata). Por exemplo:
 *
 * ```
 *  {
 *   version: 1,
 *   title: 'Person Table',
 *   fields: [
 *     { property: 'id', key: true, disabled: true },
 *     { property: 'status' },
 *     { property: 'name' },
 *     { property: 'nickname' },
 *     { property: 'birthdate', label: 'Birth date' },
 *     { property: 'genre' },
 *     { property: 'city' },
 *     { property: 'country' }
 *   ]
 * }
 * ```
 *
 * > Caso o endpoint dos metadados não seja especificado, será feito uma requisição utilizando o `serviceApi` da seguinte forma:
 * ```
 * GET {end-point}/metadata?type=list&version={version}
 * ```
 *
 * \@example
 *
 * <example name="po-page-dynamic-table-basic" title="Portinari Page Dynamic Table Basic">
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-basic/sample-po-page-dynamic-table-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-table-users" title="Portinari Page Dynamic Table - Users">
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.html"> </file>
 *  <file name="sample-po-page-dynamic-table-users/sample-po-page-dynamic-table-users.component.ts"> </file>
 * </example>
 */
class PoPageDynamicTableComponent extends PoPageDynamicListBaseComponent {
    /**
     * @param {?} router
     * @param {?} activatedRoute
     * @param {?} poDialogService
     * @param {?} poNotification
     * @param {?} poPageDynamicService
     * @param {?} poPageCustomizationService
     */
    constructor(router, activatedRoute, poDialogService, poNotification, poPageDynamicService, poPageCustomizationService) {
        super();
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.poDialogService = poDialogService;
        this.poNotification = poNotification;
        this.poPageDynamicService = poPageDynamicService;
        this.poPageCustomizationService = poPageCustomizationService;
        this._actions = {};
        this._pageActions = [];
        this._tableActions = [];
        this.page = 1;
        this.params = {};
        this.subscriptions = [];
        this.hasNext = false;
        this.items = [];
        this.literals = Object.assign({}, poPageDynamicTableLiteralsDefault[poLocaleDefault], poPageDynamicTableLiteralsDefault[browserLanguage()]);
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ações da página e da tabela.
     * @param {?} value
     * @return {?}
     */
    set actions(value) {
        this._actions = value && typeof value === 'object' && Object.keys(value).length > 0 ? value : {};
        this.setPageActions(this.actions);
        this.setRemoveAllAction();
        this.setTableActions(this.actions);
    }
    /**
     * @return {?}
     */
    get actions() {
        return this._actions;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.loadDataFromAPI();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.forEach((/**
             * @param {?} subscription
             * @return {?}
             */
            subscription => {
                subscription.unsubscribe();
            }));
        }
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    onAdvancedSearch(filter) {
        this.subscriptions.push(this.loadData(Object.assign({ page: 1 }, filter)).subscribe());
        this.params = filter;
    }
    /**
     * @param {?} disclaimers
     * @return {?}
     */
    onChangeDisclaimers(disclaimers) {
        /** @type {?} */
        const filter = {};
        disclaimers.forEach((/**
         * @param {?} disclaimer
         * @return {?}
         */
        disclaimer => {
            filter[disclaimer.property] = disclaimer.value;
        }));
        this.onAdvancedSearch(filter);
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    onQuickSearch(filter) {
        this.subscriptions.push(this.loadData(filter ? { page: 1, search: filter } : undefined).subscribe());
        this.params = filter ? { search: filter } : {};
    }
    /**
     * @param {?} sortedColumn
     * @return {?}
     */
    onSort(sortedColumn) {
        this.sortedColumn = sortedColumn;
    }
    /**
     * @return {?}
     */
    showMore() {
        this.subscriptions.push(this.loadData(Object.assign({ page: ++this.page }, this.params)).subscribe());
    }
    /**
     * @return {?}
     */
    get hasActionRemoveAll() {
        return !!this.actions.removeAll;
    }
    /**
     * @return {?}
     */
    get pageActions() {
        return [...this._pageActions];
    }
    /**
     * @return {?}
     */
    get tableActions() {
        return this._tableActions;
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    confirmRemove(item) {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveTitle,
            message: this.literals.confirmRemoveMessage,
            confirm: this.remove.bind(this, item)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @return {?}
     */
    confirmRemoveAll() {
        /** @type {?} */
        const confirmOptions = {
            title: this.literals.confirmRemoveAllTitle,
            message: this.literals.confirmRemoveAllMessage,
            confirm: this.removeAll.bind(this)
        };
        this.poDialogService.confirm(confirmOptions);
    }
    /**
     * @private
     * @param {?} item
     * @return {?}
     */
    formatUniqueKey(item) {
        /** @type {?} */
        const keys = mapObjectByProperties(item, this.keys);
        return valuesFromObject(keys).join('|');
    }
    /**
     * @private
     * @param {?=} sortedColumn
     * @return {?}
     */
    getOrderParam(sortedColumn = { type: undefined }) {
        const { column, type } = sortedColumn;
        if (!column) {
            return {};
        }
        if (type === PoTableColumnSortType.Descending) {
            return { order: `-${column.property}` };
        }
        return { order: `${column.property}` };
    }
    /**
     * @private
     * @param {?=} params
     * @return {?}
     */
    loadData(params = {}) {
        if (!this.serviceApi) {
            this.poNotification.error(this.literals.loadDataErrorNotification);
            return throwError(this.literals.loadDataErrorNotification);
        }
        /** @type {?} */
        const orderParam = this.getOrderParam(this.sortedColumn);
        /** @type {?} */
        const defaultParams = { page: 1, pageSize: 10 };
        /** @type {?} */
        const fullParams = Object.assign({}, defaultParams, params, orderParam);
        return this.poPageDynamicService.getResources(fullParams).pipe(tap((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            this.items = fullParams.page === 1 ? response.items : [...this.items, ...response.items];
            this.page = fullParams.page;
            this.hasNext = response.hasNext;
        })));
    }
    /**
     * @private
     * @param {?} serviceApi
     * @return {?}
     */
    getMetadata(serviceApi) {
        if (serviceApi) {
            return this.poPageDynamicService.getMetadata().pipe(tap((/**
             * @param {?} response
             * @return {?}
             */
            response => {
                this.autoRouter = response.autoRouter || this.autoRouter;
                this.actions = response.actions || this.actions;
                this.breadcrumb = response.breadcrumb || this.breadcrumb;
                this.fields = response.fields || this.fields;
                this.title = response.title || this.title;
            })));
        }
        return EMPTY;
    }
    // @todo Validar rotas na mão pois se existir uma rota '**' o catch do navigation não funciona.
    /**
     * @private
     * @param {?} route
     * @param {?=} forceStopAutoRouter
     * @return {?}
     */
    navigateTo(route, forceStopAutoRouter = false) {
        this.router.navigate([route.url || route.path], { queryParams: route.params })
            .catch((/**
         * @return {?}
         */
        () => {
            if (forceStopAutoRouter || !this.autoRouter) {
                return;
            }
            this.router.config.unshift((/** @type {?} */ ({
                path: route.path, component: route.component, data: { serviceApi: this.serviceApi, autoRouter: true }
            })));
            this.navigateTo(route, true);
        }));
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openDetail(path, item) {
        /** @type {?} */
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url, component: PoPageDynamicDetailComponent });
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openDuplicate(path, item) {
        /** @type {?} */
        const duplicates = mapObjectByProperties(item, this.duplicates);
        this.navigateTo({ path, params: { duplicate: JSON.stringify(duplicates) } });
    }
    /**
     * @private
     * @param {?} path
     * @param {?} item
     * @return {?}
     */
    openEdit(path, item) {
        /** @type {?} */
        const url = this.resolveUrl(item, path);
        this.navigateTo({ path, url });
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    openNew(path) {
        this.navigateTo({ path });
    }
    /**
     * Caso exista mais de um identificador, será concatenado com '|'.
     *
     * Ex: { id: 1, company: 'portinari' }
     *
     * Para o endpoint /resources/:id será executada a url /resources/1|portinari
     * @private
     * @param {?} item
     * @return {?}
     */
    remove(item) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        this.poPageDynamicService.deleteResource(uniqueKey).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.removeLocalItems([item]);
            this.poNotification.success(this.literals.removeSuccessNotification);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    removeAll() {
        // TODO: usar propriedade nova pra validar os itens selecionados
        /** @type {?} */
        const selectedItems = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => item.$selected));
        if (selectedItems.length === 0) {
            // TODO: usar propriedade nova pra validar os itens selecionados
            return;
        }
        /** @type {?} */
        const keysSelectedItems = mapArrayByProperties(selectedItems, this.keys);
        this.poPageDynamicService.deleteResources(keysSelectedItems).toPromise().then((/**
         * @return {?}
         */
        () => {
            this.removeLocalItems(selectedItems);
            this.poNotification.success(this.literals.removeAllSuccessNotification);
        }));
    }
    /**
     * @private
     * @param {?=} items
     * @return {?}
     */
    removeLocalItems(items = []) {
        items.forEach((/**
         * @param {?} itemRemoved
         * @return {?}
         */
        itemRemoved => {
            /** @type {?} */
            const indexItemRemoved = this.items.indexOf(itemRemoved);
            this.items.splice(indexItemRemoved, 1);
        }));
    }
    /**
     * @private
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    resolveUrl(item, path) {
        /** @type {?} */
        const uniqueKey = this.formatUniqueKey(item);
        return path.replace(/:id/g, uniqueKey);
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    setPageActions(actions) {
        if (actions) {
            this._pageActions = [
                { label: this.literals.pageAction, action: this.openNew.bind(this, actions.new), disabled: !this._actions.new },
            ];
        }
    }
    /**
     * @private
     * @return {?}
     */
    setRemoveAllAction() {
        if (this._actions.removeAll) {
            this._pageActions.push({
                label: this.literals.pageActionRemoveAll, action: this.confirmRemoveAll.bind(this),
                disabled: !this._actions.removeAll
            });
        }
    }
    /**
     * @private
     * @param {?} actions
     * @return {?}
     */
    setTableActions(actions) {
        if (actions) {
            this._tableActions = [
                { action: this.openDetail.bind(this, actions.detail), label: this.literals.tableActionView, visible: !!this._actions.detail },
                { action: this.openEdit.bind(this, actions.edit), label: this.literals.tableActionEdit, visible: !!this._actions.edit },
                { action: this.openDuplicate.bind(this, actions.duplicate), label: this.literals.tableActionDuplicate,
                    visible: !!this._actions.duplicate
                },
                { action: this.confirmRemove.bind(this), label: this.literals.tableActionDelete, separator: true, type: 'danger',
                    visible: !!this._actions.remove
                }
            ];
        }
    }
    /**
     * @private
     * @return {?}
     */
    loadDataFromAPI() {
        const { serviceApi, serviceMetadataApi } = this.activatedRoute.snapshot.data;
        this.serviceApi = serviceApi || this.serviceApi;
        this.poPageDynamicService.configServiceApi({ endpoint: this.serviceApi, metadata: serviceMetadataApi });
        /** @type {?} */
        const metadata$ = this.getMetadata(serviceApi);
        /** @type {?} */
        const data$ = this.loadData();
        /** @type {?} */
        const customOption$ = this.loadOptionsOnInitialize(this.onLoad);
        this.subscriptions.push(concat(metadata$, data$, customOption$).subscribe());
    }
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    loadOptionsOnInitialize(onLoad) {
        if (onLoad) {
            return this.getPoDynamicPageOptions(onLoad).pipe(tap((/**
             * @param {?} responsePoOption
             * @return {?}
             */
            responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption))));
        }
        return EMPTY;
    }
    /**
     * @private
     * @param {?} onLoad
     * @return {?}
     */
    getPoDynamicPageOptions(onLoad) {
        /** @type {?} */
        const originalOption = {
            fields: this.fields,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            title: this.title
        };
        /** @type {?} */
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'fields',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
}
PoPageDynamicTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-table',
                template: "<po-page-dynamic-search\n  [p-actions]=\"pageActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-filters]=\"filters\"\n  [p-title]=\"title\"\n  (p-advanced-search)=\"onAdvancedSearch($event)\"\n  (p-change-disclaimers)=\"onChangeDisclaimers($event)\"\n  (p-quick-search)=\"onQuickSearch($event)\">\n\n  <po-table\n    p-sort=\"true\"\n    [p-actions]=\"tableActions\"\n    [p-checkbox]=\"hasActionRemoveAll\"\n    [p-columns]=\"columns\"\n    [p-items]=\"items\"\n    [p-show-more-disabled]=\"!hasNext\"\n    (p-show-more)=\"showMore()\"\n    (p-sort-by)=\"onSort($event)\">\n  </po-table>\n\n</po-page-dynamic-search>\n",
                providers: [PoPageDynamicService]
            }] }
];
/** @nocollapse */
PoPageDynamicTableComponent.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: PoDialogService },
    { type: PoNotificationService },
    { type: PoPageDynamicService },
    { type: PoPageCustomizationService }
];
PoPageDynamicTableComponent.propDecorators = {
    onLoad: [{ type: Input, args: ['p-load',] }],
    actions: [{ type: Input, args: ['p-actions',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype._actions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype._pageActions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype._tableActions;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.page;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.params;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.sortedColumn;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.subscriptions;
    /** @type {?} */
    PoPageDynamicTableComponent.prototype.hasNext;
    /** @type {?} */
    PoPageDynamicTableComponent.prototype.items;
    /** @type {?} */
    PoPageDynamicTableComponent.prototype.literals;
    /**
     * Função ou serviço que será executado na inicialização do componente.
     *
     * A propriedade aceita os seguintes tipos:
     * - `string`: *Endpoint* usado pelo componente para requisição via `POST`.
     * - `function`: Método que será executado.
     *
     * O retorno desta função deve ser do tipo `PoPageDynamicTableOptions`,
     * onde o usuário poderá customizar novos campos, breadcrumb, title e actions
     *
     * Por exemplo:
     *
     * ```
     * getPageOptions(): PoPageDynamicTableOptions {
     * return {
     *   actions:
     *     { new: 'new', edit: 'edit/:id', remove: true },
     *   fields: [
     *     { property: 'idCard', gridColumns: 6 }
     *   ]
     * };
     * }
     *
     * ```
     * Para referenciar a sua função utilize a propriedade `bind`, por exemplo:
     * ```
     *  [p-load]="onLoadOptions.bind(this)"
     * ```
     * @type {?}
     */
    PoPageDynamicTableComponent.prototype.onLoad;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.poDialogService;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.poNotification;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.poPageDynamicService;
    /**
     * @type {?}
     * @private
     */
    PoPageDynamicTableComponent.prototype.poPageCustomizationService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-page-dynamic-search.
 */
class PoPageDynamicTableModule {
}
PoPageDynamicTableModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoTableModule,
                    PoPageDynamicSearchModule,
                    PoPageCustomizationModule,
                    PoPageDynamicModule
                ],
                declarations: [
                    PoPageDynamicTableComponent
                ],
                exports: [
                    PoPageDynamicTableComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageJobSchedulerInternal {
    constructor() {
        this.periodicity = 'single';
        this.firstExecution = new Date();
        this.firstExecutionHour = this.getCurrentHour(this.firstExecution);
        this.recurrent = true;
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getCurrentHour(date) {
        /** @type {?} */
        const hours = date.getHours() < 10 ? '0' + date.getHours() : date.getHours();
        /** @type {?} */
        const minutes = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();
        return `${hours}:${minutes}`;
    }
}
if (false) {
    /** @type {?} */
    PoPageJobSchedulerInternal.prototype.periodicity;
    /** @type {?} */
    PoPageJobSchedulerInternal.prototype.firstExecution;
    /** @type {?} */
    PoPageJobSchedulerInternal.prototype.firstExecutionHour;
    /** @type {?} */
    PoPageJobSchedulerInternal.prototype.recurrent;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * O `po-page-job-scheduler` é uma página para criação e atualização do *Job Scheduler* de forma simplificada, apenas informando
 * o serviço (endpoint) para consumo, sem a necessidade de criar componentes e tratamentos dos dados.
 */
class PoPageJobSchedulerBaseComponent {
    /**
     * @param {?} poPageJobSchedulerService
     */
    constructor(poPageJobSchedulerService) {
        this.poPageJobSchedulerService = poPageJobSchedulerService;
        /**
         * Objeto com propriedades do breadcrumb.
         */
        this.breadcrumb = { items: [] };
        this.model = new PoPageJobSchedulerInternal();
    }
    /**
     * @protected
     * @param {?} id
     * @return {?}
     */
    loadData(id) {
        if (!id) {
            this.model = new PoPageJobSchedulerInternal();
            return;
        }
        this.poPageJobSchedulerService.getResource(id).toPromise().then((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.model = response;
        })).catch((/**
         * @return {?}
         */
        () => {
            this.model = new PoPageJobSchedulerInternal();
        }));
    }
    /**
     * @protected
     * @param {?} controls
     * @return {?}
     */
    markAsDirtyInvalidControls(controls) {
        for (const key in controls) {
            if (controls.hasOwnProperty(key)) {
                /** @type {?} */
                const control = controls[key];
                if (control.invalid) {
                    control.markAsDirty();
                }
            }
        }
    }
}
PoPageJobSchedulerBaseComponent.propDecorators = {
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }],
    title: [{ type: Input, args: ['p-title',] }]
};
if (false) {
    /**
     * Objeto com propriedades do breadcrumb.
     * @type {?}
     */
    PoPageJobSchedulerBaseComponent.prototype.breadcrumb;
    /**
     * Endpoint usado pelo template para requisição do recurso que será utilizado para criação e edição.
     *
     * #### Processos
     *
     * Em sua inicialização será verificado a existência do endpoint `{end-point}/processes`.
     * Caso o endpoint seja válido, será utilizado um componente para selecionar o processo e filtrá-los.
     * Caso não seja válido, será utilizado um campo de entrada de texto para informar o endpoint.
     *
     * Para realizar o filtro de busca do processo, será enviado o conteúdo a ser filtrado através da propriedade *search*.
     * Os processos devem retornar uma lista de objetos que seguem a definição de dados abaixo:
     *
     * ```
     * GET {end-point}/processes?search=ac04
     * ...
     * { "processID": "string", "description": "string" }
     * ```
     *
     * Para retornar parâmetros dos processos, será realizado um `GET` como exemplificado abaixo.
     * Os parâmetros devem retornar uma lista de objetos que seguem a interface [PoDynamicFormField](/documentation/po-dynamic-form).
     *
     * ```
     * GET {end-point}/processes/:id/parameters
     * ...
     * { items: [{ "property": "server" }, { "property": "program" }] }
     * ```
     *
     * #### Salvar e Atualizar
     *
     * Para salvar o recurso, será feito uma requisição de criação no mesmo endpoint, passando os valores
     * preenchidos pelo usuário via *payload*. Abaixo uma requisição `POST` disparada,
     * onde as propriedades do *Job Scheduler* foram preenchidas:
     *
     * ```
     *  POST /api/po-samples/v1/jobschedulers HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * *Request payload*:
     *
     * ```
     * { "firstExecution": "2018-12-07T00:00:01-00:00", "recurrent": true, "daily": { "hour": 10, "minute": 12 }, "processID": "ac0405" }
     * ```
     *
     * Caso queira que o template carregue um recurso já existente, deve ser incluído um parâmetro na rota chamado `id`.
     *
     * Exemplo de configuração de rota:
     *
     * ```
     *  RouterModule.forRoot([
     *    ...
     *    { path: 'edit/:id', component: ExampleJobSchedulerComponent },
     *    ...
     *  ],
     * ```
     *
     * Baseado nisso, na inicialização do template será disparado uma requisição para buscar o recurso que será editado.
     *
     * ```
     * GET {end-point}/{id}
     * ```
     *
     * Ao salvar o recurso será disparado um `PUT` com os dados preenchidos. Abaixo uma requisição `PUT` disparada,
     * onde a propriedade *recurrent* e *daily* foram preenchidas/atualizadas e o `id` da url é 1:
     *
     * ```
     *  PUT /api/po-samples/v1/jobschedulers/1 HTTP/1.1
     *  Host: localhost:4000
     *  Connection: keep-alive
     *  Accept: application/json, text/plain
     *  ...
     * ```
     *
     * *Request payload*:
     *
     * ```
     * { "firstExecution": "2018-12-07T00:00:01-00:00", "recurrent": false, "daily": { "hour": 11, "minute": 30 }, "processID": "ac0405" }
     * ```
     * @type {?}
     */
    PoPageJobSchedulerBaseComponent.prototype.serviceApi;
    /**
     * Título da página.
     * @type {?}
     */
    PoPageJobSchedulerBaseComponent.prototype.title;
    /** @type {?} */
    PoPageJobSchedulerBaseComponent.prototype.model;
    /**
     * @type {?}
     * @protected
     */
    PoPageJobSchedulerBaseComponent.prototype.poPageJobSchedulerService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageJobSchedulerLiteralsDefault = {
    en: {
        at: 'at',
        back: 'Back',
        next: 'Next',
        periodicity: 'Periodicity',
        execution: 'Execution',
        process: 'Process',
        enterProcess: 'Enter a process',
        recurrent: 'Recurrent',
        single: 'Single',
        daily: 'Daily',
        weekly: 'Weekly',
        monthly: 'Monthly',
        scheduling: 'Scheduling',
        parameterization: 'Parameterization',
        conclude: 'Conclude',
        firstExecution: 'First Execution',
        hour: 'Hour',
        day: 'Day',
        weekDays: 'Week days',
        sunday: 'Sunday',
        monday: 'Monday',
        tuesday: 'Tuesday',
        wednesday: 'Wednesday',
        thursday: 'Thursday',
        friday: 'Friday',
        saturday: 'Saturday',
        parameters: 'Parameters',
        yes: 'Yes',
        no: 'No',
        notReported: 'Not reported',
        periodicityData: 'Periodicity data',
        confirmation: 'Confirmation',
        confirmSaveMessage: 'Are you sure you want to complete this schedule?',
        confirmUpdateMessage: 'Are you sure you want to update this schedule?',
        saveNotificationSuccessUpdate: 'Successfully updated scheduling',
        saveNotificationSuccessSave: 'Successfully saved scheduling',
        parametersNotFound: 'Parameters not found.'
    },
    es: {
        at: 'a las',
        back: 'Volver',
        next: 'Avanzar',
        periodicity: 'Periodicidad',
        execution: 'Ejecución',
        process: 'Proceso',
        enterProcess: 'Informe un proceso',
        recurrent: 'Recurrente',
        single: 'Única',
        daily: 'Diaria',
        weekly: 'Semanal',
        monthly: 'Mensual',
        scheduling: 'Programación',
        parameterization: 'Parametrización',
        conclude: 'Completar',
        firstExecution: 'Primera ejecución',
        hour: 'Horario',
        day: 'Día',
        weekDays: 'Dias de la semana',
        sunday: 'Domingo',
        monday: 'Lunes',
        tuesday: 'Martes',
        wednesday: 'Miércoles',
        thursday: 'Jueves',
        friday: 'Viernes',
        saturday: 'Sábado',
        parameters: 'Parámetros',
        yes: 'Sí',
        no: 'No',
        notReported: 'No informado',
        periodicityData: 'Dados da periodicidade',
        confirmation: 'Confirmación',
        confirmSaveMessage: '¿Está seguro de que desea completar esta programación de proceso?',
        confirmUpdateMessage: '¿Está seguro de que desea cambiar esta programación de proceso?',
        saveNotificationSuccessUpdate: 'Programación de proceso actualizada con éxito.',
        saveNotificationSuccessSave: 'Programación de proceso salvo con éxito.',
        parametersNotFound: 'No se encontraron parámetros.'
    },
    pt: {
        at: 'às',
        back: 'Voltar',
        next: 'Avançar',
        periodicity: 'Periodicidade',
        execution: 'Execução',
        process: 'Processo',
        enterProcess: 'Informe um processo',
        recurrent: 'Recorrente',
        single: 'Única',
        daily: 'Diária',
        weekly: 'Semanal',
        monthly: 'Mensal',
        scheduling: 'Agendamento',
        parameterization: 'Parametrização',
        conclude: 'Concluir',
        firstExecution: 'Primeira execução',
        hour: 'Horário',
        day: 'Dia',
        weekDays: 'Dias de semana',
        sunday: 'Domingo',
        monday: 'Segunda-feira',
        tuesday: 'Terça-feira',
        wednesday: 'Quarta-feira',
        thursday: 'Quinta-feira',
        friday: 'Sexta-feira',
        saturday: 'Sábado',
        parameters: 'Parâmetros',
        yes: 'Sim',
        no: 'Não',
        notReported: 'Não informado',
        periodicityData: 'Dados da periodicidade',
        confirmation: 'Confirmação',
        confirmSaveMessage: 'Tem certeza que deseja concluir este agendamento de processo?',
        confirmUpdateMessage: 'Tem certeza que deseja alterar este agendamento de processo?',
        saveNotificationSuccessUpdate: 'Agendamento de processo atualizado com sucesso.',
        saveNotificationSuccessSave: 'Agendamento de processo salvo com sucesso.',
        parametersNotFound: 'Parâmetros não foram encontrados.'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageJobSchedulerService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.endpoint = '/';
        this.headers = new HttpHeaders({
            'X-PORTINARI-SCREEN-LOCK': 'true'
        });
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    configServiceApi(config = {}) {
        this.endpoint = config.endpoint;
    }
    // Cria um recurso
    /**
     * @param {?} resource
     * @return {?}
     */
    createResource(resource) {
        /** @type {?} */
        const jobScheduler = this.convertToJobScheduler(resource);
        return this.http.post(`${this.endpoint}`, jobScheduler, { headers: this.headers });
    }
    /**
     * @return {?}
     */
    getHeadProcesses() {
        /** @type {?} */
        const headers = { 'X-Portinari-No-Error': 'true' };
        return this.http.head(`${this.endpoint}/processes`, { headers });
    }
    // Busca parametros pelo processo id
    /**
     * @param {?} processId
     * @return {?}
     */
    getParametersByProcess(processId) {
        return this.http.get(`${this.endpoint}/processes/${processId}/parameters`, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        (resource) => resource.items)));
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getProcess(id) {
        return this.http.get(`${this.endpoint}/processes/${id}`, { headers: this.headers });
    }
    // Busca uma lista de processos
    /**
     * @param {?=} params
     * @return {?}
     */
    getProcesses(params = {}) {
        return this.http.get(`${this.endpoint}/processes`, { params });
    }
    // Busca um único recurso
    /**
     * @param {?} id
     * @return {?}
     */
    getResource(id) {
        return this.http.get(`${this.endpoint}/${id}`, { headers: this.headers })
            .pipe(map((/**
         * @param {?} resource
         * @return {?}
         */
        resource => this.convertToJobSchedulerInternal(resource))));
    }
    // Atualiza um recurso
    /**
     * @param {?} id
     * @param {?} resource
     * @return {?}
     */
    updateResource(id, resource) {
        /** @type {?} */
        const jobScheduler = this.convertToJobScheduler(resource);
        return this.http.put(`${this.endpoint}/${id}`, jobScheduler, { headers: this.headers });
    }
    /**
     * @private
     * @param {?} jobSchedulerInternal
     * @return {?}
     */
    convertToJobScheduler(jobSchedulerInternal) {
        /** @type {?} */
        const jobScheduler = Object.assign({}, jobSchedulerInternal);
        if (jobSchedulerInternal.periodicity) {
            if (jobSchedulerInternal.periodicity === 'single') {
                jobScheduler.recurrent = false;
            }
            else {
                Object.assign(jobScheduler, this.convertToPeriodicity(jobSchedulerInternal));
            }
        }
        if (jobSchedulerInternal.firstExecutionHour) {
            jobScheduler.firstExecution =
                this.replaceHourFirstExecution(jobSchedulerInternal.firstExecution, jobSchedulerInternal.firstExecutionHour);
        }
        if (!Object.keys(this.returnValidExecutionParameter(jobScheduler.executionParameter)).length) {
            delete jobScheduler.executionParameter;
        }
        this.removeInvalidKeys(jobScheduler);
        return jobScheduler;
    }
    /**
     * @private
     * @param {?=} jobScheduler
     * @return {?}
     */
    convertToJobSchedulerInternal(jobScheduler = (/** @type {?} */ ({}))) {
        /** @type {?} */
        const jobSchedulerInternal = Object.assign({}, jobScheduler);
        if (jobScheduler.firstExecution) {
            jobSchedulerInternal.firstExecutionHour = this.getHourFirstExecution(jobScheduler.firstExecution);
        }
        Object.assign(jobSchedulerInternal, this.convertToPeriodicityInternal(jobScheduler));
        this.removeInvalidKeys(jobSchedulerInternal, ['weekly', 'monthly', 'daily']);
        return jobSchedulerInternal;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    convertToPeriodicity(value) {
        /** @type {?} */
        const newValue = {};
        /** @type {?} */
        const valuePeriodicity = value.periodicity;
        if (valuePeriodicity) {
            newValue[valuePeriodicity] = {};
            if (valuePeriodicity === 'monthly') {
                newValue[valuePeriodicity].day = value.dayOfMonth ? parseInt(value.dayOfMonth, 10) : 0;
            }
            else if (valuePeriodicity === 'weekly') {
                newValue[valuePeriodicity].daysOfWeek = value.daysOfWeek;
            }
            newValue[valuePeriodicity].hour = value.hour ? parseInt(value.hour.split(':')[0], 10) : 0;
            newValue[valuePeriodicity].minute = value.hour ? parseInt(value.hour.split(':')[1], 10) : 0;
        }
        return newValue;
    }
    /**
     * @private
     * @param {?=} value
     * @return {?}
     */
    convertToPeriodicityInternal(value = (/** @type {?} */ ({}))) {
        if (value.monthly) {
            return {
                periodicity: 'monthly',
                hour: `${addZero(value.monthly.hour)}:${addZero(value.monthly.minute)}`,
                dayOfMonth: value.monthly.day
            };
        }
        else if (value.daily) {
            return {
                periodicity: 'daily',
                hour: `${addZero(value.daily.hour)}:${addZero(value.daily.minute)}`
            };
        }
        else if (value.weekly) {
            return {
                periodicity: 'weekly',
                hour: `${addZero(value.weekly.hour)}:${addZero(value.weekly.minute)}`,
                daysOfWeek: [...value.weekly.daysOfWeek]
            };
        }
        else {
            return {
                periodicity: 'single'
            };
        }
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getCurrentHour(date) {
        /** @type {?} */
        const hours = addZero(date.getHours());
        /** @type {?} */
        const minutes = addZero(date.getMinutes());
        return `${hours}:${minutes}`;
    }
    /**
     * @private
     * @param {?} firstExecutionDate
     * @return {?}
     */
    getHourFirstExecution(firstExecutionDate) {
        return this.getCurrentHour(new Date(firstExecutionDate));
    }
    /**
     * @private
     * @param {?} value
     * @param {?=} keys
     * @return {?}
     */
    removeInvalidKeys(value, keys) {
        /** @type {?} */
        const invalidKeys = keys || ['periodicity', 'hour', 'minute', 'day', 'daysOfWeek', 'dayOfMonth', 'firstExecutionHour'];
        Object.keys(value).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            if (invalidKeys.includes(key)) {
                delete value[key];
            }
        }));
    }
    /**
     * @private
     * @param {?} date
     * @param {?} time
     * @return {?}
     */
    replaceHourFirstExecution(date, time) {
        /** @type {?} */
        const firstExecutionDate = new Date(date);
        /** @type {?} */
        const timeSplited = time.split(':');
        /** @type {?} */
        const hours = parseInt(timeSplited[0], 10);
        /** @type {?} */
        const minutes = parseInt(timeSplited[1], 10);
        firstExecutionDate.setHours(hours, minutes);
        return convertDateToISOExtended(firstExecutionDate);
    }
    /**
     * @private
     * @param {?} parameter
     * @return {?}
     */
    returnValidExecutionParameter(parameter) {
        /** @type {?} */
        const newParameter = Object.assign({}, parameter);
        for (const key in newParameter) {
            if (newParameter.hasOwnProperty(key) && newParameter[key] === undefined) {
                delete newParameter[key];
            }
        }
        return newParameter;
    }
}
PoPageJobSchedulerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoPageJobSchedulerService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerService.prototype.endpoint;
    /** @type {?} */
    PoPageJobSchedulerService.prototype.headers;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageJobSchedulerLookupService {
    /**
     * @param {?} poPageJobSchedulerService
     */
    constructor(poPageJobSchedulerService) {
        this.poPageJobSchedulerService = poPageJobSchedulerService;
    }
    /**
     * @param {?} search
     * @param {?} page
     * @param {?} pageSize
     * @return {?}
     */
    getFilteredData(search, page, pageSize) {
        /** @type {?} */
        const params = { page, pageSize, search };
        return this.poPageJobSchedulerService.getProcesses(params);
    }
    /**
     * @param {?} processId
     * @return {?}
     */
    getObjectByValue(processId) {
        return this.poPageJobSchedulerService.getProcess(processId);
    }
}
PoPageJobSchedulerLookupService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoPageJobSchedulerLookupService.ctorParameters = () => [
    { type: PoPageJobSchedulerService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerLookupService.prototype.poPageJobSchedulerService;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageJobSchedulerBaseComponent
 *
 * \@example
 *
 * <example name="po-page-job-scheduler-basic" title="Portinari Page Job Scheduler Basic">
 *  <file name="sample-po-page-job-scheduler-basic/sample-po-page-job-scheduler-basic.component.html"> </file>
 *  <file name="sample-po-page-job-scheduler-basic/sample-po-page-job-scheduler-basic.component.ts"> </file>
 * </example>
 *
 */
class PoPageJobSchedulerComponent extends PoPageJobSchedulerBaseComponent {
    /**
     * @param {?} poPageDynamicLookupService
     * @param {?} activatedRoute
     * @param {?} poDialogService
     * @param {?} poNotification
     * @param {?} router
     * @param {?} poPageJobSchedulerService
     */
    constructor(poPageDynamicLookupService, activatedRoute, poDialogService, poNotification, router, poPageJobSchedulerService) {
        super(poPageJobSchedulerService);
        this.poPageDynamicLookupService = poPageDynamicLookupService;
        this.activatedRoute = activatedRoute;
        this.poDialogService = poDialogService;
        this.poNotification = poNotification;
        this.router = router;
        this.isEdit = false;
        this.literals = Object.assign({}, poPageJobSchedulerLiteralsDefault[poLocaleDefault], poPageJobSchedulerLiteralsDefault[browserLanguage()]);
        this.parameters = [];
        this.step = 1;
        this.backPageAction = {
            label: this.literals.back,
            action: this.nextStepOperation.bind(this, 'back'),
            disabled: this.isDisabledBack.bind(this)
        };
        this.concludePageActions = [
            {
                label: this.literals.conclude,
                action: this.confirmJobScheduler.bind(this)
            },
            Object.assign({}, this.backPageAction)
        ];
        this.nextPageActions = [
            {
                label: this.literals.next,
                action: this.nextStepOperation.bind(this, 'next'),
                disabled: this.isDisabledAdvance.bind(this)
            },
            Object.assign({}, this.backPageAction)
        ];
        this.jobSchedulerActions = [
            ...this.nextPageActions
        ];
        this.steps = [
            { label: this.literals.scheduling },
            { label: this.literals.parameterization },
            { label: this.literals.conclude }
        ];
    }
    /**
     * @return {?}
     */
    get stepperOrientation() {
        return window.innerWidth > 481 && window.innerWidth < 960 ? 'horizontal' : 'vertical';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        this.isEdit = !!paramId;
        this.poPageJobSchedulerService.configServiceApi({ endpoint: this.serviceApi });
        this.loadData(paramId);
    }
    /**
     * @param {?} currentStep
     * @param {?} nextStep
     * @return {?}
     */
    changePageActionsBySteps(currentStep, nextStep) {
        /** @type {?} */
        const stepsLength = this.steps.length;
        if (nextStep === stepsLength) {
            this.jobSchedulerActions = [...this.concludePageActions];
        }
        else if (currentStep === stepsLength && nextStep < currentStep) {
            this.jobSchedulerActions = [...this.nextPageActions];
        }
    }
    /**
     * @param {?} stepNumber
     * @return {?}
     */
    nextStep(stepNumber) {
        if (stepNumber > 1 && this.schedulerExecution.form.invalid) {
            this.markAsDirtyInvalidControls(this.schedulerExecution.form.controls);
            return;
        }
        if (stepNumber > 2 && (this.schedulerParameters && this.schedulerParameters.form && this.schedulerParameters.form.invalid)) {
            this.markAsDirtyInvalidControls(this.schedulerParameters.form.controls);
            return;
        }
        this.changePageActionsBySteps(this.step, stepNumber);
        /** @type {?} */
        const steps = this.steps[this.step - 1];
        this.step = stepNumber;
        if (steps) {
            steps.status = PoStepperStatus.Done;
        }
    }
    /**
     * @param {?} process
     * @return {?}
     */
    onChangeProcess(process) {
        if (process.existAPI && process.processId) {
            this.getParametersByProcess(process.processId);
            if (!this.isEdit) {
                this.model.executionParameter = {};
            }
            return;
        }
    }
    /**
     * @private
     * @return {?}
     */
    confirmJobScheduler() {
        /** @type {?} */
        const paramId = this.activatedRoute.snapshot.params['id'];
        /** @type {?} */
        const confirmMessage = paramId ? this.literals.confirmUpdateMessage : this.literals.confirmSaveMessage;
        this.poDialogService.confirm({
            title: this.literals.confirmation,
            message: confirmMessage,
            confirm: (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const model = Object.assign({}, this.model);
                this.save(model, paramId);
            })
        });
    }
    /**
     * @private
     * @param {?} msgSuccess
     * @param {?} saveOperation
     * @return {?}
     */
    emitSuccessMessage(msgSuccess, saveOperation) {
        return __awaiter(this, void 0, void 0, function* () {
            yield saveOperation.toPromise();
            this.poNotification.success(msgSuccess);
            this.resetJobSchedulerForm();
        });
    }
    /**
     * @private
     * @param {?} process
     * @return {?}
     */
    getParametersByProcess(process) {
        this.poPageJobSchedulerService.getParametersByProcess(process).subscribe((/**
         * @param {?} parameters
         * @return {?}
         */
        parameters => {
            this.parameters = parameters;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    isDisabledAdvance() {
        return this.schedulerExecution ? this.schedulerExecution.form.invalid : false;
    }
    /**
     * @private
     * @return {?}
     */
    isDisabledBack() {
        return this.step === 1;
    }
    /**
     * @private
     * @param {?=} operation
     * @return {?}
     */
    nextStepOperation(operation) {
        /** @type {?} */
        const stepNumber = operation === 'back' ? this.step - 1 : this.step + 1;
        this.nextStep(stepNumber);
    }
    /**
     * @private
     * @return {?}
     */
    resetJobSchedulerForm() {
        this.schedulerExecution.form.reset();
        // radiogroup não estava atribuindo novo valor, fica vermelho sem o timetout.
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.model = new PoPageJobSchedulerInternal();
            this.step = 1;
            this.steps.forEach((/**
             * @param {?} step
             * @return {?}
             */
            step => {
                step.status = PoStepperStatus.Default;
            }));
            this.jobSchedulerActions = [...this.nextPageActions];
        }));
    }
    /**
     * @private
     * @param {?} model
     * @param {?} paramId
     * @return {?}
     */
    save(model, paramId) {
        /** @type {?} */
        const saveOperation = paramId
            ? this.poPageJobSchedulerService.updateResource(paramId, model)
            : this.poPageJobSchedulerService.createResource(model);
        /** @type {?} */
        const msgSuccess = paramId ? this.literals.saveNotificationSuccessUpdate : this.literals.saveNotificationSuccessSave;
        this.emitSuccessMessage(msgSuccess, saveOperation);
    }
}
PoPageJobSchedulerComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-job-scheduler',
                template: "<po-page-default\n  [p-actions]=\"jobSchedulerActions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-title]=\"title\">\n\n  <div class=\"po-row\">\n\n    <po-stepper\n      class=\"po-lg-3 po-xl-2\"\n      p-sequential=\"true\"\n      [p-orientation]=\"stepperOrientation\"\n      [p-step]=\"step\"\n      [p-steps]=\"steps\"\n      (p-change-step)=\"nextStep($event)\">\n    </po-stepper>\n\n    <po-container class=\"po-lg-8 po-xl-6\">\n      <form #formScheduler=\"ngForm\">\n        <div class=\"po-row\">\n          <po-page-job-scheduler-execution [hidden]=\"step !== 1\"\n            #schedulerExecution\n            class=\"po-md-12\"\n            [p-is-edit]=\"isEdit\"\n            [p-literals]=\"literals\"\n            [p-value]=\"model\"\n            (p-change-process)=\"onChangeProcess($event)\">\n          </po-page-job-scheduler-execution>\n\n          <po-page-job-scheduler-parameters *ngIf=\"step === 2\"\n            #schedulerParameters\n            class=\"po-md-12\"\n            [p-literals]=\"literals\"\n            [p-parameters]=\"parameters || []\"\n            [(p-value)]=\"model.executionParameter\">\n          </po-page-job-scheduler-parameters>\n\n          <po-page-job-scheduler-summary *ngIf=\"step === 3\"\n            class=\"po-md-12\"\n            [p-literals]=\"literals\"\n            [p-parameters]=\"parameters\"\n            [p-value]=\"model\">\n          </po-page-job-scheduler-summary>\n        </div>\n      </form>\n    </po-container>\n  </div>\n\n</po-page-default>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [`
    po-container .po-container {
      overflow-y: unset;
    }
  `]
            }] }
];
/** @nocollapse */
PoPageJobSchedulerComponent.ctorParameters = () => [
    { type: PoPageJobSchedulerLookupService },
    { type: ActivatedRoute },
    { type: PoDialogService },
    { type: PoNotificationService },
    { type: Router },
    { type: PoPageJobSchedulerService }
];
PoPageJobSchedulerComponent.propDecorators = {
    schedulerExecution: [{ type: ViewChild, args: ['schedulerExecution', { static: true },] }],
    schedulerParameters: [{ type: ViewChild, args: ['schedulerParameters', { static: true },] }]
};
if (false) {
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.isEdit;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.literals;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.parameters;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.saveOperation;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.step;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerComponent.prototype.backPageAction;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerComponent.prototype.concludePageActions;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerComponent.prototype.nextPageActions;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.jobSchedulerActions;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.steps;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.schedulerExecution;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.schedulerParameters;
    /** @type {?} */
    PoPageJobSchedulerComponent.prototype.poPageDynamicLookupService;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerComponent.prototype.poDialogService;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerComponent.prototype.poNotification;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerComponent.prototype.router;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageJobSchedulerExecutionComponent {
    /**
     * @param {?} poPageJobSchedulerService
     * @param {?} poPageJobSchedulerLookup
     */
    constructor(poPageJobSchedulerService, poPageJobSchedulerLookup) {
        this.poPageJobSchedulerService = poPageJobSchedulerService;
        this.poPageJobSchedulerLookup = poPageJobSchedulerLookup;
        this._value = {};
        this.dayPattern = '^(3[0-1]|[0-2][0-9]|[1-9]|0[1-9])$';
        this.existProcessAPI = true;
        this.minDateFirstExecution = new Date();
        this.periodicityOptions = [];
        this.timePattern = '^(2[0-3]|[01][0-9]):?([0-5][0-9])$';
        this.weekDays = [];
        this.isEdit = false;
        this.literals = (/** @type {?} */ ({}));
        this.changeProcess = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        this._value = value && isTypeof(value, 'object') ? value : {};
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    get startDateFirstExecution() {
        return this.isEdit ? undefined : this.minDateFirstExecution;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.subscribeProcessIdValueChanges();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.periodicityTemplates = {
            daily: this.dailyTemplate,
            monthly: this.monthlyTemplate,
            weekly: this.weeklyTempalte
        };
        this.checkExistsProcessesAPI();
        this.periodicityOptions = this.getPeriodicityOptions();
        this.weekDays = this.getWeekDays();
    }
    /**
     * @private
     * @return {?}
     */
    checkExistsProcessesAPI() {
        this.poPageJobSchedulerService.getHeadProcesses().subscribe(undefined, (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.existProcessAPI = false;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    getPeriodicityOptions() {
        return [
            { label: this.literals.single, value: 'single' },
            { label: this.literals.daily, value: 'daily' },
            { label: this.literals.weekly, value: 'weekly' },
            { label: this.literals.monthly, value: 'monthly' }
        ];
    }
    /**
     * @private
     * @return {?}
     */
    getWeekDays() {
        return [
            { label: this.literals.sunday, value: 'Sunday' },
            { label: this.literals.monday, value: 'Monday' },
            { label: this.literals.tuesday, value: 'Tuesday' },
            { label: this.literals.wednesday, value: 'Wednesday' },
            { label: this.literals.thursday, value: 'Thursday' },
            { label: this.literals.friday, value: 'Friday' },
            { label: this.literals.saturday, value: 'Saturday' }
        ];
    }
    /**
     * @private
     * @return {?}
     */
    subscribeProcessIdValueChanges() {
        this.form.controls['processID'].valueChanges.subscribe((/**
         * @param {?} processId
         * @return {?}
         */
        processId => {
            this.changeProcess.emit({ processId, existAPI: this.existProcessAPI });
        }));
    }
}
PoPageJobSchedulerExecutionComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-job-scheduler-execution',
                template: "<form #formExecution=\"ngForm\">\n  <div class=\"po-row\">\n    <ng-container *ngIf=\"existProcessAPI; then lookupProcessesID; else inputProcessesID\"></ng-container>\n  </div>\n\n  <div class=\"po-row\">\n    <po-divider class=\"po-md-12\" [p-label]=\"literals.firstExecution\"></po-divider>\n\n    <po-datepicker\n      class=\"po-md-4\"\n      name=\"firstExecution\"\n      [(ngModel)]=\"value.firstExecution\"\n      p-placeholder=\"dd/mm/aaaa\"\n      p-required\n      [p-disabled]=\"isEdit\"\n      [p-label]=\"literals.day\"\n      [p-min-date]=\"startDateFirstExecution\">\n    </po-datepicker>\n\n    <po-input\n      class=\"po-md-2\"\n      name=\"firstExecutionHour\"\n      [(ngModel)]=\"value.firstExecutionHour\"\n      p-mask=\"99:99\"\n      p-mask-format-model\n      p-placeholder=\"HH:mm\"\n      p-required\n      [p-disabled]=\"isEdit\"\n      [p-label]=\"literals.hour\"\n      [p-pattern]=\"timePattern\">\n    </po-input>\n\n  </div>\n\n  <hr>\n\n  <div class=\"po-row\">\n    <po-radio-group\n      class=\"po-sm-12\"\n      name=\"periodicity\"\n      [(ngModel)]=\"value.periodicity\"\n      p-columns=\"4\"\n      p-required\n      [p-label]=\"literals.periodicity\"\n      [p-options]=\"periodicityOptions\">\n    </po-radio-group>\n\n    <ng-container *ngIf=\"value.periodicity !== 'single'\">\n      <po-divider class=\"po-md-12\" [p-label]=\"literals.periodicityData\">\n      </po-divider>\n\n      <div class=\"po-row\">\n        <ng-container *ngTemplateOutlet=\"periodicityTemplates[value.periodicity]\">\n        </ng-container>\n      </div>\n\n      <div class=\"po-row\">\n        <po-switch\n          class=\"po-md-3\"\n          name=\"recurrent\"\n          [(ngModel)]=\"value.recurrent\"\n          [p-label]=\"literals.recurrent\"\n          [p-label-off]=\"literals.no\"\n          [p-label-on]=\"literals.yes\">\n        </po-switch>\n      </div>\n    </ng-container>\n  </div>\n\n  <ng-template #lookupProcessesID>\n    <po-lookup\n      class=\"po-md-12\"\n      name=\"processID\"\n      [(ngModel)]=\"value.processID\"\n      p-field-label=\"description\"\n      p-field-value=\"processID\"\n      p-required\n      [p-disabled]=\"isEdit\"\n      [p-filter-service]=\"poPageJobSchedulerLookup\"\n      [p-label]=\"literals.process\"\n      [p-placeholder]=\"literals.enterProcess\">\n    </po-lookup>\n  </ng-template>\n\n  <ng-template #inputProcessesID>\n    <po-input\n      class=\"po-md-12\"\n      name=\"processID\"\n      [(ngModel)]=\"value.processID\"\n      p-required\n      [p-disabled]=\"isEdit\"\n      [p-label]=\"literals.process\"\n      [p-placeholder]=\"literals.enterProcess\">\n    </po-input>\n  </ng-template>\n\n  <ng-template #dailyTemplate>\n    <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n    </ng-container>\n  </ng-template>\n\n  <ng-template #weeklyTemplate>\n    <div class=\"po-row\">\n      <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n      </ng-container>\n    </div>\n\n    <po-checkbox-group\n      class=\"po-md-12\"\n      name=\"daysOfWeek\"\n      [(ngModel)]=\"value.daysOfWeek\"\n      p-columns=\"4\"\n      p-required\n      [p-label]=\"literals.weekDays\"\n      [p-options]=\"weekDays\">\n    </po-checkbox-group>\n  </ng-template>\n\n  <ng-template #monthlyTemplate>\n    <po-number\n      class=\"po-md-3\"\n      name=\"dayOfMonth\"\n      [(ngModel)]=\"value.dayOfMonth\"\n      p-required\n      [p-error-pattern]=\"'Dia inv\u00E1lido'\"\n      [p-label]=\"literals.day\"\n      [p-max]=\"31\"\n      [p-pattern]=\"dayPattern\">\n    </po-number>\n\n    <ng-container *ngTemplateOutlet=\"inputHourTemplate\">\n    </ng-container>\n  </ng-template>\n\n  <ng-template #inputHourTemplate>\n    <po-input\n      class=\"po-md-2\"\n      name=\"hour\"\n      [(ngModel)]=\"value.hour\"\n      p-mask=\"99:99\"\n      p-mask-format-model\n      p-placeholder=\"HH:mm\"\n      p-required\n      [p-label]=\"literals.hour\"\n      [p-pattern]=\"timePattern\">\n    </po-input>\n  </ng-template>\n</form>\n"
            }] }
];
/** @nocollapse */
PoPageJobSchedulerExecutionComponent.ctorParameters = () => [
    { type: PoPageJobSchedulerService },
    { type: PoPageJobSchedulerLookupService }
];
PoPageJobSchedulerExecutionComponent.propDecorators = {
    form: [{ type: ViewChild, args: ['formExecution', { static: true },] }],
    dailyTemplate: [{ type: ViewChild, args: ['dailyTemplate', { static: true },] }],
    monthlyTemplate: [{ type: ViewChild, args: ['monthlyTemplate', { static: true },] }],
    weeklyTempalte: [{ type: ViewChild, args: ['weeklyTemplate', { static: true },] }],
    isEdit: [{ type: Input, args: ['p-is-edit',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    value: [{ type: Input, args: ['p-value',] }],
    changeProcess: [{ type: Output, args: ['p-change-process',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerExecutionComponent.prototype._value;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.dayPattern;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.existProcessAPI;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.minDateFirstExecution;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.periodicityOptions;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.periodicityTemplates;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.timePattern;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.weekDays;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.form;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.dailyTemplate;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.monthlyTemplate;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.weeklyTempalte;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.isEdit;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.literals;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.changeProcess;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerExecutionComponent.prototype.poPageJobSchedulerService;
    /** @type {?} */
    PoPageJobSchedulerExecutionComponent.prototype.poPageJobSchedulerLookup;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageJobSchedulerParametersComponent {
    constructor() {
        this.literals = (/** @type {?} */ ({}));
        this.parameters = [];
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.form) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.form.valueChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                value => {
                    this.valueChange.emit(value);
                }));
            }));
        }
    }
}
PoPageJobSchedulerParametersComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-job-scheduler-parameters',
                template: "<ng-container *ngIf=\"parameters && parameters.length; then formFieldsTemplate; else parametersNotFoundTemplate\">\n</ng-container>\n\n<ng-template #parametersNotFoundTemplate>\n\n  <div class=\"po-text-center\">\n    <span class=\"po-icon po-icon-info\"></span>\n    <span class=\"po-font-text-large\">\n      {{ literals.parametersNotFound }}\n    </span>\n  </div>\n\n</ng-template>\n\n<ng-template #formFieldsTemplate>\n  <form #parametersForm=\"ngForm\">\n    <po-dynamic-form\n      p-group-form\n      [p-fields]=\"parameters\"\n      [p-value]=\"value\">\n    </po-dynamic-form>\n  </form>\n</ng-template>\n"
            }] }
];
PoPageJobSchedulerParametersComponent.propDecorators = {
    form: [{ type: ViewChild, args: ['parametersForm', { static: true },] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    parameters: [{ type: Input, args: ['p-parameters',] }],
    value: [{ type: Input, args: ['p-value',] }],
    valueChange: [{ type: Output, args: ['p-valueChange',] }]
};
if (false) {
    /** @type {?} */
    PoPageJobSchedulerParametersComponent.prototype.form;
    /** @type {?} */
    PoPageJobSchedulerParametersComponent.prototype.literals;
    /** @type {?} */
    PoPageJobSchedulerParametersComponent.prototype.parameters;
    /** @type {?} */
    PoPageJobSchedulerParametersComponent.prototype.value;
    /** @type {?} */
    PoPageJobSchedulerParametersComponent.prototype.valueChange;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageJobSchedulerSummaryComponent {
    /**
     * @param {?} datePipe
     */
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.executionValue = '';
        this.firstExecutionValue = '';
        this.infoOrientation = PoInfoOrientation.Horizontal;
        this.periodicityValue = '';
        this.recurrentValue = '';
        this.literals = (/** @type {?} */ ({}));
        this.parameters = [];
        this.value = (/** @type {?} */ ({}));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const { periodicity, hour, dayOfMonth, daysOfWeek, recurrent, firstExecution, firstExecutionHour } = this.value;
        this.periodicityValue = this.getPeriodicityLabel(periodicity);
        this.executionValue = this.getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth);
        this.firstExecutionValue = this.getFirstExecutionLabel(firstExecution, firstExecutionHour);
        this.recurrentValue = this.getRecurrentValue(recurrent);
    }
    /**
     * @private
     * @param {?} periodicity
     * @param {?=} hour
     * @param {?=} daysOfWeek
     * @param {?=} dayOfMonth
     * @return {?}
     */
    getExecutionValue(periodicity, hour, daysOfWeek, dayOfMonth) {
        switch (periodicity) {
            case 'daily':
                return this.getHourLabel(hour);
            case 'monthly':
                return this.getMonthlyLabelExecution(dayOfMonth, hour);
            case 'weekly':
                return this.getWeeklyLabelExecution(daysOfWeek, hour);
            default:
                return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?} firstExecution
     * @param {?=} firstExecutionHour
     * @return {?}
     */
    getFirstExecutionLabel(firstExecution, firstExecutionHour) {
        if (firstExecution) {
            /** @type {?} */
            const date = this.datePipe.transform(firstExecution, 'dd/MM/yyyy', '-0200');
            return `${date} ${this.getHourLabel(firstExecutionHour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?} hour
     * @return {?}
     */
    getHourLabel(hour) {
        return `${this.literals.at} ${hour || '00:00'}h`;
    }
    /**
     * @private
     * @param {?} dayOfMonth
     * @param {?} hour
     * @return {?}
     */
    getMonthlyLabelExecution(dayOfMonth, hour) {
        /** @type {?} */
        const hourLabel = this.getHourLabel(hour);
        return `${this.literals.day} ${dayOfMonth} ${hourLabel}`;
    }
    /**
     * @private
     * @param {?} periodicity
     * @return {?}
     */
    getPeriodicityLabel(periodicity) {
        switch (periodicity) {
            case 'daily':
                return this.literals.daily;
            case 'monthly':
                return this.literals.monthly;
            case 'weekly':
                return this.literals.weekly;
            default:
                return this.literals.single;
        }
    }
    /**
     * @private
     * @param {?} recurrent
     * @return {?}
     */
    getRecurrentValue(recurrent) {
        return recurrent ? this.literals.yes : this.literals.no;
    }
    /**
     * @private
     * @return {?}
     */
    getSorterWeekDays() {
        return {
            'sunday': 0,
            'monday': 1,
            'tuesday': 2,
            'wednesday': 3,
            'thursday': 4,
            'friday': 5,
            'saturday': 6
        };
    }
    /**
     * @private
     * @param {?} day
     * @return {?}
     */
    getTranslateWeekDay(day) {
        /** @type {?} */
        const days = {
            Sunday: this.literals.sunday,
            Monday: this.literals.monday,
            Tuesday: this.literals.tuesday,
            Wednesday: this.literals.wednesday,
            Thursday: this.literals.thursday,
            Friday: this.literals.friday,
            Saturday: this.literals.saturday,
        };
        return days[day] || '';
    }
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    getWeekDaysLabel(days = []) {
        /** @type {?} */
        const weekDaysSorted = this.sortWeekDays(days);
        return weekDaysSorted.map((/**
         * @param {?} day
         * @return {?}
         */
        day => this.getTranslateWeekDay(day))).join(', ');
    }
    /**
     * @private
     * @param {?} daysOfWeek
     * @param {?} hour
     * @return {?}
     */
    getWeeklyLabelExecution(daysOfWeek, hour) {
        if (daysOfWeek && Array.isArray(daysOfWeek)) {
            return `${this.getWeekDaysLabel(daysOfWeek)} ${this.getHourLabel(hour)}`;
        }
        else {
            return this.literals.notReported;
        }
    }
    /**
     * @private
     * @param {?=} days
     * @return {?}
     */
    sortWeekDays(days = []) {
        /** @type {?} */
        const sorterWeekDays = this.getSorterWeekDays();
        return days.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            /** @type {?} */
            const currDay = a.toLowerCase();
            /** @type {?} */
            const nextDay = b.toLowerCase();
            return sorterWeekDays[currDay] > sorterWeekDays[nextDay] ? 1 : -1;
        }));
    }
}
PoPageJobSchedulerSummaryComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-job-scheduler-summary',
                template: "<div class=\"po-md-12\">\n  <po-info\n    [p-label]=\"literals.process\"\n    [p-orientation]=\"infoOrientation\"\n    [p-value]=\"value.processID\">\n  </po-info>\n\n  <po-info\n    [p-label]=\"literals.periodicity\"\n    [p-orientation]=\"infoOrientation\"\n    [p-value]=\"periodicityValue\">\n  </po-info>\n\n  <po-info *ngIf=\"value.periodicity !== 'single'\"\n    [p-label]=\"literals.execution\"\n    [p-orientation]=\"infoOrientation\"\n    [p-value]=\"executionValue\">\n  </po-info>\n\n  <po-info\n    [p-label]=\"literals.recurrent\"\n    [p-orientation]=\"infoOrientation\"\n    [p-value]=\"recurrentValue\">\n  </po-info>\n\n  <po-info\n    [p-label]=\"literals.firstExecution\"\n    [p-orientation]=\"infoOrientation\"\n    [p-value]=\"firstExecutionValue\">\n  </po-info>\n</div>\n\n<po-widget *ngIf=\"parameters && parameters.length\"\n  class=\"po-pt-1 po-pb-1 po-md-12\"\n  [p-title]=\"literals.parameters\">\n\n  <po-dynamic-view\n    [p-fields]=\"parameters\"\n    [p-value]=\"value.executionParameter\">\n  </po-dynamic-view>\n\n</po-widget>\n\n"
            }] }
];
/** @nocollapse */
PoPageJobSchedulerSummaryComponent.ctorParameters = () => [
    { type: DatePipe }
];
PoPageJobSchedulerSummaryComponent.propDecorators = {
    literals: [{ type: Input, args: ['p-literals',] }],
    parameters: [{ type: Input, args: ['p-parameters',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
if (false) {
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.executionValue;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.firstExecutionValue;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.infoOrientation;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.periodicityValue;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.recurrentValue;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.literals;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.parameters;
    /** @type {?} */
    PoPageJobSchedulerSummaryComponent.prototype.value;
    /**
     * @type {?}
     * @private
     */
    PoPageJobSchedulerSummaryComponent.prototype.datePipe;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageJobSchedulerModule {
}
PoPageJobSchedulerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    PoPageJobSchedulerComponent,
                    PoPageJobSchedulerExecutionComponent,
                    PoPageJobSchedulerParametersComponent,
                    PoPageJobSchedulerSummaryComponent
                ],
                exports: [
                    PoPageJobSchedulerComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    PoButtonModule,
                    PoContainerModule,
                    PoDialogModule,
                    PoDividerModule,
                    PoDynamicModule,
                    PoFieldModule,
                    PoInfoModule,
                    PoPageModule,
                    PoStepperModule,
                    PoWidgetModule
                ],
                providers: [
                    PoPageJobSchedulerService,
                    PoPageJobSchedulerLookupService
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const PoPageLoginAuthenticationType = {
    /** Autenticação Basic */
    Basic: 'Basic',
    /** Autenticação Bearer */
    Bearer: 'Bearer',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const poPageLoginContentMaxLength = 40;
/** @type {?} */
const poPageLoginLiteralsDefault = {
    en: (/** @type {?} */ ({
        title: 'Welcome',
        loginErrorPattern: 'Invalid Login',
        loginHint: `Your login user was given to you at your first day.
    If you don't have this information contact support`,
        loginPlaceholder: 'Insert your e-mail',
        passwordErrorPattern: 'Invalid Password',
        passwordPlaceholder: 'Insert your password',
        customFieldErrorPattern: 'Invalid value',
        customFieldPlaceholder: 'Please enter a value',
        rememberUser: 'Automatic login',
        rememberUserHint: 'You can disable this option in system configuration',
        submitLabel: 'Enter',
        submittedLabel: 'Loading...',
        forgotPassword: 'Forgot your Password?',
        highlightInfo: '',
        registerUrl: 'New register',
        titlePopover: 'Oops!',
        forgotYourPassword: 'Forgot your password?',
        ifYouTryHarder: 'If you try ',
        attempts: '{0} more time(s) ',
        yourUserWillBeBlocked: 'without success your user will be blocked and you will be left 24 hours without being able to access :(',
        createANewPasswordNow: 'Better create a new password now! You will be able to log into the system right away.',
        iForgotMyPassword: 'I forgot my password'
    })),
    es: (/** @type {?} */ ({
        title: 'Bienvenido',
        loginErrorPattern: 'Login inválido',
        loginHint: `Su usuario ha sido entregado para usted en su primer día.
    Si no tiene esta información, póngase en contacto con el soporte técnico`,
        loginPlaceholder: 'Inserte su e-mail',
        passwordErrorPattern: 'Contraseña inválida',
        passwordPlaceholder: 'Inserte su contraseña',
        customFieldErrorPattern: 'Valor no válido.',
        customFieldPlaceholder: 'Por favor introduzca un valor',
        rememberUser: 'Inicio de sesión automáticamente',
        rememberUserHint: 'Puede deshabilitar esta opción en el menú del sistema.',
        submitLabel: 'Entrar',
        submittedLabel: 'Cargando...',
        forgotPassword: 'Olvidaste tu contraseña?',
        highlightInfo: '',
        registerUrl: 'Nuevo registro',
        titlePopover: 'Opa!',
        forgotYourPassword: 'Olvidaste tu contraseña?',
        ifYouTryHarder: 'Si intenta más ',
        attempts: '{0} vez/veces ',
        yourUserWillBeBlocked: 'sin éxito su usuario sera bloqueado y usted vás permanecer 24 horas sin poder acceder a :(',
        createANewPasswordNow: '¡Mejor crear una nueva contraseña ahora! Usted podrá entrar en el sistema inmediatamente después.',
        iForgotMyPassword: 'Olvide mi contraseña'
    })),
    pt: (/** @type {?} */ ({
        title: 'Bem-vindo',
        loginErrorPattern: 'Login inválido',
        loginHint: `Seu usuário foi entregue a você no seu primeiro dia.
    Caso não tenha mais essa informação contacte o suporte`,
        loginPlaceholder: 'Insira seu e-mail',
        passwordErrorPattern: 'Senha inválida',
        passwordPlaceholder: 'Insira sua senha',
        customFieldErrorPattern: 'Valor inválido.',
        customFieldPlaceholder: 'Por favor insira um valor',
        rememberUser: 'Logar automaticamente',
        rememberUserHint: 'Você pode desabilitar essa opção no menu do sistema',
        submitLabel: 'Entrar',
        submittedLabel: 'Carregando...',
        forgotPassword: 'Esqueceu sua senha?',
        highlightInfo: '',
        registerUrl: 'Novo registro',
        titlePopover: 'Opa!',
        forgotYourPassword: 'Esqueceu sua senha?',
        ifYouTryHarder: 'Se tentar mais ',
        attempts: '{0} vez(es) ',
        yourUserWillBeBlocked: 'sem sucesso seu usuário será bloqueado e você fica 24 horas sem poder acessar :(',
        createANewPasswordNow: 'Melhor criar uma senha nova agora! Você vai poder entrar no sistema logo em seguida.',
        iForgotMyPassword: 'Esqueci minha senha'
    })),
    ru: (/** @type {?} */ ({
        title: 'Добро пожаловать!',
        loginErrorPattern: 'Неверный логин',
        loginHint: `Ваш логин был предоставлен вам в первый день.
    Если у вас нет этой информации, обратитесь в службу поддержки`,
        loginPlaceholder: 'Вставьте свой адрес электронной почты',
        passwordErrorPattern: 'Неверный пароль',
        passwordPlaceholder: 'Введите свой пароль',
        customFieldErrorPattern: 'Неверное значение.',
        customFieldPlaceholder: 'Пожалуйста, введите значение',
        rememberUser: 'Автоматический вход',
        rememberUserHint: 'Вы можете отключить эту опцию в конфигурации системы',
        submitLabel: 'Войти',
        submittedLabel: '3агрузка...',
        forgotPassword: 'Забыли пароль?',
        highlightInfo: '',
        registerUrl: 'Новый регистр',
        titlePopover: 'Ой!',
        forgotYourPassword: 'Забыли пароль?',
        ifYouTryHarder: 'Если вы безуспешно попытаетесь войти еще ',
        attempts: '{0} раз(а) ',
        yourUserWillBeBlocked: 'Ваш пользователь будет заблокирован, и Вы останетесь на 24 часа без возможности доступа :(',
        createANewPasswordNow: 'Лучше создайте новый пароль сейчас! Вы сможете сразу войти в систему.',
        iForgotMyPassword: 'Я забыл свой пароль'
    }))
};
/** @type {?} */
const poPageLoginLiteralIn = {
    en: 'in',
    es: 'en',
    pt: 'em',
    ru: 'в'
};
/** @type {?} */
const poPageLoginLiteralTo = {
    en: 'to',
    es: 'al',
    pt: 'ao',
    ru: 'к'
};
/**
 * \@description
 *
 * O componente `po-page-login` é utilizado como template para tela de login.
 * Com ele é possível definirmos valores para usuário, senha e definir ações para recuperação de senha e gravação de dados do usuário.
 * Também é possível inserir uma imagem em conjunto com um texto de destaque.
 *
 *
 * A propriedade `p-authentication-url` automatiza a rotina do componente e simplifica o processo para autenticação do usuário, bastando
 * definir uma url para requisição da autenticação. A flexibilidade e praticidade podem chegar a um nível em que o desenvolvimento
 * da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de login de usuário.
 * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.
 * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.
 *
 *
 * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite
 * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:
 * ```
 *   "assets": [
 *     "src/assets",
 *     "src/favicon.ico",
 *     {
 *       "glob": "**\/*",
 *       "input": "node_modules/\@portinari/style/images",
 *       "output": "assets/images"
 *     }
 *   ]
 * ```
 * @abstract
 */
class PoPageLoginBaseComponent {
    /**
     * @param {?} loginService
     * @param {?} router
     */
    constructor(loginService, router) {
        this.loginService = loginService;
        this.router = router;
        this.allLoginErrors = [];
        this.allPasswordErrors = [];
        this.rememberUser = false;
        this.showExceededAttemptsWarning = false;
        this._authenticationType = PoPageLoginAuthenticationType.Basic;
        this._hideRememberUser = false;
        this._loading = false;
        this._loginErrors = [];
        this._passwordErrors = [];
        /**
         * Evento disparado quando o usuário alterar o input do campo login.
         *
         * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-authentication-url`.
         */
        this.loginChange = new EventEmitter();
        /**
         * Evento disparado ao submeter o formulário de login (apertando `Enter` dentro dos campos ou pressionando o botão de confirmação).
         *
         * Esse evento receberá como parâmetro um objeto do tipo `PoPageLogin` com os dados informados no formulário.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.
         *
         * > Para mais detalhes consulte a documentação sobre a interface `PoPageLogin` mais abaixo.
         */
        this.loginSubmit = new EventEmitter();
        /**
         * Evento disparado quando o usuário alterar o input do campo password.
         *
         * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
         *
         * > Esta propriedade será ignorada se for definido valor para a propriedade `p-authentication-url`.
         */
        this.passwordChange = new EventEmitter();
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Ao informar um valor do tipo `string`, o mesmo será aplicado como a chave do campo customizado e utilizará
     * os valores padrões contidos na propriedade `literals` como `customFieldErrorPattern` e `customFieldPlaceholder`.
     *
     * Existe a possibilidade de informar um objeto que segue a definição da interface `PoPageLoginCustomField`, onde
     * através dos parâmetros enviados pode gerar um `po-input`, `po-combo` especificamente para serviços
     * ou `po-select` para valores fixos.
     *
     * Abaixo seguem os exemplos de cada tipo de campo.
     *
     * `po-input`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   pattern: '[a-z]',
     *   errorPattern: 'Invalid value'
     * }
     * ```
     *
     * `po-combo`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   url: 'https://portinari.io/sample/api/comboOption/domains',
     *   fieldValue: 'nickname'
     * }
     * ```
     *
     * `po-select`:
     *
     * ```
     * {
     *   property: 'domain',
     *   value: 'jv01',
     *   placeholder: 'Enter your domain',
     *   options: [{label: 'Domain 1', value: '1'}, {label: 'Domain 2', value: '2'}]
     * }
     * ```
     *
     * Caso o customField possua options, url e fieldValue preenchidos, será priorizado o po-select
     * utilizando o options.
     *
     * @param {?} value
     * @return {?}
     */
    set customField(value) {
        if (value) {
            if (isTypeof(value, 'string')) {
                this.customFieldType = 'input';
                this._customField = value;
                this.customFieldObject = this.getDefaultCustomFieldObject(value);
                return;
            }
            if (isTypeof(value, 'object') && !Array.isArray(value) && value['property']) {
                this._customField = value;
                this.customFieldObject = (/** @type {?} */ (value));
                if (!this.customFieldObject.options && !this.customFieldObject.url) {
                    this.customFieldType = 'input';
                }
                else {
                    this.customFieldType = this.customFieldObject.options ? 'select' : 'combo';
                }
                return;
            }
        }
        this._customField = undefined;
        this.customFieldObject = undefined;
    }
    /**
     * @return {?}
     */
    get customField() {
        return this._customField;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Personaliza o e-mail que é exibido na mensagem de dica de login padrão para contato de suporte.
     * @param {?} value
     * @return {?}
     */
    set contactEmail(value) {
        this._contactEmail = value;
    }
    /**
     * @return {?}
     */
    get contactEmail() {
        return this._contactEmail;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor customizado que sucede o título de boas-vindas.
     *
     * > Esta propriedade é sobreposta se `p-literals` contiver uma definição customizada para a literal `title`.
     *
     * > Veja mais sobre as literais na propriedade `p-literals`.
     *
     * @param {?} value
     * @return {?}
     */
    set productName(value) {
        this._productName = value;
    }
    /**
     * @return {?}
     */
    get productName() {
        return this._productName;
    }
    /**
     * \@optional
     *
     * \@description
     * Adiciona uma `tag` abaixo do título que especifica o ambiente que o usuário está fazendo o login.
     *
     * > Essa propriedade limita o texto em 40 caracteres.
     * @param {?} environment
     * @return {?}
     */
    set environment(environment) {
        if (environment && environment.length > poPageLoginContentMaxLength) {
            this._environment = environment.substring(0, poPageLoginContentMaxLength);
        }
        else {
            this._environment = environment;
        }
    }
    /**
     * @return {?}
     */
    get environment() {
        return this._environment;
    }
    /**
     * \@optional
     *
     * \@description
     * Exibe um aviso de bloqueio de acordo com a quantidade restante de tentativas.
     * O aviso será exibido somente se a quantidade for maior que zero.
     *
     * > Caso tenha algum valor atribuído para o atributo `p-authentication-url` e o retorno da requisição estiver atribuindo valor
     * para o `p-exceeded-attempts-warning`, o valor considerado será o do retorno da requisição.
     *
     * \@default `0`
     * @param {?} value
     * @return {?}
     */
    set exceededAttemptsWarning(value) {
        this._exceededAttemptsWarning = convertToInt(value);
        this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;
    }
    /**
     * @return {?}
     */
    get exceededAttemptsWarning() {
        return this._exceededAttemptsWarning;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Esconde a função "Lembrar usuário" do formulário de login.
     *
     * Quando essa propriedade é setada com `true` a propriedade `rememberUser` enviada no evento `p-login-submit` será sempre
     * `false`.
     *
     * > Veja a propriedade `p-literals` para customizar a literal `rememberUser`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set hideRememberUser(value) {
        this._hideRememberUser = (/** @type {?} */ (value)) === '' ? true : convertToBoolean(value);
        if (this._hideRememberUser) {
            this.rememberUser = false;
        }
    }
    /**
     * @return {?}
     */
    get hideRememberUser() {
        return this._hideRememberUser;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Objeto com as literais usadas no `po-page-login`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageLoginLiterals = {
     *    attempts: '{0} vez(es) ',
     *    createANewPasswordNow: 'Melhor criar uma senha nova agora! Você vai poder entrar no sistema logo em seguida.',
     *    forgotPassword: 'Esqueceu sua senha?',
     *    forgotYourPassword: 'Esqueceu sua senha?',
     *    highlightInfo: '',
     *    iForgotMyPassword: 'Esqueci minha senha',
     *    ifYouTryHarder: 'Se tentar mais ',
     *    title: 'Seja bem-vindo',
     *    loginErrorPattern: 'Login obrigatório',
     *    loginHint: 'Caso não possua usuário entre em contato com o suporte',
     *    loginLabel: 'Insira seu usuário',
     *    loginPlaceholder: 'Insira seu usuário de acesso',
     *    passwordErrorPattern: 'Senha obrigatória',
     *    passwordLabel: 'Insira sua senha',
     *    passwordPlaceholder: 'Insira sua senha de acesso',
     *    customFieldErrorPattern: 'Campo customizado inválido',
     *    customFieldPlaceholder: 'Por favor insira um valor',
     *    registerUrl: 'Novo registro',
     *    rememberUser: 'Lembrar usuário',
     *    rememberUserHint: 'Esta opção pode ser desabilitada nas configurações do sistema',
     *    submitLabel: 'Acessar sistema',
     *    submittedLabel: 'Carregando...',
     *    titlePopover: 'Opa!',
     *    yourUserWillBeBlocked: 'sem sucesso seu usuário será bloqueado e você fica 24 horas sem poder acessar :('
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageLoginLiterals = {
     *    loginPlaceholder: 'Insira seu usuário de acesso',
     *    passwordPlaceholder: 'Insira sua senha de acesso',
     *    submitLabel: 'Acessar sistema'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-login
     *   [p-literals]="customLiterals">
     * </po-page-login>
     * ```
     *
     *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).
     *  > É também possível alternar o objeto padrão de literais através do seletor de idiomas localizado na parte inferior do template,
     * nesse caso, há também a opção do idioma russo.
     * @param {?} value
     * @return {?}
     */
    set literals(value) {
        this._literals = value;
    }
    /**
     * @return {?}
     */
    get literals() {
        return this._literals;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Habilita um estado de carregamento ao botão de *login*.
     *
     * > É necessário atribuir `true` à esta propriedade na função definida em `p-login-submit`.
     *
     * \@default `false`
     * @param {?} value
     * @return {?}
     */
    set loading(value) {
        this._loading = convertToBoolean(value);
    }
    /**
     * @return {?}
     */
    get loading() {
        return this._loading;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Valor do modelo do campo de login.
     * @param {?} value
     * @return {?}
     */
    set login(value) {
        this._login = value;
        if (!this.authenticationUrl) {
            this.loginChange.emit(this._login);
        }
    }
    /**
     * @return {?}
     */
    get login() {
        return this._login;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe uma lista de erros e exibe abaixo do campo de login.
     * @param {?} value
     * @return {?}
     */
    set loginErrors(value) {
        this._loginErrors = value || [];
        this.setLoginErrors(this._loginErrors);
    }
    /**
     * @return {?}
     */
    get loginErrors() {
        return this._loginErrors;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe uma lista de erros e exibe abaixo do campo de password.
     * @param {?} value
     * @return {?}
     */
    set passwordErrors(value) {
        this._passwordErrors = value || [];
        this.setPasswordErrors(this._passwordErrors);
    }
    /**
     * @return {?}
     */
    get passwordErrors() {
        return this._passwordErrors;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Exibe um link abaixo do formulário de login para que os usuários da aplicação façam a recuperação dos dados de autenticação.
     *
     * A propriedade aceita os seguintes tipos:
     *
     * - **String**: informe uma url externa ou uma rota válida;
     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:
     * ```
     * <po-page-login>
     *   [recovery]="this.myRecovery.bind(this)">
     * </po-page-login>
     * ```
     *
     * - **PoPageLoginRecovery**: cria-se vínculo automático com o template **po-modal-password-recovery**.
     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,
     *   **email** para contato e **máscara** do campo de telefone.
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Caso a aplicação tenha um link para novos cadastros, informe uma url externa ou uma rota válida, dessa
     * forma será exibido um link abaixo do formulário de login para os usuários da aplicação.
     *
     * Exemplos de valores válidos:
     * - **local**: `/home`
     * - **url externa**: `https://portinari.io`
     *
     * > Veja a propriedade `p-literals` para customizar a literal `registerUrl`.
     * @param {?} value
     * @return {?}
     */
    set registerUrl(value) {
        this._registerUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get registerUrl() {
        return this._registerUrl;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Atributo que recebe o tipo de esquema da autenticação, sendo suportados apenas os valores `Basic` e `Bearer`.
     *
     * > Caso o tipo definido seja `Basic`, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * headers {
     *  Authorization: Basic base64(login:password)
     * }
     *
     * body {
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * > Caso o tipo definido seja `Bearer`, o componente fará uma requisição `POST` contendo:
     *
     * ```
     * body {
     *  login: login,
     *  password: base64(password),
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * \@default `PoPageLoginAuthenticationType.Basic`
     * @param {?} value
     * @return {?}
     */
    set authenticationType(value) {
        this._authenticationType =
            ((/** @type {?} */ (Object))).values(PoPageLoginAuthenticationType).includes(value) ? value : PoPageLoginAuthenticationType.Basic;
    }
    /**
     * @return {?}
     */
    get authenticationType() {
        return this._authenticationType;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Endpoint usado pelo template para requisição do recurso. Quando preenchido, o método `p-login-submit` será ignorado e o
     * componente adquirirá automatização para o processo de autenticação.
     *
     * ### Processos
     * Ao digitar um valor válido no campo de login/password e pressionar **Enter**, o componente fará uma requisição `POST`
     * na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário:
     *
     * ```
     * headers {
     *  Authorization: Basic base64(login:password)
     * }
     *
     * body {
     *  rememberUser: rememberUser
     * }
     * ```
     *
     * Em caso de **sucesso**, o objeto de retorno é armazenado no `sessionStorage` e o usuário é redirecionado para a página inicial da
     * aplicação `/`.
     *
     * ```
     * 200:
     *  {
     *    user: user
     *  }
     * ```
     *
     * Em caso de **erro** na autenticação, espera-se o seguinte retorno:
     *
     * ```
     * 400/401
     *  {
     *    code: 400/401,
     *    message: message,
     *    detailedMessage: detailedMessage,
     *    helpUrl?: helpUrl
     *  }
     * ```
     *
     * > Pode-se atribuir uma quantidade máxima de tentativas restantes (maxAttemptsRemaining) para o atributo `p-exceeded-attempts-warning`,
     * assim como os avisos relacionados aos campos login e password (loginWarnings, passwordWarnings) para os atributos `p-login-errors` e
     * `p-password-errors` conforme retorno abaixo:
     *
     * ```
     * 400
     *  {
     *    code: 400/401,
     *    message: message,
     *    detailedMessage: detailedMessage,
     *    helpUrl?: helpUrl,
     *    maxAttemptsRemaining?: maxAttemptsRemaining,
     *    loginWarnings?: [loginWarnings],
     *    passwordWarnings?: [passwordWarnings]
     *  }
     * ```
     *
     * > Caso o valor atribuído para `p-exceeded-attempts-warning` seja igual a 0(zero), poderá ser passado um valor para o
     * atributo `p-blocked-url` e o usuário será redirecionado para uma tela de bloqueio.
     *
     * *Processo finalizado.*
     *
     * _______________
     *
     * #### Praticidade
     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,
     * dispensa-se qualquer menção e/ou importação do componente `po-page-login` no restante da aplicação. O exemplo abaixo exemplifica
     * a forma dinâmica com a qual o template de tela de login pode ser gerado ao navegar para rota `/login`, e também como ele se comunica
     * com o serviço para efetuação do processo de autenticação do usuário e solicitação de nova senha.
     * Basta definir nas configurações de rota:
     *
     *
     * ```
     *   import { PoPageLoginComponent, PoPageLoginAthenticationType } from '\@portinari/portinari-templates';
     *
     *   ...
     *   const routes: Routes = [
     *     {
     *       path: 'login', component: PoPageLoginComponent, data: {
     *         serviceApi: 'https://portinari.io/sample/api/users/authentication',
     *         environment: 'development',
     *         recovery: {
     *           url: 'https://portinari.io/sample/api/users',
     *           type: PoModalPasswordRecoveryType.All,
     *           contactMail: 'dev.portinari\@portinari.com',
     *           phoneMask: '9-999-999-9999'
     *         },
     *         registerUrl: '/new-password',
     *         authenticationType: PoPageLoginAthenticationType.Basic
     *       }
     *     }
     *     ...
     *   ];
     *
     * \@NgModule({
     *     imports: [RouterModule.forRoot(routes)],
     *     exports: [RouterModule]
     *   })
     *   export class AppRoutingModule { }
     * ```
     *
     *
     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de autenticação, o `environment` alimenta a propriedade
     * `p-environment`, `recovery` é a interface `PoPageLoginRecovery` responsável pelas especificações contidas na modal de recuperação de
     * senha, `registerUrl` alimenta a propriedade `p-register-url` e `authenticationType` que define a propriedade `p-authentication-type`.
     *
     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.
     *
     * @param {?} value
     * @return {?}
     */
    set authenticationUrl(value) {
        this._authenticationUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get authenticationUrl() {
        return this._authenticationUrl;
    }
    /**
     * \@optional
     *
     * \@description
     *
     * Caso o valor atribuído para `p-exceeded-attempts-warning` seja igual a 0(zero) e a aplicação tenha um link de bloqueio de usuário,
     * informe uma url externa ou uma rota válida, dessa forma em caso de bloqueio o usuário será redirecionado.
     * @param {?} value
     * @return {?}
     */
    set blockedUrl(value) {
        this._blockedUrl = isTypeof(value, 'string') ? value : undefined;
    }
    /**
     * @return {?}
     */
    get blockedUrl() {
        return this._blockedUrl;
    }
    /**
     * @return {?}
     */
    get language() {
        return this.selectedLanguage || getShortBrowserLanguage();
    }
    /**
     * @return {?}
     */
    get pageLoginLiterals() {
        /** @type {?} */
        const loginHintWithContactEmail = this.contactEmail ? this.concatenateLoginHintWithContactEmail(this.contactEmail) : undefined;
        /** @type {?} */
        const titleWithProductName = this.productName ? this.concatenateTitleWithProductName(this.productName) : undefined;
        return Object.assign({}, poPageLoginLiteralsDefault[poLocaleDefault], poPageLoginLiteralsDefault[this.language], loginHintWithContactEmail, titleWithProductName, this.literals);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.loginSubscription) {
            this.loginSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    closePopover() {
        this.showExceededAttemptsWarning = false;
    }
    /**
     * @return {?}
     */
    onLoginSubmit() {
        /** @type {?} */
        const loginForm = {
            login: this.login,
            password: this.password,
            rememberUser: this.rememberUser
        };
        if (this.customField) {
            loginForm[this.customFieldObject.property] = this.customFieldObject.value;
        }
        if (this.authenticationUrl) {
            this.loginSubscription =
                this.loginService.onLogin(this.authenticationUrl, this.authenticationType, loginForm)
                    .subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                data => {
                    this.setValuesToProperties();
                    sessionStorage.setItem('PO_USER_LOGIN', JSON.stringify(data));
                    this.openInternalLink('/');
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    if (error.error.code === '400' || error.error.code === '401') {
                        this.setValuesToProperties(error);
                        this.redirectBlockedUrl(this.exceededAttemptsWarning, this.blockedUrl);
                    }
                }));
        }
        else {
            this.loginSubmit.emit(loginForm);
            this.showExceededAttemptsWarning = this.exceededAttemptsWarning > 0;
        }
    }
    /**
     * @private
     * @param {?} property
     * @return {?}
     */
    getDefaultCustomFieldObject(property) {
        return { property };
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openExternalLink(url) {
        window.open(url, '_blank');
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    openInternalLink(url) {
        this.router.navigate([url]);
    }
    /**
     * @private
     * @param {?} attempts
     * @param {?} blockedUrl
     * @return {?}
     */
    redirectBlockedUrl(attempts, blockedUrl) {
        if (attempts === 0 && blockedUrl) {
            this.showExceededAttemptsWarning = false;
            isExternalLink(blockedUrl) ? this.openExternalLink(blockedUrl) : this.openInternalLink(blockedUrl);
        }
    }
    /**
     * @private
     * @param {?=} result
     * @return {?}
     */
    setValuesToProperties(result) {
        if (result) {
            this.exceededAttemptsWarning = result.error.maxAttemptsRemaining;
            this.loginErrors = result.error.loginWarnings;
            this.passwordErrors = result.error.passwordWarnings;
            this.blockedUrl = result.error.blockedUrl;
        }
        else {
            this.exceededAttemptsWarning = 0;
            this.loginErrors = [];
            this.passwordErrors = [];
            this.blockedUrl = '';
        }
    }
}
PoPageLoginBaseComponent.propDecorators = {
    customField: [{ type: Input, args: ['p-custom-field',] }],
    background: [{ type: Input, args: ['p-background',] }],
    contactEmail: [{ type: Input, args: ['p-contact-email',] }],
    productName: [{ type: Input, args: ['p-product-name',] }],
    environment: [{ type: Input, args: ['p-environment',] }],
    exceededAttemptsWarning: [{ type: Input, args: ['p-exceeded-attempts-warning',] }],
    hideRememberUser: [{ type: Input, args: ['p-hide-remember-user',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    loading: [{ type: Input, args: ['p-loading',] }],
    login: [{ type: Input, args: ['p-login',] }],
    logo: [{ type: Input, args: ['p-logo',] }],
    loginPattern: [{ type: Input, args: ['p-login-pattern',] }],
    loginErrors: [{ type: Input, args: ['p-login-errors',] }],
    passwordErrors: [{ type: Input, args: ['p-password-errors',] }],
    passwordPattern: [{ type: Input, args: ['p-password-pattern',] }],
    recovery: [{ type: Input, args: ['p-recovery',] }],
    registerUrl: [{ type: Input, args: ['p-register-url',] }],
    secondaryLogo: [{ type: Input, args: ['p-secondary-logo',] }],
    authenticationType: [{ type: Input, args: ['p-authentication-type',] }],
    authenticationUrl: [{ type: Input, args: ['p-authentication-url',] }],
    blockedUrl: [{ type: Input, args: ['p-blocked-url',] }],
    loginChange: [{ type: Output, args: ['p-login-change',] }],
    loginSubmit: [{ type: Output, args: ['p-login-submit',] }],
    passwordChange: [{ type: Output, args: ['p-password-change',] }]
};
if (false) {
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.allLoginErrors;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.allPasswordErrors;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.customFieldObject;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.customFieldType;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.loginSubscription;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.password;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.rememberUser;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.selectedLanguage;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.showExceededAttemptsWarning;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._authenticationType;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._authenticationUrl;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._blockedUrl;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._contactEmail;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._customField;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._environment;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._exceededAttemptsWarning;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._hideRememberUser;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._literals;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._loading;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._login;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._loginErrors;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._passwordErrors;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._productName;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._recovery;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype._registerUrl;
    /**
     * O `p-background` permite inserir uma imagem de destaque ao lado direito do formulário de login, caso a propriedade
     * não seja preenchida o formulário será centralizado no espaço disponível.
     *
     * A fonte da imagem pode ser de um caminho local ou uma url de um servidor externo.
     *
     * Além da imagem, é possível adicionar um texto informativo por cima da imagem da imagem de destaque, para isso informe
     * um valor para a literal `highlightInfo`.
     *
     * > Veja mais sobre as literais na propriedade `p-literals`.
     *
     * Exemplos de valores válidos:
     * - **local**: `./assets/images/login-background.png`
     * - **url externa**: `https://portinari.io/assets/images/login-background.png`
     *
     * > Essa propriedade é ignorada para aplicações mobile.
     * @type {?}
     */
    PoPageLoginBaseComponent.prototype.background;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada na parte superior.
     *
     * > Caso seja indefinida o espaço se mantém preservado porém vazio.
     * @type {?}
     */
    PoPageLoginBaseComponent.prototype.logo;
    /**
     * \@optional
     *
     * \@description
     *
     * Expressão regular para validar o campo de login, caso a expressão não seja atentida, a literal `loginErrorPattern`
     * será exibida.
     *
     * Exemplos de valores válidos:
     * - email: `[expressao-regular-email]`
     * - cpf: `[expressao-regular-cpf]`
     *
     * > Veja a propriedade `p-literals` para customizar a literal `loginErrorPattern`.
     * @type {?}
     */
    PoPageLoginBaseComponent.prototype.loginPattern;
    /**
     * \@optional
     *
     * \@description
     *
     * Expressão regular para validar o campo de password, caso a expressão não seja atentida, a literal `passwordErrorPattern`
     * será exibida.
     *
     * Exemplos de valores válidos:
     * - Apenas números: `\d?`
     * - Letras mínusculas: `\z?`
     *
     * > Veja a propriedade `p-literals` para customizar a literal `passwordErrorPattern`.
     * @type {?}
     */
    PoPageLoginBaseComponent.prototype.passwordPattern;
    /**
     * \@optional
     *
     * \@description
     *
     * Caminho para a logomarca localizada no rodapé.
     * @type {?}
     */
    PoPageLoginBaseComponent.prototype.secondaryLogo;
    /**
     * Evento disparado quando o usuário alterar o input do campo login.
     *
     * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-authentication-url`.
     * @type {?}
     */
    PoPageLoginBaseComponent.prototype.loginChange;
    /**
     * Evento disparado ao submeter o formulário de login (apertando `Enter` dentro dos campos ou pressionando o botão de confirmação).
     *
     * Esse evento receberá como parâmetro um objeto do tipo `PoPageLogin` com os dados informados no formulário.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.
     *
     * > Para mais detalhes consulte a documentação sobre a interface `PoPageLogin` mais abaixo.
     * @type {?}
     */
    PoPageLoginBaseComponent.prototype.loginSubmit;
    /**
     * Evento disparado quando o usuário alterar o input do campo password.
     *
     * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.
     *
     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-authentication-url`.
     * @type {?}
     */
    PoPageLoginBaseComponent.prototype.passwordChange;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginBaseComponent.prototype.loginService;
    /** @type {?} */
    PoPageLoginBaseComponent.prototype.router;
    /**
     * @abstract
     * @protected
     * @param {?} contactEmail
     * @return {?}
     */
    PoPageLoginBaseComponent.prototype.concatenateLoginHintWithContactEmail = function (contactEmail) { };
    /**
     * @abstract
     * @protected
     * @param {?} productName
     * @return {?}
     */
    PoPageLoginBaseComponent.prototype.concatenateTitleWithProductName = function (productName) { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoPageLoginBaseComponent.prototype.setLoginErrors = function (value) { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    PoPageLoginBaseComponent.prototype.setPasswordErrors = function (value) { };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoPageLoginService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} url
     * @param {?} type
     * @param {?} loginForm
     * @return {?}
     */
    onLogin(url, type, loginForm) {
        if (type === PoPageLoginAuthenticationType.Bearer) {
            loginForm.password = btoa(loginForm.password);
            return this.http.post(url, loginForm);
        }
        else {
            /** @type {?} */
            const user = `(${loginForm.login}:${loginForm.password})`;
            /** @type {?} */
            const headers = new HttpHeaders({
                'Authorization': `${type} ` + btoa(user)
            });
            delete loginForm.login;
            delete loginForm.password;
            return this.http.post(url, loginForm, { headers });
        }
    }
}
PoPageLoginService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PoPageLoginService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageLoginService.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageLoginBaseComponent
 *
 * \@example
 *
 * <example name="po-page-login-basic" title="Portinari Page Login Basic">
 *  <file name="sample-po-page-login-basic/sample-po-page-login-basic.component.html"> </file>
 *  <file name="sample-po-page-login-basic/sample-po-page-login-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-login-labs" title="Portinari Page Login Labs">
 *  <file name="sample-po-page-login-labs/sample-po-page-login-labs.component.html"> </file>
 *  <file name="sample-po-page-login-labs/sample-po-page-login-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-login-human-resources" title="Portinari Page Login - Human Resources">
 *  <file name="sample-po-page-login-human-resources/sample-po-page-login-human-resources.component.html"> </file>
 *  <file name="sample-po-page-login-human-resources/sample-po-page-login-human-resources.component.ts"> </file>
 *  <file name="sample-po-page-login-human-resources/sample-po-page-login-human-resources.module.ts"> </file>
 * </example>
 *
 * <example name="po-page-login-automatic-service" title="Portinari Page Login - Automatic Service">
 *  <file name="sample-po-page-login-automatic-service/sample-po-page-login-automatic-service.component.html"> </file>
 *  <file name="sample-po-page-login-automatic-service/sample-po-page-login-automatic-service.component.ts"> </file>
 * </example>
 */
class PoPageLoginComponent extends PoPageLoginBaseComponent {
    /**
     * @param {?} changeDetector
     * @param {?} activatedRoute
     * @param {?} poComponentInjector
     * @param {?} differs
     * @param {?} loginService
     * @param {?} router
     */
    constructor(changeDetector, activatedRoute, poComponentInjector, differs, loginService, router) {
        super(loginService, router);
        this.changeDetector = changeDetector;
        this.activatedRoute = activatedRoute;
        this.poComponentInjector = poComponentInjector;
        this.componentRef = null;
        this.customPasswordError = { custom: false };
        this.differ = differs.find([]).create(null);
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.differ) {
            this.validateArrayChanges(this.differ, [
                { array: this.loginErrors, callback: this.generateLoginError.bind(this) },
                { array: this.passwordErrors, callback: this.generatePasswordError.bind(this) }
            ]);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkingForRouteMetadata(this.activatedRoute.snapshot.data);
    }
    /**
     * @return {?}
     */
    changeLoginModel() {
        if (this.authenticationUrl) {
            this.loginErrors = [];
        }
        else {
            this.setLoginErrors(this.loginErrors);
            this.loginChange.emit(this.login);
        }
    }
    /**
     * @return {?}
     */
    changePasswordModel() {
        if (this.authenticationUrl) {
            this.passwordErrors = [];
        }
        else {
            this.setPasswordErrors(this.passwordErrors);
            this.passwordChange.emit(this.password);
        }
    }
    /**
     * @param {?} language
     * @return {?}
     */
    onSelectedLanguage(language) {
        this.selectedLanguage = language;
    }
    /**
     * @param {?} recovery
     * @return {?}
     */
    openUrl(recovery) {
        switch (typeof recovery) {
            case 'string': {
                this.setUrlRedirect(recovery);
                break;
            }
            case 'function': {
                recovery();
                break;
            }
            case 'object': {
                this.createModalPasswordRecoveryComponent(recovery);
                break;
            }
        }
    }
    /**
     * @private
     * @param {?} object
     * @param {?} property
     * @return {?}
     */
    checkingForMetadataProperty(object, property) {
        if (Object.prototype.hasOwnProperty.call(object, property)) {
            return object[property];
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    checkingForRouteMetadata(data) {
        if (Object.keys(data).length !== 0) {
            this.authenticationUrl = this.checkingForMetadataProperty(data, 'serviceApi') || this.authenticationUrl;
            this.authenticationType = this.checkingForMetadataProperty(data, 'authenticationType') || this.authenticationType;
            this.environment = this.checkingForMetadataProperty(data, 'environment') || this.environment;
            this.recovery = this.checkingForMetadataProperty(data, 'recovery') || this.recovery;
            this.registerUrl = this.checkingForMetadataProperty(data, 'registerUrl') || this.registerUrl;
        }
    }
    /**
     * @private
     * @param {?} defaultLiteral
     * @param {?} prefixLiteral
     * @param {?} value
     * @return {?}
     */
    concatenate(defaultLiteral, prefixLiteral, value) {
        return `${defaultLiteral} ${prefixLiteral} ${value}`;
    }
    /**
     * @private
     * @param {?} value
     * @param {?} literal
     * @param {?} defaultLiteral
     * @param {?} prepositionLiteral
     * @return {?}
     */
    concatenateLiteral(value, literal, defaultLiteral, prepositionLiteral) {
        return { [literal]: this.concatenate(defaultLiteral, prepositionLiteral, value) };
    }
    /**
     * @private
     * @param {?} poPageLoginRecovery
     * @return {?}
     */
    createModalPasswordRecoveryComponent(poPageLoginRecovery) {
        if (this.componentRef) {
            this.poComponentInjector.destroyComponentInApplication(this.componentRef);
        }
        this.componentRef = this.poComponentInjector.createComponentInApplication(PoModalPasswordRecoveryComponent);
        this.componentRef.instance.urlRecovery = poPageLoginRecovery.url;
        this.componentRef.instance.contactEmail = poPageLoginRecovery.contactMail;
        this.componentRef.instance.phoneMask = poPageLoginRecovery.phoneMask;
        this.componentRef.instance.type = poPageLoginRecovery.type || PoModalPasswordRecoveryType.Email;
        this.componentRef.changeDetectorRef.detectChanges();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.componentRef.instance.open();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    generateLoginError() {
        if (this.loginErrors && this.loginErrors.length) {
            this.setLoginErrors(this.loginErrors);
        }
        else {
            /** @type {?} */
            const control = this.loginForm.form.controls['login'];
            if (control) {
                this.resetControl(control);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    generatePasswordError() {
        if (this.passwordErrors && this.passwordErrors.length) {
            this.setPasswordErrors(this.passwordErrors);
        }
        else {
            /** @type {?} */
            const control = this.loginForm.form.controls['password'];
            if (control) {
                this.resetControl(control);
            }
        }
    }
    /**
     * @private
     * @param {?} control
     * @return {?}
     */
    resetControl(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    /**
     * @private
     * @param {?} allErrors
     * @param {?} control
     * @param {?} errors
     * @param {?} patternError
     * @return {?}
     */
    setControlErrors(allErrors, control, errors, patternError) {
        if (control) {
            this[allErrors] = control.hasError('pattern') ? [...errors, ...[patternError]] : [...errors];
            if (errors && errors.length && (control.valid || control.pristine)) {
                control.markAsTouched();
                control.markAsDirty();
                control.setErrors(this.customPasswordError);
            }
        }
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    setUrlRedirect(url) {
        isExternalLink(url) ? window.open(url, '_blank') : this.router.navigate([url]);
    }
    /**
     * @private
     * @param {?} differ
     * @param {?} array
     * @return {?}
     */
    validateArrayChanges(differ, array) {
        array.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            /** @type {?} */
            const changes = differ.diff(element.array);
            if (changes) {
                element.callback();
                this.changeDetector.detectChanges();
            }
        }));
    }
    /**
     * @protected
     * @param {?} contactEmail
     * @return {?}
     */
    concatenateLoginHintWithContactEmail(contactEmail) {
        /** @type {?} */
        const defaultLoginHintLiteral = poPageLoginLiteralsDefault[this.language].loginHint;
        /** @type {?} */
        const prepositionLiteral = poPageLoginLiteralIn[this.language];
        return this.concatenateLiteral(contactEmail, 'loginHint', defaultLoginHintLiteral, prepositionLiteral);
    }
    /**
     * @protected
     * @param {?} productName
     * @return {?}
     */
    concatenateTitleWithProductName(productName) {
        /** @type {?} */
        const defaultTitleLiteral = poPageLoginLiteralsDefault[this.language].title;
        /** @type {?} */
        const prepositionLiteral = poPageLoginLiteralTo[this.language];
        return this.concatenateLiteral(productName, 'title', defaultTitleLiteral, prepositionLiteral);
    }
    /**
     * @protected
     * @param {?} errors
     * @return {?}
     */
    setLoginErrors(errors) {
        /** @type {?} */
        const control = this.loginForm.form.controls['login'];
        this.setControlErrors('allLoginErrors', control, errors, this.pageLoginLiterals.loginErrorPattern);
    }
    /**
     * @protected
     * @param {?} errors
     * @return {?}
     */
    setPasswordErrors(errors) {
        /** @type {?} */
        const control = this.loginForm.form.controls['password'];
        this.setControlErrors('allPasswordErrors', control, errors, this.pageLoginLiterals.passwordErrorPattern);
    }
}
PoPageLoginComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-login',
                template: "<po-page-background #pageLogin\n  p-show-select-language\n  [p-background]=\"background\"\n  [p-highlight-info]=\"pageLoginLiterals.highlightInfo\"\n  [p-logo]=\"logo\"\n  [p-secondary-logo]=\"secondaryLogo\"\n  (p-selected-language)=\"onSelectedLanguage($event)\">\n\n  <div class=\"po-page-login-header po-mb-2 po-mb-sm-1 po-pt-sm-1\">\n    <div class=\"po-page-login-header-title po-mb-sm-1\">{{ pageLoginLiterals.title }}</div>\n    <po-tag\n      *ngIf=\"environment\"\n      p-type=\"warning\"\n      [p-value]=\"environment\">\n    </po-tag>\n  </div>\n\n  <form #loginForm=\"ngForm\" class=\"po-page-login-form\">\n    <div class=\"po-row\">\n      <div class=\"po-lg-12\">\n        <div class=\"po-page-login-hint po-page-login-info-container\">\n          <po-login\n            class=\"po-page-login-info-field\"\n            name=\"login\"\n            [(ngModel)]=\"login\"\n            p-auto-focus\n            p-required\n            [p-label]=\"pageLoginLiterals.loginLabel\"\n            [p-pattern]=\"loginPattern\"\n            [p-placeholder]=\"pageLoginLiterals.loginPlaceholder\"\n            (click)=\"closePopover()\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\"\n            (p-change-model)=\"changeLoginModel()\">\n          </po-login>\n\n          <div class=\"po-page-login-info-icon-container\">\n            <span\n              class=\"po-icon po-field-icon po-icon-info\"\n              p-tooltip-position=\"right\"\n              [p-tooltip]=\"pageLoginLiterals.loginHint\">\n            </span>\n          </div>\n        </div>\n\n        <div class=\"po-field-container-bottom po-field-container-error-container\">\n          <div *ngFor=\"let error of allLoginErrors\u001C\" class=\"po-field-container-bottom-text-error po-field-container-error-item\">\n            <span class=\"po-icon po-icon-exclamation\"></span>\n            <span class=\"po-field-container-error-text\">{{error}}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"po-lg-12\">\n        <div class=\"po-page-login-password-container\">\n          <po-password\n            class=\"po-page-login-field-size po-page-login-password-item\"\n            name=\"password\"\n            [(ngModel)]=\"password\"\n            p-required\n            [p-label]=\"pageLoginLiterals.passwordLabel\"\n            [p-pattern]=\"passwordPattern\"\n            [p-placeholder]=\"pageLoginLiterals.passwordPlaceholder\"\n            (click)=\"closePopover()\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\"\n            (p-change-model)=\"changePasswordModel()\">\n          </po-password>\n          <div class=\"po-page-login-password-item po-page-login-password-popover-container\">\n            <po-page-login-popover *ngIf=\"showExceededAttemptsWarning && exceededAttemptsWarning\"\n              [p-literals]=\"pageLoginLiterals\"\n              [p-recovery]=\"recovery\"\n              [p-remaining-attempts]=\"exceededAttemptsWarning\"\n              (p-forgot-password) = \"openUrl($event)\">\n            </po-page-login-popover>\n          </div>\n        </div>\n        <div class=\"po-field-container-bottom po-field-container-error-container\">\n          <div *ngFor=\"let error of allPasswordErrors\" class=\"po-field-container-bottom-text-error po-field-container-error-item\">\n            <span class=\"po-icon po-icon-exclamation\"></span>\n            <span class=\"po-field-container-error-text\">{{error}}</span>\n          </div>\n        </div>\n      </div>\n\n      <po-input *ngIf=\"customField && customFieldType === 'input'\"\n        class=\"po-page-login-field-size po-lg-12\"\n        name=\"customFieldInput\"\n        [(ngModel)]=\"customFieldObject.value\"\n        p-required\n        [p-error-pattern]=\"customFieldObject.errorPattern || pageLoginLiterals.customFieldErrorPattern\"\n        [p-pattern]=\"customFieldObject.pattern\"\n        [p-placeholder]=\"customFieldObject.placeholder || pageLoginLiterals.customFieldPlaceholder\"\n        (keyup.enter)=\"loginForm.valid && onLoginSubmit()\">\n      </po-input>\n\n      <po-combo *ngIf=\"customField && customFieldType === 'combo'\"\n        class=\"po-page-login-field-size po-lg-12\"\n        name=\"customFieldCombo\"\n        [(ngModel)]=\"customFieldObject.value\"\n        p-required\n        [p-field-value]=\"customFieldObject.fieldValue\"\n        [p-filter-service]=\"customFieldObject.url\"\n        [p-placeholder]=\"customFieldObject.placeholder || pageLoginLiterals.customFieldPlaceholder\">\n      </po-combo>\n\n      <po-select *ngIf=\"customField && customFieldType === 'select'\"\n        class=\"po-page-login-field-size po-lg-12\"\n        name=\"customFieldSelect\"\n        [(ngModel)]=\"customFieldObject.value\"\n        p-required\n        [p-placeholder]=\"customFieldObject.placeholder || pageLoginLiterals.customFieldPlaceholder\"\n        [p-options]=\"customFieldObject.options\">\n      </po-select>\n\n      <div class=\"po-lg-12\">\n        <div *ngIf=\"!hideRememberUser\" class=\"po-page-login-hint po-page-login-info-container\">\n          <po-switch\n            class=\"po-page-login-info-field po-lg-7 po-offset-lg-5 po-offset-xl-5\"\n            name=\"rememberUser\"\n            [(ngModel)]=\"rememberUser\"\n            p-label-position=\"1\"\n            [p-label-off]=\"pageLoginLiterals.rememberUser\"\n            [p-label-on]=\"pageLoginLiterals.rememberUser\"\n            (keyup.enter)=\"loginForm.valid && onLoginSubmit()\">\n          </po-switch>\n\n          <div class=\"po-page-login-info-icon-container po-page-login-info-icon-remember-user\">\n            <span\n              class=\"po-icon po-field-icon po-icon-info\"\n              p-tooltip-position=\"right\"\n              [p-tooltip]=\"pageLoginLiterals.rememberUserHint\">\n            </span>\n          </div>\n        </div>\n      </div>\n\n\n      <po-button\n        class=\"po-lg-12 po-page-login-button po-page-login-field-size\"\n        p-type=\"primary\"\n        [p-disabled]=\"loginForm.invalid\"\n        [p-label]=\"loading ? pageLoginLiterals.submittedLabel : pageLoginLiterals.submitLabel\"\n        [p-loading]=\"loading\"\n        (p-click)=\"onLoginSubmit()\">\n      </po-button>\n\n      <div *ngIf=\"recovery\"\n        class=\"po-page-login-recovery-link\">\n        <a class=\"po-font-text-large-bold\" (click)=\"openUrl(recovery)\">{{ pageLoginLiterals.forgotPassword }}</a>\n      </div>\n\n      <div *ngIf=\"registerUrl\"\n        class=\"po-page-login-register-link\">\n        <a class=\"po-font-text-large-bold\" (click)=\"openUrl(registerUrl)\">{{ pageLoginLiterals.registerUrl }}</a>\n      </div>\n    </div>\n  </form>\n</po-page-background>\n"
            }] }
];
/** @nocollapse */
PoPageLoginComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ActivatedRoute },
    { type: PoComponentInjectorService },
    { type: IterableDiffers },
    { type: PoPageLoginService },
    { type: Router }
];
PoPageLoginComponent.propDecorators = {
    loginForm: [{ type: ViewChild, args: ['loginForm', { read: NgForm, static: true },] }],
    pageLogin: [{ type: ViewChild, args: ['pageLogin', { read: ViewContainerRef, static: true },] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    PoPageLoginComponent.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginComponent.prototype.differ;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginComponent.prototype.customPasswordError;
    /** @type {?} */
    PoPageLoginComponent.prototype.loginForm;
    /** @type {?} */
    PoPageLoginComponent.prototype.pageLogin;
    /** @type {?} */
    PoPageLoginComponent.prototype.changeDetector;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginComponent.prototype.activatedRoute;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginComponent.prototype.poComponentInjector;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para definição da mensagem de aviso de bloqueio do `po-page-login`.
 */
class PoPageLoginPopoverComponent {
    constructor() {
        /**
         * se 'p-recovery' for do tipo Function ou PoPageLoginRecovery, emite para o método 'openUrl' do componente 'po-page-login'
         */
        this.forgotPassword = new EventEmitter();
    }
    /**
     * exibe o link de 'esqueci minha senha' e verifica se o valor é um link interno ou externo
     * @param {?} value
     * @return {?}
     */
    set recovery(value) {
        this._recovery = value;
        if (isTypeof(value, 'string')) {
            this.recoveryType = isExternalLink(value) ? 'externalLink' : 'internalLink';
        }
    }
    /**
     * @return {?}
     */
    get recovery() {
        return this._recovery;
    }
    /**
     * @param {?} recovery
     * @return {?}
     */
    onForgotPasswordClick(recovery) {
        this.forgotPassword.emit(recovery);
    }
}
PoPageLoginPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-login-popover',
                template: "<div class=\"po-page-login-popover-container\">\n  <div class=\"po-page-login-popover\">\n    <div class=\"po-page-login-popover-arrow\"></div>\n    <div class=\"po-page-login-popover-content\">\n      <p class=\"po-font-text-bold po-page-login-popover-title\">\n        {{ literals?.titlePopover }}\n      </p>\n      <p class=\"po-font-text\">\n        {{ literals?.forgotYourPassword }}\n      </p>\n      <p class=\"po-font-text\">\n        {{ literals?.ifYouTryHarder }}\n        <span class=\"po-font-text-bold po-page-login-popover-attempts\">\n          {{ literals?.attempts | poI18n:remainingAttempts }}\n        </span>{{ literals?.yourUserWillBeBlocked }}\n      </p>\n      <br>\n      <p class=\"po-font-text\">\n        {{ literals?.createANewPasswordNow }}\n      </p>\n      <div *ngIf=\"recovery\" class=\"po-font-text-bold po-mt-1 po-page-login-popover-link-container\">\n        <a *ngIf=\"recoveryType === 'internalLink'\"\n          class=\"po-page-login-popover-link\"\n          [routerLink]=\"recovery\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"recoveryType === 'externalLink'\"\n          class=\"po-page-login-popover-link\"\n          [href]=\"recovery\"\n          target=\"_blank\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n        <a *ngIf=\"!recoveryType\"\n          class=\"po-page-login-popover-link\"\n          (click)=\"onForgotPasswordClick(recovery)\">\n          {{ literals?.iForgotMyPassword }}\n        </a>\n      </div>\n    </div>\n  </div>\n</div>\n"
            }] }
];
PoPageLoginPopoverComponent.propDecorators = {
    literals: [{ type: Input, args: ['p-literals',] }],
    recovery: [{ type: Input, args: ['p-recovery',] }],
    remainingAttempts: [{ type: Input, args: ['p-remaining-attempts',] }],
    forgotPassword: [{ type: Output, args: ['p-forgot-password',] }]
};
if (false) {
    /** @type {?} */
    PoPageLoginPopoverComponent.prototype.recoveryType;
    /**
     * @type {?}
     * @private
     */
    PoPageLoginPopoverComponent.prototype._recovery;
    /** @type {?} */
    PoPageLoginPopoverComponent.prototype.literals;
    /**
     * define se a mensagem deverá ser exibida caso seja maior que 0(zero)
     * @type {?}
     */
    PoPageLoginPopoverComponent.prototype.remainingAttempts;
    /**
     * se 'p-recovery' for do tipo Function ou PoPageLoginRecovery, emite para o método 'openUrl' do componente 'po-page-login'
     * @type {?}
     */
    PoPageLoginPopoverComponent.prototype.forgotPassword;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Módulo do template do po-page-login.
 */
class PoPageLoginModule {
}
PoPageLoginModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    RouterModule,
                    PoPageBackgroundModule,
                    PoModule
                ],
                declarations: [
                    PoPageLoginComponent,
                    PoPageLoginPopoverComponent
                ],
                entryComponents: [
                    PoModalPasswordRecoveryComponent
                ],
                exports: [
                    PoPageLoginComponent
                ],
                providers: [PoPageLoginService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoComponentsModule {
}
PoComponentsModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    PoModalPasswordRecoveryModule,
                    PoPageBackgroundModule,
                    PoPageBlockedUserModule,
                    PoPageChangePasswordModule,
                    PoPageDynamicDetailModule,
                    PoPageDynamicEditModule,
                    PoPageDynamicSearchModule,
                    PoPageDynamicTableModule,
                    PoPageJobSchedulerModule,
                    PoPageLoginModule
                ],
                exports: [
                    PoModalPasswordRecoveryModule,
                    PoPageBackgroundModule,
                    PoPageBlockedUserModule,
                    PoPageChangePasswordModule,
                    PoPageDynamicDetailModule,
                    PoPageDynamicEditModule,
                    PoPageDynamicSearchModule,
                    PoPageDynamicTableModule,
                    PoPageJobSchedulerModule,
                    PoPageLoginModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoServicesModule {
}
PoServicesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    PoPageCustomizationModule,
                    PoPageDynamicModule
                ],
                exports: [
                    PoPageCustomizationModule,
                    PoPageDynamicModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PoTemplatesModule {
}
PoTemplatesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    PoComponentsModule,
                    PoServicesModule
                ],
                exports: [
                    PoComponentsModule,
                    PoServicesModule
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoModalPasswordRecoveryComponent
 *
 * \@description
 *
 * Interface com a definição do objeto gerado pelo formulário do componente `po-modal-password-recovery`.
 * @record
 */
function PoModalPasswordRecovery() { }
if (false) {
    /**
     * Valor contendo o código enviado por SMS e digitado pelo usuário.
     * @type {?|undefined}
     */
    PoModalPasswordRecovery.prototype.code;
    /**
     * Valor contendo o email enviado pelo usuário.
     * @type {?|undefined}
     */
    PoModalPasswordRecovery.prototype.email;
    /**
     * Código de validação da solicitação do SMS para ser enviado junto com o código de verificação do SMS
     * @type {?|undefined}
     */
    PoModalPasswordRecovery.prototype.hash;
    /**
     * Número de tentativas de reenvio.
     * @type {?|undefined}
     */
    PoModalPasswordRecovery.prototype.retry;
    /**
     * Valor contendo o número de telefone enviado pelo usuário.
     * @type {?|undefined}
     */
    PoModalPasswordRecovery.prototype.sms;
    /**
     * Token de alteração de senha
     * @type {?|undefined}
     */
    PoModalPasswordRecovery.prototype.token;
    /**
     * URL para o formulário de alteração de senha
     * @type {?|undefined}
     */
    PoModalPasswordRecovery.prototype.urlChangePassword;
    /**
     * URL usada para validação do código enviado por SMS
     * @type {?|undefined}
     */
    PoModalPasswordRecovery.prototype.urlValidationCode;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageBlockedUserComponent
 *
 * \@description
 *
 * Interface que define os valores de customização da mensagem de bloqueio do componente `po-page-blocked-user`.
 * @record
 */
function PoPageBlockedUserReasonParams() { }
if (false) {
    /**
     * Quantidade máxima de tentativas.
     * @type {?|undefined}
     */
    PoPageBlockedUserReasonParams.prototype.attempts;
    /**
     * Quantidade de dias para expiração de senha.
     * @type {?|undefined}
     */
    PoPageBlockedUserReasonParams.prototype.days;
    /**
     * Horas que o sistema permanecerá bloqueado.
     * @type {?|undefined}
     */
    PoPageBlockedUserReasonParams.prototype.hours;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageChangePasswordComponent
 *
 * \@description
 *
 * Interface com a definição do objeto gerado pelo formulário do componente `po-page-change-password`.
 * @record
 */
function PoPageChangePassword() { }
if (false) {
    /**
     * Senha atual
     * @type {?|undefined}
     */
    PoPageChangePassword.prototype.currentPassword;
    /**
     * Nova senha
     * @type {?|undefined}
     */
    PoPageChangePassword.prototype.newPassword;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageChangePasswordComponent
 *
 * \@description
 *
 * Interface para especificação do tipo de recuperação de senha no `po-modal-password-recovery`.
 * @record
 */
function PoPageChangePasswordRecovery() { }
if (false) {
    /**
     * Definição do e-mail que é exibido na mensagem para contato de suporte.
     * @type {?|undefined}
     */
    PoPageChangePasswordRecovery.prototype.contactMail;
    /**
     * Definição da máscara do campo de telefone.
     * @type {?|undefined}
     */
    PoPageChangePasswordRecovery.prototype.phoneMask;
    /**
     * \@optional
     *
     * \@description
     *
     * Enum para especificação do tipo de recuperação de senha [PoModalPasswordRecoveryType](/documentation/po-modal-password-recovery).
     *
     * > Caso não seja definido valor se assume o padrão `PoModalPasswordRecoveryType.Email`.
     * @type {?|undefined}
     */
    PoPageChangePasswordRecovery.prototype.type;
    /**
     * Endpoint usado pelo template **PoModalPasswordRecovery** para requisição do recurso.
     *
     * > Saiba mais em [PoModalPasswordRecovery](/documentation/po-modal-password-recovery).
     * @type {?}
     */
    PoPageChangePasswordRecovery.prototype.url;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageChangePasswordComponent
 *
 * \@description
 *
 * Interface com a definição dos objetos aceitos pela propriedade `p-password-requirements`.
 * @record
 */
function PoPageChangePasswordRequirement() { }
if (false) {
    /**
     * Requisito.
     * @type {?}
     */
    PoPageChangePasswordRequirement.prototype.requirement;
    /**
     * Função que deve retornar um booleano para validar um requisito de senha.
     *
     * Também é possível informar diretamente um valor booleano que representa esta validação.
     * @type {?}
     */
    PoPageChangePasswordRequirement.prototype.status;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicDetailComponent
 *
 * \@description
 *
 * Interface para as ações do componente po-page-dynamic-detail.
 * @record
 */
function PoPageDynamicDetailActions() { }
if (false) {
    /**
     * \@description
     *
     * Rota de redirecionamento para ação de voltar, caso não seja especificada será usado o comando `history.back()`.
     *
     * > Caso queira esconder a ação deve ser passado o valor `false`;
     *
     * ```
     * actions = {
     *   back: '/'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicDetailActions.prototype.back;
    /**
     * \@description
     *
     * Rota para edição do recurso, caso seja preenchida irá habilitar a ação de edição na tabela.
     *
     * > A rota deve conter um parâmetro chamando id.
     *
     * ```
     * actions = {
     *  edit: 'edit/:id'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicDetailActions.prototype.edit;
    /**
     * \@description
     *
     * Rota de redirecionamento que será executada após a confirmação da exclusão do registro.
     *
     * ```
     * actions = {
     *   remove: 'new'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicDetailActions.prototype.remove;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicDetailComponent
 *
 * \@description
 *
 * Interface dos fields usados para compor o template `po-page-dynamic-detail`.
 * @record
 */
function PoPageDynamicDetailField() { }
if (false) {
    /**
     * Indica se o campo será duplicado caso seja executada a ação de duplicação.
     * @type {?|undefined}
     */
    PoPageDynamicDetailField.prototype.duplicate;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicEditComponent
 *
 * \@description
 *
 * Interface para as ações do componente po-page-dynamic-edit.
 * @record
 */
function PoPageDynamicEditActions() { }
if (false) {
    /**
     * \@description
     *
     * Rota de redirecionamento para ação de cancelar, caso não seja especificada será usado o comando `navigator.back()`.
     *
     * > Caso queira esconder a ação deve ser passado o valor `false`;
     *
     * ```
     * actions = {
     *   cancel: '/'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicEditActions.prototype.cancel;
    /**
     * \@description
     *
     * Rota de redirecionamento que será executada após a confirmação de gravação do registro.
     *
     * > A rota pode conter um parâmetro chamando id.
     *
     * ```
     * actions = {
     *   save: 'detail/:id'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicEditActions.prototype.save;
    /**
     * \@description
     *
     * Rota de redirecionamento que será executada após a confirmação da gravação do registro caso o mesmo esteja editando
     * um registro.
     *
     * ```
     * actions = {
     *   saveNew: 'new'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicEditActions.prototype.saveNew;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicEditComponent
 *
 * \@description
 *
 * Interface dos fields usados para compor o template `po-page-dynamic-edit`.
 * @record
 */
function PoPageDynamicEditField() { }
if (false) {
    /**
     * Indica se o campo será duplicado caso seja executada a ação de duplicação.
     * @type {?|undefined}
     */
    PoPageDynamicEditField.prototype.duplicate;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsPrivate
 *
 * \@description
 *
 * Interface para o atributo `filter` do componente `po-page-dynamic-search`.
 * @record
 */
function PoPageDynamicSearch() { }
if (false) {
    /**
     * \@description
     *
     * Nome do método a ser executado quando a busca avançada for finalizada.
     * @type {?|undefined}
     */
    PoPageDynamicSearch.prototype.advancedSearch;
    /**
     * \@description
     *
     * Lista dos filtros usados na busca avançada.
     * @type {?|undefined}
     */
    PoPageDynamicSearch.prototype.filters;
    /**
     * \@description
     *
     * Nome do método a ser executado quando é pressionado a tecla `ENTER` dentro do `input` de pesquisa rápida do componente, o mesmo
     * receberá o valor digitado ao ser invocado.
     * @type {?|undefined}
     */
    PoPageDynamicSearch.prototype.quickSearch;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicSearchComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-page-dynamic-search`.
 * @record
 */
function PoPageDynamicSearchLiterals() { }
if (false) {
    /**
     * Título do grupo de *disclaimers* que será exibido após realizar alguma busca.
     * @type {?|undefined}
     */
    PoPageDynamicSearchLiterals.prototype.disclaimerGroupTitle;
    /**
     * Texto exibido no botão para cancelamento da busca avaçanda.
     * @type {?|undefined}
     */
    PoPageDynamicSearchLiterals.prototype.filterCancelLabel;
    /**
     * Texto exibido no botão para confirmação da busca avaçanda.
     * @type {?|undefined}
     */
    PoPageDynamicSearchLiterals.prototype.filterConfirmLabel;
    /**
     * Título da busca avançada.
     * @type {?|undefined}
     */
    PoPageDynamicSearchLiterals.prototype.filterTitle;
    /**
     * Texto do *disclaimer* que será exibido em conjunto com o valor preenchido no campo de busca rápida.
     * @type {?|undefined}
     */
    PoPageDynamicSearchLiterals.prototype.quickSearchLabel;
    /**
     * Mensagem que aparecerá enquanto o campo de busca rápida não estiver preenchido.
     * @type {?|undefined}
     */
    PoPageDynamicSearchLiterals.prototype.searchPlaceholder;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicSearchComponent
 *
 * \@description
 *
 * Interface para a customização de uma página dinâmica.
 * @record
 */
function PoPageDynamicSearchOptions() { }
if (false) {
    /**
     * Lista dos campos usados na busca avançada. Caso não seja passado a busca avançada não será exibida.
     *
     * Caso precise alterar um filtro que já exista deve ser passado o atributo `property` com o mesmo conteúdo do original.
     * @type {?|undefined}
     */
    PoPageDynamicSearchOptions.prototype.filters;
    /**
     * Lista de ações que o usuário poderá executar na página através de botões.
     *
     * Caso precise alterar uma ação que já exista deve ser passado o atributo `label` com o mesmo conteúdo do original.
     * @type {?|undefined}
     */
    PoPageDynamicSearchOptions.prototype.actions;
    /**
     * Objeto com propriedades do breadcrumb.
     *
     * Caso esse atributo seja utilizado ele sempre irá substituir o original.
     * @type {?|undefined}
     */
    PoPageDynamicSearchOptions.prototype.breadcrumb;
    /**
     * Título da página.
     *
     * Caso esse atributo seja utilizado ele sempre irá substituir o original.
     * @type {?|undefined}
     */
    PoPageDynamicSearchOptions.prototype.title;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicTableComponent
 *
 * \@description
 *
 * Interface para as ações do componente po-page-dynamic-table.
 * @record
 */
function PoPageDynamicTableActions() { }
if (false) {
    /**
     * \@description
     *
     * Rota para exibição do recurso em detalhe, caso seja preenchida irá habilitar a ação de visualização na tabela.
     *
     * > A rota deve conter um parâmetro chamando id.
     *
     * ```
     * actions = {
     *   detail: 'detail/:id'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicTableActions.prototype.detail;
    /**
     * \@description
     *
     * Rota para duplicação do recurso, caso seja preenchida irá habilitar a ação de duplicação na tabela.
     *
     * > Os valores a serem duplicados serão enviados via query string.
     *
     * ```
     * actions = {
     *   duplicate: 'duplicate'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicTableActions.prototype.duplicate;
    /**
     * \@description
     *
     * Rota para edição do recurso, caso seja preenchida irá habilitar a ação de edição na tabela.
     *
     * > A rota deve conter um parâmetro chamando id.
     *
     * ```
     * actions = {
     *   edit: 'edit/:id'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicTableActions.prototype.edit;
    /**
     * \@description
     *
     * Rota criar um novo recurso, caso seja preenchida sera exibido uma ação no topo da página.
     *
     * ```
     * actions = {
     *   new: 'new'
     * };
     * ```
     * @type {?|undefined}
     */
    PoPageDynamicTableActions.prototype.new;
    /**
     * Habilita a ação de exclusão na tabela.
     * @type {?|undefined}
     */
    PoPageDynamicTableActions.prototype.remove;
    /**
     * Habilita a ação de exclusão em lote na página.
     * @type {?|undefined}
     */
    PoPageDynamicTableActions.prototype.removeAll;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicTableComponent
 *
 * \@description
 *
 * Interface dos fields usados para compor o template `po-page-dynamic-table`.
 * @record
 */
function PoPageDynamicTableField() { }
if (false) {
    /**
     * Indica se o campo será duplicado caso seja executada a ação de duplicação.
     * @type {?|undefined}
     */
    PoPageDynamicTableField.prototype.duplicate;
    /**
     * Indica se o campo será usado para busca avançada.
     * @type {?|undefined}
     */
    PoPageDynamicTableField.prototype.filter;
    /**
     * Tamanho da coluna em pixels ou porcetagem.
     * @type {?|undefined}
     */
    PoPageDynamicTableField.prototype.width;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageDynamicTableComponent
 *
 * \@description
 *
 * Interface para as propriedades de uma página dinâmica.
 * @record
 */
function PoPageDynamicTableOptions() { }
if (false) {
    /**
     * Lista dos campos usados na tabela e busca avançada.
     *
     * Caso precise alterar um field que já exista deve ser passado o atributo `property` com o mesmo conteúdo do original.
     * @type {?|undefined}
     */
    PoPageDynamicTableOptions.prototype.fields;
    /**
     * Ações que o usuário poderá executar na página através de botões.
     * @type {?|undefined}
     */
    PoPageDynamicTableOptions.prototype.actions;
    /**
     * Objeto com propriedades do breadcrumb.
     *
     * Caso esse atributo seja utilizado ele sempre irá substituir o original.
     * @type {?|undefined}
     */
    PoPageDynamicTableOptions.prototype.breadcrumb;
    /**
     * Título da página.
     *
     * Caso esse atributo seja utilizado ele sempre irá substituir o original.
     * @type {?|undefined}
     */
    PoPageDynamicTableOptions.prototype.title;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@docsExtends PoPageDynamicTableOptions
 *
 * \@usedBy PoPageDynamicTableComponent
 *
 * \@description
 *
 * <a id="po-page-dynamic-table-metadata"></a>
 *
 * @record
 */
function PoPageDynamicTableMetaData() { }
if (false) {
    /**
     *
     * Cria automaticamente as rotas de edição (novo/duplicate) e detalhes caso sejam definidas ações na propriedade `p-actions`
     *
     * As rotas criadas serão baseadas na propriedade `p-actions`.
     *
     * > Para o correto funcionamento não pode haver nenhuma rota coringa (`**`) especificada.
     *
     * \@default false
     * @type {?|undefined}
     */
    PoPageDynamicTableMetaData.prototype.autoRouter;
    /**
     *
     * Versão do metadata, o sistema irá buscar a versão nas próximas iteração.
     *
     * \@default false
     * @type {?|undefined}
     */
    PoPageDynamicTableMetaData.prototype.version;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageLoginComponent
 *
 * \@description
 *
 * Interface com a definição do objeto gerado pelo formulário do componente `po-page-login`.
 * @record
 */
function PoPageLogin() { }
if (false) {
    /**
     * Login preenchido pelo usuário.
     * @type {?}
     */
    PoPageLogin.prototype.login;
    /**
     * Senha preenchida pelo usuário, a mesma será convertida para [hash/md5] antes de ser enviada para a aplicação.
     * @type {?}
     */
    PoPageLogin.prototype.password;
    /**
     * Essa propriedade informa se o usuário quer que seus dados sejam lembrados em um acesso futuro.
     * @type {?}
     */
    PoPageLogin.prototype.rememberUser;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageLoginComponent
 *
 * \@description
 *
 * Interface com a definição do Custom Field, podendo ser utilizado para informar um campo customizado no componente `po-page-login`.
 * @record
 */
function PoPageLoginCustomField() { }
if (false) {
    /**
     * Nome da propriedade que será utilizado no campo customizado.
     * @type {?}
     */
    PoPageLoginCustomField.prototype.property;
    /**
     * \@optional
     *
     * \@description
     *
     * Valor do campo customizado.
     * @type {?|undefined}
     */
    PoPageLoginCustomField.prototype.value;
    /**
     * \@optional
     *
     * \@description
     *
     * Mensagem que será exibida enquanto o campo customizado não estiver preenchido.
     * @type {?|undefined}
     */
    PoPageLoginCustomField.prototype.placeholder;
    /**
     * \@optional
     *
     * \@description
     *
     * Expressão regular para validar o campo customizado, caso a expressão não seja atendida a literal informada na
     * propriedade `errorPattern` será exibida.
     * @type {?|undefined}
     */
    PoPageLoginCustomField.prototype.pattern;
    /**
     * \@optional
     *
     * \@description
     *
     * Mensagem que será exibida quando a expressão regular informada na propriedade `pattern` não for válida.
     * @type {?|undefined}
     */
    PoPageLoginCustomField.prototype.errorPattern;
    /**
     * \@optional
     *
     * \@description
     *
     * Lista de opções de um `po-select`.
     * @type {?|undefined}
     */
    PoPageLoginCustomField.prototype.options;
    /**
     * \@optional
     *
     * \@description
     *
     * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da
     * lista de itens do componente `po-combo`.
     * @type {?|undefined}
     */
    PoPageLoginCustomField.prototype.url;
    /**
     * \@optional
     *
     * \@description
     *
     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na
     * lista do componente `po-combo`, esta propriedade será responsável pelo valor de cada item da lista.
     *
     * @type {?|undefined}
     */
    PoPageLoginCustomField.prototype.fieldValue;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageLoginComponent
 *
 * \@description
 *
 * Interface para definição das literais usadas no `po-page-login`.
 * @record
 */
function PoPageLoginLiterals() { }
if (false) {
    /**
     * Texto que informa a quantidade de tentativas restantes no popover de aviso de bloqueio.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.attempts;
    /**
     * Texto exibido no popover de aviso de bloqueio, que orienta o usuário, caso ele tenha esquecido a senha, a criar uma nova senha.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.createANewPasswordNow;
    /**
     * Mensagem de erro apresentada quando o campo customizado está inválido
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.customFieldErrorPattern;
    /**
     * Placeholder para o campo customizado.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.customFieldPlaceholder;
    /**
     * Texto que questiona o esquecimento da senha no popover de aviso de bloqueio.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.forgotYourPassword;
    /**
     * Título exibido no topo da página.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.title;
    /**
     * Texto do link de 'esqueci minha senha' exibido no popover de aviso de bloqueio.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.iForgotMyPassword;
    /**
     * Texto de aviso de tentativas exibido no popover de aviso de bloqueio.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.ifYouTryHarder;
    /**
     * Mensagem de erro apresentada quando o campo de login está inválido.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.loginErrorPattern;
    /**
     * Texto exibido como dica para o campo de login.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.loginHint;
    /**
     * Texto exibido como label do campo de login.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.loginLabel;
    /**
     * Placeholder do campo de login.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.loginPlaceholder;
    /**
     * Mensagem de erro apresentada quando o campo de password está inválido.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.passwordErrorPattern;
    /**
     * Texto exibido como label do campo de password.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.passwordLabel;
    /**
     * Placeholder do campo de password.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.passwordPlaceholder;
    /**
     * Texto exibido na função "Lembrar usuário".
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.rememberUser;
    /**
     * Texto exibido como dica da função "Lembrar usuário"
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.rememberUserHint;
    /**
     * Texto exibido no botão de confirmação da página de login.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.submitLabel;
    /**
     * Texto exibido no botão de confirmação da página de login quando estiver em estado de carregamento.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.submittedLabel;
    /**
     * Texto de ajuda para recuperação dos dados de acesso.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.forgotPassword;
    /**
     * Texto de destaque sobreposto à imagem de destaque. Essa opção é utilizada em conjunto com o atributo `p-background`.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.highlightInfo;
    /**
     * Texto exibido no link de novo cadastro.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.registerUrl;
    /**
     * Título do popover para aviso de bloqueio.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.titlePopover;
    /**
     * Texto que informa ao usuário que o mesmo será bloqueado e por quanto tempo no popover de aviso de bloqueio.
     * @type {?|undefined}
     */
    PoPageLoginLiterals.prototype.yourUserWillBeBlocked;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@usedBy PoPageLoginComponent
 *
 * \@description
 *
 * Interface para especificação do tipo de recuperação de senha no `po-modal-password-recovery`.
 * @record
 */
function PoPageLoginRecovery() { }
if (false) {
    /**
     * Definição do e-mail que é exibido na mensagem para contato de suporte.
     * @type {?|undefined}
     */
    PoPageLoginRecovery.prototype.contactMail;
    /**
     * Definição da máscara do campo de telefone.
     * @type {?|undefined}
     */
    PoPageLoginRecovery.prototype.phoneMask;
    /**
     * \@optional
     *
     * \@description
     *
     * Enum para especificação do tipo de recuperação de senha [PoModalPasswordRecoveryType](/documentation/po-modal-password-recovery).
     *
     * > Caso não seja definido valor se assume o padrão `PoModalPasswordRecoveryType.Email`.
     * @type {?|undefined}
     */
    PoPageLoginRecovery.prototype.type;
    /**
     * Endpoint usado pelo template **PoModalPasswordRecovery** para requisição do recurso.
     *
     * > Saiba mais em [PoModalPasswordRecovery](/documentation/po-modal-password-recovery).
     * @type {?}
     */
    PoPageLoginRecovery.prototype.url;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 * @template T
 */
function PoPageDynamicOptionsSchema() { }
if (false) {
    /** @type {?} */
    PoPageDynamicOptionsSchema.prototype.schema;
}
/**
 * @record
 * @template T
 */
function PoPageDynamicOptionsProp() { }
if (false) {
    /** @type {?} */
    PoPageDynamicOptionsProp.prototype.nameProp;
    /** @type {?|undefined} */
    PoPageDynamicOptionsProp.prototype.merge;
    /** @type {?|undefined} */
    PoPageDynamicOptionsProp.prototype.keyForMerge;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { PoComponentsModule, PoModalPasswordRecoveryComponent, PoModalPasswordRecoveryModalContent, PoModalPasswordRecoveryModule, PoModalPasswordRecoveryType, PoPageBackgroundComponent, PoPageBackgroundModule, PoPageBlockedUserComponent, PoPageBlockedUserModule, PoPageBlockedUserReason, PoPageChangePasswordComponent, PoPageChangePasswordModule, PoPageCustomizationModule, PoPageCustomizationService, PoPageDynamicDetailComponent, PoPageDynamicDetailModule, PoPageDynamicEditComponent, PoPageDynamicEditModule, PoPageDynamicModule, PoPageDynamicSearchComponent, PoPageDynamicSearchModule, PoPageDynamicService, PoPageDynamicTableComponent, PoPageDynamicTableModule, PoPageJobSchedulerComponent, PoPageJobSchedulerModule, PoPageLoginAuthenticationType, PoPageLoginComponent, PoPageLoginModule, PoServicesModule, PoTemplatesModule, poModalPasswordRecoveryLiterals, poPageBlockedUserButtonLiterals, poPageBlockedUserLiterals, poPageChangePasswordLiterals, poPageDynamicDetailLiteralsDefault, poPageDynamicEditLiteralsDefault, poPageDynamicTableLiteralsDefault, PoModalPasswordRecoveryBaseComponent as ɵa, PoModalPasswordRecoveryService as ɵb, PoModalPasswordRecoveryErrorMessageComponent as ɵc, PoPageBlockedUserBaseComponent as ɵd, PoPageBlockedUserContactsComponent as ɵe, PoPageBlockedUserReasonComponent as ɵf, PoPageChangePasswordBaseComponent as ɵg, PoPageChangePasswordService as ɵh, PoAdvancedFilterComponent as ɵi, PoAdvancedFilterBaseComponent as ɵj, PoPageDynamicSearchBaseComponent as ɵk, PoPageDynamicListBaseComponent as ɵl, PoPageJobSchedulerBaseComponent as ɵm, PoPageJobSchedulerService as ɵn, PoPageJobSchedulerLookupService as ɵo, PoPageJobSchedulerExecutionComponent as ɵp, PoPageJobSchedulerParametersComponent as ɵq, PoPageJobSchedulerSummaryComponent as ɵr, PoPageLoginBaseComponent as ɵs, PoPageLoginService as ɵt, PoPageLoginPopoverComponent as ɵu };
//# sourceMappingURL=portinari-portinari-templates.js.map
